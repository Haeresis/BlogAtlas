{ "_id" : { "$oid" : "530afe7a31a27642989254ec" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "530cc2f27188099a66e9bcec" } ], "content" : "<p>\n\tEn CSS, tout comme avec le librairie JavaScript jQuery, il faut <span class=\"eye-catching\">utiliser des sélecteurs</span> pour <span class=\"eye-catching\">cibler une balise</span> ou un ensemble de balise :\n</p>\n<ul>\n\t<li>on utilise le <span class=\"highlighting\">sélecteur #</span> si l'on désire accéder à l'élément par la valeur de son <span class=\"eye-catching\">attribut id</span> ou,</li>\n\t<li>on utilise le <span class=\"highlighting\">sélecteur .</span> si on désire accéder à l'élément par une des valeurs de son <span class=\"eye-catching\">attribut class</span>.</li>\n</ul>\n<p>\n\tEn combinant les deux sélecteurs précédent on peut sélectionner une balise par son <span class=\"eye-catching\">attribut id</span> <span class=\"highlighting\">et</span> son <span class=\"eye-catching\">attribut class</span>.\n</p>\n\n<p>\n\tOn peut donc cibler la balise HTML suivante\n</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;div id=\"main\" class=\"example\"&gt;&lt;/div&gt;\n</pre>\n\n<p>\n\tavec le <span class=\"eye-catching\">sélecteur CSS</span> suivant\n</p>\n\n<pre class=\"prettyprint linenums lang-css\">\ndiv#main.example { /* ... */ }\n</pre>\n\n<h2>\n\tComment sélectionner l'id d'une balise si celui-ci contient un point ?\n</h2>\n\n<p>\n\tIl n'est a première vue pas possible de sélectionner une balise par la valeur de son <span class=\"eye-catching\">attribut id</span> si celui-ci contient un point.\n</p>\n\n> Standard !\n\naa\n\n> _`Ne faites pas :`_ On ne peut pas cibler la balise HTML.\n\naa\n\n> **`Faites :`** On ne peut pas cibler la balise HTML.\n\naa\n\n> **_Menu :_** Liste des liens.\n\n<div class=\"worst-practice\">\n\t<div class=\"title\">Cibler une balise HTML par son id s'il contient un point est impossible</div>\n\t<div class=\"content\">\n\t\t<p>\n\t\t\tOn ne peut pas cibler la balise HTML suivante\n\t\t</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;div id=\"main\" class=\"example\"&gt;...&lt;/div&gt;\n</pre>\n\n\t\t<p>\n\t\t\tavec le sélecteur CSS suivant\n\t\t</p>\n\n\n<pre class=\"prettyprint linenums lang-css\">\ndiv#main.example { /* ... */ }\n</pre>\n\n\t\t<p>\n\t\t\tparce que la partie située après le point, à savoir <span class=\"eye-catching\">example</span>, est interprétée non pas comme la suite du nom de l'id, mais comme une valeur d'attribut class.\n\t\t</p>\n\n\t</div>\n</div>\n\n<h2>\n\tLa solution pour les id contenant des points sont le \\ et le \\\\\n</h2>\n\n<p>\n\tLa solution pour cibler un id ou une classe contenant le caractère <span class=\"highlighting\">.</span> est simple, il suffit de l'<span class=\"highlighting\">échapper avec le caractère \\</span> en CSS et <span class=\"highlighting\">les caractères \\\\</span> avec jQuery.\n</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Cibler une balise HTML par son id s'il contient un point est possible avec le BackSlash</div>\n\t<div class=\"content\">\n\t\t<p>\n\t\t\tOn peut cibler la balise HTML suivante\n\t\t</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;div id=\"main\" class=\"example\"&gt;...&lt;/div&gt;\n</pre>\n\n\t\t<p>\n\t\t\tavec le sélecteur CSS suivant\n\t\t</p>\n\n\t\t<p>\n\t\t\tou le sélecteur jQuery suivant \n\t\t</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n$(\"div#main\\\\.example\");\n</pre>\n\n\t</div>\n</div>\n\n<p>\n\tNotez bien qu'en CSS on utilise un BackSlash <span class=\"eye-catching\">\\</span> alors qu'avec jQuery il faut également échapper le caractère échappement d'où deux BackSlash <span class=\"highlighting\">\\\\</span>.\n</p>", "dates" : { "published" : { "$date" : 0 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Comment <span>cibler</span> un <span>id</span> qui contient un point", "urn" : "comment-cibler-un-id-qui-contient-un-point" }
{ "_id" : { "$oid" : "530f4a3e6f56ae3b67f67204" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "<p>Beaucoup de design demande que les bordures des cadres de contenu soient des images pour avoir des bords aux motifs complexes ou faire des effets d'ombre. Bien qu'il existe des propriétés CSS3 qui gèrent cela à présent, la compatibilité sur tous les navigateurs ne sera possible que si ceci est réalisé avec du CSS standard et du HTML.</p>\n\n<h2>Avec un tableau ou la mauvaise façon de faire</h2>\n\n<p>L'objet HTML presque exclusivement utilisé pour réaliser cela est la balise &lt;table&gt; et ses enfants &lg;tr&gt; et &lt;td&gt;. C'est l'un des rares objets permettant dans sa configuration brute de gérer dynamiquement un cadre qui s'adapte au contenu qu'il contient sans CSS.</p>\n\n<p>Cependant, l'usage premier d'une balise &lt;table&gt; est d'afficher des données sous forme de tableau <span class=\"highlighting\">et ne doit</span> servir qu'à ça.</p>\n\n<p class=\"warning\">Donc se servir de la balise &lt;table&gt; pour faire du positionnement de contenu <span class=\"eye-catching\">c'est mal</span> et se servir de la balise &lt;table&gt; pour faire des cadres en image <span class=\"eye-catching\">c'est mal</span>.</p>\n\n<p>Un exemple de ce qui certes fonctionne mais qui n'ai pas à faire ci-dessous :</p>\n\n<div class=\"worst-practice\">\n\t<div class=\"title\">On ne doit jamais utiliser la balise &lt;table&gt; pour autre chose que du contenu de type donnée.</div>\n\t<div class=\"content\">\n\t\t<p>\n\t\t\tAvec ce type de structure HTML\n\t\t</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;table class=\"global\"&gt;\n\t&lt;thead&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td class=\"top-left\"&gt;&lt;/td&gt;\n\t\t\t&lt;td class=\"top\"&gt;&lt;/td&gt;\n\t\t\t&lt;td class=\"top-right\"&gt;&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/thead&gt;\n\t&lt;tbody&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td class=\"left\"&gt;&lt;/td&gt;\n\t\t\t&lt;td class=\"content\"&gt;{Contenu réel}&lt;/td&gt;\n\t\t\t&lt;td class=\"right\"&gt;&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/tbody&gt;\n\t&lt;tfoot&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td class=\"bottom-left\"&gt;&lt;/td&gt;\n\t\t\t&lt;td class=\"bottom\"&gt;&lt;/td&gt;\n\t\t\t&lt;td class=\"bottom-right\"&gt;&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/tfoot&gt;\n&lt;/table&gt;\n</pre>\n\n\t\t<p>\n\t\t\tça marche effectivement en collant :\n\t\t</p>\n\n\t\t<ul>\n\t\t\t<li>des images de type coin en <span class=\"eye-catching\">background-image</span> des classes <span class=\"eye-catching\">top-left</span>, <span class=\"eye-catching\">top-right</span>, <span class=\"eye-catching\">bottom-left</span>, <span class=\"eye-catching\">bottom-right</span>,</li>\n\t\t\t<li>des images qui se répètent en <span class=\"eye-catching\">repeat-x</span> des classes <span class=\"eye-catching\">top</span> et <span class=\"eye-catching\">bottom</span> et</li>\n\t\t\t<li>des images qui se répètent en <span class=\"eye-catching\">repeat-y</span> des classes <span class=\"eye-catching\">left</span> et <span class=\"eye-catching\">right</span>.</li>\n\t\t</ul>\n\t</div>\n</div>\n\n<h2>Avec une Div ou la bonne pratique</h2>\n\n<p class=\"eye-catching\">Mais alors comment réaliser des bordures en images autour d'un contenu ?</p>\n\n<p>Par n'importe quel autre moyen possible et imaginable ! Les seuls contraintes seront la compatibilité inter-navigateur.</p>\n<p>Sachez qu'il est tout à fait possible de faire remplir ce rôle par des &lt;div&gt; de façon aussi dynamique que le tableau &lt;table&gt;. Les &lt;div&gt; divisent l'espace d'affichage et permettent au d'habiller le tout.</p>\n<p>Et comme je suis de bonne humeur, je vais livrer ici ma technique qui est compatible tout navigateur ! Quelle chance ;)</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Une bonne manière de créer des cadres dynamiques en image et sans tableau</div>\n\t<div class=\"content\">\n\n\t\t<p>En utilisant cette structure HTML</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;div class=\"global-width\"&gt;\n\t&lt;div class=\"top-right\"&gt;\n\t\t&lt;div class=\"bottom-right\"&gt;\n\t\t\t&lt;div class=\"bottom-left\"&gt;\n\t\t\t\t&lt;div class=\"top-left\"&gt;\n\t\t\t\t\t&lt;div class=\"top\"&gt;&lt;/div&gt;\n\t\t\t\t\t&lt;div class=\"left\"&gt;\n\t\t\t\t\t\t&lt;div class=\"right\"&gt;\n\t\t\t\t\t\t\t&lt;div class=\"content-height\"&gt;\n\t\t\t\t\t\t\t\t{Contenu réel}\n\t\t\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div class=\"bottom\"&gt;&lt;/div&gt;\n\t\t\t\t&lt;/div&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n\t\t<p>il suffit d'associer :</p>\n\n\t\t<ul>\n\t\t\t<li>des images de type coin en background-image des classes <span class=\"eye-catching\">top-left</span>, <span class=\"eye-catching\">top-right</span>, <span class=\"eye-catching\">bottom-left</span>, <span class=\"eye-catching\">bottom-right</span>,</li>\n\t\t\t<li>des images qui se répètent en <span class=\"highlighting\">repeat-x</span> des classes <span class=\"eye-catching\">top</span> et <span class=\"eye-catching\">bottom</span> et</li>\n\t\t\t<li>des images qui se répètent en <span class=\"highlighting\">repeat-y</span> des classes <span class=\"eye-catching\">left</span> et <span class=\"eye-catching\">right</span>.</li>\n\t\t</ul>\n\n\t\t<p>La largeur du tableau ce paramètre avec la classe <span class=\"eye-catching\">global-width</span> et sa hauteur avec la classe <span class=\"eye-catching\">content-height</span>.</p>\n\n\t\t<p class=\"highlighting\"><span class=\"eye-catching\">Attention :</span> La largeur se calcule en incluant la largeur des bords <span class=\"eye-catching\">left</span> et <span class=\"eye-catching\">right</span> alors que la hauteur se calcule en excluant la hauteur des bords <span class=\"eye-catching\">top</span> et <span class=\"eye-catching\">bottom</span>.</p>\n\n\t\t<p>Voici un exemple de CSS associé pour notre tableau :</p>\n\n<pre class=\"prettyprint linenums lang-css\">\ndiv.global-width {\n\twidth: auto;\n}\ndiv.content-height {\n\theight: auto;\n}\ndiv.top {\n\tmargin-left: 23px;\n\tmargin-right: 23px;\n\theight: 23px;\n\tbackground-image: url('top.png');\n\tbackground-repeat: repeat-x;\n}\ndiv.top-right {\n\tbackground-image: url('top-right.png');\n\tbackground-position: top right;\n\tbackground-repeat: no-repeat;\n}\ndiv.right {\n\tpadding-right: 23px;\n\tbackground-image: url('right.png');\n\tbackground-position: right;\n\tbackground-repeat: repeat-y;\n}\ndiv.bottom-right {\n\tbackground-image: url('bottom-right.png');\n\tbackground-position: bottom right;\n\tbackground-repeat: no-repeat;\n}\ndiv.bottom {\n\tmargin-left: 23px;\n\tmargin-right: 23px;\n\theight: 23px;\n\tbackground-image: url('bottom.png');\n\tbackground-repeat: repeat-x;\n}\ndiv.bottom-left {\n\tbackground-image: url('bottom-left.png');\n\tbackground-position: bottom left;\n\tbackground-repeat: no-repeat;\n}\ndiv.left {\n\tpadding-left: 23px;\n\tbackground-image: url('left.png');\n\tbackground-repeat: repeat-y;\n}\ndiv.top-left {\n\tbackground-image: url('top-left.png');\n\tbackground-repeat: no-repeat;\n}\n</pre>\n\n\t</div>\n</div>\n\n<h2>Autres modèles avec des Div</h2>\n\n<p>Si vous avez d'autres modèles n'hésitez pas à les laisser dans les commentaires, je les ajouterai ici.</p>\n\n<h3>Structure en tableau</h3>\n\n<p>J'avais essayé cette alternative :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n<div class=\"global-width\">\n\t&lt;div&gt;\n\t\t&lt;div class=\"top-left\"&gt;&lt;/div&gt;\n\t\t&lt;div class=\"top-right\"&gt;&lt;/div&gt;\n\t\t&lt;div class=\"top\"&gt;&lt;/div&gt;\n\t&lt;/div&gt;\n\t&lt;div class=\"left\"&gt;\n\t\t&lt;div class=\"right\"&gt;\n\t\t\t&lt;div class=\"content-height\"&gt;\n\t\t\t\t{Contenu réel}\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n\t&lt;div&gt;\n\t\t&lt;div class=\"bottom-left\"&gt;&lt;/div&gt;\n\t\t&lt;div class=\"bottom-right\"&gt;&lt;/div&gt;\n\t\t&lt;div class=\"bottom\"&gt;&lt;/div&gt;\n\t&lt;/div&gt;\n</div>\n</pre>\n\n<p>en appliquant :</p>\n\n<ul>\n\t<li> à <span class=\"eye-catching\">top-left</span>, <span class=\"eye-catching\">bottom-left</span> un <span class=\"highlighting\">float: left;</span>,</li>\n\t<li> à <span class=\"eye-catching\">top-right</span>, <span class=\"eye-catching\">bottom-right</span> un <span class=\"highlighting\">float: right;</span> et</li>\n\t<li> à <span class=\"eye-catching\">top</span> et <span class=\"eye-catching\">bottom</span> un <span class=\"highlighting\">margin-left: (largeur bord gauche);</span> et <span class=\"highlighting\">margin-right: (largeur bord droit);</span>.</li>\n</ul>\n\n<p>Cependant sous IE7 et IE8 il y a un décalage de pixel impossible à enlever justement au niveau des flottants...</p>", "dates" : { "published" : { "$date" : 1358067720000 }, "updated" : [] }, "title" : "Faire des <span>bordures</span> en image sans la balise <span>Table</span>", "urn" : "faire-des-bordures-en-image-sans-la-balise-table" }
{ "_id" : { "$oid" : "530f5e87620731fe86cb71a1" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bf" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48b9" } ], "content" : "<img style=\"float: left; margin: 0 8px 8px 0\" src=\"http://blog.haeresis.fr/upload/image/taquin.png\" alt=\"Démonstration du jeu du taquin\" width=\"120\" height=\"120\" />\n\nVous connaissez probablement ce jeu ou l'on mélange une image composée de 4 fois 4 carrés dans le seul but de la remettre en ordre une fois celle-ci mélangée. Il peut s'agir de la reconstituer de mémoire ou à partir d'un modèle. Ce jeu c'est le Taquin et je vous le propose sous la forme d'un plugin jQuery pour votre site.\n\n\n\n\n\n## Démonstration du plugin ##\n\nEn jouant avec les paramètres ci-dessous vous pourrez construire le Taquin qui vous intéresse. Vous n'aurez plus qu'à l'inclure dans votre site. Bien entendu, pour les développeurs, le détail du plugin est fait plus loin dans cet article.\n\n\n\n\n### Paramètres ###\n\n<div>\n    <form>\n            <fieldset>\n                <legend>Image Source</legend>\n                <div>\n                    <label>Url :</label>\n                    <input id=\"taquin-url\" type=\"text\" value=\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\" />\n                    <span class=\"detail\">Adresse relative ou absolue autorisée.</span>\n                </div>\n                <div>\n                    <label>Largeur :</label>\n                    <input id=\"taquin-width\" type=\"text\" value=\"0\" />px\n                    <span class=\"detail\">Laissez 0 pour la dimention originale.</span>\n                </div>\n                <div>\n                    <label>Largeur :</label>\n                    <input id=\"taquin-height\" type=\"text\" value=\"0\" />px\n                    <span class=\"detail\">Laissez 0 pour la dimention originale.</span>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Propriétés</legend>\n                <div>\n                    <label>Nombre de division :</label>\n                    <input id=\"taquin-division\" type=\"text\" value=\"4\" />\n                    <span class=\"detail\">Le mimnimum possible est 2.</span>\n                </div>\n                <div>\n                    <label>Partie cachée :</label>\n                    <select id=\"taquin-hide-part\">\n                        <option value=\"br\">Bas droite</option>\n                        <option value=\"bl\">Bas gauche</option>\n                        <option value=\"tr\">Haut droite</option>\n                        <option value=\"tl\">Haut gauche</option>\n                    </select>\n                    <span class=\"detail\">Valeur possible : tl, tr, bl, br.</span>\n                </div>\n                <div>\n                    <label>Profondeur de tri :</label>\n                    <input id=\"taquin-mixing\" type=\"text\" value=\"200\" />\n                    <span class=\"detail\">Nombre de déplacement pour mélange.</span>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Validation</legend>\n                <input id=\"validation\" type=\"button\" value=\"Générer votre Taquin\" />\n            </fieldset>\n        </form>\n</div>\n\n<h3>Aperçu</h3>\n<p>Cliquer sur l'image ci-dessous pour voir le résultat après mélange.</p>\n<div class=\"taquin\"></div>\n\n<h3>Installation</h3>\n<p>Si vous n'êtes pas un expert en JavaScript, vous pouvez paramétrer le jeu ci-dessus (dans \"Aperçu\") avec les éléments dans \"Paramètres\" et inclure les codes ci-dessous dans votre site.</p>\n<ul>\n    <li>Il faut auparavant avoir inclus le script jQuery dans sa page.</li>\n    <li>Le chemin du plugin est celui où vous avez placé le script sur votre site.</li>\n</ul>\n<div class=\"overflow-y\">\n    <form>\n        <fieldset>\n            <legend>Script à inclure en pied de Body</legend>\n            <div>\n                <textarea class=\"taquin-result\"></textarea>\n            </div>\n            <span class=\"detail\">En supposant que votre fichier soit accessible à l'adresse ./jquery/plugin/</span>\n        </fieldset>\n        <fieldset>\n            <legend>HTML à inclure n'importe ou dans le Body</legend>\n            <div>\n                <textarea>&lt;div id=\"taquin\"&gt;&lt;/div&gt;</textarea>\n            </div>\n        </fieldset>\n    </form>\n</div>\n\n<h2>Téléchargement</h2>\n\n<div class=\"best-practice\">\n    <div class=\"title\">Code source du fichier Plugin JQuery Game Taquin</div>\n    <div class=\"content\">\n        <p>Vous trouverez ce code à <a href=\"http://www.haeresis.fr/framework/jquery/plugin/jquery.game-taquin.js\">http://www.haeresis.fr/framework/jquery/plugin/jquery.game-taquin.js</a></p>\n        <p>sinon</p>\n        <p>Copiez-collez le code ci-dessus dans un fichier appelé par exemple <b>jquery.game-taquin.js</b> :</p>\n        <pre class=\"prettyprint linenums lang-js\">\n////////////////////////////////////////////\n// Jeu du Taquin en jQuery sur vos sites. //\n//////////////////////////////////////////////\n// Auteur : Bruno Lesieur - www.haeresis.fr //\n//////////////////////////////////////////////\n(function ($) {\n    \"use strict\";\n\n    // ==Description==\n    // Pour chaque élément 'fn' :\n    // Créé un nouvel élément juste après l'image cible composée de &lt;div&gt; en absolute. \n    // Un clique permet de mélanger le jeu.\n    // La résolution du tableau remet les éléments aux états initiaux.\n\n    // ==image==\n    // Ceci réprésente l'adresse de l'image qui sera fractionnée pour être jouée.\n\n    // ==params==\n    // width : Indique la taille que fait l'image en largeur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.\n    // height : Indique la taille que fait l'image en hauteur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.\n    // division : Indique le nombre de carré en largeur/hauteur qui compose le taquin.\n    // hidePart : Indique quelle partie du carré est masquée pour faire office de trou pour les déplacements. Les valeurs possibles sont Haut Gauche \"tl\", Haut droite \"tr\", Bas gauche \"bl\", Bas droite \"br\" (par défaut).\n    // mixing : Indique le nombre de déplacement fait aléatoirement pour simuler un mélange à la main du taquin.\n    // success : Si écrasé par une fonction, exécute cette fonction en cas de complétion du taquin. Sinon, renvoi sous chaine de caractère le message passé dans un \"alert()\".\n\n    $.fn.gameTaquin = function (image, params, success) {\n\n        // Paramètres initiaux écrasés s'ils sont passés en paramètres d'entrées.\n        params = $.extend({\n            width: 0,\n            height: 0,\n            division: 4,\n            hidePart: \"br\",\n            mixing: 200,\n            success: \"Complete\"\n        }, params);\n\n        // Si la division est inférieur à 2, la valeur est 2.\n        if (params.division &lt; 2) { params.division = 2; }\n\n        // Fonction éxécutée par défaut en cas de succès.\n        if (!$.isFunction(params.success)) {\n            var temp = params.success;\n            params.success = function () {\n                alert(temp);\n            };\n        }\n\n        /***********************************************/\n        /** Initialisation des variables et fonctions **/\n        /***********************************************/\n\n        var clickFunction,\n            gameStart,\n            gameState,\n            squareWidth = 0,\n            squareHeight = 0;\n\n        // Créer les états de jeu.\n        function initialiseGameVar(gameDivision) {\n            var game = [],\n                gameRow,\n                gameDiv,\n                xi = 0,\n                yi = 0,\n                currentDisplay;\n\n            for (xi = 0; xi &lt; gameDivision; xi += 1) {\n                gameRow = [];\n                for (yi = 0; yi &lt; gameDivision; yi += 1) {\n                    gameDiv = [];\n\n                    currentDisplay = true;\n                    if ((xi === 0) && (yi === 0) && (params.hidePart === \"tl\")) { currentDisplay = false; }\n                    if ((xi === (gameDivision - 1)) && (yi === 0) && (params.hidePart === \"tr\")) { currentDisplay = false; }\n                    if ((xi === 0) && (yi === (gameDivision - 1)) && (params.hidePart === \"bl\")) { currentDisplay = false; }\n                    if ((xi === (gameDivision - 1)) && (yi === (gameDivision - 1)) && (params.hidePart === \"br\")) { currentDisplay = false; }\n\n                    gameDiv[0] = currentDisplay;\n                    gameDiv[1] = \"taquin-\" + xi + \"-\" + yi;\n                    gameRow[yi] = gameDiv;\n                }\n                game[xi] = gameRow;\n            }\n\n            return game;\n        }\n\n        // Repéré la case dans le jeu.\n        function getId(taquin) {\n            var classList = taquin.attr(\"class\").split(/\\s+/),\n                result = \"\";\n\n            $.each(classList, function (index, item) {\n                if (index === 0) {\n                    result = item;\n                }\n            });\n\n            return result;\n        }\n\n        function getCoord(id) {\n            var coord = [],\n                xi = 0,\n                yi = 0;\n\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    if (gameState[xi][yi][1] === id) {\n                        coord[0] = xi;\n                        coord[1] = yi;\n                    }\n                }\n            }\n\n            return coord;\n        }\n\n        // Repéré l'élément vide.\n        function getEmpty() {\n            var empty = [],\n                xi = 0,\n                yi = 0;\n\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    if (gameState[xi][yi][0] === false) {\n                        empty[0] = xi;\n                        empty[1] = yi;\n                        empty[2] = gameState[xi][yi][1];\n                    }\n                }\n            }\n\n            return empty;\n        }\n\n        // vérifier si un élément peut être bougé.\n        function getIsMovable(x, y) {\n            var isMovable = false;\n\n            try {\n                if (gameState[x][y - 1][0] === false) { isMovable = true; }\n            } catch (err1) {}\n            try {\n                if (gameState[x + 1][y][0] === false) { isMovable = true; }\n            } catch (err2) {}\n            try {\n                if (gameState[x][y + 1][0] === false) { isMovable = true; }\n            } catch (err3) {}\n            try {\n                if (gameState[x - 1][y][0] === false) { isMovable = true; }\n            } catch (err4) {}\n\n            return isMovable;\n        }\n\n        // Mélange pièce.\n        function randomGame(mixing) {\n            var empty,\n                possibleMove,\n                temp,\n                i = 0,\n                j = 0,\n                xi = 0,\n                yi = 0,\n                xj = 0,\n                yj = 0,\n                rand = 0,\n                newPosTop = 0,\n                newPosLeft = 0;\n\n            for (j = 0; j &lt; mixing; j += 1) {\n                empty = getEmpty();\n                possibleMove = [];\n                i = 0;\n\n                // On cherche les voisins déplaçable.\n                try { if (gameState[empty[0]][empty[1] - 1][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0];\n                    possibleMove[i][1] = empty[1] - 1;\n                    i += 1;\n                } } catch (err1) {}\n                try { if (gameState[empty[0] + 1][empty[1]][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0] + 1;\n                    possibleMove[i][1] = empty[1];\n                    i += 1;\n                } } catch (err2) {}\n                try { if (gameState[empty[0]][empty[1] + 1][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0];\n                    possibleMove[i][1] = empty[1] + 1;\n                    i += 1;\n                } } catch (err3) {}\n                try { if (gameState[empty[0] - 1][empty[1]][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0] - 1;\n                    possibleMove[i][1] = empty[1];\n                    i += 1;\n                } } catch (err4) {}\n\n                // On choisit au hasard le voisin à interchanger.\n                rand = Math.floor(Math.random() * possibleMove.length);\n\n                // On l'interchange dans l'état de jeu.\n                temp = gameState[empty[0]][empty[1]];\n                gameState[empty[0]][empty[1]] = gameState[possibleMove[rand][0]][possibleMove[rand][1]];\n                gameState[possibleMove[rand][0]][possibleMove[rand][1]] = temp;\n            }\n\n            // On trouve les déplacements pour l'animation.\n            // Pour chaque élément positionné au départ.\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    // On cherche sa nouvelle position\n                    for (xj = 0; xj &lt; gameState.length; xj += 1) {\n                        for (yj = 0; yj &lt; gameState[0].length; yj += 1) {\n                            // On trouve la nouvelle position.\n                            if (gameStart[xi][yi][1] === gameState[xj][yj][1]) {\n                                // On récupère les coordonnées de la nouvelle position.\n                                if (gameStart[xi][yi][0] === true) {\n                                    newPosTop = parseInt((squareHeight * yj) - $(\".taquin-\" + xi + \"-\" + yi).position().top, 10) + \"px\";\n                                    newPosLeft = parseInt((squareWidth * xj) - $(\".taquin-\" + xi + \"-\" + yi).position().left, 10) + \"px\";\n\n                                    $(\".taquin-\" + xi + \"-\" + yi).animate({\n                                        top: \"+=\" + newPosTop,\n                                        left: \"+=\" + newPosLeft\n                                    });\n                                } else {\n                                    $(\".taquin-\" + xi + \"-\" + yi).css({\n                                        \"top\": (squareHeight * yj),\n                                        \"left\": (squareWidth * xj)\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Démarrer le jeu\n        function launcher(generate) {\n            // On enlève l'intialisation de jeu.\n            generate.find(\".taquin-part\").unbind(\"click\");\n\n            // On cherche l'élément vide.\n            var empty = getEmpty();\n\n            $(\".\" + empty[2]).animate({ opacity: \"0\" }, function () {\n                // On le cache.\n                $(this).hide();\n\n                // On mélange le jeu.\n                randomGame(params.mixing);\n\n                // Annules toutes les animations s'il y en a de pas finie.\n                generate.find(\".taquin-part\").clearQueue();\n\n                // Permettre le déplacement des pièces, jeu jouable !\n                generate.find(\".taquin-part\").bind(\"click\", function () {\n                    clickFunction(generate, $(this));\n                });\n            });\n        }\n\n        // Quand on clique sur une partie après le lancement du jeu.\n        clickFunction = function (generate, source) { // rempli ici mais défini plus haut car appelé dans la fonction d'au dessus.\n            var empty,\n                moveTop = 0,\n                moveLeft = 0,\n                tempTop = 0,\n                tempLeft = 0,\n                temp,\n\n            // Identifier l'élément.\n                id = getId(source),\n\n            // Trouver sa position dans le jeu.\n                coord = getCoord(id),\n\n            // Vérifier si il est déplaçable.\n                isMovable = getIsMovable(coord[0], coord[1]);\n\n            // Si il est déplaçable, interchanger les positions.\n            if (isMovable) {\n                // Trouver l'élément vide.\n                empty = getEmpty();\n\n                // On trouve les déplacements pour l'animation.\n                generate.find(\".\" + empty[2]).show();\n                moveTop = generate.find(\".\" + id).position().top - generate.find(\".\" + empty[2]).position().top;\n                moveLeft = generate.find(\".\" + id).position().left - generate.find(\".\" + empty[2]).position().left;\n                generate.find(\".\" + empty[2]).hide();\n\n                //On met les variable en temporaire pour l'interchangement.\n                tempTop = source.position().top;\n                tempLeft = source.position().left;\n\n                // On inverse les positions de l'éléments vide.\n                temp = gameState[coord[0]][coord[1]];\n                gameState[coord[0]][coord[1]] = gameState[empty[0]][empty[1]];\n                gameState[empty[0]][empty[1]] = temp;\n\n                // On anime le changement.\n                source.unbind(\"click\").animate({\n                    top: \"-=\" + moveTop,\n                    left: \"-=\" + moveLeft\n                }, function () {\n                    source.bind(\"click\", function () {\n                        clickFunction(generate, source);\n                    });\n\n                    // Si l'état initial après animation est le même que l'état actuel, on a fini le jeu.\n                    if (gameState.toString() === gameStart.toString()) {\n                        // On enlève les fonctions de déplacement.\n                        generate.find(\".taquin-part\").unbind(\"click\");\n\n                        // On cherche l'élément vide pour le ré-afficher.\n                        var empty = getEmpty();\n                        $(\".\" + empty[2]).show().animate({ opacity: \"1\" }, function () {\n                            // On replace le mécanisme de démarrage du jeu.\n                            generate.find(\".taquin-part\").bind(\"click\", function () {\n                                launcher(generate);\n                            });\n                            // On exécute la fonction de réussite.\n                            params.success();\n                        });\n                    }\n                });\n\n                generate.find(\".\" + empty[2]).css({\n                    \"top\": tempTop + \"px\",\n                    \"left\": tempLeft + \"px\"\n                });\n            }\n        };\n\n        // Fonction exécutée sur chaque élément sélectionné comme model pour devenir un taquin.\n        function taquin(generate, imageOriginalSize) {\n            var gameDivision = params.division,\n                imageWidth = 0,\n                imageHeight = 0,\n                xi = 0,\n                yi = 0,\n                backgroundSizeString;\n\n            // Récupère la largeur et hauteur des partis du taquin.\n            if (parseInt(params.width, 10) !== 0) { imageWidth = params.width; } else { imageWidth = imageOriginalSize[0]; }\n            if (parseInt(params.height, 10) !== 0) { imageHeight = params.height; } else { imageHeight = imageOriginalSize[1]; }\n            squareWidth = Math.round(imageWidth / gameDivision);\n            squareHeight = Math.round(imageHeight / gameDivision);\n\n            // Initialise l'état initial et actuelle du jeu.\n            gameStart = initialiseGameVar(gameDivision);\n            gameState = initialiseGameVar(gameDivision);\n\n            generate.css({\n                \"position\": \"relative\",\n                \"width\": imageWidth + \"px\",\n                \"height\": imageHeight + \"px\"\n            });\n\n            // Générer les partis du taquin.\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    backgroundSizeString = ((params.width != 0) ? params.width : imageOriginalSize[0]) + \"px \" + ((params.height != 0) ? params.height : imageOriginalSize[1]) + \"px\";\n                    $(\"&lt;div&gt;\", {\n                        css: {\n                            cursor: \"pointer\",\n                            backgroundImage: \"url('\" + image + \"')\",\n                            backgroundPosition : \"-\" + parseInt(squareWidth * xi, 10) + \"px -\" + parseInt(squareHeight * yi, 10) + \"px\",\n                            \"background-size\" : backgroundSizeString,\n                            position: \"absolute\",\n                            top: parseInt(squareHeight * yi, 10) + \"px\",\n                            left: parseInt(squareWidth * xi, 10) + \"px\",\n                            width: squareWidth + \"px\",\n                            height: squareHeight + \"px\"\n                        }\n                    }).appendTo(generate).addClass(gameStart[xi][yi][1]).addClass(\"taquin-part\");\n                }\n            }\n\n            // Permettre de démarrer le jeu.\n            generate.find(\".taquin-part\").bind(\"click\", function () {\n                launcher(generate);\n            });\n        }\n\n        // S'execute pour chaque élément 'fn' trouvé.\n        return this.each(function () {\n\n            // Information sur l'image.\n            var waitForImageSize,\n                forImage = new Image(),\n                element = $(this),\n                imageSize = [];\n\n            forImage.src = image;\n\n            // Quand on obtient une taille pour l'image, on execute le mécanisme.\n            waitForImageSize = setInterval(function () {\n                if (forImage.width !== 0) {\n                    imageSize[0] = forImage.width;\n                    imageSize[1] = forImage.height;\n\n                    // Génère l'élément qui contiendra les partis du taquin.\n                    var generate = $(\"&lt;div&gt;\").addClass(\"taquin-generate\");\n                    if (element.next().hasClass(\"taquin-generate\")) {\n                        element.next().remove();\n                    }\n                    element.after(generate);\n\n                    taquin(generate, imageSize);\n                    clearInterval(waitForImageSize);\n                }\n            }, 50);\n        });\n    };\n}(jQuery));\n        </pre>\n    </div>\n</div>\n\n<h2>Documentation</h2>\n\n<h3>Utilisation</h3>\n\n<p>La fonction de base s'utilise comme suit :</p>\n\n<ul>\n    <li>$(<span class=\"highlighting\">dom_element</span>).gameTaquin(<span class=\"highlighting\">image</span>);</li>\n</ul>\n\n<p>Exemple sur l'élément de DOM suivant <span class=\"highlighting\">&lt;div id=\"taquin\"&gt;&lt;/div&gt;</span>.</p>\n\n<pre class=\"prettyprint linenums lang-js\">\n$(\"#taquin\").gameTaquin(\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\");\n</pre>\n\n<h4>image</h4>\n\n<p>Ceci réprésente l'adresse de l'image qui sera fractionnée pour être jouée.</p>\n\n<h3>Paramètres</h3>\n\n<p>Les paramètres se donnent sous forme d'objet JSON après l'url de l'image :</p>\n\n<ul>\n    <li>$(DOM_ELEMENT).gameTaquin(IMAGE_URL, <span class=\"highlighting\">{ PARAMETERS... }</span>);</li>\n</ul>\n\n<p>Les paramètres sont cumulables comme dans cet exemple.</p>\n\n<pre class=\"prettyprint linenums lang-js\">\n$(\"#taquin\").gameTaquin(\n    \"http://blog.haeresis.fr/upload/image/image-taquin.jpg\",\n    {\n        division: 6,\n        hidePart: \"tl\",\n        success: \"Félicitation !\"\n    }\n);\n</pre>\n\n<h4>width</h4>\n<p>Indique la taille que fait l'image en largeur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.</p>\n\n<h4>height</h4>\n<p>Indique la taille que fait l'image en hauteur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.</p>\n\n<h4>division</h4> \n<p>Indique le nombre de carré en largeur/hauteur qui compose le taquin.</p>\n\n<h4>hidePart</h4> \n<p>Indique quelle partie du carré est masquée pour faire office de trou pour les déplacements. Les valeurs possibles sont Haut Gauche \"tl\", Haut droite \"tr\", Bas gauche \"bl\", Bas droite \"br\" (par défaut).</p>\n\n<h4>mixing</h4> \n<p>Indique le nombre de déplacement fait aléatoirement pour simuler un mélange à la main du taquin.</p>\n\n<h4>success</h4>\n<p>Si écrasé par une fonction, exécute cette fonction en cas de complétion du taquin. Sinon, renvoi sous chaine de caractère le message passé dans un \"alert()\".</p>", "dates" : { "published" : { "$date" : 1359709320000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "(function () {\n\tvar $scriptTaquin = $(\".script-taquin\"),\n\t\t$taquin = $(\".taquin\"),\n\t\t$taquinResult = $(\".taquin-result\"),\n\t\t$taquinUrl = $(\"#taquin-url\");\n\n\tif ($taquin.length > 0) {\n\t\tif ($scriptTaquin.length === 0) {\n\t\t\t$body.append('<script class=\"script-taquin\" type=\"text/javascript\" src=\"./javascript/jquery/jquery.game-taquin.js\">');\n\t\t}\n\n\t\t$taquin.gameTaquin(\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\");\n\n\t\t$taquinResult.val(\n\t\t\t('&lt;script type=\"text/javascript\" src=\"jquery/plugin/jquery.game-taquin.js\"&gt;&lt;/script&gt;\\r\\n' +\n\t\t\t'&lt;script type=\"text/javascript\"&gt;\\r\\n' +\n\t\t\t'\\t$(\"#taquin\").gameTaquin(\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\");\\r\\n' +\n\t\t\t\"&lt;/script&gt;\").replace(/&lt;/gi,\"<\").replace(/&gt;/gi,\">\")\n\t\t);\n\n\t\t$taquin.hide();\n\n\t\t/*$(\"#validation\").click(function () {\n\t\t\t$taquin.gameTaquin(\n\t\t\t\t$taquinUrl.attr(\"value\"), \n\t\t\t\t{ \n\t\t\t\t\twidth: $(\"#taquin-width\").attr(\"value\"), \n\t\t\t\t\theight: $(\"#taquin-height\").attr(\"value\"), \n\t\t\t\t\tdivision: $(\"#taquin-division\").attr(\"value\"), \n\t\t\t\t\thidePart: $(\"#taquin-hide-part option:selected\").attr(\"value\"), \n\t\t\t\t\tmixing: $(\"#taquin-mixing\").attr(\"value\")\n\t\t\t\t}\n\t\t\t);\n\t\t\t$taquinResult.val(\n\t\t\t\t('&lt;script type=\"text/javascript\" src=\"jquery/plugin/jquery.game-taquin.js\"&gt;&lt;/script&gt;\\r\\n' +\n\t\t\t\t'&lt;script type=\"text/javascript\"&gt;\\r\\n' +\n\t\t\t\t'\\t$(\"#taquin\").gameTaquin(' + '\\r\\n' +\n\t\t\t\t\t'\\t\\t\"' + $taquinUrl.attr(\"value\") + '\", ' + \"\\r\\n\" +\n\t\t\t\t\t\"\\t\\t{\\r\\n\" + \n\t\t\t\t\t\"\\t\\t\\t\" + \"width: \" + $(\"#taquin-width\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t\\t\" + \"height: \" + $(\"#taquin-height\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t\\t\" + \"division: \" + $(\"#taquin-division\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t\\t\" + 'hidePart: \"' + $(\"#taquin-hide-part option:selected\").attr(\"value\") + '\", \\r\\n' +\n\t\t\t\t\t\"\\t\\t\\t\" + \"mixing: \" + $(\"#taquin-mixing\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t}\\r\\n\" +\n\t\t\t\t\"\\t);\\r\\n\" +\n\t\t\t\t\"&lt;/script&gt;\").replace(/&lt;/gi,\"<\").replace(/&gt;/gi,\">\")\n\t\t\t);\n\t\t});*/\n\t}\n}())", "stylesheet" : ".taquin-generate {\n    margin-top: 16px;\n}", "title" : "<span>Jeu</span> du Taquin en <span>jQuery</span> sur vos sites !", "urn" : "jeu-du-taquin-en-jquery-pour-vos-sites" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a2" }, "cache" : { "comment" : { "number" : 3 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c1" }, { "$oid" : "5310456355dfd5f7698d48c2" }, { "$oid" : "5310456355dfd5f7698d48c0" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<img class=\"float-left\" src=\"./upload/image/ie10.png\" alt=\"Logo Internet Explorer 10\" width=\"80\" height=\"80\" />\n\n<p>Internet Explorer 10, la dernière version d'Internet Explorer à l'heure où j'écris ce billet, est le navigateur par défaut des systèmes d'exploitations Windows 8 et Windows Phone 8 (dans sa version mobile). Cependant, depuis le 26 février 2013, IE10 est également disponible sur Windows 7 ce qui m'amène à cet article puisque j'ai enfin décidé de l'installer. Jetons un œil à cette version et surtout à la possibilité formidable de tester les anciennes versions d'IE dans IE10.</p>\n\n<h2>Faut-il installer IE10 sous Windows 7 ?</h2>\n\n<p>J'ai mis quelques semaines avant d'installer cette nouvelle version (je suis sous Seven) tout simplement parce que je ne savais pas répondre aux questions suivantes :</p>\n<ul>\n<li>Windows 8 est obligatoire pour IE10 ?</li>\n<li>Est-ce que IE9 et IE10 peuvent être simultanément installé ?</li>\n<li>Y a-t-il un mode de compatibilité IE9 dans IE10 ?</li>\n</ul>\n\n<p>En effet dans mon environnement actuel je développe mes interfaces web en prenant soin de tester le rendu dans IE9, FF, Chrome, Opera et Safari ainsi que sur <a href=\"https://www.google.fr/search?q=Tester+IE7%2FIE8+avec+une+VM\" title=\"Tester IE7/IE8 avec une VM\">IE7/IE8 en passant par une machine virtuelle embarquant un Windows XP</a> n'ayant pas obtenu l'entière satisfaction de <a href=\"https://www.google.fr/search?q=IETester\" title=\"Où télécharger IETester\">IETester</a> notamment du point de vue du débogue JavaScript. Je freinais des quatre pieds à l'idée de devoir passer dans une VM pour tester mes rendus sous IE9 une fois IE10 installé.</p>\n\n<p class=\"highlighting\">Soufflez un bon coup, vous pouvez passer de IE9 à IE10 dès à présent, mettre de côté vos VM IE7/IE8 et laissez tomber IETester : Internet Explorer 10 vous permet de tester les anciennes versions d'IE ! Rien que ça. Voilà comment procéder.</p>\n\n<h3>IE10 sous Vista ou XP</h3>\n\n<p>Je fais l'impasse sur les systèmes non Windows, mais afin de pousser les utilisateurs à la migration Seven et Eight, Microsoft n'a pas prévu de version pour Vista et XP.\n\n<h2>Comment debugger les anciens IE avec Internet Explorer 10</h2>\n\n<h3>Où télécharger Internet Explorer 10</h3>\n\n<p>Tout d'abord, cela va de sois, il faut tourner sous Windows 7 ou Windows 8 et vous rendre à cette adresse : <a href=\"http://windows.microsoft.com/fr-fr/internet-explorer/downloads/ie-10/worldwide-languages\" title=\"Télécharger Internet Explorer 10\">http://windows.microsoft.com/fr-fr/internet-explorer/downloads/ie-10/worldwide-languages</a>. Choisissez ensuite votre version et votre langue.</p>\n<p>Après l'installation et le redémarrage de votre machine. Ouvrez IE et... et ça a vraiment marché ?</p>\n\n<h3>La touche F12 pardi, la touche F12 !</h3>\n\n<div class=\"center\">\n<img class=\"openable\" src=\"./upload/image/ie10-development-f12.png\" alt=\"Outils de développement F12\" width=\"500\" height=\"340\" style=\"width: 76%;height: auto;\" />\n</div>\n\n<p>A l'instar de ses autres cousins navigateurs et même de ses vieux frères l'utilisation du mode de compatibilité Internet Explorer 10 se cache derrière la touche F12 qui affichera les outils pour développeur. Si cette touche est cassée sur votre clavier et que vous ne voulez pas en changer, vous pouvez également passer sur l'icône rouage et cliquer sur « Outils de développement F12 ».</p>\n\n<h3>Différence entre Mode navigateur et Mode de document</h3>\n\n<p>L'interface pour les développeurs se présente comme ci-dessous :</p>\n\n<div class=\"center\">\n<img class=\"openable\" src=\"./upload/image/ie10-development-view.png\" alt=\"Aperçu de l'outil de développement\" width=\"500\" height=\"299\" style=\"width: 76%;height: auto;\" />\n</div>\n\nLa zone bleue dans le menu est le « Mode de document » et juste à sa gauche se trouve le « Mode navigateur ».\n\n<h4>Mode navigateur</h4>\n\n<p>Sans que visuellement vous ne le discerniez, IE10 va se faire passer auprès des serveurs pour l'IE que vous allez lui demander d'être. Il va donc requêter et traiter les réponses comme s'il était le navigateur en question.</p>\n<ul>\n<li><span class=\"highlighting\">Internet Explorer 10</span> : Mode par défaut. Le navigateur se comporte comme un IE10.</li>\n<li><span class=\"highlighting\">Affichage de compatibilité Internet Explorer 10</span> : Ce mode va choisir dans quel IE il est le plus judicieux de traiter le rendu d'une page.</li>\n<li><span class=\"highlighting\">Internet Explorer 9</span> : Force le navigateur à se faire passer pour IE9.</li>\n<li><span class=\"highlighting\">Internet Explorer 8</span> : Force le navigateur à se faire passer pour IE8.</li>\n<li><span class=\"highlighting\">Internet Explorer 7</span> : Force le navigateur à se faire passer pour IE7.</li>\n</ul>\n\n<h4>Mode de document</h4>\n\n<p>IE10 va traiter le rendu visuel d'une page comme s'il avait été exécuté par le navigateur en question en prenant volontairement en compte les bogues inhérent à la version et son non respect des standards.</p>\n\n<ul>\n<li><span class=\"highlighting\">Normes (Pages par défaut)</span> : Prend en compte les DOCTYPEs et respecte les normes du web pour le rendu de la page.</li>\n<li><span class=\"highlighting\">Quirks</span> : Passe en mode Quirks (voir plus bas).</li>\n<li><span class=\"highlighting\">Normes d'Internet Explorer 9</span> : Affiche la page avec la totalité des standards respectés/connus de IE9.</li>\n<li><span class=\"highlighting\">Normes d'Internet Explorer 8</span> : Affiche la page avec la totalité des standards respectés/connus de IE8.</li>\n<li><span class=\"highlighting\">Normes d'Internet Explorer 7</span> : Affiche la page avec la totalité des standards respectés/connus de IE7.</li>\n</ul>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Un petit exemple</div>\n\t<div class=\"content\">\n\t\t<p>Si je visionne cette page en Mode de document « Normes d'Internet Explorer 9 » tout en restant en Mode navigateur « Internet Explorer 10 » le titre de la page s'affichera en blanc et sera illisible car les normes interprétées par IE9 ne prennent pas en compte la propriété CSS3 « text-shadow ». Pourtant j'ai indiqué grâce au commentaires conditionnels que si IE plus petit que 10, le texte devait être rouge (pour être lisible). Ce commentaire n'est pas interprété par le navigateur car il se dit IE10 interprétant comme IE9.</p>\n\t\t<p class=\"highlighting\">Pour avoir le rendu tel que IE9 le donnerait il faut bien switcher en Mode navigateur IE9 ET en Mode de document IE9.</p>\n\t</div>\n</div>\n\n<h3>Qu'est-ce que le mode Quirks ?</h3>\n\n<p>Cela permet de repasser à l'époque ou il n'y avait pas de normes W3C pour afficher ou déboguer les pages telles qu'elles ont été conçues à cette époque.Je vous invite à lire cet article intéressant sur le mode Quirks et sur les différences notables de rendu : <a href=\"http://www.lesintegristes.net/2008/04/06/que-se-passe-t-il-en-mode-quirks-traduction/\" title=\"Que se passe-t-il en mode Quirks ?\">Que se passe-t-il en mode Quirks ?</a></p>\n\n<h3>Pourquoi il n'y a pas de mode compatibilité IE6 dans IE10 ?</h3>\n\n<p>C'est vrai que cela peut sembler étrange. On voit bien IE5 dans la liste mais pas IE6. On peut supposer ceci :</p>\n\n<ul>\n<li>Le Quirks Internet Explorer 5 n'est en réalité que le Quirks IE tel que supporté par Internet Explorer 5.5 incluant peut-être le rendu Internet Explorer 6.</li>\n<li>Peut-être n'a-t-il pas été inclus car il ne représentait pas vraiment le réel rendu IE6 puisque celui-ci dépend peut-être de sa version Win98 ou XP.</li>\n</ul>\n\n<p>Cependant, je n'ai pas la réponse. Si vous l'avez, n'hésitez pas à m'en faire part, cela m'intéresse.</p>\n\n<h2>Pour conclure</h2>\n\n<p>L'outil intégré de IE10 est une excellente alternative pendant la phase de développement à IETester ou même un affichage en VM dès lors qu'on décide de supporter les sites jusqu'à IE7.</p>\n\n<p>Cependant, avant de passer un site en environnement de qualité, je recommande tout de même de faire un test dans une VM en ce qui concerne IE7 et IE8 mais on a pas de grand soucis à se faire pour IE9.<p>", "dates" : { "published" : { "$date" : 1363263120000 }, "updated" : [] }, "title" : "<span>Tester</span> la <span>compatibilité</span> IE7, IE8 et IE9 avec <span>IE10</span>", "urn" : "tester-la-compatibilite-ie7-ie8-ie9-avec-ie10" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a3" }, "cache" : { "comment" : { "number" : 4 } }, "categories" : [ { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "<p>Les ergonomes s'accordent à dire qu'un des moyens pour informer l'utilisateur qu'il peut interagir avec un élément est de changer son apparence au survol de la souris. On peut réaliser cela rapidement en CSS avec plus ou moins d'effets et de complexité ou utiliser JavaScript pour faire quelque chose de plus poussé. Il va être question ici d'étudier une autre possibilité du survol de la souris qui consiste en l'apparition et l'animation d'éléments autres que l'objet survolé. En outre cet article va vous présenter la manière de gérer des menus contextuels en passant par jQuery et même CSS3.</p>\n\n<h2>Les bases du survol en CSS</h2>\n\n<p>Petit rappel donc sur la possibilité de changer le style d'un élément au survol de la souris grâce aux CSS en utilisant la <span class=\"eye-catching\">pseudo-class</span> <span class=\"highlighting\">:hover</span>. Celle-ci est compatible IE7+ et autres navigateurs sur toutes balises HTML survolable et seulement fonctionnelle sur la balise &lt;a&gt; dans le cas d'une utilisation IE6- (comprendre ici IE6 et versions inférieures). Comme toute <span class=\"eye-catching\">pseudo-class</span> elle ne fonctionne pas dans l'<span class=\"eye-catching\">attribut HTML</span> <span class=\"highlighting\">style</span>.</p>\n\n<h3>Exemple de menu simple avec :hover</h3>\n\n<p class=\"highlighting\">HTML dans &lt;body&gt;</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;nav class=\"menu\"&gt;\n\t&lt;div&gt;\n\t\t&lt;a href=\"\" title=\"\"&gt;Navigateurs&lt;/a&gt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Chrome&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Firefox&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;IE&lt;/a&gt;&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n\t&lt;div&gt;\n\t\t&lt;a href=\"\" title=\"\"&gt;OS&lt;/a&gt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Windows&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Linux&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Mac&lt;/a&gt;&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n\t&lt;div&gt;\n\t\t&lt;a href=\"\" title=\"\"&gt;Appareils&lt;/a&gt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;PC/MAC&lt;/a&gt;&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Smartphone&lt;/a&gt;&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n&lt;/nav&gt;\n</pre>\n\n<p class=\"highlighting\">CSS avec link</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/** On prévoit de ne pas laisser écouler les flottants hors du menu. **/\n.menu:after { \n\tcontent: \"\"; /* Génération d'un élément après .menu. */\n\tdisplay: block; /* Donner un comportement à l'élément. */\n\tclear: both; /* Pas de flottement à gauche ou à droite. */\n}\n\n/** On arrondit la gauche et la droite du menu. **/\n.menu div:first-child { /* Gauche correspond au premier élément. */\n\tborder-top-left-radius: 8px;\n\tborder-bottom-left-radius: 8px;\n}\n.menu div:last-child {  /* Droite correspond au dernier élément. */\n\tborder-top-right-radius: 8px;\n\tborder-bottom-right-radius: 8px;\n}\n\n.menu div {\n\tposition: relative; /* Définition de &lt;div&gt; comme référence de positionnement. */\n\tfloat: left; /* display: inline-block; fait l'affaire si pas de support pour IE7. */\n\tpadding: 8px;\n\tbackground-color: #bbbbbb;\n\tbackground: linear-gradient(to bottom, #dddddd, #bbbbbb); /* Ajouter préfixes propriétaires -webkit-, -o-, etc... */\n}\n.menu div ul {\n\tposition: absolute; /* Placer l'élément par rapport à son parent et hors du flux. */\n\tleft: 0;\n\tdisplay: none; /* Cacher l'élément. */\n\tz-index: 7;\n\tmargin-left: 0;\n\tbackground-color: #cccccc;\n}\n\n/** Utilisation de :hover pour afficher les sous-liens au survol de la souris. **/\n.menu div:hover ul {\n\tdisplay: block;\n}\n\n.menu li {\n\tlist-style: none;\n}\n</pre>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Aperçu</div>\n\t<div class=\"content\">\n\t\t<nav class=\"ex-menu-1\">\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n</div>\n\n<h3>Un peu d'animation au survol souris avec transition:</h3>\n\n<p>Il faut faire attention avec la <span class=\"eye-catching\">propriété</span> <span class=\"highlighting\">transition:</span> CSS3. Cette propriété est triviale pour de l'animation au survol de la souris sur un élément pour changer sa propre apparence et se passer de JavaScript. Cependant, dans le cas de l'exemple précédent, ou le hover modifie l'apparence d'un autre élément que celui survolé, il faut garder à l'esprit plusieurs choses :</p>\n\n<ul>\n\t<li>La transition sera bloquée si l'objet passe de <span class=\"eye-catching\">display: none;</span> vers un autre affichage.</li>\n\t<li>La transition ne fonctionnera pas vers une valeur automatique (<span class=\"eye-catching\">height: auto;</span>).</li>\n\t<li>La transition ne fonctionnera pas sans ses préfixes propriétaires (-webkit-, -o-, -moz-...) à ce jour.</li>\n</ul>\n\n<p>Modifions la CSS du code précédent pour prendre en compte ces remarques. Il va falloir cacher le menu sans utiliser <span class=\"eye-catching\">display: none;</span>. On va faire appel à <span class=\"highlighting\">heigh:</span> et <span class=\"highlighting\">overflow:</span></p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/*** ... ***/\n\n.menu div ul {\n\t/*** ... ***/\n\n\t/* display: none; &lt;= On retire display: none;. */\n\n\t/*** ... ***/\n\n\t/** On simule le display: none; d'une autre façon. **/\n\theight: 0;\n\tpadding: 0;\n\toverflow: hidden;\n\n\t/** Au survol de l'élément, on changera sa hauteur avec transition pendant 0.5s. **/\n\ttransition: height 0.5s; /* Ajouter -webkit-, -o-, etc... */\n}\n\n.menu div:hover ul {\n\t/* display: block; &lt;= Plus besoin de display:block;. */\n\theight: 80px; /* Obligation de forcer la valeur de la propriété de transition sur autre que auto. */\n}\n\n/*** ... ***/\n\n/** On remplace la perte padding de &lt;ul&gt; par des marges sur les &lt;li&gt;. **/\n.menu li {\n\tmargin: 0 8px 0 8px;\n}\n.menu li:first-child {\n\tmargin-top: 8px;\n}\n.menu li:last-child {\n\tmargin-bottom: 8px;\n}\n</pre>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Aperçu</div>\n\t<div class=\"content\">\n\t\t<nav class=\"ex-menu-2\">\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n</div>\n\n<p class=\"eye-catching\">On note un changement pour le troisième élément &lt;ul&gt; puisque sa hauteur a été imposée. Il faudrait donc régler toutes les hauteurs en fonction du nombre d'élément &lt;i&gt; (pas très pratique...).</p>\n\n<h2>Animation et survol avec JavaScript et jQuery</h2>\n\n<p>Nous allons voir ici comment produire l'effet CSS3 précédent en JavaScript avec la librairie jQuery. Cela permettra aux navigateurs ne supportant pas la <span class=\"eye-catching\">propriété</span> CSS3 <span class=\"highlighting\">transition:</span> de tout de même afficher cette animation. Nous allons dans un premier temps conserver la CSS précédente, mais couper la transition CSS3.</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/*** ... ***/\n\n.menu div ul {\n\t/*** ... ***/\n\n\t/* transition: height 0.5s; &lt;= Sera géré en JavaScript. */\n}\n\n.menu div:hover ul {\n\t/* height: 80px; &lt;= Peut repasser en automatique. */\n\theight: auto;\n}\n\n/*** ... ***/\n</pre>\n\n<h3>Equivalence simple</h3>\n\n<p>C'est parti pour un code JavaScript équivalent à <span class=\"highlighting\">transition:</span>. N'oubliez pas d'inclure jQuery.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n$(document).ready(function () { // Si le script n'est pas en pied de page, on va attendre le chargement complet du DOM.\n\n\t/* Pour chacune des 3 &lt;div&gt; du menu, on va... */\n\t$(\".menu div\").each(function () {\n\t\tvar $ul = $(this).find(\"ul\"); // ...rendre accessible les variables dans les deux parties de hover...\n\n\t\t/* ...et initialiser un comportement au passage/retrait de la souris. */\n\t\t$(this).hover(function () {\n\t\t\t/* Pour le survol on... */\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height(); // ...garde en mémoire la taille réelle de &lt;ul&gt; si affichée...\n\t\t\t$ul\n\t\t\t\t.height(0) // ...repart d'une hauteur de zéro...\n\t\t\t\t.stop() // ...stop l'éventuelle animation de fermeture...\n\t\t\t\t.animate({ height: tempHeight.toString() }, 500); // ...et on déclenche l'animation d'ouverture.\n\t\t}, function () {\n\t\t\t/* Pour le retrait on... */\n\t\t\t$ul\n\t\t\t\t.stop() // ...stop l'éventuelle animation d'ouverture...\n\t\t\t\t.animate({ height: \"0\" }, 500); // ...et on déclenche l'animation de fermeture.\n\t\t});\n\t});\n});\n</pre>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Aperçu</div>\n\t<div class=\"content\">\n\t\t<nav class=\"ex-menu-3\">\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n</div>\n\n<h3>Effectuer l'animation avec plus de condition qu'un simple survol</h3>\n\n<p>Afin d'éviter l'ouverture intempestive de votre menu au passage de la souris au-dessus de celui-ci vous avez plusieurs alternatives qui s'offrent à vous. Je vais en fournir deux ici, mais libre à vous de trouver d'autres solutions.</p>\n\n<h4>N'effectuer le hover que si la souris reste plus d'un certain temps</h4>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n$(document).ready(function () {\n\t$(\".menu div\").each(function () {\n\t\tvar \n\t\t\t$ul = $(this).find(\"ul\"),\n\t\t\ttempTimer; // On crée une variable pour manipuler le délai dans les deux parties du hover.\n\n\t\t$(this).hover(function () {\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\n\t\t\t$ul.height(0);\n\t\t\ttempTimer = setTimeout(function () { // On déclenche l'animation avec un temps de latence.\n\t\t\t\t$ul\n\t\t\t\t\t.stop()\n\t\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\n\t\t\t}, 1000); // On règle l'équivalence que l'on juge adapté. J'ai mis 1 seconde pour l'exemple.\n\t\t}, function () {\n\t\t\tclearTimeout(tempTimer); // Si on sort avant la fin du délai, on n'effectuera pas l'animation.\n\t\t\t$ul\n\t\t\t\t.stop()\n\t\t\t\t.animate({ height: \"0\" }, 500);\n\t\t});\n\t});\n});\n</pre>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Aperçu</div>\n\t<div class=\"content\">\n\t\t<nav class=\"ex-menu-4\">\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n</div>\n\n<p class=\"eye-catching\">En passant rapidement la souris, on ne risque pas de déclencher d'ouverture. J'ai excessivement exagéré le délai à une seconde pour le mettre en évidence.</p>\n\n<h4>N'effectuer le hover que si la souris ne bouge plus</h4>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n$(document).ready(function () {\n\n\t/** On permet d'accéder aux valeurs réelles de la souris à tout moment avec :\n\t\tpour x : $(\".menu div\").data(\"x\"), \n\t\tpour y : $(\".menu div\").data(\"y\"). **/\n\t$(\".menu div\").mousemove(function (e) {\n\t\t$.data(this, \"x\", e.pageX); // On met a jour la souris en x.\n\t\t$.data(this, \"y\", e.pageY); // On met a jour la souris en y.\n\t}).data(\"x\", 0).data(\"y\", 0) // On initialise les valeurs.\n\t.each(function () {\n\t\tvar\n\t\t\t$this = $(this),\n\t\t\t$ul = $this.find(\"ul\"),\n\t\t\ttempTimer, tempX, tempY; // Variables accessibles dans les deux parties de hover.\n \n\t\t$this.hover(function () {\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\n\t\t\t$ul.height(0);\n\t\t\ttempTimer = setInterval(function () { // On vérifie à intervalle régulier...\n\t\t\t\tif (tempX == $this.data(\"x\") && tempY == $this.data(\"y\")) { // ...si la souris ne bouge plus.\n\t\t\t\t\tclearInterval(tempTimer); // Alors on arrête la vérification et on ouvre le menu.\n\t\t\t\t\t$ul\n\t\t\t\t\t\t.stop()\n\t\t\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\n\t\t\t\t}\n\t\t\t\ttempX = $this.data(\"x\"); // Noter la précédente position en x de la souris.\n\t\t\t\ttempY = $this.data(\"y\"); // Noter la précédente position en y de la souris.\n\t\t\t}, 50); // Temps entre chaque vérification de position.\n\t\t}, function () {\n\t\t\tclearInterval(tempTimer); // Si on quitte l'objet, on arrête également la vérification.\n\t\t\t$ul\n\t\t\t\t.stop()\n\t\t\t\t.animate({ height: \"0\" }, 500);\n\t\t});\n\t});\n});\n</pre>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Aperçu</div>\n\t<div class=\"content\">\n\t\t<nav class=\"ex-menu-5\">\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n</div>\n\n<p class=\"eye-catching\">Tant que votre souris sera en mouvement sur le menu, le menu ne se dépliera pas. On peut également remplacer l'égalité stricte par une fourchette de valeur afin d'élargir ce que l'on considère comme une souris fixe.</p>\n\n<h4>D'autres techniques</h4>\n\n<p>Si vous aussi vous avez des tips d'utilisation du survol souris n'hésitez pas à les partager en commentaire.</p>", "dates" : { "published" : { "$date" : 1363889160000 }, "updated" : [] }, "script" : "$(document).ready(function () {\r\n\t$(\".ex-menu-3 div\").each(function () {\r\n\t\tvar $ul = $(this).find(\"ul\");\r\n\t\t$(this).hover(function (e) {\r\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t\t$ul\r\n\t\t\t\t.height(0)\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t}, function () {\r\n\t\t\t$ul\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: \"0\" }, 500);\r\n\t\t});\r\n\t});\r\n});\r\n\r\n$(\".ex-menu-4 div\").each(function () {\r\n\tvar \r\n\t\t$ul = $(this).find(\"ul\"),\r\n\t\ttempTimer; \r\n\r\n\t$(this).hover(function () {\r\n\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t$ul.height(0);\r\n\t\ttempTimer = setTimeout(function () {\r\n\t\t\t$ul\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t}, 1000);\r\n\t}, function () {\r\n\t\tclearTimeout(tempTimer);\r\n\t\t$ul\r\n\t\t\t.stop()\r\n\t\t\t.animate({ height: \"0\" }, 500);\r\n\t});\r\n});\r\n\r\n$(\".ex-menu-5 div\").mousemove(function (e) {\r\n\t$.data(this, \"x\", e.pageX);\r\n\t$.data(this, \"y\", e.pageY);\r\n}).data(\"x\", 0).data(\"y\", 0)\r\n.each(function () {\r\n\tvar\r\n\t\t$this = $(this),\r\n\t\t$ul = $this.find(\"ul\"),\r\n\t\ttempTimer, tempX, tempY;\r\n\r\n\t$this.hover(function () {\r\n\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t$ul.height(0);\r\n\t\ttempTimer = setInterval(function () {\r\n\t\t\tif (tempX == $this.data(\"x\") && tempY == $this.data(\"y\")) {\r\n\t\t\t\tclearInterval(tempTimer);\r\n\t\t\t\t$ul\r\n\t\t\t\t\t.stop()\r\n\t\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t\t}\r\n\t\t\ttempX = $this.data(\"x\");\r\n\t\t\ttempY = $this.data(\"y\");\r\n\t\t}, 50);\r\n\t}, function () {\r\n\t\tclearInterval(tempTimer);\r\n\t\t$ul\r\n\t\t\t.stop()\r\n\t\t\t.animate({ height: \"0\" }, 500);\r\n\t});\r\n});", "style" : ".ex-menu-1 div:nth-child(1),\r\n.ex-menu-2 div:nth-child(1),\r\n.ex-menu-4 div:nth-child(1),\r\n.ex-menu-5 div:nth-child(1),\r\n.ex-menu-3 div:nth-child(1) {\r\n\tborder-top-left-radius: 8px;\r\n\tborder-bottom-left-radius: 8px;\r\n}\r\n.ex-menu-1 div:last-child,\r\n.ex-menu-2 div:last-child,\r\n.ex-menu-4 div:last-child,\r\n.ex-menu-5 div:last-child,\r\n.ex-menu-3 div:last-child {\r\n\tborder-top-right-radius: 8px;\r\n\tborder-bottom-right-radius: 8px;\r\n}\r\n.ex-menu-1:after,\r\n.ex-menu-2:after,\r\n.ex-menu-4:after,\r\n.ex-menu-5:after,\r\n.ex-menu-3:after {\r\n\tcontent: \"\";\r\n\tdisplay: block;\r\n\tclear: left;\r\n}\r\n.ex-menu-1 div,\r\n.ex-menu-2 div,\r\n.ex-menu-4 div,\r\n.ex-menu-5 div,\r\n.ex-menu-3 div {\r\n\tbackground-color: #bbbbbb;\r\n\tbackground: -webkit-linear-gradient(top, #dddddd, #bbbbbb);\r\n\tbackground: -o-linear-gradient(top, #dddddd, #bbbbbb);\r\n\tbackground: -moz-linear-gradient(top, #dddddd, #bbbbbb);\r\n\tbackground: linear-gradient(to bottom, #dddddd, #bbbbbb);\r\n\tpadding: 8px;\r\n\tfloat: left;\r\n\tposition: relative;\r\n}\r\n.ex-menu-1 div ul,\r\n.ex-menu-2 div ul,\r\n.ex-menu-4 div ul,\r\n.ex-menu-5 div ul,\r\n.ex-menu-3 div ul {\r\n\tmargin-left: 0;\r\n\tbackground-color: #cccccc;\r\n\r\n\tdisplay: none;\r\n\tposition: absolute;\r\n\tz-index: 7;\r\n\tleft: 0;\r\n}\r\n.ex-menu-1 div:hover ul,\r\n.ex-menu-2 div:hover ul,\r\n.ex-menu-4 div:hover ul,\r\n.ex-menu-5 div:hover ul,\r\n.ex-menu-3 div:hover ul {\r\n\tdisplay: block;\r\n}\r\n.ex-menu-2 div ul,\r\n.ex-menu-4 div ul,\r\n.ex-menu-5 div ul,\r\n.ex-menu-3 div ul {\r\n\tpadding: 0;\r\n\tdisplay: block;\r\n\theight: 0;\r\n\toverflow: hidden;\r\n}\r\n.ex-menu-2 div ul {\r\n\t-webkit-transition: height 0.5s;\r\n\t-moz-transition: height 0.5s;\r\n\t-o-transition: height 0.5s;\r\n\ttransition: height 0.5s;\r\n}\r\n.ex-menu-2 div:hover ul {\r\n\theight: 80px;\r\n}\r\n.ex-menu-3 div:hover ul,\r\n.ex-menu-5 div:hover ul,\r\n.ex-menu-4 div:hover ul {\r\n\theight: auto;\r\n}\r\n.ex-menu-1 li,\r\n.ex-menu-2 li,\r\n.ex-menu-4 li,\r\n.ex-menu-5 li,\r\n.ex-menu-3 li {\r\n\tlist-style: none;\r\n}\r\n.ex-menu-2 li,\r\n.ex-menu-4 li,\r\n.ex-menu-5 li,\r\n.ex-menu-3 li {\r\n\tmargin: 0 8px 0 8px;\r\n}\r\n.ex-menu-2 li:first-child,\r\n.ex-menu-4 li:first-child,\r\n.ex-menu-5 li:first-child,\r\n.ex-menu-3 li:first-child {\r\n\tmargin-top: 8px;\r\n}\r\n.ex-menu-2 li:last-child,\r\n.ex-menu-4 li:last-child,\r\n.ex-menu-5 li:last-child,\r\n.ex-menu-3 li:last-child {\r\n\tmargin-bottom: 8px;\r\n}", "title" : "L'<span>animation</span> et le <span>survol</span> <span>souris</span> avec <span>CSS3</span> ou <span>jQuery</span>", "urn" : "gerer-l-animation-et-le-survol-souris-avec-jquery" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a4" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c4" } ], "content" : "<p>Vous connaissez tous l'instruction <span class=\"highlighting\">Switch</span> en JavaScript ; c'est une bonne alternative à la suite d'instruction <span class=\"eye-catching\">if, else if, else if, else if... else</span> dans le cas de choix multiples. Et si vous vous en débarrassiez pour quelque chose de plus <span class=\"useless\">simple</span> concis ?</p>\n\n<h2>Les cas d'école</h2>\n\n<h3>if, else if, encore else if, toujours else if... et else</h3>\n\n<p>Tout d'abord, rappelons la façon la plus <span class=\"useless\">simple</span> connue de faire un choix parmi plusieurs valeurs :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n\n// On a la variable \"character\" à tester.\n\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */;\n\nif (character == \"edward\") {\n\tdescription = \"Edward Elric fait 1m57 + 6cm de mèche + 2 cm de talon.\";\n} else if (character == \"alphonse\") {\n\tdescription = \"Alphonse Elric change de voix durant FMA Brotherhood.\";\n} else if (character == \"winry\") {\n\tdescription = \"Winry Rockbell est secrètement amoureuse de R2D2.\";\n} else {\n\tdescription = \"Y a pas mal de personnage.\";\n}\n\n// On récupère la valeur de description.\n</pre>\n\n<h3>Tu as trop de choix, utilise un Switch !</h3>\n\n<p>Avec l'instruction <span class=\"highlighting\">Switch</span>, on peut également produire le même résultat. Et oui, paraît que c'est plus rapide, ça utilise moins de caractères (346 au lieu de 352 !), c'est mieux de faire ça (on me l'a dit), ça sauve plus de chatons prématurés, bref c'est formidable !</p>\n<pre class=\"prettyprint linenums lang-javascript\">\n// On a encore la variable \"character\" à tester.\n\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */;\n\nswitch(character) {\n\tcase \"edward\":\n\t\tdescription = \"Edward Elric fait 1m57 + 6cm de mèche + 2 cm de talon.\";\n\t\tbreak;\n\tcase \"alphonse\":\n\t\tdescription = \"Alphonse Elric change de voix durant FMA Brotherhood.\";\n\t\tbreak;\n\tcase \"winry\":\n\t\tdescription = \"Winry Rockbell est secrètement amoureuse de R2D2.\";\n\t\tbreak;\n\tdefault : \n\t\tdescription = \"Y a pas mal de personnage.\";\n}\n\n// On récupère encore la valeur de description.\n</pre>\n\n<p class=\"eye-catching\">Simplement, il y a quelques petites choses qui m'ennuient avec Switch. Non pas que ce soit une mauvaise idée de l'utiliser, mais j'ai du mal avec sa syntaxe (bien que je m'y sois fait) et oublier le mot clé \"break\" vous envoie droit au bûché. C'est vrai, dans la majorité des cas il est nécessaire alors ça aurait été sympa qu'il soit implicite, quitte à utiliser un mot-clé pour simuler le fonctionnement d'un Switch sans break.</p>\n\n<h2>Ce problème fait l'Objet d'une astuce</h2>\n\n<h3>L'alternative au Switch, (et au If) ?</h3>\n\n<p>Les deux cas ci-dessus peuvent être remplacés élégamment par un parcourt de valeur dans un <span class=\"highlighting\">Objet JSON</span> ! Voyez plutôt :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n// On a toujours la variable \"character\" à tester.\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */, \n    descriptions;\n\n/* J'associe à une clé, une valeur. Une sorte de dictionnaire. */\ndescriptions = {\n\t\"edward\" : \"Edward Elric fait 1m57 + 6cm de mèche + 2 cm de talon.\",\n\t\"alphonse\" : \"Alphonse Elric change de voix durant FMA Brotherhood.\",\n\t\"winry\" : \"Winry Rockbell est secrètement amoureuse de R2D2.\",\n\t\"other\" : \"Y a pas mal de personnage.\"\n}\n\n/* Je cherche la valeur clé dans mon dictionnaire. Si elle n'est pas trouvé,\n'descriptions[character]' renvoi 'undefinded' qui est testé comme 'false' et on prend alors la valeur par défaut 'other'. */\ndescription = descriptions[character] || descriptions[\"other\"];\n\n// On récupère toujours la valeur de description.\n</pre>\n\n<p>Cela a l'avantage de séparer la logique (dernière ligne), des données (l'Objet JSON) ; ce qui n'est pas le cas de nos précédents exemples.</p>\n\n<h3>Et pour plusieurs instructions ?</h3>\n\n<p>Rien ne vous empêche de vous créer ce genre de \"Switch\" avec un Objet qui fait un calcule avant retour :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">// On a toujours la variable \"character\" à tester.\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */, \n    descriptions;\n\ndescriptions = {\n\t\"edward\" : function () {\n\t\t// Trucs un peu plus conséquents.\n\t\treturn; // Le résultat. \n\t},\n\t\"alphonse\" :  function () {\n\t\t// Trucs un peu plus conséquents.\n\t\treturn; // Le résultat. \n\t},\n\t\"winry\" :  function () {\n\t\t// Trucs un peu plus conséquents.\n\t\treturn; // Le résultat. \n\t},\n\t\"other\" :  function () {\n\t\t// Trucs un peu plus conséquents.\n\t\treturn; // Le résultat. \n\t}\n}\n\n// On choisit le bon calcul/résultat à obtenir.\ndescription = descriptions[character] || descriptions[\"other\"];\n\n// Et on l'exécute.\ndescription();\n</pre>\n\n<p>Vous pouvez également préparer des traitements différents en fonction de la variable.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">// On a toujours la variable \"character\" à tester.\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */, \n    descriptions = {};\n\ndescriptions[\"edward\"] = function () {\n\t// Traitement de controle ici.\n};\n\ndescriptions[\"winry\"] = function () {\n\t// Traitement de controle ici.\n};\n\ndescriptions[\"edward\"] = function () {\n\t// Traitement de controle ici.\n};\n\ndescriptions[\"other\"] = function () {\n\t// Traitement de controle ici.\n};\n\n// On choisit la bonne fonction à exécuter.\ndescription = descriptions[character] || descriptions[\"other\"];\n\n// Et on l'exécute.\ndescription();\n</pre>\n\n<h2>Le(s) mot(s) de la fin</h2>\n\n<p>Je ne me risquerais pas à dire que c'est une bonne pratique, mais c'est au moins une bonne astuce que j'utilise régulièrement. Qu'en pensez vous ?</p>", "dates" : { "published" : { "$date" : 1364039040000 }, "updated" : [] }, "title" : "Une <span>alternative</span> au <span>Switch</span>, c'est possible en <span>JavaScript</span>", "urn" : "une-alternative-au-switch-c-est-possible-en-javascript" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a5" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "<p>Savez-vous qu'en HTML5, l'attribut <samp>lang</samp> (équivalent xHTML de <samp>xml:lang</samp>) peut être placé dans n'importe quelles balises de la page. Il définit alors dans quelle langue doit être interprétée la portion de code dans cette balise et ses enfants. Cet attribut fonctionne de paire avec la pseudo-class <samp>:lang()</samp> que l'on retrouve en CSS3. Nous allons mettre en avant ces deux amis le temps d'un article et le temps de comprendre à quel point ils s'entendent bien.</p>\n\n<h2>L'attribut lang en HTML5</h2>\n\n<p>Abordons en premier lieu l'utilisation de l'attribut <samp>lang</samp> en <a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#the-lang-and-xml:lang-attributes\" title=\"L'attribut HTML5 lang tel que décrit par le W3C\">HTML5 telle que décrite par le W3C</a>. Vous le connaissez déjà si vous avez jeté un simple coup d'œil à la page minimale de tous documents HTML5. Voyons plutôt :</p>\n\n<h3>Exemple de sémantique d'une page HTML5</h3>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr-fr\"&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"utf-8\" /&gt;\n\t\t&lt;title&gt;Document HTML5 de base&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;blockquote lang=\"en\" cite=\"http://www.ffdream.com/encyclopedie-mythe_ultimecia2.html\"&gt;\n\t\t\t&lt;p&gt;I'll be here...&lt;/p&gt;\n\t\t\t&lt;p&gt;Why...?&lt;/p&gt;\n\t\t\t&lt;p&gt;I'll be waiting...here...&lt;/p&gt;\n\t\t\t&lt;p&gt;For what?&lt;/p&gt;\n\t\t\t&lt;p&gt;I'll be waiting...for you...so...&lt;/p&gt;\n\t\t\t&lt;p&gt;If you come here...&lt;/p&gt;\n\t\t\t&lt;p&gt;You'll find me.&lt;/p&gt;\n\t\t\t&lt;p&gt;I promise.&lt;/p&gt;\n\t\t&lt;/blockquote&gt;\n\t\t&lt;p&gt;Citation de l'introduction de Final Fantasy VIII&lt;/p&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n\n<p>Vous l'avez remarqué, il est là, à la ligne 2, <samp>&lt;html lang=\"fr-fr\"&gt;</samp>. Vous aurez probablement lu également qu'il remplace <samp>&lt;meta http-equiv=\"content-language\" content=\"fr-fr\" /&gt;</samp> en xHTML. C'est aussi juste que c'est incorrecte. En réalité, un http-equiv complète/corrige/remplace le travail d'une entête http. Ainsi quand une réponse du serveur web ne contient pas l'entête <samp>Content-Language: fr-fr</samp>, le navigateur sait quand même dans quelle langue interpréter les données (ici française). Si le document est en HTML5 (Le navigateur le sait grâce à <samp>&lt;!DOCTYPE html&gt;</samp>) il sait d'avance qu'il faut interpréter chaque nœud du document dans la langue indiquée par son plus proche parent ayant un attribut lang remplis.</p>\n\n<p>Vous l'avez peut-être compris, en HTML5, on ne dit pas \"mon document est écris en français\" mais \"cette partie de mon document est écrite en française, mais celle-ci est écrite en anglaise\". C'est exactement le cas dans mon exemple précédent ; si vous regardez attentivement à la ligne 8, la balise <samp>&lt;blockquote&gt;</samp> contient un attribut lang \"en\" ! Par conséquent —car l'action de langue se propage sur tous les nœuds fils— toutes les balises <samp>&lt;p&gt;</samp> enfants sont également à interpréter en anglais.</p>\n\n<p>Rien n’empêche tout de même de définir dans le header http renvoyé par le serveur <samp>Content-Language:</samp> pour définir la langue principale du document.</p>\n\n<h2>La pseudo-class :lang() en CSS3</h2>\n\n<p>Abordons à présent l'utilisation de la pseudo-class <samp>:lang()</samp> en <a href=\"http://www.w3.org/TR/css3-selectors/#lang-pseudo\" title=\"La pseudo-class CSS3 <samp>:lang()</samp> telle que décrite par le W3C\">CSS3 telle que décrite par le W3C</a>. A l'instar de <samp>:nth-child()</samp>, elle prend un paramètre pour fonctionner. La langue d'interprétation de l'élément cible est le paramètre en question (par exemple <samp>:lang(fr-fr)</samp>). Et je vous laisse deviner quel mécanisme permet à la pseudo-class de définir la langue d'interprétation du nœud ? Bingo ! L'attribut <samp>lang</samp> HTML5 du/des nœud(s) ciblé(s) ou de son/leur plus proche parent contenant l'attribut <samp>lang</samp>.</p>\n\n<h3>Exemple de ciblage CSS</h3>\n\n<pre class=\"prettyprint linenums lang-css\">\n/* La seule phrase en rouge sera : */\n/* \"Citation de l'introduction de Final Fantasy VIII\". */\n/* Les autres phrases ne le seront pas car elles ne sont pas interprétées en français. */\np:lang(fr-fr) { \n\tcolor: #ff0000;\n}\n</pre>\n\n<p class=\"warning\">Attention : <samp>&lt;html lang=\"fr-fr\"&gt;</samp> peut être ciblée par <samp>:lang(fr)</samp> et <samp>:lang(fr-fr)</samp> mais <samp>&lt;html lang=\"fr\"&gt;</samp> ne peut être ciblée que par <samp>:lang(fr)</samp> et pas par <samp>:lang(fr-fr)</samp>.</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/* Ceci fonctionne aussi pour fr-fr ! */\np:lang(fr) { \n\tcolor: #ff0000;\n}\n</pre>\n\n<p class=\"highlighting\">A savoir : <samp>:lang()</samp> est fonctionnelle IE8+ (pour un support plus vaste vous pouvez plutôt faire appel aux classes CSS conditionnelles).</p>\n\n<p class=\"example\">C'est bien beau tout ça, mais quel intérêt ? Voyons ça plus bas.</p>\n\n<h2>Synergie des deux technologies pour du multilingue</h2>\n\n<p>Imaginons un template HTML taillé pour afficher une même page en multilingue. Un moteur de template pour PHP, ASP, Ruby, Node.js etc... transforme le template en deux pages distinctes fournis au client en fonction de la demande de la page en français ou en anglaise (avec une url différente par exemple). Il pourrait ressembler à cela :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;html lang=\"{CULTURE_COUNTRY}\"&gt;\n\n&lt;!-- ... header, body, etc... --&gt;\n\n&lt;section&gt;\n\t&lt;div class=\"languages\"&gt;\n\t\t&lt;span&gt;{OTHERS_LANGUAGES}&lt;/span&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"fr-fr\"&gt;{LANG_FRENCH}&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"en-gb\"&gt;{LANG_ENGLISH}&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"es-es\"&gt;{LANG_SPANISH}&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;form id=\"form\" method=\"post\" action=\"./\"&gt;\n\t\t&lt;header&gt;{TITLE}&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\t&lt;header&gt;{TITLE_ALLOWS}&lt;/header&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;!-- BEGIN allows --&gt;\n\t\t\t\t&lt;li&gt;{allows.ELEMENT_ALLOWS}&lt;/li&gt;\n\t\t\t\t&lt;!-- END allows --&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;footer&gt;{END_ALLOWS}&lt;/footer&gt;\n\t\t&lt;/aside&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-email\"&gt;{LABEL_EMAIL}&lt;/label&gt;\n\t\t\t&lt;input id=\"form-email\" type=\"text\" placeholder=\"{LABEL_EMAIL}\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-password\"&gt;{LABEL_PASSWORD}&lt;/label&gt;\n\t\t\t&lt;input id=\"form-password\" type=\"password\" placeholder=\"{LABEL_PASSWORD}\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label&gt;&lt;input id=\"form-submit\" type=\"submit\" value=\"{LABEL_REGISTRATION}\" /&gt;&lt;/label&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/section&gt;\n</pre>\n\n<p class=\"highlighting\">et génèrerait en français :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;html lang=\"fr-fr\"&gt;\n\n&lt;!-- ... header, body, etc... --&gt;\n\n&lt;section&gt;\n\t&lt;div class=\"languages\"&gt;\n\t\t&lt;span&gt;Autres langues&lt;/span&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"fr-fr\"&gt;Français&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"en-gb\"&gt;English&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"es-es\"&gt;Español&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;form id=\"form\" method=\"post\" action=\"./\"&gt;\n\t\t&lt;header&gt;Inscription&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\t&lt;header&gt;Notre service permet&lt;/header&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li&gt;de tchatter avec d'autres utilisateurs&lt;/li&gt;\n\t\t\t\t&lt;li&gt;de partager vos photos&lt;/li&gt;\n\t\t\t\t&lt;li&gt;de rencontrer des personnes en vrai&lt;/li&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;footer&gt;Pour le reste, vous êtes grand !&lt;/footer&gt;\n\t\t&lt;/aside&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-email\"&gt;Email&lt;/label&gt;\n\t\t\t&lt;input id=\"form-email\" type=\"text\" placeholder=\"Email\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-password\"&gt;Mot de passe&lt;/label&gt;\n\t\t\t&lt;input id=\"form-password\" type=\"password\" placeholder=\"Mot de passe\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label&gt;&lt;input id=\"form-submit\" type=\"submit\" value=\"Inscription\" /&gt;&lt;/label&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/section&gt;\n</pre>\n\n<p class=\"highlighting\">et génèrerait en anglais :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;html lang=\"en-gb\"&gt;\n\n&lt;!-- ... header, body, etc... --&gt;\n\n&lt;section&gt;\n\t&lt;div class=\"languages\"&gt;\n\t\t&lt;span&gt;Others languages&lt;/span&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"fr-fr\"&gt;Français&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"en-gb\"&gt;English&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"es-es\"&gt;Español&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;form id=\"form\" method=\"post\" action=\"./\"&gt;\n\t\t&lt;header&gt;Registration&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\t&lt;header&gt;Our service allows you&lt;/header&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li&gt;to chat with other users&lt;/li&gt;\n\t\t\t\t&lt;li&gt;to share your photos&lt;/li&gt;\n\t\t\t\t&lt;li&gt;to meet people in real life&lt;/li&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;footer&gt;It's your ride now!&lt;/footer&gt;\n\t\t&lt;/aside&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-email\"&gt;Email&lt;/label&gt;\n\t\t\t&lt;input id=\"form-email\" type=\"text\" placeholder=\"Email\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-password\"&gt;Password&lt;/label&gt;\n\t\t\t&lt;input id=\"form-password\" type=\"password\" placeholder=\"Password\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label&gt;&lt;input id=\"form-submit\" type=\"submit\" value=\"Registration\" /&gt;&lt;/label&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/section&gt;\n</pre>\n\n<h3>Premier exemple : habillage deux colonnes</h3>\n\n<p>Habillons le code précédent avec la CSS suivante, je vous invite à lire attentivement la partie <span class=\"highlighting\">Partie langues et ponctuation</span> :</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/********************************/\n/** Partie design et placement **/\n/********************************/\n\n/* Les langues en haut à droite. */\nsection .languages {\n\tfloat: right;\n\tfont-size: 0.8em;\n}\n\n/* Pas de flottants qui dépassent du formulaire. */\nsection form:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: both;\n}\n\n/* Mise du titre en avant. */\nsection > header {\n\tfont-size: 1.5em;\n\tborder-bottom: dashed 1px #cccccc;\n}\n\n/* Les informations accompagnant le formulaire à droite. */\nsection aside {\n\tfloat: right;\n\tpadding: 6px 6px 6px 16px;\n\twidth: 55%;\n\tbox-sizing: border-box;\n\t-moz-box-sizing: border-box;\n}\n\n/* Homogénéité des tailles pour les labels. */\nsection label {\n\tdisplay: inline-block;\n\twidth: 100px;\n\tbox-sizing: border-box;\n\t-moz-box-sizing: border-box;\n}\n\n/* Alignement et espacement des champs. */\nsection .field {\n\tpadding: 16px 16px 0 8px;\n\twidth: 45%;\n\tbox-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\ttext-align: right;\n}\n\n/***********************************/\n/** Partie langues et ponctuation **/\n/***********************************/\n\n/* lang(fr) cible l'élément que si lui-même ou l'un de ses parents contient lang=\"fr\" ou lang=\"fr-*\", */\n/* contrairement à [lang=fr-fr] qui ne cible l'élément que s'il a un attribut lang. */\nsection:lang(fr) a[lang=fr-fr]:after { \n\tcontent: \" -\"; /* Ajout d'un tiret après le français en français. */\n}\nsection:lang(en) a[lang=en-gb]:after {\n\tcontent: \" -\"; /* Ajout d'un tiret après l'anglais en anglais. */\n}\n\n/* Après {OTHERS_LANGUAGES}, en français un espace sépare les \":\" du texte, et pas en anglais. */\nsection .languages span:lang(fr):after {\n\tcontent: \" :\";\n}\nsection .languages span:lang(en):after {\n\tcontent: \":\";\n}\n\n/* On cache le lien de changement vers la langue courante, utiliser :lang() sur \".lang\" ou \"section\" revient au même, */\n/* les balises héritent toutes deux de l'attribut lang de la balise &lt;html&gt;. */\nsection .languages:lang(fr) a[lang=fr-fr] {\n\tdisplay: none;\n}\nsection .languages:lang(en) a[lang=en-gb] {\n\tdisplay: none;\n}\n\n/* Deux points après le {OTHERS_LANGUAGES} et chaque label pour cet exemple : */\n/* en français, */\nsection aside header:lang(fr):after,\nsection label:lang(fr):after {\n\tcontent: \" :\";\n}\n/* en anglais, */\nsection aside header:lang(en):after,\nsection label:lang(en):after {\n\tcontent: \":\";\n}\n/* mais pas de tiret après le bouton de validation. */\nsection label:last-child:after {\n\tcontent: \"\";\n}\n/* Une virgule après chaque item de la liste. */\n/* Sauf pour le dernier qui a un point. */\nsection li:after {\n\tcontent: \",\";\n}\nsection li:last-child:after {\n\tcontent: \".\";\n}\n</pre>\n\n<p>Ce qui nous donne en français puis en anglais :</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 1 en Français</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-1\" lang=\"fr-fr\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Autres langues</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-fr-1\">\n\t\t\t\t<div class=\"subscribe\">Inscription</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Notre service permet</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>de tchatter avec d'autres utilisateurs</li>\n\t\t\t\t\t\t<li>de partager vos photos</li>\n\t\t\t\t\t\t<li>de rencontrer des personnes en vrai</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">Pour le reste, vous êtes grand !</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-email-1\">Email</label>\n\t\t\t\t\t<input id=\"form-fr-email-1\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-password-1\">Mot de passe</label>\n\t\t\t\t\t<input id=\"form-fr-password-1\" type=\"password\" placeholder=\"Mot de passe\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-fr-submit-1\" type=\"button\" value=\"Inscription\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 1 en Anglais</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-1\" lang=\"en-gb\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Others languages</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-en-1\">\n\t\t\t\t<div class=\"subscribe\">Registration</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Our service allows you</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>to chat with other users</li>\n\t\t\t\t\t\t<li>to share your photos</li>\n\t\t\t\t\t\t<li>to meet people in real life</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">It's your ride now!</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-email-1\">Email</label>\n\t\t\t\t\t<input id=\"form-en-email-1\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-password-1\">Password</label>\n\t\t\t\t\t<input id=\"form-en-password-1\" type=\"password\" placeholder=\"Password\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-en-submit-1\" type=\"button\" value=\"Registration\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<p class=\"highlighting\">Quel intérêt de séparer quelques éléments de ponctuation des phrases elles-mêmes. Vous allez le comprendre avec le second exemple qui utilise la même structure HTML que le premier</p>\n\n<h3>Deuxième exemple : habillage en ligne</h3>\n\n<p>Changeons l'apparence précédente avec cette nouvelle CSS :</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/********************************/\n/** Partie design et placement **/\n/********************************/\n\n/* Les langues en haut à droite */\nsection .languages {\n\tfloat: right;\n\tfont-size: 0.9em;\n}\n\n/* On cache {OTHERS_LANGUAGES} */\nsection .languages span {\n\tdisplay: none;\n}\n\n/* On cache le lien de changement vers la langue courante, utiliser :lang() sur \".lang\" ou \"section\" revient au même, */\n/* les balises héritent toutes deux de l'attribut lang de la balise &lt;html&gt;. */\nsection .languages:lang(fr) a[lang=fr-fr] {\n\tdisplay: none;\n}\nsection .languages:lang(en) a[lang=en-gb] {\n\tdisplay: none;\n}\n\n/* Mise en avant du titre. */\nsection > header {\n\tfont-size: 1.2em;\n\tfont-weight: bold;\n}\n\n/* Mise en ligne d'élément nativement en block dans l'aside. */\n/* Le texte de l'aside ne sera plus en liste mais en ligne. */\nsection aside header,\nsection aside footer,\nsection ul,\nsection li {\n\tdisplay: inline;\n}\n/* On rend inexistant le &lt;ul&gt;. */\nsection ul {\n\tmargin-left: 0;\n\tpadding: 0;\n}\n/* on centre le texte */\nsection aside {\n\ttext-align: center;\n\tpadding: 16px;\n}\n\n/* Mise en ligne d'élément nativement en block dans le formulaire. */\n/* Le formulaire ne sera plus en liste mais en ligne. */\nsection .field {\n\tpadding: 8px;\n}\n\n/***********************************/\n/** Partie langues et ponctuation **/\n/***********************************/\n\n/* lang(fr) cible l'élément que si lui même ou l'un de ses parents contient lang=\"fr\" ou lang=\"fr-*\", */\n/* contrairement à [lang=fr-fr] qui ne cible l'élément que s'il a un attribut lang. */\nsection:lang(fr) a[lang=fr-fr]:after { \n\tcontent: \" |\"; /* Ajout d'un pipe après le français en français. */\n}\nsection:lang(en) a[lang=en-gb]:after {\n\tcontent: \" |\"; /* Ajout d'un pipe après l'anglais en anglais. */\n}\n\n/* On décide, car la liste n'est plus qu'une phrase, de l'entourer de guillemets. */\nsection aside header:lang(fr):before {\n\tcontent: \"« \";\n}\nsection aside footer:lang(fr):after {\n\tcontent: \" »\";\n}\nsection aside header:lang(en):before {\n\tcontent: \"“\";\n}\nsection aside footer:lang(en):after {\n\tcontent: \"”\";\n}\n\n/* Ponctuation de la liste devenue une phrase. */\nsection li:after {\n\tcontent: \", \"; /* Chaque item est séparé par une virgule */\n}\nsection li:nth-last-child(2):lang(fr):after {\n\tcontent: \" et \"; /* Mais l'avant dernier, en français, par un \"et\" */\n}\nsection li:nth-last-child(2):lang(en):after {\n\tcontent: \" and \"; /* Alors qu'en anglais, se sera par un \"and\" */\n}\nsection li:last-child:after {\n\tcontent: \".\"; /* Finalement, on remplace la virgule finale par un point. */ \n}\n</pre>\n\n<p>Ce qui nous donne en français puis en anglais :</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 2 en Français</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-2\" lang=\"fr-fr\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Autres langues</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-fr-2\">\n\t\t\t\t<div class=\"subscribe\">Inscription</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Notre service permet</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>de tchatter avec d'autres utilisateurs</li>\n\t\t\t\t\t\t<li>de partager vos photos</li>\n\t\t\t\t\t\t<li>de rencontrer des personnes en vrai</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">Pour le reste, vous êtes grand !</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-email-2\">Email</label>\n\t\t\t\t\t<input id=\"form-fr-email-2\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-password-2\">Mot de passe</label>\n\t\t\t\t\t<input id=\"form-fr-password-2\" type=\"password\" placeholder=\"Mot de passe\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-fr-submit-2\" type=\"button\" value=\"Inscription\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 2 en Anglais</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-2\" lang=\"en-gb\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Others languages</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-en-2\">\n\t\t\t\t<div class=\"subscribe\">Registration</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Our service allows you</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>to chat with other users</li>\n\t\t\t\t\t\t<li>to share your photos</li>\n\t\t\t\t\t\t<li>to meet people in real life</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">It's your ride now!</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-email-2\">Email</label>\n\t\t\t\t\t<input id=\"form-en-email-2\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-password-2\">Password</label>\n\t\t\t\t\t<input id=\"form-en-password-2\" type=\"password\" placeholder=\"Password\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-en-submit-2\" type=\"button\" value=\"Registration\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<h2>De l'utilisation de lang et lang</h2>\n\n<p>Je viens de vous présenter l'une des possibilités offertes par l'attribut <samp>lang</samp> et la pseudo-class <samp>:lang()</samp>. Cet article n'a pas pour but de dire si la déportation de certains éléments de ponctuations dans une CSS est une bonne ou une mauvaise pratique, mais plutôt de présenter nos deux éléments à travers un exemple concret et surtout de les découvrir pour ceux qui ne les connaissaient pas. Il ne vous aura peut-être pas échappé non plus que l'utilisation de la technique des classes CSS conditionnelles peut remplacer ce mécanisme natif.</p>", "dates" : { "published" : { "$date" : 1364301060000 }, "updated" : [] }, "style" : ".example-1 .lang {\r\n\tfloat: right;\r\n\tfont-size: 0.8em;\r\n}\r\n.example-1 .a {\r\n\tcolor: #0000ff;\r\n\tcursor: pointer;\r\n}\r\n.example-1 .a:hover {\r\n\tcolor: #ff0000;\r\n}\r\n.example-1 form:after {\r\n\tcontent: \"\";\r\n\tdisplay: block;\r\n\tclear: both;\r\n}\r\n.example-1 .subscribe {\r\n\tfont-size: 1.5em;\r\n\tborder-bottom: dashed 1px #cccccc;\r\n}\r\n.example-1 .aside {\r\n\tfloat: right;\r\n\tpadding: 8px 8px 8px 16px;\r\n\twidth: 55%;\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n}\r\n.example-1 label {\r\n\tdisplay: inline-block;\r\n\twidth: 100px;\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n}\r\n.example-1 .field {\r\n\tpadding: 16px 16px 0 8px;\r\n\twidth: 45%;\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n\ttext-align: right;\r\n}\r\n\r\n.example-1 .lang .fr-fr:after {\r\n\tcontent: \" -\";\r\n}\r\n.example-1 .lang .en-gb:after {\r\n\tcontent: \" -\";\r\n}\r\n.example-1 .lang span:first-child:lang(fr):after {\r\n\tcontent: \" :\";\r\n}\r\n.example-1 .lang span:first-child:lang(en):after {\r\n\tcontent: \":\";\r\n}\r\n.example-1 .lang:lang(fr) .a.fr-fr {\r\n\tdisplay: none;\r\n}\r\n.example-1 .lang:lang(en) .a.en-gb {\r\n\tdisplay: none;\r\n}\r\n.example-1 .header:lang(fr):after,\r\n.example-1 label:lang(fr):after {\r\n\tcontent: \" :\";\r\n}\r\n.example-1 .header:lang(en):after,\r\n.example-1 label:lang(en):after {\r\n\tcontent: \":\";\r\n}\r\n.example-1 label:last-child:after {\r\n\tcontent: \"\";\r\n}\r\n.example-1 li:after {\r\n\tcontent: \",\";\r\n}\r\n.example-1 li:last-child:after {\r\n\tcontent: \".\";\r\n}\r\n\r\n.example-2 .lang {\r\n\tfloat: right;\r\n\tfont-size: 0.9em;\r\n}\r\n.example-2 .lang span:first-child {\r\n\tdisplay: none;\r\n}\r\n.example-2 .a {\r\n\tcolor: #0000ff;\r\n\tcursor: pointer;\r\n}\r\n.example-2 .a:hover {\r\n\tcolor: #ff0000;\r\n}\r\n.example-2 .lang:lang(fr) .a.fr-fr {\r\n\tdisplay: none;\r\n}\r\n.example-2 .lang:lang(en) .a.en-gb {\r\n\tdisplay: none;\r\n}\r\n.example-2 .subscribe {\r\n\tfont-size: 1.2em;\r\n\tfont-weight: bold;\r\n}\r\n.example-2 .header,\r\n.example-2 .footer,\r\n.example-2 ul,\r\n.example-2 li {\r\n\tdisplay: inline;\r\n}\r\n.example-2 .aside {\r\n\ttext-align: center;\r\n\tpadding: 16px;\r\n}\r\n.example-2 .field {\r\n\tdisplay: inline-block;\r\n\tpadding: 8px;\r\n}\r\n.example-2 ul {\r\n\tmargin-left: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n.example-2 .lang .fr-fr:after {\r\n\tcontent: \" |\";\r\n}\r\n.example-2 .lang .en-gb:after {\r\n\tcontent: \" |\";\r\n}\r\n.example-2 li:after {\r\n\tcontent: \", \";\r\n}\r\n.example-2 .header:lang(fr):before {\r\n\tcontent: \"« \";\r\n}\r\n.example-2 .footer:lang(fr):after {\r\n\tcontent: \" »\";\r\n}\r\n.example-2 .header:lang(en):before {\r\n\tcontent: \"“\";\r\n}\r\n.example-2 .footer:lang(en):after {\r\n\tcontent: \"”\";\r\n}\r\n.example-2 li:nth-last-child(2):lang(fr):after {\r\n\tcontent: \" et \";\r\n}\r\n.example-2 li:nth-last-child(2):lang(en):after {\r\n\tcontent: \" and \";\r\n}\r\n.example-2 li:last-child:after {\r\n\tcontent: \".\";\r\n}", "title" : "L'<span>attribut</span> <span>HTML5</span> <span>lang</span> et la <span>pseudo-class</span> <span>CSS3</span> :lang()", "urn" : "l-attribut-html5-lang-et-la-pseudo-class-css3-lang" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a6" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<p>La navigation interne à une page web d'un site consiste à utiliser une ancre et y faire référence pour forcer l'affichage du navigateur sur la zone en question. Penchons nous d'abord sur l'utilisation « légacy* » de ce mécanisme et ensuite sur les améliorations ergonomiques envisageables avec du JavaScript (et du jQuery).</p>\n\n<p id=\"pdefinition\" class=\"eye-catching\"><a id=\"adefinition\">*</a> tel qu'il fonctionne de manière standard depuis sa création.</p>\n\n<h2>L'ancre interprétée nativement par le navigateur</h2>\n\n<p>L'utilisation standard de la balise <samp>&lt;a&gt;</samp> est celle de permettre la navigation entre différentes pages d'un même site ou d'autre sites/ressources sur la toile.</p>\n\n<p>Une seconde utilisation —celle qui nous intéresse dans cet article— est de permettre la navigation interne à une page. Cette seconde utilisation peu grosso-modo être divisée en 3 types de lien :</p>\n<ul>\n\t<li>\n\t\t<span class=\"highlighting\">accès rapide</span> : on va plus loin dans la page (\"Aller au menu\", \"Aller à l'article\"...),\n\t</li>\n\t<li>\n\t\t<span class=\"highlighting\">navigation interne</span> : réservée pour des intéractions (\"Retour en haut de page\", \"Référence au commentaire 14\"...),\n\t</li>\n\t<li>\n\t\t<span class=\"highlighting\">évitement</span> : plus de détails dans l'article <a href=\"http://www.alsacreations.com/article/lire/572-Les-liens-d-evitement.html\" title=\"Les liens d'évitement - Alsacreations\">Les liens d'évitement - Alsacreations</a>.\n\t</li>\n</ul> \n<p>Bien que la finalité de chaque utilisation soit différente, le mécanisme de mise en place est identique.</p>\n\n<h3>La balise a et l'attribut name</h3>\n\n<p>Dans les débuts, il n'y avait qu'une façon d'atteindre une zone précise d'un document : le couple balise <samp>&lt;a&gt;</samp> et attribut <samp>name</samp>. Prenons l'exemple d'une phrase présente plus haut dans cet article et voyons comment l'ancrer de manière à y accéder par un lien.</p>\n\n<p>Pour atteindre l'ancre « adefinition » :</p>\n<pre class=\"prettyprint linenums lang-html\">\n&lt;a name=\"adefinition\"&gt;*&lt;/a&gt; tel qu'il fonctionne de manière standard depuis sa création.\n</pre>\n\n<p>On utilise le lien :</p>\n<pre class=\"prettyprint linenums lang-html\">\nCliquer sur &lt;a href=\"la-navigation-interne-dans-une-page-web/#adefinition\"&gt;Atteindre&lt;/a&gt;\n</pre>\n\n<p><span class=\"highlighting\">Résultat :</span> Cliquer sur <a href=\"la-navigation-interne-dans-une-page-web/#adefinition\">Atteindre</a></p>\n\n<p class=\"warning\">Gardez à l'esprit qu'en xHTML ou en HTML5 l'attribut name sur la balise <samp>&lt;a&gt;</samp> est obsolète.</p>\n\n<p class=\"eye-catching\">Note : comme vous pouvez le constater dans notre exemple, la phrase est cachée par le menu. Malheureusement l'ancre ne permet pas de définir une valeur de décalage (offset). On peut facilement envisager d'ancrer un élément plus haut que la zone véritablement souhaitée pour la rendre bien lisible mais QUID de l'accessibilité et de la maintenance des ancres à posteriori.</p>\n\n<h3>L'attribut id comme ancre</h3>\n\n<p>Puis très vite les navigateurs se sont nativement affranchis de la balise <samp>&lt;a name=\"\"&gt;</samp> en permettant de cibler n'importe quel élément HTML. Pour cela —parce que l'attribut <samp>name</samp> n'est pas disponible sur toutes les balises— on utilise l'attribut <samp>id</samp> disponible sur toutes les balises.</p>\n\n<p>Pour atteindre l'ancre « pdefinition » :</p>\n<pre class=\"prettyprint linenums lang-html\">\n&lt;p id=\"pdefinition\" class=\"eye-catching\"&gt;\n\t&lt;a name=\"adefinition\"&gt;*&lt;/a&gt; tel qu'il fonctionne de manière standard depuis sa création.\n&lt;/p&gt;\n</pre>\n\n<p>On utilise le lien :</p>\n<pre class=\"prettyprint linenums lang-html\">\nCliquer sur &lt;a href=\"la-navigation-interne-dans-une-page-web/#pdefinition\"&gt;Atteindre&lt;/a&gt;\n</pre>\n\n<p><span class=\"highlighting\">Résultat :</span> Cliquer sur <a href=\"la-navigation-interne-dans-une-page-web/#pdefinition\">Atteindre</a></p>\n\n<p class=\"eye-catching\">Note : vous remarquerez que le système natif impose d'ajouter l'ancre à l'url. Cela peut s'avérer être un avantage pour communiquer l'adresse et la position précise d'un commentaire en un seul lien cependant pour les mécanismes AJAX utilisant le détournement de l'ancre (la partie hash de l'adresse se situant après le « # ») cela est un handicape certain.</p>\n\n<h2>Les ancres HTML et le JavaScript</h2>\n\n<p>A présent voyons quelques exemples de manipulation d'ancres avec du JavaScript.</p>\n\n<h3>Décaller l'affichage de l'ancre du haut du navigateur</h3>\n\n<p>Comme noté précédemment, il serait possible de simplement placer son ancre plus haut que l'endroit réel où l'on souhaite arriver. Cependant pour des questions d'accessibilité, il vaut mieux que l'élément ancré soit réellement l'élément que l'on souhaite afficher.</p>\n\n<p>Le script JavaScript ci-dessous va vous permettre de décaler l'affichage de vos ancres :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n\t// Pour tous les liens commençant par #.\n\t$(\"a[href^='#']\").click(function (e) {\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\n\t\te.preventDefault(); \n\t\t\t\t\n\t\t// On ajoute le hash dans l'url.\n\t\twindow.location.hash = $(this).attr(\"href\");\n\t\t\n\t\t// Une fois en place on va forcer l'affichage 40 pixels plus haut.\n\t\t$(window).scrollTop( $(window).scrollTop() - 40 );\n\t});\n</pre>\n\n<p><span class=\"highlighting\">Exemple :</span> <a id=\"ddefinition\" href=\"#pdefinition\" title=\"Atteindre #pdefinition avec un offset de -40\">Atteindre #pdefinition avec un offset de -40</a></p>\n\n<h3>Faire défiler la page jusqu'à une ancre</h3>\n\n<p>Nous allons rajouter un effet pour surcharger le comportement de base. La page ne sautera plus du lien vers l'ancre, mais accompagnera l'utilisateur jusqu'à l'ancre ce qui lui permettra de ne pas être perdu. Il pourra ainsi appréhender où se situe la nouvelle zone dans la page courante.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n\t// Pour tous les liens commençant par #.\n\t$(\"a[href^='#']\").click(function (e) {\n\t\tvar \n\t\t\tyPos,\n\t\t\tyInitPos,\n\t\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\n\t\t\t\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\n\t\te.preventDefault(); \n\t\t\n\t\tyInitPos = $(window).scrollTop();\n\t\t\n\t\t// On ajoute le hash dans l'url.\n\t\twindow.location.hash = $(this).attr(\"href\");\n\t\t\n\t\t// Comme il est possible que l'ajout du hash perturbe le défilement, on va forcer le scrollTop à son endroit inital.\n\t\t$(window).scrollTop(yInitPos);\n\t\t\n\t\t// On cible manuellement l'ancre pour en extraire sa position.\n\t\t// Si c'est un ID on l'obtient.\n\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\n\n\t\t// Sinon on cherche l'ancre dans le name d'un a.\n\t\tif (target.length == 0) {\n\t\t\ttarget = ($(\"a[name=\" + $(this).attr(\"href\").replace(/#/gi,\"\") + \"]:first\"))\n\t\t}\n\t\t\n\t\t// Si on a trouvé un name ou un id, on défile.\n\t\tif (target.length == 1) {\n\t\t\tyPos = target.offset().top; // Position de l'ancre.\n\t\t\n\t\t\t// On anime le défilement jusqu'à l'ancre.\n\t\t\t$('html,body').animate({ scrollTop: yPos - 40 }, 1000); // On décale de 40 pixels l'affichage pour ne pas coller le bord haut de l'affichage du navigateur et on défile en 1 seconde jusqu'à l'ancre.\n\t\t}\n\t});\n</pre>\n\n<p><span class=\"highlighting\">Exemple :</span></p>\n<ul>\n\t<li>Sur id : <a id=\"edefinition\" href=\"#pdefinition\" title=\"Défiler juqu'à #pdefinition\">Défiler juqu'à #pdefinition</a></li>\n\t<li>Sur name : <a id=\"fdefinition\" href=\"#adefinition\" title=\"Défiler juqu'à #adefinition\">Défiler juqu'à #adefinition</a></li>\n</ul>\n\n<h4>Variante : ne pas conserver le hash dans l'url</h4>\n\n<p>Cela permet aux d'applications web avec de l'AJAX se servant du hash pour la navigation globale de ne pas perturber l'adresse. Il suffit de supprimer les lignes suivantes de l'exemple précédent :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n\t...\n\tyInitPos,\n\t...\n\tyInitPos = $(window).scrollTop();\n\twindow.location.hash = $(this).attr(\"href\");\n\t$(window).scrollTop(yInitPos);\n</pre>\n\n<h4>Variante : ne pas conserver le hash dans l'url sans défilement</h4>\n\n<p>Au cas où vous préféreriez simplement annuler l'ajout du hash, mais conserver le comportement initial (sans défilement) il suffit de remplacer la ligne :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n\t$('html,body').animate({ scrollTop: yPos - 40 }, 1000);\n</pre>\n\n<p>par la ligne</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n\t$(window).scrollTop(yPos - 40);\n</pre>\n\n<p>Quoi de plus simple :)</p>\n\n<h3>Problème d'ancre avec la balise base</h3>\n\n<p>Si vous ne la connaissez pas encore, sachez que la balise <samp>&lt;base&gt;</samp> permet de choisir la référence d'une url dans le cas d'un appel relatif à une page dans un lien. Elle est réellement pratique pour les fichiers appelés par réécriture d'url incluant donc de faux sous répertoires.</p>\n\n<h4>Résoudre un problème...</h4>\n\n<p>Voyez plutôt l'exemple :</p>\n\n<div class=\"worst-practice\">\n\t<div class=\"title\">Problème de chemin relatif avec réécriture d'url</div>\n\t<div class=\"content\">\n\t\t<p>Je décide de ne pas utiliser d'url absolue car mon site peut changer d'adresse racine. Je n'ai pas envie de changer tous mes liens en base de données si changement d'adresse par exemple. J'utilise donc l'url relative.</p>\n\t\t<p>À cette adresse <span class=\"highlighting\">http://blog.haeresis.fr/</span>, je dois inclure ma CSS comme suit :</p>\n<pre class=\"prettyprint linenums lang-html\">\n&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"css/common.css\" media=\"screen\" /&gt;\n</pre>\n\t\t<p>Et à cette adresse <span class=\"highlighting\">http://blog.haeresis.fr/categories/</span>, je dois inclure ma CSS comme suit :</p>\n<pre class=\"prettyprint linenums lang-html\">\n&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"../css/common.css\" media=\"screen\" /&gt;\n</pre>\n\t\t<p>Le problème intervient donc dès lors que l'inclusion de <samp>&lt;link&gt;</samp> est dans un fichier commun à toutes les pages. Avec la réécriture d'url, je n'ai aucune idée du niveau d'arborescence qui sépare mon fichier de la page courante.</p>\n\t</div>\n</div>\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple de résolution avec base</div>\n\t<div class=\"content\">\n\t\t<p>Grâce à l'utilisation de <samp>&lt;base&gt;</samp> avant tous mes liens je peux définir la base de l'appel d'un fichier qui se fait initialement depuis le dossier de l'adresse courante de manière identique à toutes les pages (quel que soit le niveau d'arborescence) et ceux pour tous les liens de la page.</p>\n<pre class=\"prettyprint linenums lang-html\">\n&lt;base href=\"http://blog.haeresis.fr/\" /&gt;\n&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"css/common.css\" media=\"screen\" /&gt;\n</pre>\n\t\t<p>Cela n'empêchera pas de devoir changer la base s'il y a changement d'adresse du site. Mais le travail est alors minime et les liens relatifs enregistrés en base (ceux d'un article par exemple) marcheront partout, quel que soit la profondeur de l'adresse de l'article.</p>\n\t</div>\n</div>\n\n<h4>...peut en apporter un autre</h4>\n\n<p>Tout semble aller pour le mieux dans le meilleur des mondes ; mais revenons à notre lien <samp>&lt;a href=\"#pdefinition\"&gt;</samp>. Il pointe maintenant vers la base du site et non plus vers la page courante à cause de <samp>&lt;base&gt;</samp> ! Cela a pour effet de bord de ne pas atteindre l'ancre dans la page mais de chercher à atteindre l'ancre à l'adresse de &lt;base&gt;. Il faut alors compléter son lien pour se ré-accorder à la base du site.</p>\n\n<div class=\"worst-practice\">\n\t<div class=\"title\">Mise en évidence de l'effet de bord</div>\n\t<div class=\"content\">\n\t\t<p>Nous sommes à l'adresse : <span class=\"highlighting\">http://blog.haeresis.fr/la-navigation-interne-dans-une-page-web/</span></p>\n<pre class=\"prettyprint linenums lang-html\">\n&lt;head&gt;\n\t...\n\t&lt;base href=\"http://blog.haeresis.fr/\" /&gt;\n\t...\n&lt;/head&gt;\n&lt;body&gt;\n\t...\n\t&lt;a href=\"#pdefinition\" title=\"Atteindre l'ancre\"&gt;Atteindre l'ancre&lt;a&gt; <!-- Ne marche plus car la nouvelle base n'est plus la page courante. -->\n\t&lt;a href=\"la-navigation-interne-dans-une-page-web/#pdefinition\" title=\"Atteindre l'ancre\"&gt;Atteindre l'ancre&lt;a&gt; <!-- Marche puisque base + a concorde avec la page courante. -->\n\t...\n&lt;/body&gt;\n</pre>\n\t\t<p><span class=\"highlighting\">Problème : </span> <a href=\"#pdefinition\" title=\"Atteindre l'ancre\">Cette ancre ne marche pas à cause de la base du site</a></p>\n\t</div>\n</div>\n<div class=\"best-practice\">\n\t<div class=\"title\">Un peu de JavaScript et on oublit</div>\n\t<div class=\"content\">\n\t\t<p>Si vous voulez absolument éviter de réécrire l'url de la page courante (parce que si elle change d'adresse, le monde s'éteindra) vous pouvez remplacer :</p>\n<pre class=\"prettyprint linenums lang-html\">\n\t&lt;a href=\"#pdefinition\" title=\"Ancre\"&gt;Ancre&lt;a&gt;\n</pre>\n\t\t<p>par :</p>\n<pre class=\"prettyprint linenums lang-html\">\n\t&lt;a href=\"#pdefinition\" onclick=\"window.location.hash = 'pdefinition'; return false\" title=\"Ancre\"&gt;Ancre&lt;/a&gt;\n</pre>\n\t\t<p>ou automatiser le système avec jQuery :</p>\n<pre class=\"prettyprint linenums lang-javascript\">\n\t// Pour tous les liens commençant par #.\n\t$(\"a[href^='#']\").click(function (e) {\n\t\te.preventDefault(); // On annule le comportement initial.\n\t\twindow.location.hash = $(this).attr(\"href\"); // On change le hash de l'adresse.\n\t});\n</pre>\n\t\t<p class=\"eye-catching\">Note : Vous me direz que sans JavaScript on retournera à l'accueil et vous aurez raison...</p>\n\t</div>\n</div>\n\n<h2>En conclusion</h2>\n\n<p>La simplicité avec laquelle on peut atteindre une ancre s'envole dès l'instant où l'on souhaite faire plus que cela. Ainsi utiliser les ancres avec la balise base, décaler l'offset d'une ancre ou animer la page jusqu'à l'ancre sont autant de tâches réalisables mais qui nécessitent un minimum de connaissances et de précautions.</p>", "dates" : { "published" : { "$date" : 1366390140000 }, "updated" : [] }, "script" : "$(document).ready(function () {\r\n\t$(\"#edefinition, #fdefinition\").click(function (e) {\r\n\t\t\tvar \r\n\t\t\tyPos,\r\n\t\t\tyInitPos,\r\n\t\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\r\n\t\t\t\r\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\r\n\t\te.preventDefault(); \r\n\t\t\r\n\t\tyInitPos = $(window).scrollTop();\r\n\t\t\r\n\t\t// On ajoute le hash dans l'url.\r\n\t\twindow.location.hash = $(this).attr(\"href\");\r\n\t\t\r\n\t\t// Comme il est possible que l'ajout du hash perturbe le défilement, on va forcer le scrollTop à son endroit inital\r\n\t\t$(window).scrollTop(yInitPos);\r\n\t\t\r\n\t\t// On cible manuellement l'ancre pour en extraire sa position.\r\n\t\t// Si c'est un ID on l'obtient.\r\n\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\r\n\r\n\t\t// Sinon on cherche l'ancre\r\n\t\tif (target.length == 0) {\r\n\t\t\ttarget = ($(\"a[name=\" + $(this).attr(\"href\").replace(/#/gi,\"\") + \"]:first\"))\r\n\t\t}\r\n\t\t\r\n\t\t// Si on a eu un name ou un id, on défile.\r\n\t\tif (target.length == 1) {\r\n\t\t\tyPos = target.offset().top; // Position de l'ancre.\r\n\t\t\r\n\t\t\t// On anime le défilement jusqu'à l'ancre.\r\n\t\t\t$('html,body').animate({ scrollTop: yPos - 40 }, 1000); // On décale de 40 pixels l'affichage pour ne pas coller le bord haut de l'affichage du navigateur et on défile en 1 seconde jusqu'à l'ancre.\r\n\t\t}\r\n\t});\r\n\t$(\"#ddefinition\").click(function (e) {\r\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\r\n\t\te.preventDefault(); \r\n\t\t\t\t\r\n\t\t// On ajoute le hash dans l'url.\r\n\t\twindow.location.hash = $(this).attr(\"href\");\r\n\t\t\r\n\t\t// Une fois en place on va forcer l'affichage 40 pixel plus haut.\r\n\t\t$(window).scrollTop( $(window).scrollTop() - 40 );\r\n\t});\r\n});", "title" : "La <span>navigation</span> interne dans une <span>page</span> web", "urn" : "la-navigation-interne-dans-une-page-web" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a7" }, "cache" : { "comment" : { "number" : 3 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c6" }, { "$oid" : "5310456355dfd5f7698d48c1" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48c2" }, { "$oid" : "5310456355dfd5f7698d48c0" } ], "content" : "<p>Alors que certains s'en réjouissent et que d'autres le craignent, le support des vieux navigateurs tel que Internet Explorer 6, Internet Explorer 7 et Internet Explorer 8 est terminé pour jQuery...</p>\n\n<p>...et cela dès aujourd'hui puisque jQuery 2.0 est arrivé. Alignons quelques faits pour aider à juger l'utilité de la chose.</p>\n\n<h2>La part des navigateurs en Mars 2013</h2>\n\n<p>Celle-ci concerne le monde entier :</p>\n\n<ul>\n\t<li>Chrome fait <span class=\"highlighting\">38%</span></li>\n\t<li>Firefox fait <span class=\"highlighting\">20%</span></li> \n\t<li>Safari fait <span class=\"highlighting\">8%</span></li>\n\t<li>Opera fait <span class=\"highlighting\">1%</span></li>\n\t<li>IE10 fait <span class=\"highlighting\">2%</span></li>\n\t<li>IE9 fait <span class=\"highlighting\">16%</span></li>\n\t<li>IE8 fait <span class=\"highlighting\">10%</span></li>\n\t<li>IE7 fait <span class=\"highlighting\">0.6%</span></li>\n\t<li>IE6 fait <span class=\"highlighting\">0.0...%</span></li>\n</ul>\n\n<p class=\"eye-catching\">\n\tSource : <a href=\"http://gs.statcounter.com/#browser_version_partially_combined-ww-monthly-201303-201303-bar\" title=\"Source de la part des navigateurs en Mars 2013\">StatCounter.com</a>\n</p>\n\n<h2>Le support de jQuery</h2>\n\n<h3>Support et poids de jQuery 1.9.1</h3>\n\n<p>La version 1.9.1 de jQuery supporte IE6/7/8/9/10, Chrome, Firefox, Safari, Opera. Elle supporte donc <span class=\"highlighting\">95.6%</span> des navigateurs (et surement d'autres).</p>\n<p>Elle pèse en production <span class=\"highlighting\">90.4kB</span>.</p>\n\n<p class=\"eye-catching\">\n\tSource : <a href=\"http://code.jquery.com/jquery-1.9.1.min.js\" title=\"Source de la production jQuery1.9.1\">jquery-1.9.1.min.js</a>\n</p>\n\n<h3>Support et poids de jQuery 2.0</h3>\n\n<p>La version 2.0 supporte IE9/10, Chrome, Firefox, Safari, Opera.\nElle supporte donc <span class=\"highlighting\">85%</span> des navigateurs (et surement d'autres en moins).</p>\n<p>Elle pèse en production <span class=\"highlighting\">81.1kB</span>.</p>\n\n<p class=\"eye-catching\">\n\tSource : <a href=\"http://code.jquery.com/jquery-2.0.0.min.js\" title=\"Source de la production jQuery2.0\">jquery-2.0.0.min.js</a>\n</p>\n\n<h2>Conparaison poids/support de jQuery 1.9.1 et 2.0</h2>\n\n<p>La librairie jQuery 2.0 de production est <span class=\"highlighting\">9%</span> (et pas 12%) plus légère que jQuery 1.9.1</p>\n<p>La librairie jQuery 2.0 supporte <span class=\"highlighting\">9%</span> d'utilisateurs en moins que jQuery 1.9.1</p>\n\n<h2>Que faut-il en penser ?</h2>\n\n<p>Pour ma part, cela soulève trois questions :</p>\n\n<ul class=\"highlighting\">\n\t<li>N'est-il pas encore tôt pour balayer le support IE8 ? (10% des navigateurs)</li>\n\t<li>N'est-il pas tant d'arrêter le support IE6 et IE7 ? (moins de 1% des navigateurs)</li>\n\t<li>Supporter 9% d'utilisateurs en moins pour être 9% moins lourds est-il justifié ?</li>\n</ul>\n\n<p>Et vous ? Que pensez-vous de l'arrêt du support IE6/7/8 de jQuery ?</p>", "dates" : { "published" : { "$date" : 1366458540000 }, "updated" : [] }, "title" : "<span>jQuery</span> 2.0 ne supporte plus <span>IE6, IE7 et IE8</span>", "urn" : "jquery-2-ne-supporte-plus-ie6-ie7-et-ie8" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a8" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48b8" } ], "content" : "<p>N'avez-vous jamais rêvé d'utiliser jQuery dans vos traitements serveur ? N'avez-vous jamais cherché un équivalent pour PHP ou C# dans l'espoir de manipuler aisément les templates HTML de vos cher moteurs de template avant envoie côté client ? Êtes-vous tombé amoureux de JavaScript ? Ce langage étrange qui semble basique, mais qui est finalement objet, sans type mais finalement typé, procédurale mais finalement événementiel, mono-thread mais finalement multi-traitement asynchrone...</p>\n\n<p>Et si vous réalisiez vos développements Back-end en JavaScript ? C'est possible avec Node.js !</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title highlighting\">À la découverte de Node.js sous Windows</div>\n\t<nav class=\"content\">\n\t\t<ol>\n\t\t\t<li><a class=\"highlighting\" href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Qu'est-ce que Node.js ?</a></li>\n\t\t\t<li><a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installation de Node.js</a></li>\n\t\t\t<li><a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">Simple application web avec Node.js</a></li>\n\t\t\t<li><a href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">Utiliser jQuery côté serveur avec Node.js</a></li>\n\t\t\t<li>Une architecture MVC2 avec Node.js</li>\n\t\t\t<li>Appels client asynchrones avec Node.js</li>\n\t\t\t<li>Un moteur de template avec Node.js</li>\n\t\t\t<li>Des sites multilingues avec Node.js</li>\n\t\t\t<li>La base de données MySQL et Node.js</li>\n\t\t</ol>\n\t</nav>\n</div>\n\n<h2>Avantages de Node.js</h2>\n\n<p>Node.js ? Oui mais pourquoi ? Voici une petite liste non-exhaustive des points forts de Node.js.</p>\n<ul>\n\t<li>Un seul langage Front-end et Back-end, le langage est connu de tous (au moins des développeurs Front-end) et rien est à réapprendre (peut-être une mise à niveau pour les Back-end).</li>\n\t<li>Open Source sous licence MIT.</li>\n\t<li>Projet soutenu par de grandes sociétés comme Microsoft et Google.</li>\n\t<li>Un gestionnaire de modules performant et très simple.</li>\n\t<li>Pas de serveur web lourd (voir plus loin).</li>\n\t<li>Mono-thread et événementiel avec une grande performance.</li>\n\t<li>Simplicité de mise en oeuvre (si si).</li>\n\t<li>Développement temps réel pour de vrais applications web grâce à socket.io.</li>\n\t<li>Manipulation de DOM côté serveur simple (jQuery).</li>\n\t<li>...</li>\n</ul>\n\n<p>Bref, passons à la suite.</p>\n\n<h2>Passer de Apache/PHP à Node.js</h2>\n\n<p>Je devine déjà quelles sont vos premières interrogations. Comment diable utiliser JavaScript pour faire du développement côté serveur ? Je veux bien mais :</p>\n\n<h3>Questions existentielles</h3>\n\n<ul>\n\t<li>Comment je fais de la lecture/écriture de fichier ? C'est impossible en JavaScript.</li>\n\t<li>Comment je fais de l'inclusion de fichier ? C'est impossible en JavaScript.</li>\n\t<li>Comment un setInterval ou un setTimeout peuvent marcher côté serveur ?</li>\n\t<li>Comment ça fonctionne avec Apache ? IIS ?</li>\n\t<li>Moi je veux bien, mais ça se débogue ?</li>\n\t<li>...</li>\n</ul>\n\n<p>J'aurais dit la même chose il y a quelques temps. Essayons d'y voir plus clair.</p>\n\n<p>Le JavaScript que vous avez l'habitude de côtoyer dans vos navigateurs, chers intégrateurs, n'est qu'une partie de l'iceberg. Il n'est pas interprété de la même manière en fonction des navigateurs car chacun met à disposition des briques de JavaScript pour le développement web. Cependant tout le monde s'accorde à dire que permettre au JavaScript de manipuler des fichiers coté client ce n'est pas très nette, et tout le monde s'accorde à dire que cibler un noeud HTML avec <samp>document.getElementById</samp> c'est la moindre des choses. Sachez que si l'implémentation de JavaScript est si uniforme entre différents interpréteurs c'est parce qu'ils suivent tous les mêmes directives : celle de ECMA International qui définie les standards du « ECMAScript scripting langage » alias notre bon vieux JavaScript. Vous trouverez plus de détails sur l'historique de ECMAScript/JavaScript sur la toile (et découvrirez que certaines implémentations connues de tous ne sont pas des standards).</p>\n\n<figure>\n\t<figcaption>Le JavaScript des navigateurs et celui de Node.js</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/js-browser-vs-node.png\" alt=\"Le JavaScript des navigateurs et celui de Node.js\" width=\"618\" height=\"428\" style=\"width: 94%;height: auto;\" />\n</figure>\n\n<p>Tout en suivant au mieux les directives de <a href=\"http://www.ecma-international.org/default.htm\" title=\"Site de l'ECMA International\">ECMA International</a>, il est donc tout à fait possible de développer un interpréteur JavaScript pour une utilisation du langage hors d'un navigateur qui pourrait faire appel à des fichiers dans des fichiers, lire et écrire dans des fichiers, etc... Cet interpréteur s'appelle Node.js. Cependant, Node.js n'a pas réinventé la roue, il utilise comme socle le même interpréteur JavaScript que celui qu'utilise Google Chrome le « <a href=\"https://code.google.com/p/v8/\" title=\"Site du projet V8 JavaScript Engine\">V8 JavaScript Engine</a> ». Par exemple, là où la variable mère du socle du moteur « JavaScript V8 Engine » sous Chrome est <samp>window</samp>, celui de Node.js (même socle) est <samp>global</samp></p>\n\n<h3>Architecture web avec Node.js</h3>\n\n<p>Comment faire fonctionner Apache ou IIS avec Node.js ? C'est très simple, il suffit de ne pas les faire fonctionner du tout. En fait, avec Node.js, vous n'en avez pas besoin. Il va falloir re-créer vous-même un serveur web. Hola... il est possible que vous n'ayez jamais mis les mains dans Apache bien que vous ayez quelques notions d'échanges Client/Serveur alors de là à développer votre serveur web... Et bien dite vous que c'est très simple et que ça sera l'occasion de bien comprendre les rôles de PHP, Apache, de vos pages en PHP, etc...</p>\n\n<figure>\n\t<figcaption>Architecture PHP vs Node.js</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/php-vs-node.png\" alt=\"Architecture PHP vs Node.js\" width=\"618\" height=\"400\" style=\"width: 94%;height: auto;\" />\n</figure>\n\n<h2>En résumé</h2>\n\n<p>Finalement Node.js n'est qu'un interpréteur JavaScript enrichissant celui-ci avec diverses API (appelées module) qui permet d'exécuter des fichier .js (Ca remplace donc aisément des scripts PHP, Ruby, Python, Bash...).</p>\n\n<p>Pour faire un site web, la première étape sera donc de créer un serveur web. Mais si on commençait par le commencement ? <a href=\"http://blog.haeresis.fr/installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installer Node.js</a> !</p>", "dates" : { "published" : { "$date" : 1366812540000 }, "updated" : [] }, "title" : "<span>Développer</span> en <span>JavaScript</span> côté <span>serveur</span> avec <span>Node.js</span>", "urn" : "developper-en-javascript-cote-serveur-avec-nodejs" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a9" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c9" }, { "$oid" : "5310456355dfd5f7698d48cb" }, { "$oid" : "5310456355dfd5f7698d48ca" } ], "content" : "<p>Avez-vous déjà ressenti de la Flemme empathique ? Mais qu'est-ce que c'est au juste la Flemme empathique ou Flemme par empathie. Je ne sais pas réellement le définir ; ça s'apparente à \"ne pas vouloir déranger\" ou encore ça signifie ce que ça signifie : avoir la flemme à la place de quelqu'un.</p>\n\n<h2>Quelques exemples</h2>\n\n<p>Voici quelques mises en situation pour comprendre le principe :</p>\n\n<h3>La bouteille d'eau</h3>\n\n<p>Votre collègue passe à côté de vous et voit votre bouteille d'eau vide. Il va à la source remplir la sienne, à l'accueil, à trois portes d'ici dans une fontaine où il faut \"plier\" sa bouteille pour la remplir plus ou moins. Il vous interpelle et vous dit « Je te remplis ta bouteille ? ».</p>\n\n<p>Vous ne lui avez rien demandé, ça fait une heure que vous n'avez pas forcément soif mais qu'à la réflexion un peu d'eau ne serait pas de refus.</p>\n\n<p>Mais y a ce code à faire marcher, vous y êtes presque. Remplir une bouteille d'eau nécessiterait de se lever, d'ouvrir les portes, de peut-être se faire distraire au passage, de lutter avec la fontaine... bref... \"la flemme\", ça attendra ; et vous répondez seulement pour je ne sais quelle raison : « Non merci, ça ira ».</p>\n\n<p><span class=\"highlighting\">Et là... vous avez probablement été frappé par la Flemme empathique !</span> Ca ne dérangeait absolument pas votre collègue de remplir la bouteille, sinon il ne l'aurait pas proposé. Vous, ça ne vous aurait rien coûté, vous aviez juste à continuer ce que vous faisiez. « J'ai pas envie de le déranger ». Ouais... Flemme empathique :)</p>\n\n<h3>La question à 10 sous</h3>\n\n<p>Vous exposez une question à quelqu'un dont vous n'avez pas la réponse. On sait jamais des fois qu'il sache. Au dela de ça, vous savez où trouver la réponse, mais il faut se déplacer quelque part par exemple pour l'obtenir, ou sortir son portable et —avec le réseau du coin— mettre 5 minutes à trouver une réponse qui sera, vu la nature particulière de la question, incomplète. Votre interlocuteur vous dit que justement il va à cet endroit demain pour une raison X, qu'ils ont surement la réponse et vous dit : « Je leur poserai la question pour toi si tu veux ? ». <span class=\"highlighting\">Et là... probablement frappé par la Flemme empathique,</span> vous répondez : « Non, c'est pas grâve ne t'embête pas ». Quoi ?! Mais c'était qu'une simple question à poser.</p>\n\n<h2>Palier au problème</h2>\n\n<p>En fait on pourrait se dire que c'est dramatique... mais pas vraiment. Dans notre premier cas le collègue à juste à répondre : « Non, mais ça ne me dérange pas, sinon je n'aurai pas demandé » pour obtenir aisément un « Bon, puisque tu insistes ! » et dans notre second cas à dire « Je demanderai quand même car la réponse m'intéresse aussi ».</p>\n\n<p class=\"eye-catching\">Si vous repérez des personnes souffrant de Flemme empathique : <span class=\"highlighting\">il est de votre devoir d'insister</span> !</p>\n\n<h2>Attention aux faux-positif</h2>\n\n<p>Il ne faut cependant pas négliger le cas du faux-positif. Et oui, il est aussi possible que dans notre premier cas la personne ai répondu « Non merci, ça ira » seulement parce qu'elle avait presque corrigé l'erreur dans son algorithme et que son collègue vient de lui faire perdre 10 minutes en la coupant. On pourrait alors qualifier ça de « Psycopathie refoulé ». C'est vrai, il n'aura pourtant pas tué son collègue !</p>", "dates" : { "published" : { "$date" : 1366974000000 }, "updated" : [] }, "title" : "La <span>Flemme</span> empathique ou Flemme par <span>empathie</span>", "urn" : "la-flemme-empathique-ou-flemme-par-empathie" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71aa" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48c0" } ], "content" : "<p>Je vous propose à travers cet article de découvrir Node.js pour le système d'exploitation Windows 7. Node.js est multi-plateforme et s'exécute tout aussi bien sous Unix que sous Mac. Mais QUID de Windows ? Vous allez voir que c'est assez trivial même si les modules ne fonctionnent pas (encore) tous de base. À travers une suite d'article vous verrez qu'il est tout à fait possible de développer des sites web et applications web très interactives et avec une grande vélocité d'exécution le tout avec JavaScript ! Je vais vous prouvez que Node.js, ce n'est pas seulement réservé aux gros sites dynamiques mais que des petits sites vitrines sont tout aussi bien en Node.js.</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title highlighting\">À la découverte de Node.js sous Windows</div>\n\t<nav class=\"content\">\n\t\t<ol>\n\t\t\t<li><a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Qu'est-ce que Node.js ?</a></li>\n\t\t\t<li><a class=\"highlighting\" href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installation de Node.js</a></li>\n\t\t\t<li><a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">Simple application web avec Node.js</a></li>\n\t\t\t<li><a href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">Utiliser jQuery côté serveur avec Node.js</a></li>\n\t\t\t<li>Une architecture MVC2 avec Node.js</li>\n\t\t\t<li>Appels client asynchrones avec Node.js</li>\n\t\t\t<li>Un moteur de template avec Node.js</li>\n\t\t\t<li>Des sites multilingues avec Node.js</li>\n\t\t\t<li>La base de données MySQL et Node.js</li>\n\t\t</ol>\n\t</nav>\n</div>\n\n<h2>Télécharger Node.js pour Windows 7</h2>\n\n<p>Je passe les <a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">présentations qui ont déjà été faites dans cet article</a> et ajoute que même si cet article a été réalisé avec des tests parallèles sous Seven, je ne vois pas pourquoi il ne serait pas valable pour Windows 8 (mais cela est à confirmer par d'autres dans les commentaires).</p>\n\n<h3>Le site officiel de Node.js</h3>\n\n<p>Site du projet : <a href=\"http://nodejs.org/\" title=\"Site du projet Node.js\">nodejs.org</a></p>\n\n<div class=\"center\">\n\t<a href=\"http://nodejs.org/images/logos/nodejs-2560x1440.png\" title=\"Logo Node.js en HD\"><img src=\"http://nodejs.org/images/logos/nodejs-1024x768.png\" alt=\"Le logo Node.js\" width=\"1024\" height=\"768\" style=\"width: 75%;height: auto;\" /></a>\n</div>\n\n<p>Avant de nous jeter sur la partie « Download », jetons un œil aux parties du site que je ne vais pas détailler plus dans cet article. Vous pourrez apprendre à l'accueil (<a href=\"http://nodejs.org/\" title=\"node.js\">Home</a>) que Microsoft, Google, Yahoo!, LinkedIn, Ebay... et bien d'autres utilisent d'ores et déjà Node.js, découvrir le projet dans <a href=\"http://nodejs.org/about/\" title=\"node.js\">About</a> et le suivre avec le <a href=\"http://blog.nodejs.org/\" title=\"node.js\">Node.js Blog</a> ainsi que la <a href=\"http://nodejs.org/community/\" title=\"node.js\">Community</a>. Vous pourrez même trouver du travail dans la partie <a href=\"http://jobs.nodejs.org/a/jobs/find-jobs\" title=\"node.js\">Jobs</a>. Pour finir un jolie fond d'écran traine sur la page <a href=\"http://nodejs.org/logos/\" title=\"node.js\">Logos</a>.</p>\n\n<h3>Intaller node et npm</h3>\n\n<p>Depuis l'accueil rendez-vous donc dans <a href=\"http://nodejs.org/download/\" title=\"node.js\">Download</a> pour obtenir au choix le <span class=\"eye-catching\">Windows Installer (.msi)</span> et le <span class=\"eye-catching\">Windows Binary (.exe)</span> en 32/64 bit ou cliquez simplement sur « Install » qui choisira le zip le plus adapté à votre système (pour ma part il me propose le fichier <span class=\"eye-catching\">node-v0.10.5-x64.msi</span>.</p>\n\n<figure>\n\t<figcaption>Liste des composants de l'installeur Node.js</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-install.png\" alt=\"Liste des composants de l'installeur Node.js\" width=\"495\" height=\"362\" style=\"width: 75.2%;height: auto;\" />\n</figure>\n\n<p>Exécutez votre fichier, acceptez la licence, déposez-le dans \"Program files\" et ce package va vous installer :</p>\n\n<ul>\n\t<li><span class=\"highlighting\">L'exécuteur node.js</span> : le programme permettant d'exécuter des fichiers .js (comme php.exe le ferait avec des .php).</li>\n\t<li><span class=\"highlighting\">Le module npm (Node Package Manager)</span> : un gestionnaire de modules qui va vous permettre simplement d'ajouter et retirer les librairies dont vous aurez besoin pour vos applications (pas de surplus, seulement le nécessaire donc).</li>\n\t<li><span class=\"highlighting\">Un raccourci vers la documentation en ligne</span>.</li>\n\t<li><span class=\"highlighting\">Des variables d'environnements</span> : Ainsi vous pourrez exécuter les commandes <samp>node</samp> et <samp>npm</samp> dans votre invité de commande.</li>\n</ul>\n\n<figure>\n\t<figcaption>Dossier de Node.js après installation</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-folder.png\" alt=\"Dossier de Node.js après installation\" width=\"650\" height=\"274\" style=\"width: 98.7%;height: auto;\" />\n</figure>\n\n<p>Quand l'installeur aura fini vous aurez un joli dossier d'environ 12Mo contenant entre autre node.js et npm.cmd qui seront appelables depuis n'importe quel dossier avec les commandes <samp>node</samp> et <samp>npm</samp>.</p>\n\n<h3>Compiler les modules natifs sous Windows</h3>\n\n<p>Pour la suite de cet article, il n'est pas nécessaire de se préoccuper de ce point. Vous pourrez vous en préoccuper plus tard et d'ores et déjà commencer à développer ! Cependant, si vous voulez exploiter Node.js sans aucun soucis et pouvoir compiler les modules écrits en langage natif (pas en JavaScript) il va falloir <a href=\"./utiliser-jquery-avec-nodejs-sous-windows/#prerequis\" title=\"Python et Microsoft Visual Studio comme pré-requis Node.js sous Windows\">installer Python et Microsoft Visual Studio</a>.</p>\n\n<h2>Un Hello world en Node.js</h2>\n\n<p>Juste après l'installation, tentons notre premier « Hello World ». Tout d'abord, définissez vous un endroit ou installer vos projets Node.js. Pour ma part j'ai décidé de placer tous mes projets dans <samp>C:\\nodejs</samp>. Je vais donc y <span class=\"highlighting eye-catching\">créer un fichier</span> <samp>hello-world.js</samp> accéssible à cette adresse sur mon poste : <samp>C:\\nodejs\\hello-world.js</samp>. Rien ne vous empèche de placer ça dans un autre dossier, sur un autre disque dur, dans le workplace de votre IDE ou le repository de votre logiciel de gestion de code source et version.</p>\n\n<h3>Édition de hello-world.js</h3>\n\n<p>Faisons la chose la plus simple possible, affichons un message dans la console d'exécution. Ouvrez le fichier en édition avec <a href=\"http://notepad-plus-plus.org/fr/\" title=\"Site de Nodepad++\">Nodepad++</a> ou <a href=\"http://www.sublimetext.com/2\" title=\"Site de Sublime Text 2\">Sublime Text 2</a> ou l'IDE de votre choix et remplissez le avec ces lignes :</p>\n\n<pre class=\"prettyprint linenums lang-js\">\nconsole.log(\"Hello World !\"); // Va écrire dans la console \"Hello World !\".\n\nglobal.console.log(\"Hello World !\"); // Va écrire dans la console \"Hello World !\".\n\nwindow.console.log(\"Hello World !\"); // Va faire planter le programme.\n</pre>\n\n<h3>Exécution de script avec node.exe</h3>\n\n<p>Il y a plusieurs façons d'appeler du code JavaScript depuis le programme node.exe.</p>\n\n<p>Tout d'abord :</p>\n<ul>\n\t<li>appuyez/cliquez sur la touche/bouton « Windows » puis</li>\n\t<li>écrivez <samp>cmd</samp> dans « Rechercher les programmes et fichiers » et appuyez sur la touche « Entrer ».</li>\n</ul>\n<p>Ensuite deux possibilités.</p>\n\n<h4>Exécution en absolue</h4>\n<ul>\n\t<li>Écrivez <samp>node C:\\nodejs\\hello-world.js</samp> puis appuyez sur « Entrer » pour exécuter le script,</li>\n\t<li>ou écrivez <samp>node C:\\nodejs\\hello-world</samp> (pas d'extension).</li>\n</ul>\n\n<h4>Exécution en relatif</h4>\n<ul>\n\t<li>Écrivez <samp>cd C:\\nodejs\\</samp> puis appuyez sur « Entrer » pour vous rendre dans le dossier,</li>\n\t<li>écrivez \"<samp>node hello-world.js</samp>\" puis appuyez sur « Entrer » pour exécuter le script,</li>\n\t<li>ou <samp>node hello-world</samp> (pas d'extension).</li>\n</ul>\n\n<figure>\n\t<figcaption>Résultat d'exécution du fichier C:\\nodejs\\hello-world.js</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/hello-world-crash.png\" alt=\"Résultat d'exécution du fichier C:\\nodejs\\hello-world.js\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\" />\n</figure>\n\n<h3>L'équivalent de window est global</h3>\n\n<p>Notre code plante et c'est normal ! Revenons sur le résultat obtenu (image ci-avant) et voyons se que l'on peut en déduire.</p>\n\n<ul>\n\t<li>Les commandes <samp>global.console.log</samp> et <samp>console.log</samp> sont identiques. La base global est donc implicite comme <samp>window.document</samp> et <samp>document</samp> dans les navigateurs.</li>\n\t<li>\n\t\tLa pile d'exécution nous indique qu'au lancement de node.exe, avant même le traitement du fichier en paramètre, il y a :\n\t\t<ul>\n\t\t\t<li>Lecture du fichier <samp>node.js</samp> et exécution de <samp>startup</samp>.</li>\n\t\t\t<li>Lecture du fichier <samp>module.js</samp> exécutant la fonction <samp>Function.Module.runMain</samp> exécutant la fonction <samp>Function.Module._load</samp> exécutant la fonction <samp>Module.load</samp> exécutant la fonction <samp>Object.Module._extensions..js</samp> exécutant la fonction <samp>Module._compile</samp>.</li>\n\t\t</ul>\n\t\tOr, il n'y a pas de fichier node.js ou module.js dans le dossier de node.exe. Ce traitement est donc réalisé par le cœur de Node.js, node.exe.\n\t</li>\n\t<li><samp>window</samp> n'est pas défini. Il est de type Undefined et renvoi \"undefined\" puisqu'il fait planter le script. <samp>global</samp> remplace donc <samp>window</samp> en Node.js.</li>\n</ul>\n\n<h2>La documentation, les modules et le principe</h2>\n\n<p>Effectivement, notre exemple précédent est loin de servir à quelque chose et même loin de nous permettre de développer un site Internet (mais pas si loin que ça tout de même). Faisons quelque chose de plus conséquant.</p>\n\n<p>Nous allons manipuler le contenu d'un dossier avec le code ci-après. Pour le moment, nous allons nous attacher à la syntaxe du langage.</p>\n\n<pre class=\"prettyprint linenums lang-js\">\n// Déclaration de plusieurs variables.\nvar\n\tfs = require(\"fs\"), // Instanciation du module natif \"File System\" dans la variable \"fs\".\n\twalk = require(\"walk\"), // Instanciation du module communautaire \"node-walk\" dans la variable \"walk\".\n\tfiles = [], // Instanciation d'un tableau vide dans la variable \"files\".\n\ttargetFolder = process.argv[2] || \"./\", // Instanciation d'une variable avec \"process.argv[2]\". Si process.argv[2] est de type Undefined alors il renvoi \"false\" et targetFolder vaut \"./\";.\n\t\n\t// Appel à la fonction \"walk\" du module \"walk\".\n\twalker = walk.walk(\n\t\ttargetFolder, // Passage d'une \"String\" en premier paramètre.\n\t\t{ followLinks: false } // Passage d'un \"Objet\" JSON en second paramètre.\n\t);\n\t\n\t/* Equivalant du code ci-dessus\n\tvar walk = require(\"walk\");\n\tvar files = [];\n\tvar walker = walk.wa....;\n\tmais moins performant. */\n\n// Appel à la fonction \"on\" du module \"walk\".\nwalker.on(\"file\", function(root, stat, next) { // \"String\" en premier paramètre et \"Function\" en second paramettre.\n    // Ajout d'une entrée dans le tableau \"files\".\n    files.push(root + stat.name);\n\t\n\t// Exécution du paramètre \"next\" de type \"Function\".\n    next();\n});\n\n/* En javascript, les paramètres peuvent être également des fonctions !\nLa fonction de walk \"on\" est probablement défini ainsi : \nfunction on(String, Function) {\n\tvar \n\t\troot = String,\n\t\tstat = ** infos sur le fichier **\n\t\tnext = function () { ** du code ** }\n\n\tFunction(root, stat, next);\n}\n*/\n\n// Appel à la fonction \"end\" du module \"on\".\nwalker.on(\"end\", function() {\n\t// On affiche le contenu du tableau dans la console Windows.\n    console.log(files);\n});\n\n// Affichage de \"Traitement en cours...\" dans l'invité de commande Windows (la console).\nconsole.log(\"Traitement en cours...\");\n</pre>\n\n<p>Le code ci-dessus permet d'afficher tous les fichiers d'un dossier. Si vous êtes familier avec JavaScript il ne vous aura pas échappé que la fonction <samp>require</samp> sort d'un chapeau magique. C'est une fonction spécifique à Node.js qui permet d'inclure des fonctions en provenance d'un autre fichier (en l'occurence du cœur de Node.js pour « File System » et du module <samp>node-walk</samp> pour « walk ».</p>\n\n<h3>La documentation de Node.js et de ses modules</h3>\n\n<p>Le cœur de Node.js contient les modules vitaux lui permettant d'écrire dans des fichiers. C'est au développeur, en fonction de ses besoins, de « télécharger » les modules complémentaires qu'y vont lui permettre de réaliser ses développements.</p>\n\n<h4>Documentation des modules natifs</h4>\n\n<p>La documentation des modules natifs de Node.js se trouve sur le site officiel dans la partie <a href=\"http://nodejs.org/api/\" title=\"node.js\">Documentation</a>. Vous pourrez vous renseigner sur le fonctionnement des modules incontournables comme « <a href=\"http://nodejs.org/api/fs.html\" title=\"node.js\">File System</a> » ou encore « <a href=\"http://nodejs.org/api/http.html\" title=\"node.js\">http</a> » (pour faire des serveurs web). Vous aurez également des information sur notre fameuse fonction <a href=\"http://nodejs.org/api/all.html#all_require\" title=\"node.js\">require</a></p>\n\n<h4>Documentation des modules tiers</h4>\n\n<p>Tout un chacun peut développer son propre module Node.js et le mettre à disposition des autres utilisateurs via <a href=\"https://www.github.com/\" title=\"GitHub\">GitHub</a> et à disposition en téléchargement via le NPM de Node.js en l'ajoutant au registre de la page <a href=\"https://npmjs.org/\" title=\"node.js\">NPM Registry</a>.</p>\n\n<p>C'est par exemple le cas du module <span class=\"highlighting\">node-walk</span> qui ajoute la fonction walk équivalente à la fonction du même nom en Python mais pour Node.js. Ce module est utilisé dans le code précédent et développé par l'utilisateur <span class=\"eye-catchin\">coolaj86</span>. La documentation de <span class=\"highlighting\">node-walk</span> se trouve donc sur <a href=\"https://github.com/coolaj86/node-walk\" title=\"Page de node-walk\">la page de son projet GitHub</a> et <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">son module est référencé</a> dans le registre NPM sur <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">cette page</a>.</p>\n\n<p>En se référent à sa documentation, nous sommes à même de comprendre le code précédent :</p>\n\n<pre class=\"prettyprint linenums lang-js\">\nvar\n\tfs = require(\"fs\"),\n\twalk = require(\"walk\"),\n\tfiles = [],\n\t// Récupération du premier paramètre derrière le nom du fichier, sinon dossier d'exécution du fichier.\n\ttargetFolder = process.argv[2] || \"./\",\n\t\n\t// La fonction walk permet de lire de manière asynchrone le contenu d'un fichier mais ne renvoi rien. \n\t// Le code du script va continué à être lu pendant que walk va faire son boulot.\n\twalker = walk.walk(targetFolder, { followLinks: false }); // L'option dit qu'on ne va pas lire les fichiers derrière les raccourcis de dossier.\n\t\n// La fonction \"on\" avec en premier paramètre \"file\" est exécuté quand la fonction assynchrone précédente \"walk\" lit un fichier.\nwalker.on(\"file\", function(root, stat, next) {\n\t//... et le paramètre \"root\" contient le chemin absolue du fichier.\n\t//... et le paramètre \"stat\" contient diverses informations comme le \"name\" du fichier.\n\t//... et le paramètre \"next\" est en réalité une function.\n    files.push(root + stat.name);\n\t\n\t// Différent traitement avec fs (suppression, copy, etc...) sont possible.\n\t\n\t// On valide les actions.\n    next();\n});\n\n// La fonction \"on\" avec en premier paramètre \"end\" est exécuté quand tout le contenu du répertoire à été lu.\nwalker.on(\"end\", function() {\n    console.log(files);\n});\n\n// Va être lu immédiatement après l'exécution de la fonction \"walk\".\n// Si votre walk lit le dossier \"C:\\\", cela preut prendre du temps de tout lire. Mais il ne sera pas bloqué car les fonctions dans \"on\" sont appelés de façon assynchrone.\nconsole.log(\"Traitement en cours...\");\n</pre>\n\n<h3>npm et le téléchargement de modules</h3>\n\n<h4>Téléchargement depuis le registre</h4>\n\n<p>Copiez-collez le code précédent dans un fichier appelé <samp>list-file.js</samp> (par exemple dans <samp>C:\\nodejs\\routine\\list-file.js</samp>) et exécutez-le.</p>\n\n<figure>\n\t<figcaption>Résultat d'exécution du fichier C:\\nodejs\\routine\\list-file.js</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/list-file-crash.png\" alt=\"Résultat d'exécution du fichier C:\\nodejs\\routine\\list-file.js\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\" />\n</figure>\n\n<p>Notre code plante encore et c'est encore normal ! Revenons sur le résultat obtenu (image ci-avant) et voyons ce que l'on peut en déduire.</p>\n\n<ul>\n\t<li>L'exécution de ce script est identique au précédent, mais la pile ne s'affiche pas complètement (manque startup et node.js).</li>\n\t<li>Quand la fonction <samp>require</samp> est rencontrée, à l'instar de <samp>startup</samp> c'est <samp>require</samp> qui prend la main exécutant la fonction <samp>Function.Module._load</samp> exécutant la fonction <samp>Function.Module._resolveFilename</samp>.</li>\n\t<li>Si un module n'a pas été préalablement téléchargé, ça coince (logique).</li>\n</ul>\n\n<p class=\"eye-catching\">Note : les scripts qui plantent arrête le programme Node.js. Si votre script ne plante pas, et que vous souhaitez arrêter le programme : au lieu de fermer la console, appuyez simultanément sur « CTRL + C ».</p>\n\n<p>Nous allons donc télécharger le module « node-walk » avec les lignes de commande suivante :</p>\n<ul>\n\t<li><samp>cd C:\\nodejs\\routine\\</samp></li>\n\t<li><samp>npm install walk</samp></li>\n</ul>\n\n<figure>\n\t<figcaption>Téléchargement du module node-walk avec npm</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/npm-install-walk.png\" alt=\"Téléchargement du module node-walk avec npm\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\" />\n</figure>\n\n<p>Vous constaterez qu'un dossier « node_modules » est apparu. Les futurs modules que vous téléchargerez via <span class=\"highlighting\">npm</span> depuis la racine <samp>C:\\nodejs\\routine\\</samp> seront automatiquement ajoutés dans ce dossier. Les fichiers dont le fichier appelant est exécuté dans cette racine pourront tous bénéficier des modules via la commande « require » directement avec le nom du module en paramètre. Pour utiliser le module d'un autre dossier « node_modules », il ne faudra plus passer le nom du module à <samp>require</samp> mais le chemin d'accès. Pour finir si vous utilisez la commande <samp>npm install</samp> depuis un autre dossier, les modules téléchargés se mettront dans le dossier « node_modules » de cet endroit (ou le créera s'il n'existe pas).</p>\n\n<p>Votre dossier « node_modules » contient le module « walk ». Vous constatez que « walk » lui-même contient un dossier « node_modules » avec le module « forEachAsync » ! C'est une dépendance du module : « walk » à besoin de « forEachAsync » pour fonctionner. Idem dans « forEachAsync » il y a encore un dossier « node_modules » contenant « sequence ». Notez que si vous remontez « forEachAsync » et « sequence » dans le même dossier « node_modules » que « walk », les modules seront également trouvés.</p>\n\n<p>Vous pouvez de nouveau exécuter votre script et constater que \"Traitement en cours...\" s'écrit avant l'affichage des fichiers alors que c'est pourtant la dernière instruction du fichier. Là est le pouvoir de l'asynchrone !</p>\n\n<p class=\"eye-catching\">Note : vous pouvez passer des paramètres à vos scripts avec <samp>process.args[x]</samp> x représentant le xième élément séparé par un espace dans la chaine de commande (<samp>process.args[0]</samp> étant donc le mot <samp>node</samp>). Dans notre exemple <samp>node list-file C:\\</samp> affichera les fichiers de tout le disque dure !</p>\n\n<h4>Téléchargement depuis le site du module</h4>\n\n<p>Dans notre exemple précédent nous aurions tout aussi bien pu créer nous-même le dossier « node_modules » et y placer le module <span class=\"highlighting\">node-walk</span> à la main en <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">l'ayant téléchargé depuis le site GitHub</a>.</p>\n\n<p>Si vous voulez essayer, effacez votre dossier « walk » de « node_modules » et c'est parti !</p>\n\n<ul>\n\t<li>Une fois sur <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">la page du projet</a>, cliquez sur « ZIP » pour télécharger l'archive.</li>\n\t<li>Placer le dossier « node-walk-master » dans « node_modules » et renommez-le en « walk ».</li>\n\t<li>Dans votre nouveau dossier « walk », supprimez tout sauf le dossier « lib ».</li>\n\t<li>Remontez le contenu du dossier « lib » dans « walk ». Vous pouvez maintenant supprimer le dossier « lib » qui est vide.</li>\n\t<li>Exécutez de nouveau <samp>list-file</samp> et vous aurez l'erreur « Error: cannot find module 'forEachAsync' » (souvenez vous, « walk » dépend de « forEachAsync »).</li>\n\t<li>Rendez-vous sur le <a href=\"https://npmjs.org/\" title=\"node.js\">NPM registry</a> et cherchez « forEachAsync » dans « Search Packages ». Cliquez dessus dans la liste et repérez la ligne « Dependencies » : vous voyez bien que ce module est dépendant de\t« sequence ». Repérez ensuite « Homepage » : cliquez sur le lien associé et nous revoilà sur Git. Cliquez de nouveau sur « ZIP » pour télécharger l'archive. Nous trouvons dedans, entre autre, les dossiers « forEachAsync » et « sequence » ! Ça tombe bien.</li>\n\t<li>Deux possibilités : soit vous déplacez les dossiers « forEachAsync » et « sequence » directement au même niveau que « walk » pour avoir une arborescence de module à plat, soit vous créez dans « walk » un dossier « node_modules » pour y placer « forEachAsync », puis dans « forEachAsync » vous créez de nouveau un dossier « node_modules » pour y placer « sequence ».</li>\n\t<li>Exécutez de nouveau <samp>list-file</samp> et voilà, ça marche !</li>\n</ul>\n\n<p>Cette technique s'avèrera utile pour certaines installations npm qui ne marchent pas sous Windows. La seule solution sera l'installation manuelle.</p>\n\n<h2>Node.js pour créer des routines</h2>\n\n<p>Pour clore cet article je résumerais en mettant en avant le fait que sans même parler de site Internet, Node.js est parfais pour créer des fichiers de maintenance pour effacer des fichiers temporaires, exécuter des actions, etc... comme le ferait des fichiers .php avec php.exe. Il est tout à fait possible de mettre en place des tâches planifiées pour vider les fichiers de plus de un jour dans le répertoire temporaire des fichiers uploadés de votre site par exemple !</p>\n\n<p>Bon, maintenant qu'on voit à peut-prêt l'outil pour une utilisation standard et simple, si on passait à <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">un serveur web et notre site web ?</a></p>", "dates" : { "published" : { "$date" : 1367060400000 }, "updated" : [] }, "title" : "<span>Installer</span> et <span>utiliser</span> <span>Node.js</span> sous <span>Windows</span>", "urn" : "installer-et-utiliser-nodejs-sous-windows" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ab" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "<p>L'idée ne vous a peut-être jamais effleuré l'esprit, mais sachez qu'il est tout à fait possible de se passer d'Apache et remplacer les PHP, JAVA, C#... par du JavaScript pour faire un site web. Je vous vois faire la grimace dans le fond, mais développer votre propre serveur web en JavaScript est un jeu d'enfant. Tout ceci est réalisable grâce à l'exécuteur de script Node.js et ses modules !</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title highlighting\">À la découverte de Node.js sous Windows</div>\n\t<nav class=\"content\">\n\t\t<ol>\n\t\t\t<li><a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Qu'est-ce que Node.js ?</a></li>\n\t\t\t<li><a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installation de Node.js</a></li>\n\t\t\t<li><a class=\"highlighting\" href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">Simple application web avec Node.js</a></li>\n\t\t\t<li><a href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">Utiliser jQuery côté serveur avec Node.js</a></li>\n\t\t\t<li>Une architecture MVC2 avec Node.js</li>\n\t\t\t<li>Appels client asynchrones avec Node.js</li>\n\t\t\t<li>Un moteur de template avec Node.js</li>\n\t\t\t<li>Des sites multilingues avec Node.js</li>\n\t\t\t<li>La base de données MySQL et Node.js</li>\n\t\t</ol>\n\t</nav>\n</div>\n\n<h2>Développer un serveur web avec les modules HTTP et Express</h2>\n\n<p>Si vous avez lu <a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">mon précédent billet sur l'installation et l'utilisation de Node.js</a> ou que vous savez de quoi il s'agit exactement, vous pouvez poursuivre. Sinon je vous conseils de passer par la case départ (sans toucher 2000€) et de lire <a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">mon article expliquant comment développer en JavaScript côté serveur avec Node.js</a>.</p>\n<h3>Un échange client/serveur simple</h3>\n\n<p>Pour créer un serveur web —élément essentiel pour présenter à notre client (un navigateur) notre site web ou application web— Node.js utilise le module HTTP qui permet « le support de plusieurs fonctionnalités du protocole qui sont habituellement difficiles à utiliser » <a href=\"http://nodejs.org/api/all.html#all_http\" title=\"node.js\">d'après la documentation</a>. En d'autres termes : il permet de répondre aux demandes des navigateurs (demande d'une page Internet par exemple). Pour que cela soit encore plus trivial, nous allons utiliser un module communautaire : le <a href=\"http://expressjs.com/\" title=\"Express - node.js web application framework\">Framework Express</a> qui va nous permettre de réaliser aisément des applications web.</p>\n<h4>Préparation</h4>\n\n<p>Préparons notre serveur :</p>\n\n<ul>\n\t<li>Nous allons avoir besoin (avec l'aide de la documentation), d'<a href=\"http://nodejs.org/api/all.html#all_http\" title=\"node.js\">appeler le module HTTP</a> de <a href=\"http://expressjs.com/\" title=\"Express - node.js web application framework\">créer un objet</a> capable de comprendre le protocole http et d'écouter les demandes clientes sur le bon couple ip / port en vue de lui répondre.</li>\n\t<li>Nous allons nous créer un dossier d'application web ici <samp>C:\\nodejs\\website\\</samp> dans lequel nous allons placer notre premier script <samp>website.js</samp>.</li>\n\t<li>Nous allons également avoir besoin de télécharger le module « Express » avec la commande <samp>npm install express</samp> depuis le dossier <samp>C:\\nodejs\\website\\</samp>. Cela ajoutera donc un dossier « node_modules » dans <samp>C:\\nodejs\\website\\</samp> au même niveau que <samp>website.js</samp>.</li>\n</ul>\n\n<h4>Contenu du fichier website.js</h4>\n\n<pre class=\"prettyprint linenums lang-javascript\">\nvar\n// Nous stockons l'objet HTTP dans la variable globale \"http\".\n\thttp = require(\"http\"),\n\t\n// Nous stockons également la fonction Express dans la variable \"express\".\n\texpress =  require(\"express\"),\n\t\n// Nous instancions un serveur web en exécutant la variable \"express\" dont le résultat est stocké dans l'objet httpServer.\n\thttpServer = express();\n\n// Nous utilisons la fonction listen de httpServer en lui passant comme premier paramètre le port d'écoute de l'application.\n// Par défaut une page de site Internet est réclamée via le port 80. Si vous n'avez ni Apache, ni IIS ou autre qui utilise ce port, vous pouvez le mettre sur 80.\n// J'ai pour ma part décidé d'écouter le port 82.\nhttpServer.listen(82);\n\n// Nous écoutons les requêtes GET en provenance d'un navigateur client.\n// Si une requête est envoyé à l'adresse : http://localhost/ à votre navigateur) le code du second paramètre (une fonction de callBack) est exécuté.\n// Cette fonction de callBack fourni en premier paramètre de quoi manipuler la requête et en second paramètre de quoi manipuler la réponse qui va être faites au client.\nhttpServer.get(\"/\", function (request, response) { // \"/\" indique que nous écoutons la racine du site web.\n\tvar\n\t\t// Nous définissons l'entête de la page qui va être renvoyé au client. \n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\t\n\t\t// Nous définissons son contenu.\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\n\t\t\t\"&lt;html lang='fr'&gt;\" +\n\t\t\t\t\"&lt;head&gt;\"+\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\n\t\t\t\t\"&lt;/head&gt;\" +\n\t\t\t\t\"&lt;body&gt;\" +\n\t\t\t\t\t\"&lt;p&gt;Hello World !&lt;/p&gt;\"\n\t\t\t\t\"&lt;/body&gt;\" +\n\t\t\t\"&lt;/html&gt;\";\n\n\t// Nous écrivons l'entête en indiquant que c'est une page valide (OK : 200).\n\tresponse.writeHead(200, header);\n\n\t// Nous écrivons le contenu de la page que l'on va faire afficher par le navigateur client.\n\tresponse.write(template);\n\n\t// Nous informons le serveur qu'il peut enfin envoyer la réponse au client.\n\tresponse.end();\n});\n</pre>\n\n<p>Faisons quelques tests :</p>\n<ul>\n\t<li>Exécutez le fichier : <samp>cd C:\\nodejs\\webserver\\</samp> puis <samp>node webserver.js</samp> dans votre console.</li>\n\t<li>Réclamez l'adresse <samp>http://localhost:82/</samp> (mettez le bon port) à votre navigateur.</li>\n\t<li>Réclamez l'adresse <samp>http://localhost:82/article</samp> (mettez le bon port) à votre navigateur.</li>\n</ul>\n\n<p>L'adresse <samp>http://localhost:82/</samp> nous renvoi le contenu de notre page web tandis que <samp>http://localhost:82/article</samp> nous renvoi « Cannot GET /article ». Effectivement le premier cas fonctionne puisque nous avons défini une réponse à la demande \"/\" qui correspond à la racine du site. Cependant, n'ayant pas défini une réponse à la demande \"/article\" le module Express prend la main et prend la liberté de renvoyer un message d'erreur en <samp>text/plain</samp> (pas en html) avec un code d'erreur 404 dans l'entête http (header).</p>\n\n<h2>Création d'un petit site web</h2>\n\n<p>Repartons du code précédent et ajoutons de quoi paramétrer notre site :</p>\n<ul>\n\t<li>pour que l'on puisse le changer d'adresse et de port d'écoute facilement.</li>\n\t<li>pour que l'on puisse passer d'un environnement de Développement/Test/Qualité/Production facilement.</li>\n\t<li>Pour qu'il écoute plusieurs pages et également celles qui n'existent pas.</li>\n</ul>\n\n<p>Je vous livre le code final de cette partie si vous souhaitez le comprendre vous-même. Nous allons le décortiquer un peu plus loin.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/*=============================*/\n/*== Application web Node.js ==*/\n/*=============================*/\n\nvar\n/*== Charger les modules Node.js ==*/\n\thttp = require(\"http\"),\n\texpress =  require(\"express\"), /* npm install express */\n\thttpServer = express(),\n\n/*== Variables globales de l'application ==*/\n\tappConfig = {};\n\n/*== Paramétrage de l'application ==*/\n\nhttpServer\n/* == Définir un environnement d'exécution : SET NODE_ENV=dev ==*/\n\t.configure(function () {\n\t\t/* Commun à tous les environnements */\n\t})\n\t.configure(\"dev\", function () {\n\t\t/* Uniquement en environnement de Dev */\n\t\tappConfig.host = \"localhost\";\n\t\tappConfig.path = \"/\";\n\t\tappConfig.httpPort = 82;\n\t\tappConfig.url = appConfig.host + ((appConfig.httpPort != 80) ? \":\" + appConfig.httpPort : \"\") + appConfig.path;\n\t})\n\t.configure(\"test\", function () {\n\t\t/* Uniquement en environnement de Test */\n\t})\n\t.configure(\"qual\", function () {\n\t\t/* Uniquement en environnement de Qualité */\n\t})\n\t.configure(\"prod\", function () {\n\t\t/* Uniquement en environnement de Production */\n\t}).listen(appConfig.httpPort);\n\n/*********************************************/\n/*** Chemins de réponse - Réécriture d'url ***/\n/*********************************************/\n\n/* Accueil */\n// http://www.site.com/\nhttpServer.get(appConfig.path, function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\n\t\t\t\"&lt;html lang='fr'&gt;\" +\n\t\t\t\t\"&lt;head&gt;\" +\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t\"&lt;/head&gt;\" +\n\t\t\t\t\"&lt;body&gt;\" +\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\n\t\t\t\t\"&lt;/body&gt;\" +\n\t\t\t\"&lt;/html&gt;\";\n\n\tresponse.writeHead(200, header);\n\tresponse.write(template);\n\tresponse.end();\n});\n\n/* Connexion */\n// http://www.site.com/connexion/\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\n\t\t\t\"&lt;html lang='fr'&gt;\" +\n\t\t\t\t\"&lt;head&gt;\" +\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\n\t\t\t\t\t\"&lt;title&gt;Page de connexion&lt;/title&gt;\" +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t\"&lt;/head&gt;\" +\n\t\t\t\t\"&lt;body&gt;\" +\n\t\t\t\t\t\"&lt;form id='login' action='./connexion/' method='POST'&gt;\" +\n\t\t\t\t\t\t\"&lt;div&gt;\" +\n\t\t\t\t\t\t\t\"&lt;label for='login-email' placeholser='Email'&gt;Email : &lt;/label&gt;\" +\n\t\t\t\t\t\t\t\"&lt;input id='login-email' type='text' /&gt;\" +\n\t\t\t\t\t\t\"&lt;/div&gt;\" +\n\n\t\t\t\t\t\t\"&lt;div&gt;\" +\n\t\t\t\t\t\t\t\"&lt;label for='login-password' placeholser='Mot de passe'&gt;Mot de passe : &lt;/label&gt;\" +\n\t\t\t\t\t\t\t\"&lt;input id='login-password' type='password' /&gt;\" +\n\t\t\t\t\t\t\"&lt;/div&gt;\" +\n\n\t\t\t\t\t\t\"&lt;label&gt;&lt;input type='submit' value='Ok' /&gt;&lt;/label&gt;\" +\n\t\t\t\t\t\"&lt;/form&gt;\" +\n\t\t\t\t\"&lt;/body&gt;\" +\n\t\t\t\"&lt;/html&gt;\";\n\n\tresponse.writeHead(200, header);\n\tresponse.write(template);\n\tresponse.end();\n});\n\n/* Si aucune page ne match */\nhttpServer.use(httpServer.router);\nhttpServer.use(function(request, response, next) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\n\t\t\t\"&lt;html lang='fr'&gt;\" +\n\t\t\t\t\"&lt;head&gt;\" +\n\t\t\t\t\t\"&lt;meta charset=\\\"utf-8\\\" /&gt;\" +\n\t\t\t\t\t\"&lt;title&gt;Page de connexion&lt;/title&gt;\" +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t\"&lt;/head&gt;\" +\n\t\t\t\t\"&lt;body&gt;\" +\n\t\t\t\t\t\"&lt;p&gt;Cette page n'existe pas.&lt;/p&gt;\" +\n\t\t\t\t\"&lt;/body&gt;\" +\n\t\t\t\"&lt;/html&gt;\";\n\n\tresponse.writeHead(404, header);\n\tresponse.write(template);\n\tresponse.end();\n});\n</pre>\n\n<p>Si vous exécutez la commande <samp>node website.js</samp>, la console va vous renvoyer une erreur : c'est normal.</p>\n\n<figure>\n\t<figcaption>Plantage s'il n'y a pas de variable NODE_ENV</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-no-route.png\" alt=\"Plantage s'il n'y a pas de variable NODE_ENV\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\" />\n</figure>\n\n<h3>Définir des variables de portage</h3>\n\n<p>Tout d'abord, définissons les quelques variables qu'il va nous falloir changer en cas de déménagement du site.</p>\n<ul>\n\t<li><span class=\"highlighting\">Le nom de domaine / l'adresse ip du site</span> : pour ce site <span class=\"eye-catching\">blog.haeresis.fr</span></li>\n\t<li><span class=\"highlighting\">La racine d'accès aux fichiers</span> : si l'intégralité du site se trouvait derrière <span class=\"eye-catching\">http://www.haeresis.fr/blog/</span>alors ce serait <span class=\"eye-catching\">/blog</span>. Pour ce site c'est simplement <span class=\"eye-catching\">/</span>.</li>\n\t<li><span class=\"highlighting\">L'url</span> : elle est composée des deux précédents points et du port (si le port n'est pas 80).</li>\n</ul>\n\n<p>Voyons alors la première partie de <samp>website.js</samp> :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/*******************/\n/* Haut du fichier */\n/*******************/\nvar\n/*== Charger les modules Node.js ==*/\n\thttp = require(\"http\"), // Disponible de base.\n\texpress =  require(\"express\"), // Disponible avec npm.\n\thttpServer = express(),\n\n/*== Variables globales de l'application ==*/\n\tappConfig = {}; //On créer un objet vide qui contiendra les variables d'environnement de l'application.\n\n/*== Paramétrage de l'application ==*/\nhttpServer\n\t/* Ajout de la configuration du serveur - elle sera utile par la suite */\n\t.configure(function () {\n\t\tappConfig.host = \"localhost\"; // Ca c'est le host/ip du site.\n\t\tappConfig.path = \"/\"; // Ca c'est le dossier de base du site.\n\t\tappConfig.httpPort = 82; // Ca c'est le port d'écoute du site.\n\t\t\n\t\t// Ci-dessous la création automatique d'un lien absolue jusqu'aux resources.\n\t\tappConfig.url = appConfig.host + ((appConfig.httpPort != 80) ? \":\" + appConfig.httpPort : \"\") + appConfig.path;\n\t})\n\t.listen(appConfig.httpPort); // On écoute le port paramétré.\n</pre>\n\n<h3>Définir un environnement d'exécution</h3>\n\n<p>Nous alons modifier le code précédent en utilisant plusieurs fonctions <samp>configure</samp> à la suite de Express. Effectivement, en ajoutant un premier paramètre, il est possible de limiter l'exécution de la configuration aux environnements dont la variable <samp>NODE_ENV</samp> sera égale à ce paramètre.</p>\n\n<p>Modifions le code précédent de <samp>website.js</samp> :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/*******************/\n/* Haut du fichier */\n/*******************/\nvar\n/*== Charger les modules Node.js ==*/\n\thttp = require(\"http\"),\n\texpress =  require(\"express\"),\n\thttpServer = express(),\n\n/*== Variables globales de l'application ==*/\n\tappConfig = {};\n\n/*== Paramétrage de l'application ==*/\nhttpServer\n\t.configure(function () {\n\t\t/* Commun à tous les environnements */\n\t})\n\t.configure(\"dev\", function () { // Ne sera exécuté que si NODE_ENV vaut \"dev\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\n\t\t/* Uniquement en environnement de Dev */\n\t\tappConfig.host = \"localhost\";\n\t\tappConfig.path = \"/\";\n\t\tappConfig.httpPort = 82;\n\t\tappConfig.url = appConfig.host + ((appConfig.httpPort != 80) ? \":\" + appConfig.httpPort : \"\") + appConfig.path;\n\t})\n\t.configure(\"test\", function () { // Ne sera exécuté que si NODE_ENV vaut \"test\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\n\t\t/* Uniquement en environnement de Test */\n\t})\n\t.configure(\"qual\", function () { // Ne sera exécuté que si NODE_ENV vaut \"qual\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\n\t\t/* Uniquement en environnement de Qualité */\n\t})\n\t.configure(\"prod\", function () { // Ne sera exécuté que si NODE_ENV vaut \"prod\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\n\t\t/* Uniquement en environnement de Production */\n\t})\n\t.listen(appConfig.httpPort);\n</pre>\n\n<p>Revenons sur l'erreur d'exécution que nous avons eu en essayant d'exécuter le script complet (<samp>Error: Router#get() requires a path</samp>). Afin de résoudre ce problème, définissez dans votre console la variable d'environnement <samp>NODE_ENV</samp> avec la commande <samp>SET NODE_ENV=dev</samp> (uniquement sous Windows) ce qui permettra à la variable <samp>process.env.NODE_ENV</samp> d'être testée à « dev » dans la fonction <samp>configure()</samp> de Express. Il est possible que cette variable disparaisse au redémarrage de la machine.</p>\n\n<h3>Créer plusieurs pages</h3>\n\n<p>Notre site web sera constitué de plusieurs pages. Il n'y a rien de plus simple. Il suffit de router d'autres requêtes GET que « / ».</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/*********************/\n/* Milieu du fichier */\n/*********************/\n\n/* Accueil */\n// http://localhost:82/\nhttpServer.get(appConfig.path, function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\n\t\t\t\t'&lt;head&gt;' +\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\n\t\t\t\t\t'&lt;title&gt;Ma première page&lt;/title&gt;' +\n\t\t\t\t\t'&lt;base href=\"//' + appConfig.url + '\" /&gt;' +\n\t\t\t\t'&lt;/head&gt;' +\n\t\t\t\t'&lt;body&gt;' +\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\n\t\t\t\t'&lt;/body&gt;' +\n\t\t\t'&lt;/html&gt;';\n\n\tresponse.writeHead(200, header);\n\tresponse.write(template);\n\tresponse.end();\n});\n\n/* Connexion */\n// http://localhost:82/connexion/\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\n\t\t\t\t'&lt;head&gt;' +\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\n\t\t\t\t\t'&lt;title&gt;Page de connexion&lt;/title&gt;' +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t'&lt;/head&gt;' +\n\t\t\t\t'&lt;body&gt;' +\n\t\t\t\t\t'&lt;form id=\"login\" action=\"./connexion/\" method=\"POST\"&gt;' +\n\t\t\t\t\t\t'&lt;div&gt;' +\n\t\t\t\t\t\t\t'&lt;label for=\"login-email\" placeholser=\"Email\"&gt;Email : &lt;/label&gt;' +\n\t\t\t\t\t\t\t'&lt;input id=\"login-email\" type=\"text\" /&gt;' +\n\t\t\t\t\t\t'&lt;/div&gt;' +\n\n\t\t\t\t\t\t'&lt;div&gt;' +\n\t\t\t\t\t\t\t'&lt;label for=\"login-password\" placeholser=\"Mot de passe\"&gt;Mot de passe : &lt;/label&gt;' +\n\t\t\t\t\t\t\t'&lt;input id=\"login-password\" type=\"password\" /&gt;' +\n\t\t\t\t\t\t'&lt;/div&gt;' +\n\n\t\t\t\t\t\t'&lt;label&gt;&lt;input type=\"submit\" value=\"Ok\" /&gt;&lt;/label&gt;' +\n\t\t\t\t\t'&lt;/form&gt;' +\n\t\t\t\t'&lt;/body&gt;' +\n\t\t\t'&lt;/html&gt;';\n\n\tresponse.writeHead(200, header);\n\tresponse.write(template);\n\tresponse.end();\n});\n</pre>\n\n<p>Vous aurez à présent également du contenu à l'adresse <samp>http://localhost:82/connexion/</samp>.</p>\n\n<p class=\"eye-catching\">Note : la balise <samp>&lt;base&gt;</samp> des lignes 14 et 39 permet de forcer le début des liens relatifs. Ainsi peut importe la profondeur du chemin de la page, la racine sera toujours celle du site et non celle de la page courante.</p>\n\n<h3>Les pages non existantes</h3>\n\n<p>Afin de changer la réponse de votre serveur quand un fichier inexistant est réclamé (aucun contenu n'est associé à la demande GET) il va falloir définir un contenu 404 par défaut.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/******************/\n/* Bas du fichier */\n/******************/\n\n/* Si aucune page ne match */\nhttpServer.use(httpServer.router); // On se place après la vérification de toutes les requêtes associées à un contenu.\n\n// On renvoi un contenu.\nhttpServer.use(function(request, response, next) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\n\t\t\t\t'&lt;head&gt;' +\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\n\t\t\t\t\t'&lt;title&gt;Page de connexion&lt;/title&gt;' +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t'&lt;/head&gt;' +\n\t\t\t\t'&lt;body&gt;' +\n\t\t\t\t\t'&lt;p&gt;Cette page n\\'existe pas.&lt;/p&gt;' +\n\t\t\t\t'&lt;/body&gt;' +\n\t\t\t'&lt;/html&gt;';\n\n\tresponse.writeHead(404, header); // On précise que la page n'existe pas avec le Code : 404.\n\tresponse.write(template);\n\tresponse.end();\n});\n</pre>\n\n<h2>Récupérer du contenu avec la méthode POST</h2>\n\n<p>Rendez-vous à l'adresse <samp>http://localhost:82/connexion/</samp> et cliquez sur le bouton Ok. Quel surprise ! Un joli message : « Cette page n'existe pas. » vous attend alors que pourtant vous n'avez même pas changé de page !</p>\n\n<p>En fait, quand vous rejoignez la page « http://localhost:82/connexion/ » en suivant un lien ou directement par l'url vous réclamez ce fichier en GET. Hors la fonction <samp>get()</samp> ne répond pas à une demande faites en POST ce qui est le cas de la demande du formulaire en cliquant sur « Ok ».</p>\n\n<p>Modifions l'écoute de « http://localhost:82/connexion/ » pour ajouter une écoute POST grâce à <samp>post()</samp> en plus de l'écoute GET.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* *** */ \n\n/* Connexion */\n// http://localhost:82/connexion/\n\n// On créer une fonction chargée de répondre à la demande.\n// Ceci est ni plus, ni moins le code qui était directement exécuté dans httpServer.get().\nfunction connectionRender(request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\n\t\t\t\t'&lt;head&gt;' +\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\n\t\t\t\t\t'&lt;title&gt;Page de connexion&lt;/title&gt;' +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t'&lt;/head&gt;' +\n\t\t\t\t'&lt;body&gt;' +\n\t\t\t\t\t'&lt;form id=\"login\" action=\"./connexion/\" method=\"POST\"&gt;' +\n\t\t\t\t\t\t'&lt;div&gt;' +\n\t\t\t\t\t\t\t'&lt;label for=\"login-email\" placeholser=\"Email\"&gt;Email : &lt;/label&gt;' +\n\t\t\t\t\t\t\t'&lt;input id=\"login-email\" type=\"text\" /&gt;' +\n\t\t\t\t\t\t'&lt;/div&gt;' +\n\n\t\t\t\t\t\t'&lt;div&gt;' +\n\t\t\t\t\t\t\t'&lt;label for=\"login-password\" placeholser=\"Mot de passe\"&gt;Mot de passe : &lt;/label&gt;' +\n\t\t\t\t\t\t\t'&lt;input id=\"login-password\" type=\"password\" /&gt;' +\n\t\t\t\t\t\t'&lt;/div&gt;' +\n\n\t\t\t\t\t\t'&lt;label&gt;&lt;input type=\"submit\" value=\"Ok\" /&gt;&lt;/label&gt;' +\n\t\t\t\t\t'&lt;/form&gt;' +\n\t\t\t\t'&lt;/body&gt;' +\n\t\t\t'&lt;/html&gt;';\n\n\tresponse.writeHead(200, header);\n\tresponse.write(template);\n\tresponse.end();\t\n}\n// On répond à la demande en GET et/ou en POST.\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\n\tconnectionRender(request, response);\n}).post(appConfig.path + \"connexion\", function (request, response) { // Ajout d'une réponse à une demande de contenu en POST.\n\tconnectionRender(request, response);\n});\n\n/* *** */\n</pre>\n\n<h2>Avant la suite</h2>\n\n<h3>Réflexion sur notre script</h3>\n\n<p>Là où un développement traditionnel consiste à déposer des fichiers dans des dossiers et de les fournir depuis l'adresse physique sur le serveur, Node.js embarque nativement la réécriture d'url et propose d'associer à une demande, un contenu. Avec encore plusieurs couches d'abstractions nous verrons comment déporter les contenus de fichier dans de vrais fichiers .htm à part.\n<p>Cela signifie également que <span class=\"highlighting\">si vous n'avez pas décidé qu'un contenu/fichier est renvoyé par le serveur sous tel requête GET, POST ou autre, rien ne parviendra jamais au client</span>. Très bon point pour la sécurité.</p>\n<p>Pour finir : avez-vous essayé de modifier le contenu de votre script et rechargé une page dans votre navigateur sans voir aucunes modifications ? Etonnant non ? Les fichiers serveur peuvent être modifiés à chaud et <span class=\"highlighting\">aucunes modifications</span> ne sera effectives tant que le script n'aura pas été ré-exécuté (je parle de <samp>website.js</samp>).</p>\n\n<h3>Prochaines étapes</h3>\n\n<p>La partie précédente montre comment répondre à une demande en POST mais ne montre pas comment exploiter les paramètres envoyés. De plus ce morceau de script est très frustrant : un seul fichier pour plusieurs pages, HTML mélangé dans le code, pas d'appel de CSS et/ou de JS... Je vais vous demandez un peu de patience car nous verrons ça prochainement. En attendant, l'heure est venu pour nous d'<a href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">utiliser jQuery côté serveur sur Windows</a> !</p>\n\n<h2>Source</h2>\n\n<p>Vous pouvez <a href=\"./upload/script/website.js\" title=\"Télécharger le fichier résultat de cet article\">télécharger le fichier résultat de cet article ici</a>.</p>", "dates" : { "published" : { "$date" : 1367508600000 }, "updated" : [] }, "title" : "<span>Serveur web</span> et <span>application web</span> en <span>JavaScript</span>", "urn" : "serveur-web-et-application-web-en-javascript" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ac" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48c4" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48bf" } ], "content" : "<p>Vous est-il arrivé d'utiliser une fonction JavaScript en maudissant son concepteur parce qu'il avait oublié un détail important... vous permettre de faire quelque chose <span class=\"highlighting\">après</span> l'exécution de son code ! Ça m'arrive trop souvent ces derniers temps et ça ne serait pas non plus la fin du monde si les concepteurs n'avaient pas en plus eu la bonne idée de ne fournir que la version minifiée de leur développement ! Merci pour le partage « Dude » ;)</p>\n\n<p>Je vais vous raconter une histoire.</p>\n\n<h2>C'est l'histoire d'un gars sympa qui développe un plugin jQuery...</h2>\n\n<p>Notre développeur à un besoin. Il estime également que ce besoin est assez générique, que personne n'y a encore pensé et qu'il veut aider son prochain. Notre développeur est très altruiste. Sans plus tarder voici le plugin jQuery qui écris un paragraphe en italique après un autre élément ! Enfin, il faut le développer : alors commençons.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/*** Ce plugin est dépendant de la librairie http://www.jquery.com/ ***/\n\n// Présence du \";\" pour ne pas être influancer par les erreurs des scripts précédents.\n// Création d'une fonction anonyme donnant accès à la variable \"$\" via son premier paramètre. \n;(function ($) {\n\n\t// Ajout d'une fonction \"addItalicTextAfter\" à l'objet contenu dans \"$\" dans la liste de fonctions \"fn\".\n\t$.fn.addItalicTextAfter = function () {\n\t\n\t\t// Retour d'exécution de chaque élément trouvé par \"$('un sélecteur quelconque')\".\n\t\treturn this.each(function () {\n\t\t\n\t\t\t// Je crée, je style et je remplis une balise p.\n\t\t\tvar p = $(\"&lt;p&gt;\").css(\"font-style\", \"italic\").text(\"J'écris ce texte après mon exemple d'utilisation !\");\n\t\t\t$(this).after(p); // Et hop, on ajoute ça après la cible courante.\n\t\t});\n\t}\n\t\n// J'exécute tout de suite ma jolie fonction anonyme en lui passant comme paramètre l'objet jQuery (fourni par la librairie jQuery) pour la manipuler via \"$\" comme prévu dans la dite fonction.\n})(jQuery);\n</pre>\n\n<p>Notre gars sympa imagine déjà comment le développeur final vas utiliser son plugin sur un élément avec l'id <samp>first-example</samp>.</p>\n\n<pre id=\"first-example\" class=\"prettyprint linenums lang-javascript\">\n\t$(\"#first-example\").addItalicTextAfter();\n</pre>\n\n<h3>...qui permet de changer le texte de la fonctionnalité...</h3>\n\n<p>Mais notre développeur ne s'arrête pas là, il permet également de changer le contenu du texte à ajouter !</p>\n\n<pre class=\"prettyprint linenums lang-javascript\"> \n;(function ($) {\n\t// Ajout d'un paramètre d'utilisation pour changer le contenu.\n\t$.fn.addItalicTextAfter = function (content) {\n\t\n\t\t// Mais si on ne souhaite pas changer le contenu, il y en a toujours un par défaut.\n\t\tif (content == null) {\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\n\t\t}\n\n\t\treturn this.each(function () {\n\t\t\tvar p = $(\"&lt;p&gt;\").css(\"font-style\", \"italic\")\n\t\t\t\n\t\t\t\t// J'ajoute mon contenu initial ou modifié.\n\t\t\t\t.text(content);\n\t\t\t\t\n\t\t\t$(this).after(p);\n\t\t});\n\t}\n})(jQuery);\n</pre>\n\n<p>Ce qui donne à l'utilisation sur l'id <samp>second-example</samp> :</p>\n\n<pre id=\"second-example\" class=\"prettyprint linenums lang-javascript\">\n\t$(\"#second-example\").addItalicTextAfter(\"Et celui-ci après mon autre exemple !\");\n</pre>\n\n<h3>...qui se soucie de l'aspect et des performances...</h3>\n\n<p>Il décide même de permettre la customisation de son rendu : style, classe, balise : il pense ne rien omettre.</p>\n\n<p class=\"highlighting\">Conscient qu'il ne connait pas le nombre d'éléments ciblés et donc le temps de « bloquage » imposé par son script, il va même jusqu'à rendre le traitement asynchrone ! Vraiment sympa ce gars.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\"> \n;(function ($) {\n\t$.fn.addItalicTextAfter = function (content, params) {\n\t\n\t\t// Si le développeur ne souhaite pas changer la phrase initiale et qu'il met directement les paramètres...\n\t\tif (typeof content === \"object\") {\n\t\t\t// ... \"params\" est \"content\"...\n\t\t\tparams = content;\n\t\t\t// ...et il n'y a pas de \"content\" au final.\n\t\t\tcontent = null;\n\t\t}\n\n\t\tif (content == null) {\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\n\t\t}\n\t\t\n\t\t// On créé un objet anonyme avec les propriétés style, class et tag dans la fonction extend.\n\t\t// Celle-ci va placer l'objet dans la variable \"params\" en lui ajoutant les éventuelles propriétés déjà existantes depuis \"params\" passé en paramètre.\n\t\t// Ça permet de définir des paramètres par défaut écrasés par ceux passés en paramètre de la fonction.\n\t\tparams = $.extend({\n\t\t\t\"style\": { \"font-style\": \"italic\" },\n\t\t\t\"class\": \"\",\n\t\t\t\"tag\": \"p\"\n\t\t}, params);\n\n\t\treturn this.each(function () {\n\t\t\t// Création de $this pour étendre l'utilisation de $(this) dans un setTimeout.\n\t\t\tvar $this = $(this);\n\t\t\t\n\t\t\t// A partir d'ici, le code exécuté est asynchrone.\n\t\t\t// La suite des instructions sera exécuté avant, après, pendant la suite... nous n'en avons aucune idée.\n\t\t\t// L'avantage est que si le temps de traitement ci-dessous est long, il ne bloque pas notre script, ni même notre page.\n\t\t\tsetTimeout(function () {\n\t\t\t\tvar \n\t\t\t\t\t// Je crée un tableau de class à ajouter (si plusieurs class sont passées).\n\t\t\t\t\teachClass = params.class.split(\" \"),\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tp = $(\"&lt;\" + params.tag + \"&gt;\") // Je place la balise souhaitée...\n\t\t\t\t\t\t.css(params.style) // ...avec le style souhaité...\n\t\t\t\t\t\t.text(content); // ...et le contenu souhaité.\n\t\t\t\t\n\t\t\t\t// J'ajoute chacune des classes du tableau à mon objet.\n\t\t\t\tfor\t(var i in eachClass) {\n\t\t\t\t\tp.addClass(eachClass[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Le mécanisme précédent pouvait être simplement remplacé par :\n\t\t\t\t// p.attr(\"class\", params.class) car il n'est pas sensé y avoir \"déjà\" des classes sur l'objet créé.\n\t\t\t\t// Cependant prenez l'habitude de faire ainsi pour éviter \"d'écraser\" les classes déjà présentes.\n\t\t\t\t\n\t\t\t\t// Utilisation de $this car $(this) n'existe plus dans le setTimeout.\n\t\t\t\t$this.after(p);\n\t\t\t}, 0); // Ne perdons pas une seconde à exécuter notre code donc mettons 0 milliseconde de délai.\n\t\t});\n\t}\n})(jQuery);\n</pre>\n\n<p>Ce qui donne à l'utilisation sur l'id <samp>third-example</samp> :</p>\n\n<pre id=\"third-example\" class=\"prettyprint linenums lang-javascript\">\n\t$(\"#third-example\").addItalicTextAfter(\n\t\t\"Dommage que mon nom de fonction ne veuille plus rien dire !\", {\n\t\t\tclass: \"warning my-example\",\n\t\t\tstyle: { \"font-weight\": \"bold\", \"font-size\": \"0.8em\" } \n\t\t}\n\t);\n</pre>\n\n<h3>...mais qui oublie de mettre une Callback !</h3>\n\n<p>C'est bien beau tout ça. Notre développeur partage donc son œuvre, sans donner le code source (non minifié), sans même mettre en place de support ou un moyen de le contacter. Il oublie même qu'il avait développé son super plugin bien utile.</p>\n\n<p>Mais ce à quoi notre développeur sympa n'a pas pensé, c'est que le développeur utilisateur du plugin veut peut-être rajouter ceci après son code :</p>\n\n<pre id=\"fourth-example\" class=\"prettyprint linenums lang-javascript\">\n\t$(\"#fourth-example\").addItalicTextAfter(\"Marche pas...\", { class: \"my-target like-a\" });\n\t\n\t// Souhaite permettre une alerte au clique sur l'élément.\n\t$(\".my-target\").click(function () {\n\t\talert(\"« Ah bah pas cool :/ » - Christophe L.\");\n\t});\n\t// Mais sans succès...\n</pre>\n\n<p class=\"highlighting\">FAIL...</p>\n\n<h2>La Callback : bonne pratique de développement asynchrone</h2>\n\n<p>C'est une énorme problème de la part de notre développeur sympa que de ne pas avoir mis de Callback ou Fonction de rappel ! Ça a rendu des tas de développeurs tristes ! Peut-être que ça a même tué des petits chats.</p>\n\n<p>Dans notre exemple précédent, l'exécution du code est asynchrone ce qui signifie qu'il n'y a aucun moyen de savoir quand le code exécuté sera fini, donc aucun moyen de savoir quand l'élément portant la classe <samp>my-target</samp> sera ajouté au DOM et donc aucun moyen de savoir si l'évènement <samp>onclick</samp> ajouté à la suite va cibler un élément ou cibler le vide. Alors on fait quoi maintenant ? On met à notre tour un <samp>setTimeout</samp> en croisant les doigts pour que nos éléments soient arrivés dans le DOM avant qu'on exécute de quoi leur associer un <samp>onclick</samp> ? On va voir ça plus loin dans les mauvaises pratiques. Pour le moment : ajoutons notre Callback.</p>\n\n<h3>La Fonction de rappel dans une fonction asynchrone</h3>\n\n<p>Voici ce qu'on aurait pu faire si nous avions au minima les sources.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\"> \n;(function ($) {\n\t$.fn.addItalicTextAfter = function (content, params, callback) {\n\t\n\t\t// Si l'utilisateur tape un \"content\", mais ne donne pas de \"params\"...\n\t\tif (typeof params === \"function\") {\n\t\t\t// ...\"params\" est \"callback\"...\n\t\t\tcallback = params;\n\t\t\t// ...et il n'y a pas de \"params\".\n\t\t\tparams = null;\n\t\t}\n\n\t\t// Si l'utilisateur ne saisit qu'une fonction en premier paramètre...\n\t\tif (typeof content === \"function\") {\n\t\t\t// ...\"content\" est \"callback\"...\n\t\t\tcallback = content;\n\t\t\t// ...il n'y a pas de \"params\"...\n\t\t\tparams = null;\n\t\t\t// ...et il n'y a pas de \"content\"...\n\t\t\tcontent = null;\n\t\t} else if (typeof content === \"object\") {\n\t\t\tparams = content;\n\t\t\tcontent = null;\n\t\t}\n\t\t\n\t\tif (content == null) {\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\n\t\t}\n\n\t\tparams = $.extend({\n\t\t\t\"style\": { \"font-style\": \"italic\" },\n\t\t\t\"class\": \"\",\n\t\t\t\"tag\": \"p\"\n\t\t}, params);\n\n\t\treturn this.each(function () {\n\t\t\tvar $this = $(this);\n\t\t\tsetTimeout(function () {\n\t\t\t\tvar \n\t\t\t\t\teachClass = params.class.split(\" \"),\n\t\t\t\t\tp = $(\"&lt;\" + params.tag + \"&gt;\")\n\t\t\t\t\t\t.css(params.style)\n\t\t\t\t\t\t.text(content);\n\t\t\t\t\n\t\t\t\tfor\t(var i in eachClass) {\n\t\t\t\t\tp.addClass(eachClass[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$this.after(p);\n\t\t\t\t\n\t\t\t\t// Dans le cas ou une Callback a été passé on l'exécute.\n\t\t\t\t// On ne sait pas quand elle sera exécutée, mais ce que l'on sait, c'est que l'objet créé sera déjà dans le DOM.\n\t\t\t\tif (typeof callback === \"function\") {\n\t\t\t\t\t// On exécute la Callback.\n\t\t\t\t\t// On a arbitrairement décidé, parce que ça semblait utile, de passer en paramètre de Callback l'objet créé.\n\t\t\t\t\t// Le développeur pourra même manipuler l'objet créé sans le re-cibler après traitement.\n\t\t\t\t\tcallback(p);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t});\n\t}\n})(jQuery);\n</pre>\n\n<p>Et je fais un utilisateur/développeur heureux qui cible l'id <samp>fifth-example</samp> :</p>\n\n<pre id=\"fifth-example\" class=\"prettyprint linenums lang-javascript\">\n// Définition du code qui sera exécuté après \"addItalicTextAfter\".\nfunction whatIwantExecuteAfter(element) {\n\t// \"element\" contient l'objet créé par \"addItalicTextAfter\".\n\telement\n\t\t.text(\"J'écris ce que je veux avec le style que je veux !\") // On change le texte nous-mêmes au lieu de passer par la fonction \"addItalicTextAfter\".\n\t\t.addClass(\"like-a\") // On change la class nous-mêmes au lieu de passer par la fonction \"addItalicTextAfter\".\n\t\t\n\t\t// On ajoute un évènement au clique sur l'élément.\n\t\t.click(function () {\n\t\t\talert(\"« Merci monsieur Morpheus ! » - Keanu R.\");\n\t\t});\n}\n\n$(\"#fifth-example\").addItalicTextAfter(whatIwantExecuteAfter);\n</pre>\n\n<p>Il est également possible de directement passer par une fonction anonyme. Les développeurs jQuery y sont habitués !</p>\n\n<pre id=\"sixth-example\" class=\"prettyprint linenums lang-javascript\">\n$(\"#sixth-example\").addItalicTextAfter(function (element) {\n\telement\n\t\t.text(\"J'écris encore ce que je veux, et ouais !\")\n\t\t.addClass(\"like-a\")\n\t\t.click(function () {\n\t\t\talert(\"« Monde de merde ! » - Laurence F.\");\n\t\t});\n});\n</pre>\n\n<h3>Déléguer à la Callback est une bonne chose</h3>\n\n<p>On s'aperçoit aisément qu'au final, l'ajout de style, ou de texte, etc... peut également être fait par la Callback à condition de lui en donner les moyens. Il faut donc se limiter à ce que votre développement doit faire et <span class=\"highlighting\">toujours</span> laisser des portes de sorties dans vos traitements.</p>\n\n<h3>Plusieurs Callbacks pour un traitement</h3>\n\n<p>Il ne faut pas hésiter à parsemer son code de Callbacks aux endroits stratégiques pour changer le comportement de votre code. Dans notre exemple précédent, on pourrait avoir une Callback pour chaque élément traité et une Callback quand tous les éléments sont traités.</p>\n\n<h2>Les mauvaises pratiques pour rattraper la boulette</h2>\n\n<p>Comme toujours les solutions ne manquent pas quand un développeur sympa à « oublié » de proposer une Fonction de rappel dans son développement qu'il a eu la délicatesse de minifier.</p>\n\n<h3>La vilaine fonction jQuery live</h3>\n\n<p>La fonction <samp>jQuery(target).live(event, callback)</samp> est utilisé à la place de <samp>jQuery(target).bind(event, callback)</samp> (ou <samp>jQuery(target).on(event, callback)</samp>) par les développeurs qui ont une méconnaissance totale de l'ordre d'exécution d'un code dans plusieurs fichiers JavaScript éparpillés sur une page HTML elle-même remplit de balises <samp>&lt;script&gt;</samp> dans tous les coins...</p>\n\n<p>Mais sinon elle permet d'associer un évènement sur un élément du DOM <span class=\"highlighting\">qui n'est pas encore présent</span> dans celui-ci. Nous allons l'utiliser de la manière la « plus propre » possible pour corriger le problème précédent. Écoutons en « live » l'arrivée d'éléments après l'id <samp>seventh-example</samp>.</p>\n\n<pre id=\"seventh-example\" class=\"prettyprint linenums lang-javascript\">\n\t$(\"#seventh-example\").addItalicTextAfter({ class: \"my-target like-a\" });\n\t\n\t// Je décide d'écouter en boucle les nouveaux éléments \".my-target\" ajouté dans le DOM.\n\t// Cette action se fera à intervalle régulier et le code exécuté ci-dessous l'ai lui-même de manière asynchrone.\n\t$(\".my-target\").live(\"click\", function () {\n\t\t// Dès qu'un élément \".my-target\" est ajouté au DOM l'évènement \"onclick\" lui est ajouté.\n\t\talert(\"« Hey, Mais ça sent la merde ? » - Christophe L.\");\n\t\t// Nous allons arrêter cette écoute de nouveaux éléments ajoutés car nous savons qu'il n'y en aura pas d'autres.\n\t\t$(this).die(\"click\"); // Ça, \"die\", c'est ce qui rend \"assez propre\" l'utilisation de live.\n\t});\n</pre>\n\n<p class=\"eye-catching\">Note : la fonction <samp>die</samp> n'enlève pas l'évènement \"onlclick\" d'un élément. Elle se contente de faire arrêter l'écoute des nouveaux éléments ciblés dans le DOM qui sont arrivés.</p>\n\n<p>Vous pouvez cependant constater que cela a marché car il n'y a eu qu'un seul élément d'ajouté. S'il y en avait eu plusieurs, il aurait fallu exécuter <samp>die</samp> qu'avec le dernier arrivé ce qui aurait compliquer la tâche. Une simple fonction de Callback, c'est tout ce qu'il vous aurait fallu.</p>\n\n<p>L'inconvénient de <samp>live</samp> c'est qu'il ne marche qu'avec un nombre limité d'évènement. Voyons juste après la méthode universelle.</p>\n\n<h3>Le vilain setInterval passe partout</h3>\n\n<p>Avec, comme précédemment, une utilisation propre du <samp>setInterval</samp> on peut également s'en sortir. Voyez plutôt ça sur l'id <samp>eighth-example</samp>.</p>\n\n<pre id=\"eighth-example\" class=\"prettyprint linenums lang-javascript\">\n\t$(\"#eighth-example\").addItalicTextAfter({ class: \"my-example like-a\" });\n\t// On va vérifier à intervalle de 50 millisecondes le nombre d'éléments \".my-example\" sur la page.\n\tvar tempExampleInterval = setInterval(function () {\n\t\t// On s'attend au maximum à en recevoir un.\n\t\tif ($(\".my-example\").length == 1) {\n\t\t\n\t\t\t// Dès qu'on a un \".my-example\" dans le DOM on ajoute l'évènement à l'objet...\n\t\t\t$(\".my-example\").click(function () {\n\t\t\t\talert(\"« Nan mais c'est bon tu m'as soûlé moi, j'en veux pas de ton monde pourri moi... » - Keanu R.\");\n\t\t\t});\n\t\t\t// ...et on arrête le \"setInterval\".\n\t\t\tclearInterval(tempExampleInterval);\n\t\t}\n\t}, 50);\n</pre>\n\n<p>Comme pour l'exemple précédent, il n'y a pas de solution miracle. Il faut connaître le nombre d'élément qu'on s'attend à avoir pour mettre fin au timer. Si on ne le fait pas, notre page peut vite devenir une foire aux timers et aux codes inutilements exécutés.</p>\n\n<h2>Un petit cas concret avec le script SyntaxHighlighter</h2>\n\n<p>Le code JavaScript présenté dans cet article (à l'heure où j'ecris ces lignes) est écrit à la source sans couleurs. C'est le script JavaScript <a href=\"https://bitbucket.org/alexg/syntaxhighlighter/issue/283/highlighter-complete-callback\" title=\"SyntaxHighlighter\">SyntaxHighlighter</a> qui repasse sur tous les éléments pour les colorier, leur ajouter un nombre de ligne, etc... Cette transformation est asynchrone et il n'existe pas de Callback.</p>\n\n<h3>Utilisation d'un setInterval pour remplacer la Callback</h3>\n\n<p>Voici le code utiliser pour vous permettre \"d'agripper\" les exemples de code au clique gauche de la souris et de faire défiler le code.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\nvar \n\t// On compte les éléments qui vont nécessiter d'être transformé.\n\t// Le développeur a pensé à cette fonctionnalité.\n\t// Mais a oublié de mettre une Callback...\n\tbeforeHighlighted = SyntaxHighlighter.findElements().length,\n\tafterHighlighted;\n\n// Utilisation standard du script. \n// Voilà, à la fin de l'exécution de cette fonction asynchrone, notre code sera tout beau.\nSyntaxHighlighter.all();\n\n// Maintenant je veux permettre de glisser le code sur l'axe des y en maintenant ma souris enfoncée.\n// C'est impossible car les éléments à accrocher n'existerons qu'à la fin de l'exécution de \"SyntaxHighlighter.all();\", fin d'exécution que je ne connais pas...\n// Et comme déjà dit (il me semble) : pas de Callback.\n\n// On va boucler à l'intérieur de cette propre fonction jusqu'à ce que le traitement puisse commencer.\n(function eachElementHighlighted() {\n\t// Nous allons vérifier au bout de 100 milisecondes...\n\tsetTimeout(function () {\n\t\n\t\t// ...le nombre d'élément déjà transformé.\n\t\tafterHighlighted = $('.syntaxhighlighter');\n\t\t\n\t\t// S'il y a autant d'élément transformé que d'élément qu'il fallait transformer on passe dans le else.\n\t\t// Sinon on revérifie une nouvelle fois dans le if.\n\t\tif (afterHighlighted.length < beforeHighlighted) {\n\t\t\teachElementHighlighted();\n\t\t} else {\n\t\t\n\t\t\t/***************************************************************/\n\t\t\t/* Ici commence seulement le code utile à la fonctionnalité !! */\n\t\t\t/***************************************************************/\n\t\t\n\t\t\tif (!Modernizr.touch) {\n\t\t\t\tvar $sh = $(\".syntaxhighlighter\").css(\"overflow\",\"hidden\");\n\t\t\t\t$sh.mousedown(function (e) {\n\t\t\t\t\t$.data(this, \"draggable\", true);\n\t\t\t\t\t$.data(this, \"offset\", e.pageX);\n\t\t\t\t}).mouseup(function () {\n\t\t\t\t\t$.data(this, \"draggable\", false);\n\t\t\t\t\t$.data(this, \"offset\", 0);\n\t\t\t\t}).mouseleave(function () {\n\t\t\t\t\t$.data(this, \"draggable\", false);\n\t\t\t\t\t$.data(this, \"offset\", 0);\n\t\t\t\t}).mousemove(function (e) {\n\t\t\t\t\tif ($(this).data(\"draggable\")) {\n\t\t\t\t\t\t$(this).scrollLeft(parseInt($(this).scrollLeft() + ($(this).data(\"offset\") - e.pageX), 10));\n\t\t\t\t\t\t$.data(this, \"offset\", e.pageX);\n\t\t\t\t\t}\n\t\t\t\t}).data(\"draggable\", false).data(\"offset\", 0);\n\t\t\t}\n\t\t\t\n\t\t\t/**************************************************************/\n\t\t}\n\t}, 100); // On a mis 100 millisecondes. Il faut trouver le compromis entre nombre de vérification et perte de temps possible avant première vérification.\n})();\n</pre>\n\n<h3>Adieu setInterval, merci Fonction de rappel !</h3>\n\n<p>Voici ce que pourrait donner le code précédent avec une Callback...</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\nSyntaxHighlighter.all(function ($sh) {\n\tif (!Modernizr.touch) {\n\t\t$sh.css(\"overflow\",\"hidden\");\n\t\t$sh.mousedown(function (e) {\n\t\t\t$.data(this, \"draggable\", true);\n\t\t\t$.data(this, \"offset\", e.pageX);\n\t\t}).mouseup(function () {\n\t\t\t$.data(this, \"draggable\", false);\n\t\t\t$.data(this, \"offset\", 0);\n\t\t}).mouseleave(function () {\n\t\t\t$.data(this, \"draggable\", false);\n\t\t\t$.data(this, \"offset\", 0);\n\t\t}).mousemove(function (e) {\n\t\t\tif ($(this).data(\"draggable\")) {\n\t\t\t\t$(this).scrollLeft(parseInt($(this).scrollLeft() + ($(this).data(\"offset\") - e.pageX), 10));\n\t\t\t\t$.data(this, \"offset\", e.pageX);\n\t\t\t}\n\t\t}).data(\"draggable\", false).data(\"offset\", 0);\n\t}\n});\n</pre>\n\n<p>Ah ouais quand même...</p>", "dates" : { "published" : { "$date" : 1367588400000 }, "updated" : [] }, "script" : "(function ($) {\r\n\t$.fn.addPAfter = function () {\r\n\t\treturn this.each(function () {\r\n\t\t\tvar p = $(\"<p>\").css(\"font-style\", \"italic\").text(\"J'écris ce texte après mon exemple d'utilisation !\");\r\n\t\t\t$(this).after(p); // Et op, on ajoute ça après la cible courante.\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\n$(\"#first-example\").addPAfter();\r\n\r\n(function ($) {\r\n\t$.fn.addPAfter2 = function (content) {\r\n\t\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar p = $(\"<p>\").css(\"font-style\", \"italic\").text(content);\r\n\t\t\t$(this).after(p);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\n$(\"#second-example\").addPAfter2(\"Et celui-ci après mon autre exemple !\");\r\n\r\n(function ($) {\r\n\t$.fn.addPAfter3 = function (content, params) {\r\n\t\r\n\t\tif (typeof content === \"object\") {\r\n\t\t\tparams = content;\r\n\t\t\tcontent = null;\r\n\t\t} \r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\t\t\r\n\t\tparams = $.extend({\r\n\t\t\t\"style\": { \"font-style\": \"italic\" },\r\n\t\t\t\"class\": \"\",\r\n\t\t\t\"tag\": \"p\"\r\n\t\t}, params);\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar $this = $(this);\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tvar \r\n\t\t\t\t\teachClass = params.class.split(\" \"),\r\n\t\t\t\t\tp = $(\"<\" + params.tag + \">\")\r\n\t\t\t\t\t\t.css(params.style)\r\n\t\t\t\t\t\t.text(content);\r\n\t\t\t\t\r\n\t\t\t\tfor\t(var i in eachClass) {\r\n\t\t\t\t\tp.addClass(eachClass[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this.after(p);\r\n\t\t\t}, 0);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\n$(\"#third-example\").addPAfter3(\r\n\t\"Dommage que mon nom de fonction ne veuille plus rien dire !\", {\r\n\t\tclass: \"warning\",\r\n\t\tstyle: { \"font-weight\": \"bold\", \"font-size\": \"0.8em\" } \r\n\t}\r\n);\r\n\r\n$(\"#fourth-example\").addPAfter3(\"Marche pas...\", { class: \"like-a\" });\r\n\r\n;(function ($) {\r\n\t$.fn.addPAfter4 = function (content, params, callback) {\r\n\t\r\n\t\tif (typeof params === \"function\") {\r\n\t\t\tcallback = params;\r\n\t\t\tparams = null;\r\n\t\t}\r\n\r\n\t\tif (typeof content === \"function\") {\r\n\t\t\tcallback = content;\r\n\t\t\tparams = null;\r\n\t\t\tcontent = null;\r\n\t\t} else if (typeof content === \"object\") {\r\n\t\t\tparams = content;\r\n\t\t\tcontent = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\r\n\t\tparams = $.extend({\r\n\t\t\t\"style\": { \"font-style\": \"italic\" },\r\n\t\t\t\"class\": \"\",\r\n\t\t\t\"tag\": \"p\"\r\n\t\t}, params);\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar $this = $(this);\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tvar \r\n\t\t\t\t\teachClass = params.class.split(\" \"),\r\n\t\t\t\t\tp = $(\"<\" + params.tag + \">\")\r\n\t\t\t\t\t\t.css(params.style)\r\n\t\t\t\t\t\t.text(content);\r\n\t\t\t\t\r\n\t\t\t\tfor\t(var i in eachClass) {\r\n\t\t\t\t\tp.addClass(eachClass[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this.after(p);\r\n\t\t\t\t\r\n\t\t\t\tif (typeof callback === \"function\") {\r\n\t\t\t\t\tcallback(p);\r\n\t\t\t\t}\r\n\t\t\t}, 0);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\nfunction whatIwantExecuteAfter(element) {\r\n\telement\r\n\t\t.text(\"J'écris ce que je veux avec le style que je veux !\")\r\n\t\t.addClass(\"like-a\")\r\n\t\t.click(function () {\r\n\t\t\talert(\"« Merci monsieur Morpheus ! » - Keanu R.\");\r\n\t\t});\r\n}\r\n\r\n$(\"#fifth-example\").addPAfter4(whatIwantExecuteAfter);\r\n\r\n$(\"#sixth-example\").addPAfter4(function (element) {\r\n\telement\r\n\t\t.text(\"J'écris encore ce que je veux, et ouais !\")\r\n\t\t.addClass(\"like-a\")\r\n\t\t.click(function () {\r\n\t\t\talert(\"« Monde de merde ! » - Laurence F.\");\r\n\t\t});\r\n});\r\n\r\n$(\"#seventh-example\").addPAfter3({ class: \"my-target like-a\" });\r\n$(\".my-target\").live(\"click\", function () {\r\n\talert(\"« Hey, Mais ça sent la merde ? » - Christophe L.\");\r\n\t$(this).die(\"click\");\r\n});\r\n\r\n$(\"#eighth-example\").addPAfter3({ class: \"my-example like-a\" });\r\nvar tempExampleInterval = setInterval(function () {\r\n\tif ($(\".my-example\").length == 1) {\r\n\t\t$(\".my-example\").click(function () {\r\n\t\t\talert(\"« Nan mais c'est bon tu m'as soulé moi, j'en veux pas de ton monde pourri moi... » - Keanu R.\");\r\n\t\t});\r\n\t\tclearInterval(tempExampleInterval);\r\n\t}\r\n}, 50);", "style" : ".like-a {\r\ncolor: #0000ff;\r\ntext-decoration: underline;\r\ncursor: pointer;\r\n}\r\n.dark .like-a {\r\ncolor: #ffff00;\r\n}\r\n.like-a:hover {\r\ncolor: #ff0000;\r\n}\r\n.dark .like-a:hover {\r\ncolor: #00ffff;\r\n}", "title" : "Une <span>Callback</span> pour vos fonctions <span>JS</span> <span>asynchrones</span>", "urn" : "une-callback-pour-vos-fonctions-js-asynchrones" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ad" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<p>Utiliser jQuery pour du développement côté serveur serait vraiment formidable ! C'est possible avec Node.js. Nous y sommes enfin, l'une des parties très intéressante qui peut justifier l'utilisation de Node.js à la place de vos développements PHP et Cie. C'est le moment de travailler de la même façon côté client et côté serveur sur vos processus de contrôle (vos Contrôleurs en MVC) et donc de développer vos sites avec un unique langage de programmation : JavaScript. Cependant, sous Windows, il y a une petite difficulté en plus liée aux modules développés en code natif que nous allons surmonter ! C'est parti pour manipuler le DOM côté Back-end !</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title highlighting\">À la découverte de Node.js sous Windows</div>\n\t<nav class=\"content\">\n\t\t<ol>\n\t\t\t<li><a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Qu'est-ce que Node.js ?</a></li>\n\t\t\t<li><a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installation de Node.js</a></li>\n\t\t\t<li><a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">Simple application web avec Node.js</a></li>\n\t\t\t<li><a class=\"highlighting\" href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">Utiliser jQuery côté serveur avec Node.js</a></li>\n\t\t\t<li>Appels client asynchrones avec Node.js</li>\n\t\t\t<li>Un moteur de template avec Node.js</li>\n\t\t\t<li>Des sites multilingues avec Node.js</li>\n\t\t\t<li>La base de données MySQL et Node.js</li>\n\t\t\t<li>Une architecture MVC2 avec Node.js</li>\n\t\t</ol>\n\t</nav>\n</div>\n\n<h2>À propos du module node-jquery</h2>\n\n<p>L'utilisation du module Node.js <samp>node-jquery</samp> permet de manipuler des objets jQuery dans du code JavaScript développé pour être interprété côté serveur par le moteur JavaScript V8 (l'interpréteur JavaScript socle de Node.js). <samp>node-jquery</samp> est lui-même le socle de base permettant cette utilisation de l'autre côté et comme son développeur le dit « n'est simplement que ça ».</p>\n\n<p>Initialement développé par <a href=\"https://github.com/coolaj86\" title=\"coolaj86 (AJ ONeal)\" class=\"highlighting\">coolaj86</a> —le développeur qui a également développé le module <samp>node-walk</samp> utilisé <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">dans mon précédent billet</a>)— <samp>node-jquery</samp> va être dès à présent maintenu par la Team jQuery elle-même, ce qui assure un suivi et une utilisabilité solide de cette approche comme méthode de développement dans le futur.</p>\n\n<p class=\"eye-catching\">Note : il est donc possible que dans un futur proche se soit un autre plugin que <samp>node-jquery</samp> qu'il faille installer pour utiliser jQuery côté serveur, car node-jquery n'est pas le seul module permettant d'utiliser jQuery côté serveur. Cependant, l'utilisation de jQuery en elle-même restera identique et équivalente à celle du côté client.</p>\n\n<h3>Ce que nous dit la documentation node-jquery...</h3>\n\n<p>Comme toujours, rendez-vous sur <a href=\"https://npmjs.org/\" title=\"node.js\">le registre des modules Node.js</a> pour chercher <samp><a href=\"https://npmjs.org/package/jQuery\" title=\"node.js\">node-jquery</a></samp> et ainsi atteindre <a href=\"https://github.com/coolaj86/node-jquery\" title=\"coolaj86/node-jquery\">la page de projet et de documentation</a>.</p>\n\n<p>On y apprend que :</p>\n<ul>\n\t<li><span class=\"highlighting\">pour installer le module jQuery</span> : on utilise <samp>npm install jquery</samp> (<span class=\"eye-catching\">et pas</span> npm install j<span class=\"highlighting\">Q</span>uery) et</li>\n\t<li><span class=\"highlighting\">pour manipuler l'objet jQuery</span> : on déclare <samp>var $ = require('jquery').create();</samp> et manipule donc <samp>$</samp>.</li>\n</ul>\n\n<p class=\"eye-catching\">Note : vous constaterez qu'il y a plusieurs projets de socle jQuery en place pour utiliser la librairie jQuery côté serveur si vous fouillez le registre NPM. Libre à-vous d'en choisir une autre. Il faut cependant prendre en compte le support du module dans le temps.</p>\n\n<h3>...mais ce qu'elle ne nous dit pas</h3>\n\n<p>Malheureusement, que vous exécutiez votre fichier avec la ligne <samp>require('jquery').create()</samp> avant ou après installation du module <samp>node-jquery</samp>, si vous êtes sous Windows, vous aurez toujours la même erreur : « Cannot find module 'jquery' ». Nous allons arranger cela plus loin (<span class=\"eye-catching\">bon, en fait la doc mentionnait le problème sous Windows, mais j'aimais bien mes titres !</span>).</p>\n\n<figure>\n\t<figcaption>Sous Windows, jQuery ne marche pas (même après installation)</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-not-installed-error.png\" alt=\"Sous Windows, jQuery ne marche pas (même après installation)\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\">\n</figure>\n\n<h3>jQuery ne marche pas avec Node.js sous Windows</h3>\n\n<p>Et oui ! Nous avons mis le doigt sur un problème que rencontre tous les débutants Node.js qui commence à jouer avec les modules NPM sous Windows. Effectivement, dans <a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">mon deuxième billet</a>, j'ai passé sous silence les pré-requis qui nous auraient éviter ce souci pour entrer dans le vif du sujet. Maintenant, il est l'heure d'installer un environnement de développement Node.js plus complet pour résoudre ce problème.</p>\n\n<p>Si vous ne possédez pas sur votre machine Python, Microsoft Visual Studio et quelques autres dépendances, en tapant <samp>npm install jquery</samp> dans votre console vous allez obtenir une erreur :</p>\n\n<figure>\n\t<figcaption>Sans Python et Microsoft Visual Studio : jQuery ne marche pas</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-not-python-error.png\" alt=\"Sans Python et Microsoft Visual Studio : jQuery ne marche pas\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\">\n</figure>\n\n<p>En fouillant dans le répertoire <samp>node_modules</samp> le dossier jquery est pourtant bien là ! Alors pourquoi ça ne marche pas ! La réponse se trouve dans les logs des erreurs disponibles dans votre console ou, comme indiqué, dans le fichier npm.debug.log :</p>\n\n<p class=\"warning eye-catching\">\nError: Can't find Python executable \"python\", you can set the PYTHON env variable.\n</p>\n\n<p>et</p>\n\n<p class=\"warning eye-catching\">\ncontextify@0.1.5 install: `node-gyp rebuild`<br />\nerror `cmd \"/c\" \"node-gyp rebuild\"` failed with 1<br />\nerror Failed at the contextify@0.1.5 install script.<br />\nerror This is most likely a problem with the contextify package,<br />\nerror not with npm itself.<br />\nerror Tell the author that this fails on your system:<br />\nerror     node-gyp rebuild<br />\nerror You can get their info via:<br />\nerror     npm owner ls contextify<br />\nerror There is likely additional logging output above.\n</p>\n\n<p id=\"prerequis\">Résolevons ce problème !</p>\n\n<h2>Python et Microsoft Visual Studio comme pré-requis Node.js sous Windows</h2>\n\n<p>En réalité si jQuery ne fonctionne pas, c'est parce que l'un des modules Node.js dont il est dépendant n'est pas un module écrits en JavaScript mais un module écrits en code natif, le module <span class=\"highlighting\">contextify</span>, qui requiert donc d'être compilé sur la machine où il est utilisé pour fonctionner.</p>\n\n<p>C'est le module <span class=\"highlighting\">node-gyp</span> qui s'occupe de compiler les modules Node.js développés en language natif (autre qu'en JavaScript) et pour faire son travail il a besoin des logiciels Windows <span class=\"highlighting\">Python</span> ainsi que <span class=\"highlighting\">Microsoft Visual Studio</span> (ou Microsoft Visual C++).</p>\n\n<p class=\"eye-catching\">Nous ne le verrons pas dans ce billet, mais sachez qu'il est également possible de se procurer les sources compilés de contextify pour votre machine et ne pas avoir à installer Python et Microsoft Visual Studio. Cependant, puisque le cas de figure se représentera assez souvent (avec d'autres modules natifs), je vous conseille de le faire.</p>\n\n<h3>Installation de Python 2.7.x pour Windows</h3>\n\n<p>Pour commencer nous allons installer le logiciel <span class=\"highlighting\">Python</span> sur votre machine Windows. Bien que celui-ci existe en version 3.x.x il faut installer une version 2.7.x pour que cela fonctionne.</p>\n\n<ul>\n\t<li>Rendez-vous donc sur <a href=\"http://www.python.org/download/releases/\" title=\"Python Releases\">la page des « Releases » Windows</a> et téléchargez <a href=\"http://www.python.org/download/releases/2.7.4/\" title=\"Python 2.7.4 Release\">la dernière version 2.7.x</a> (dans mon cas c'est <a href=\"http://www.python.org/download/releases/2.7.4/\" title=\"Python 2.7.4 Release\">Python 2.7.4 du 6 avril 2013</a>)</li>\n\t<li>Téléchargez le <a href=\"http://www.python.org/ftp/python/2.7.4/python-2.7.4.amd64.msi\" title=\"Windows X86-64 MSI Installer\">Windows X86-64 MSI Installer (2.7.4)</a> et installez-le.</li>\n</ul>\n\n<p>A ce stade, en ré-essayant la commande <samp>npm install jquery</samp> l'erreur précédente est passée et la nouvelle erreur est :</p>\n\n<p class=\"eye-catching warning\">MSBUILD : error MSB3428: Impossible de charger le composant Visual C++ \"VCBuild.exe\" (MSBUILD : error MSB3428: Could not load the Visual C++ component \"VCBuild.exe\").</p>\n\n<h3>Installation de Microsoft Visual C++ pour Node.js</h3>\n\n<p>Pour vous procurer le « VCBuild.exe » dont il est question : installez le logiciel Microsoft Visual Studio 2010 (ou 2012). Vous pouvez vous contenter uniquement de la branche C++ du logiciel (Microsoft Visual C++) et vous contenter même de sa version Express (gratuite et moins lourde).</p>\n\n<ul>\n\t<li>Rendez-vous donc sur le site de Microsoft et téléchargez <a href=\"http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express\" title=\"Download | Microsoft Visual Studio 2012\">Microsoft Visual C++ 2010 Express</a> par exemple.</li>\n\t<li>Ouvrez l'installeur « vc_web.exe » et suivez les « Next ». Vous n'êtes pas obligé de sélectionner les produits optionnels. Cliquez enfin sur « Install » et les fichiers sont téléchargés pour installation et installés.</li>\n</ul>\n\n<p>En ré-essayant de nouveau la commande <samp>npm install jquery</samp> vous obtenez à présent l'erreur :</p>\n<p class=\"eye-catching warning\">error MSB8007: The Plateform for project 'contextify.vcxproj' is invalid.</p>\n\n<h4>Microsoft Windows SDK for Windows 7 and .NET Framework 4</h4>\n\n<p>Pour corriger l'erreur précédente :</p>\n\n<ul>\n\t<li>Rendez-vous à la page de téléchargement de <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8279\" title=\"Microsoft Windows SDK for Windows 7 and .NET Framework 4\">Microsoft Windows SDK for Windows 7 and .NET Framework 4</a>, téléchargez « winsdk_web.exe » et installez-le.</li>\n</ul>\n\n<p>En cas de problème :</p>\n\n<figure>\n\t<figcaption>En cas de problème avec Microsoft Windows SDK for Windows 7 and .NET Framework 4</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-sdk71-error.png\" alt=\"En cas de problème avec Microsoft Windows SDK for Windows 7 and .NET Framework 4\" width=\"658\" height=\"440\" style=\"width: 100%;height: auto;\">\n</figure>\n<ul>\n\t<li>Désinstallez les Microsoft Visual C++ 2010 Redistributable x86 et x64 déjà installées (<samp>Menu Windows</samp> puis <samp>Panneau de congiguration</samp> puis <samp>Désinstaller un programmes</samp>). Ré-essayez.</li>\n\t<li>Vous pouvez en plus <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8442\" title=\"Microsoft Windows SDK for Windows 7 and .NET Framework 4 (ISO)\">télécharger directement l'ISO du SDK</a> (« GRMSDK_EN_DVD.iso » pour x86 et « GRMSDKX_EN_DVD.iso » pour x64), gravez ou dézippez l'ISO et exécutez « setup.exe ».</li>\n</ul>\n\n<p>En ré-essayant de nouveau la commande <samp>npm install jquery</samp> vous obtenez à présent le message d'avertissement (en jaune) :</p>\n<p class=\"eye-catching\">warning C4530: C++ exception handler used, but unwind semantics are not enabled.</p>\n\n<p>Si c'est le cas c'est que tout s'est bien passé.</p>\n\n<h4>Visual C++ 2010 SP1 Redistributable Package</h4>\n\n<p>Pour (re)mettre les versions Microsoft Visual C++ 2010 Redistributable :</p>\n\n<ul>\n\t<li>Rendez-vous à la page de téléchargement de <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=13523\" title=\"Microsoft Visual C++ 2010 SP1 Redistributable Package\">Microsoft Visual C++ 2010 SP1 Redistributable Package</a>, téléchargez-le (en x86 ou x64 selon votre OS) et installez-le.</li>\n</ul>\n\n<h4>Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1</h4>\n\n<p>Pour vous assurer de posséder tout ce qu'il faut pour ne rencontrer aucun problème à l'avenir :</p>\n\n<ul>\n\t<li>Rendez-vous à la page de téléchargement de <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=4422\" title=\"Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1\">Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1</a>, téléchargez « VC-Compiler-KB2519277.exe » et installez-le.</li>\n\t<li>Redémarrez votre ordinateur... (grrr)</li>\n</ul>\n\n<h2>Développer côté serveur avec jQuery</h2>\n\n<p>Maintenant que les pré-requis sont en place vous ne devriez plus avoir de problème pour compiler les modules Node.js en langage natif. À présent :</p>\n\n<ul>\n\t<li>si ce n'est pas déjà fait : installez le module <span class=\"highlighting\">jQuery</span> (node-jquery) avec la commande <samp>npm install jquery</samp> depuis le répertoire de votre projet (pour moi C:\\nodejs\\website\\),</li>\n\t<li>et installez <span class=\"highlighting\">jsdom</span> depuis le même répertoire avec la commande <samp>npm install jsdom</samp>.</li>\n</ul>\n\n<p>En reprenant le fichier <a href=\"./upload/script/website.js\" title=\"Télécharger le fichier résultat de cet article\">website.js</a> de <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">mon billet précédent</a> ; voici comment inclure jsdom et jQuery :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var\n/*== Charger les modules Node.js ==*/\n\thttp = require(\"http\"),\n\texpress =  require(\"express\"),\n\thttpServer = express(),\n\t\n\tjsdom = require(\"jsdom\").jsdom, // Utilisation d'un créateur de DOM.\n\tjquery = require('jquery'), // Utilisation de jQuery côté serveur.\n\t\n/* ... */</code></pre>\n\n<h3>Créer le DOM côté serveur avec jsdom</h3>\n\n<p>Reprenons l'exemple de la page d'accueil du site qui se présentait ainsi dans mon <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">mon billet précédent</a> :</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n/* Accueil */\nhttpServer.get(appConfig.path, function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\n\t\t\t\t'&lt;head&gt;' +\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\n\t\t\t\t\t'&lt;title&gt;Ma première page&lt;/title&gt;' +\n\t\t\t\t\t'&lt;base href=\"//' + appConfig.url + '\" /&gt;' +\n\t\t\t\t'&lt;/head&gt;' +\n\t\t\t\t'&lt;body&gt;' +\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\n\t\t\t\t'&lt;/body&gt;' +\n\t\t\t'&lt;/html&gt;';\n\n\tresponse.writeHead(200, header);\n\tresponse.write(template);\n\tresponse.end();\n});\n\n/* ... */\n</pre>\n\n<p>Effectuons plusieurs changements pour nous amuser avec jQuery.</p>\n\n<ul>\n\t<li>Tout d'abord, ligne 8, nous avions créé une variable <samp>template</samp> représentant le contenu de la page qui allait être fourni au client (le navigateur du visiteur réclamant la page).</li>\n\t<li>Nous allons dans un premier temps transformer cette variable de type String en un véritable <samp>document</samp> DOM côté serveur avec <span class=\"highlighting\">jsdom</span>,</li>\n\t<li>et ensuite l'englober dans une <samp>window</samp> (fenêtre) émulée de 1024px par défaut.</li>\n\t<li>Pour finir nous allons restituer ce DOM sous forme de string pour l'envoyer au client comme précédemment à la ligne 21.</li>\n</ul>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n/* Accueil */\nhttpServer.get(appConfig.path, function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\t\n\t\t// L'ancienne variable \"template\" de type String est remplacée\n\t\t// par la variable \"document\" de type Object représentant le DOM de la page.\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html&gt;\" +\n\t\t\t\"&lt;html lang='fr'&gt;\" +\n\t\t\t\t\"&lt;head&gt;\" +\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t\"&lt;/head&gt;\" +\n\t\t\t\t\"&lt;body&gt;\" +\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\n\t\t\t\t\"&lt;/body&gt;\" +\n\t\t\t\"&lt;/html&gt;\"),\n\t\t\t\n\t\t// Un objet \"window\" est créé. \n\t\t// C'est l'émulation d'une fenêtre côté serveur qui a pour taille 1024px de large.\t\t\n\t\twindow = document.createWindow();\n\n\t\t// console.log(typeof document); // renvoi \"object\".\n\t\t// console.log(window.innerWidth); // renvoi \"1024\"\n\t\t\n\tresponse.writeHead(200, header);\n\t\n\t// On change la variable template par le rendu sous forme de string document (ou window.document).\n\tresponse.write(window.document.innerHTML);\n\tresponse.end();\n});\n\n/* ... */\n</pre>\n\n<h3>Manipuler le DOM côté serveur avec jQuery</h3>\n\n<p>Nous allons dans un exemple tout simple ajouter une balise <samp>h1</samp> à notre DOM après la création de celui-ci avec jQuery. Nous allons même effectuer un test pour démontrer comment le DOM peut être variable en fonction de conditions précises.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n/* Accueil */\nhttpServer.get(appConfig.path, function (request, response) {\n\tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html&gt;\" +\n\t\t\t\"&lt;html lang='fr'&gt;\" +\n\t\t\t\t\"&lt;head&gt;\" +\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\n\t\t\t\t\"&lt;/head&gt;\" +\n\t\t\t\t\"&lt;body&gt;\" +\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\n\t\t\t\t\"&lt;/body&gt;\" +\n\t\t\t\"&lt;/html&gt;\"),\t\n\t\twindow = document.createWindow(),\n\t\t\n\t\t// Permettre à jQuery de manipuler le DOM...\n\t\tjQuery = jquery.create(window), // ...et au développeur de le manipuler via jQuery(\"selecteur\")...\n\t\t$ = jQuery, // ...ou via $(\"selecteur\").\n\t\t\n\t// On crée un nœud \"h1\" contenant le texte \"Ceci est le titre d'origine !\".\n\th1Title = $(\"&lt;h1&gt;\").text(\"Ceci est le titre d'origine !\");\n\t// On l'ajoute au DOM serveur.\n\t$(\"body\").prepend(h1Title);\n\t\n\t// Si la condition est réalisée...\n\tif (1 == 1) { // ...ce qui est le cas ; renvoi \"true\"...\n\t\th1Title = $(\"h1\").text(\"Ceci est le titre changé !\"); // ... alors on cible le nœud h1 et on modifie le texte avec \"Ceci est le titre changé !\".\n\t}\n\t\t\n\tresponse.writeHead(200, header);\n\tresponse.write(window.document.innerHTML);\n\tresponse.end();\n});\n\n/* ... */\n</pre>\n\n<figure>\n\t<figcaption>Résultat de notre page d'accueil côté client</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-first-example.png\" alt=\"Résultat de notre page d'accueil côté client\" width=\"658\" height=\"100\" style=\"width: 100%;height: auto;\">\n</figure>\n\n<h3>Exemple de rendu conditionnel après un POST avec jQuery</h3>\n\n<p>Tournons nous à présent vers la seconde page de mon fichier <a href=\"./upload/script/website.js\" title=\"Télécharger le fichier résultat de cet article\">website.js</a> précédent : la page de connexion. Ajoutons lui quelques styles et prévoyons son rendu en cas d'erreur de connexion ou de réussite de l'utilisateur.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n/* Connexion */\nfunction connectionRender(request, response) {\n \tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\t// LE CONTENU COMPLET DE \"document\" SE TROUVE PLUS BAS.\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html &gt;&lt;html&gt;...\"),\n\t\twindow = document.createWindow(),\n\t\tjQuery = jquery.create(window),\n\t\t$ = jQuery;\n\t\t\n\t\t// Par défaut, on retire l'affichage après connexion puisqu'on vient d'arriver.\n\t\t// On modifiera cette partie de code plus loin.\n\t\t$(\"#logged\").remove();\n\n\tresponse.writeHead(200, header);\n\tresponse.write(window.document.innerHTML);\n\tresponse.end();\t\n}\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\n    connectionRender(request, response);\n}).post(appConfig.path + \"connexion\", function (request, response) {\n    connectionRender(request, response);\n});\n\n/* ... */\n</pre>\n\n<p class=\"highlighting\">Contenu complet de <samp>document = jsdom(\"&lt;!DOCTYPE html&gt;&lt;html&gt;...\")</samp> :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;!DOCTYPE html&gt; \n\t&lt;html&gt; \n\t\t&lt;head&gt; \n\t\t\t&lt;meta charset=\"utf-8\" /&gt; \n\t\t\t&lt;title&gt;Page de connexion&lt;/title&gt; \n\t\t\t\"&lt;base href=//\"  appConfig.url  \" /&gt;\" \n\n\t\t\t<!-- Prévoyons de cacher les messages d'erreur s'il n'y a pas d'erreur. -->\n\t\t\t&lt;style text=\"text/css\"&gt; \n\t\t\t\t.error { \n\t\t\t\t\tdisplay: none;\n\t\t\t\t} \n\t\t\t\t.error.show {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t.error span { \n\t\t\t\t\tdisplay: none;\n\t\t\t\t\tcolor: #ff0000;\n\t\t\t\t} \n\t\t\t\t.error span.show {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t&lt;/style&gt; \n\n\t\t&lt;/head&gt; \n\t\t&lt;body&gt; \n\t\t\t&lt;form id=\"login\" action=\"./connexion/\" method=\"POST\"&gt; \n\t\t\t\t&lt;div class=\"field-login-email\"&gt; \n\t\t\t\t\t&lt;label for=\"login-email\" placeholser=\"Email\"&gt;Email : &lt;/label&gt;\n\t\t\t\t\t<!-- On ajoute un attribut name pour récupération côté serveur. -->\n\t\t\t\t\t&lt;input id=\"login-email\" type=\"text\" name=\"login[email]\" /&gt; \n\n\t\t\t\t\t<!-- Créons nous des messages d'erreur pour l'email en cas d'erreur. -->\n\t\t\t\t\t<!-- Par défaut ils ne sont pas visibles. -->\n\t\t\t\t\t&lt;div class=\"error\"&gt; \n\t\t\t\t\t\t&lt;span class=\"empty\"&gt;Le champ email est vide.&lt;/span&gt; \n\t\t\t\t\t\t&lt;span class=\"invalide\"&gt;Le champ email est invalide.&lt;/span&gt; \n\t\t\t\t\t&lt;/div&gt; \n\n\t\t\t\t&lt;/div&gt; \n\n\t\t\t\t&lt;div class=\"field-login-password\"&gt; \n\t\t\t\t\t&lt;label for=\"login-password\" placeholser=\"Mot de passe\"&gt;Mot de passe : &lt;/label&gt;\n\t\t\t\t\t<!-- On ajoute un attribut name pour récupération côté serveur. -->\n\t\t\t\t\t&lt;input id=\"login-password\" type=\"password\" name=\"login[password]\" /&gt; \n\n\t\t\t\t\t<!-- Créons nous des messages d'erreur pour le mot de passe en cas d'erreur. -->\n\t\t\t\t\t<!-- Par défaut ils ne sont pas visibles. -->\n\t\t\t\t\t&lt;div class=\"error\"&gt; \n\t\t\t\t\t\t&lt;span class=\"empty\"&gt;Le champ mot de passe est vide.&lt;/span&gt; \n\t\t\t\t\t\t&lt;span class=\"invalide\"&gt;Le couple Email/Mot de passe est incorrecte !&lt;/span&gt; \n\t\t\t\t\t&lt;/div&gt; \n\n\t\t\t\t&lt;/div&gt; \n\n\t\t\t\t&lt;label&gt;&lt;input type=\"submit\" value=\"Ok\" /&gt;&lt;/label&gt; \n\t\t\t&lt;/form&gt; \n\n\t\t\t<!-- Prévoyons un affichage en cas de connexion réussie. -->\n\t\t\t&lt;div id=\"logged\"&gt;Vous êtes passé !&lt;/div&gt; \n\t\t&lt;/body&gt; \n\t&lt;/html&gt;\n</pre>\n\n<p>Ce qui donne comme rendu :</p>\n\n<figure>\n\t<figcaption>Résultat de notre page identique, car ajout masqué en CSS ou retiré côté serveur</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-second-example.png\" alt=\"Résultat de notre page identique, car ajout masqué en CSS ou retiré côté serveur\" width=\"658\" height=\"100\" style=\"width: 100%;height: auto;\">\n</figure>\n\n<h4>Gérer les erreurs</h4>\n\n<p>Quand la page de connexion est demandée suite au clique sur le bouton « Ok » c'est une requête POST qui est envoyée et le résultat est traité par le code ligne 27 de notre exemple JavaScript plus haut. À cette ligne, la fonction <samp>connectionRender</samp> est appelée tout comme en GET à la différence prêt que des variables POST existent dans le cas de figure POST (ce qui n'est pas le cas en GET).</p>\n\n<p class=\"highlighting\">Nous allons donc tester l'existence et le contenu des variables POST du formulaire pour décider de la réponse adaptée à notre visiteur.</p>\n\n<p>Tout d'abord, permettons à Express de récupérer les valeurs des champs de formulaire via l'attribut <samp>name</samp>. Pour cela il faut lui « demander » d'utiliser l'intergiciel <span class=\"highlighting\">bodyParser</span>.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\nhttpServer\n/* == Définir un environnement d'exécution : SET NODE_ENV=dev ==*/\n\t.configure(function () {\n\t\t/* Commun à tous les environnements */\n\t\t\n\t\t// Ajout du middleware \"bodyParser\" pour parser les attributs name\n\t\t// et les récupérer via request.body.\n\t\thttpServer.use(express.bodyParser());\n\t})\n/* ... */\n</pre>\n\n<p>Ensuite mettons en place le mécanisme de réception uniquement en POST.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n/* Connexion */\nfunction connectionRender(request, response) {\n \tvar\n\t\theader = {\n\t\t\t\"Content-Type\": \"text/html\",\n\t\t\t\"Charset\": \"utf-8\"\n\t\t},\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html &gt;&lt;html&gt;...\"),\n\t\twindow = document.createWindow(),\n\t\tjQuery = jquery.create(window),\n\t\t$ = jQuery;\n\n\t\t// Si on passe par ici après une réclamation en POST, on entre.\n\t\tif (request.method == 'POST') {\n\t\t\tvar\n\t\t\t\t// Par défaut, on estime que la validation du formulaire est bonne.\n\t\t\t\tisValid = true,\n\t\t\t\t// Normalement, cet info se récupère dans une base de donnée. C'est un des utilisateurs valide.\n\t\t\t\tpassEmail = \"tout@est.ok\",\n\t\t\t\t// Et ça c'est le mot de passe associé à l'utilisateur.\n\t\t\t\tpassPassword = \"azerty\",\n\t\t\t\t// Une regex pour vérifier la validité des emails.\n\t\t\t\tcheckEmail = /^[-._a-z0-9]+@[-._a-z0-9]+\\.[.a-z]{2,4}$/i;\n\n\t\t\t// Quoi qu'il arrive on réinjecte la valeur email (mais pas mot de passe).\n\t\t\t$(\"#login-email\").val(request.body.login.email.trim());\n\t\n\t\t\t// Le champ email est-il remplit ?\n\t\t\tif (request.body.login.email.trim() == \"\") {\n\t\t\t\t// S'il est vide, on le signale.\n\t\t\t\t$(\".field-login-email .error\").addClass(\"show\");\n\t\t\t\t$(\".field-login-email .error .empty\").addClass(\"show\");\n\t\t\t\t// Et on ne valide pas le formulaire.\n\t\t\t\tisValid = false;\n\n\t\t\t// Le champ email est-il valide ?\n\t\t\t} else if (!checkEmail.test(request.body.login.email.trim())) {\n\t\t\t\t// S'il est anormal, on le signale.\n\t\t\t\t$(\".field-login-email .error\").addClass(\"show\");\n\t\t\t\t$(\".field-login-email .error .invalide\").addClass(\"show\");\n\n\t\t\t\t// Et on ne valide pas le formulaire.\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\t// Le champ mot de passe est-il remplit ?\n\t\t\tif (request.body.login.password.trim() == \"\") {\n\t\t\t\t// S'il est vide, on le signale.\n\t\t\t\t$(\".field-login-password .error\").addClass(\"show\");\n\t\t\t\t$(\".field-login-password .error .empty\").addClass(\"show\");\n\t\t\t\t// Et on ne valide pas le formulaire.\n\t\t\t\tisValid = false;\n\t\t\t}\n\n\t\t\tif (isValid) {\n\t\t\t\t// Y a-t-il une concordance email / mot de passe.\n\t\t\t\tif (\n\t\t\t\t\trequest.body.login.email.trim() == passEmail &&\n\t\t\t\t\trequest.body.login.password.trim() == passPassword\n\t\t\t\t) {\n\n\t\t\t\t\t/////////////////\n\t\t\t\t\t// C'est ici qu'on va mettre en place un mécanisme de remplissage de session.\n\t\t\t\t\t/////////////////\n\n\t\t\t\t} else {\n\t\t\t\t\t// S'il y a une erreur, on le signale.\n\t\t\t\t\t$(\".field-login-password .error\").addClass(\"show\");\n\t\t\t\t\t$(\".field-login-password .error .invalide\").addClass(\"show\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Nous modifierons cette partie dans la partie suivante.\n\t\t$(\"#logged\").remove();\t\t\n\n\tresponse.writeHead(200, header);\n\tresponse.write(window.document.innerHTML);\n\tresponse.end();\t\n}\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\n    connectionRender(request, response);\n}).post(appConfig.path + \"connexion\", function (request, response) {\n    connectionRender(request, response);\n});\n\n/* ... */\n</pre>\n\n<p>Tout manquement au formulaire sera à présent signalé.</p>\n\n<figure>\n\t<figcaption>En cas d'erreur du formulaire on affiche les messages cachés</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-third-example.png\" alt=\"En cas d'erreur du formulaire on affiche les messages cachés\" width=\"658\" height=\"130\" style=\"width: 100%;height: auto;\">\n</figure>\n\n<h4>Gérer la réussite</h4>\n\n<p>Permettons également de conserver dans une variable de session des informations qui suivront l'utilisateur de page en page (un équivalent de $_SESSION en PHP par exemple) avec les intergiciels <span class=\"highlighting\">cookieParser</span> et <span class=\"highlighting\">session</span> de Express. Pour cela il va falloir allouer de la mémoire au cookie pour l'entregistrement avec <samp>express.session.MemoryStore</samp>.</p>\n\n<p>On récupère l'objet MemoryStore</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n\thttp = require(\"http\"),\n\texpress =  require(\"express\"),\n\thttpServer = express(),\n\n\t// Ajout de l'objet MemoryStore pour donner du volume au cookie de session.\n\tMemoryStore = express.session.MemoryStore,\n\n\tjsdom = require(\"jsdom\").jsdom, \n\tjquery = require('jquery'),\n\t\n/* ... */\n</pre>\n\n<p>On permet les sessions avec <span class=\"highlighting\">cookieParser</span> et <span class=\"highlighting\">session</span></p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\nhttpServer\n/* == Définir un environnement d'exécution : SET NODE_ENV=dev ==*/\n\t.configure(function () {\n\t\t/* Commun à tous les environnements */\n\t\thttpServer.use(express.bodyParser());\n\t\t\n\t\t/* Permettre de manipuler les sessions */\n\t    httpServer.use(express.cookieParser());\n\t\t/* Paramétrage des sessions */\n\t    httpServer.use(express.session({\n        \tstore: new MemoryStore(), // Allocation de place.\n        \tsecret: 'secret', // Secret connu du serveur rendant le cookie illisible pour le client.\n        \tkey: 'website.sid' // Nom du cookie.\n\t    }));\n\t})\n/* ... */\n</pre>\n\n<p>Ensuite terminons de mettre en place le mécanisme de réception.</p>\n\n<pre class=\"prettyprint linenums lang-javascript\">\n/* ... */\n\n\t\t\tif (isValid) {\n\t\t\t\tif (\n\t\t\t\t\trequest.body.login.email.trim() == passEmail &&\n\t\t\t\t\trequest.body.login.password.trim() == passPassword\n\t\t\t\t) {\n\t\t\t\t\n\t\t\t\t\t// En passant ici on initialise l'état d'utilisateur identifié.\n\t\t\t\t\trequest.session.user = request.session.user || {}; // Création ou conservation de l'objet arbitrairement nommé \"user\" s'il n'existe pas.\n\t\t\t\t\t\n\t\t\t\t\t// Passage à true de la propriété arbitrairement nommé \"isLogged\".\n\t\t\t\t\trequest.session.user.isLogged = true;\n\n\t\t\t\t} else {\n\t\t\t\t\t$(\".field-login-password .error\").addClass(\"show\");\n\t\t\t\t\t$(\".field-login-password .error .invalide\").addClass(\"show\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changement de la partie du rendu affiché en fonction d'un état connecté ou non connecté.\n\t\t// S'il y a un objet user avec la propriété isLogged à true.\n\t\tif (request.session.user && request.session.user.isLogged) {\n\t\t\t// On retire la partie hors-connexion.\n\t\t\t$(\"#login\").remove();\n\t\t} else {\n\t\t\t// On retire la partie connexion.\n\t\t\t$(\"#logged\").remove();\n\t\t}\t\n\n\tresponse.writeHead(200, header);\n\tresponse.write(window.document.innerHTML);\n\tresponse.end();\n\t\n/* ... */\n</pre>\n\n<p>À présent en tapant respectivement dans les champs « Email » et « Mot de passe » : \"tout@est.ok\" et \"azerty\" la page s'affichera en \"mode connecté\", même après rechargement de la page. Seul la fermeture du navigateur détruira le lien entre le client et la session car le cookie est par défaut paramétré pour expirer à la fin de la sesion. On affichera donc alors la partie \"non connecté\".</p>\n\n<figure>\n\t<figcaption>Si tout est okay, on est loggué.</figcaption>\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-fourth-example.png\" alt=\"Si tout est okay, on est loggué.\" width=\"658\" height=\"100\" style=\"width: 100%;height: auto;\">\n</figure>\n\n<h2>Réflexion sur l'utilisation de jQuery côté serveur</h2>\n\n<h3>Séparation de la vue et du contrôleur</h3>\n\n<p>C'est probablement le plus gros avantage d'utiliser jQuery côté serveur. Il permet ainsi d'avoir un template à plat dont on n'a pas à se soucier et un intégrateur ne connaissant rien en programmation (ça existe ?) pourrait créer des designs sans problèmes.</p>\n\n<h3>Ne pas faire du Responsive Web Design côté serveur</h3>\n\n<p>Même si l'on simule une fenêtre côté serveur, il ne sert à rien de gérer de la responsivité en essayant d'obtenir la taille de la fenêtre puisque celle qui nous intéresse est celle du client et non celle du serveur émulée. D'ailleurs les fonctions se rapportant à l'affichage ne fonctionnent pas toutes, car côté serveur, le navigateur n'est pas là pour vous répondre (ainsi <samp>show()</samp> et <samp>hide()</samp> ne marcheront pas par exemple).</p>\n\n<h3>Performance ?</h3>\n\n<p>La question. Il est sûr que passer par jQuery est plus lent à l'exécution que de simplement scinder le template en dix parties et de le remplir de conditions. Cependant, à la maintenance c'est un gain de temps complètement multiplié ! Entre payer des ressources qui développeront, débogueront et maintiendront en plus de temps et payer un serveur plus puissant : voyez où sont vos économies ! De plus, nous verrons plus loin que nous pourrons limiter jQuery à des cas précis et se servir d'un moteur de template (ce qui séparera « presque » la vue du contrôleur mais qui sera bien plus lisible que la méthode « v'l'a que je te fou tout au même endroit »).</p>\n\n<p class=\"eye-catching\">Je n'ai pas assez de retour d'expérience sur la rapidité en production avec énormément d'utilisateur simultané. Si vous en avez, n'hésitez pas à la partager.</p>\n\n<h2>Source</h2>\n\n<p>Notre fichier commence à être bien remplis. Dans un prochain billet Node.js nous allons voir comment scinder notre code qui commence à être bien long dans plusieurs fichiers.</p>\n\n<p>En attendant, vous pouvez <a href=\"./upload/script/website-jquery.zip\" title=\"Télécharger le fichier résultat de cet article\">télécharger le fichier résultat de cet article ici</a>.</p>", "dates" : { "published" : { "$date" : 1368268980000 }, "updated" : [] }, "title" : "<span>Utiliser</span> <span>jQuery</span> avec <span>Node.js</span> sous <span>Windows</span>", "urn" : "utiliser-jquery-avec-nodejs-sous-windows" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ae" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "5310456355dfd5f7698d48cc" } ], "content" : "<p>Mais le JavaScript n'est pas typé ? Mais si, il y en a 13 ! Ah non, il y en 7... bah il me semble qu'il y a Object, Function, Array, Math, String, Number, Boolean. Et tu fais quoi de RegExp ? Attends, Function c'est pas un type, c'est un sous type mais Null c'est un type. Ho là là...</p>\n\n<p>Si vous faites du jQuery à vos heures ou même pas mal de JavaScript sur vos sites web, il est temps d'apprendre tout ce qu'il y a à savoir sur le typage implicite de JavaScript, car oui : contrairement à ce que certain vous ont dit, JavaScript manipule des éléments typés. Les fonctions (et les instances) Object, Function, Array, Date, String, Number, Boolean, RegExp, Error ou encore les objets Globale, Date ou JSON : tous sont d'un seul et même type, le type Object. Pourtant String, Number et Boolean sont eux-même un type à par entière en plus des deux petits spéciaux les type Null et Undefined.</p>\n\n<p>Si vous deviez retenir quelques trucs rapidement à propos du JavaScript et des types ça serait que :</p>\n<ul>\n\t<li>Le JavaScript n'a que 6 types : Object, Number, String, Boolean, Null et Undefined.</li>\n\t<li>A part le type Object : les 5 autres types sont dit des types primitifs.</b>\n\t<li>Les types Null et Undefined sont des types spéciaux.</li>\n\t<li>La Function n'est qu'un type Object qui peut être exécuté et instancié avec « new ».</li>\n\t<li>Array, Date et RegExp sont des types Object instanciables (Function) tandis que Math est simplement un type Object.</li>\n\t<li>Bien que Number, String et Boolean soient des types primitifs, il existe un équivalent de type Object instanciable (Function) pour chacun d'eux (à ne pas confondre).</li>\n</ul>\n\n<figure>\n\t<img class=\"openable\" src=\"./upload/image/6-types-javascript-objet-primitif.png\" alt=\"Les 6 types en JavaScript\" width=\"658\" height=\"500\" style=\"width: 100%;height: auto;\">\n\t<figcaption>Les 6 types en JavaScript</figcaption>\n</figure>\n\n<p>Je vais dans un premier temps vous proposer la traduction d'un article de Dmitry Baranovskiy —développeur JavaScript expérimenté— qui explique très bien les types en JavaScript. Je lèverai le doute sur le fameux sixième type (Null ou Function). Et je vous fournirai des lignes de code test pour mettre en évidence ce qui a été expliqué.</p>\n\n<p>Dans cet article les propos entre [ ... ] sont les miens ainsi que ceux qui ne sont pas entre « ... ».</p>\n\n<p>Pour finir, bien que l'auteur vous encourage à lire les <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" title=\"Standard ECMA-262\">spécifications officielles</a> (pour les initiés), je vous encourage pour ma part à lire <a href=\"http://eloquentjavascript.net/\" title=\"Eloquent JavaScript - A Modern Introduction to Programming\">JavaScript Eloquent</a> (<a href=\"http://fr.eloquentjavascript.net/\" title=\"JavaScript Éloquent - Une introduction moderne à la programmation\">disponible en français ici</a>).</p>\n\n<h2>Témoignage de Dmitry Baranovskiy, développeur JavaScript</h2>\n\n<p><a href=\"http://blogs.adobe.com/webplatform/2012/08/27/javascript-types/\" title=\"Types JavaScript | Web Platform Team Blog\">Le billet original en anglais est sur le blogs d'Adobe (editeur de Flash)</a></p>\n\n<p>« J'aime le JavaScript. C'est un langage alliant puissance et flexibilité, mais à condition de bien savoir l'utiliser. Une fois que vous maîtrisez le langage JavaScript, vous pouvez construire pratiquement n'importe quoi, et cela vraiment rapidement et de manière interactive. »</p>\n\n<p>« Si vous pensez que le JavaScript est simple ou primitif, alors vous êtes tombé dans un piège. Vous constaterez qu'il y a pas mal de monde dans ce piège. » <span class=\"eye-catching\">Et un de plus par ici !</span> « Les soi-disant développeurs JavaScript du dimanche vous diront qu'un autre langage “X” est supérieur. Ils peuvent même vous dire que vous seriez mieux avec un système qui traduit la langue “X” en JavaScript. Pour sortir du piège et maitriser JavaScript cela exige un effort et du dévouement. Je le sais parce que, en 1997, j'en étais là. »</p>\n\n<p>« Depuis, j'ai appris en long, en large et en travers le JavaScript moi-même en étudiant les <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" title=\"Standard ECMA-262\">spécifications officielles</a>. Vous pouvez apprendre l'intégralité du langage de cette manière. En tout cas, si votre intitulé de poste comprend les mots “développeur JavaScript”, vous devriez. »</p>\n\n<h3>Trouverez vous la réponse ?</h3>\n\n<p>« Dans ce billet je vais tenter de présenter un petit extrait de programme JavaScript et vous demander de prédire ce qu'il va renvoyer. Si vous êtes un développeur JavaScript, cela sera un jeu d'enfant pour vous. » <span class=\"eye-catching\">Pour ma part, j'ai trouvé.</span> « Si vous êtes toujours en train d'apprendre le langage, vous allez avoir quelques soucis et j'espère que vous lirez les explications suivantes. »</p>\n\n<p>« Le code JavaScript suivant va afficher une fenêtre d'alerte. Que va contenir cette fenêtre ? »</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">« var five = 5;\nfive.three = 3;\nalert(five + five.three); »</code></pre>\n\n<p>« Allez à la fin de cet article pour trouver la réponse. » <span class=\"eye-catching\">En fait allez plutôt à la fin de cette partie.</span> « Et ci-dessous, je vais laisser une explication pour vous démontrer comment JavaScript arrive à ce résultat. »</p>\n\n<h3>Les six types qui existent en JavaScript</h3>\n\n<p>« Il n'y a que 6 <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8\" title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">types en JavaScript</a> : \n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8.6\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">Object</a>, \n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8.5\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">Number</a>, \n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8.4\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">String</a>, \n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8.3\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">Boolean</a>, \n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8.2\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">Null</a>, et \n<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8.1\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">Undefined</a>. »</p>\n\n<ul>\n\t<li>« <span class=\"highlighting\">Object</span> inclue les tableaux [<span class=\"eye-catching\">Array</span>], les fonctions [<span class=\"eye-catching\">Function</span>] et des objets ordinaires [<span class=\"eye-catching\">Object</span>, <span class=\"eye-catching\">Date</span>, <span class=\"eye-catching\">RegExp</span>, <span class=\"eye-catching\">Math</span>...]. »</li>\n\t<li>« <span class=\"highlighting\">Number</span> peut être un entier ou un nombre à virgule ou même les valeurs spécifiques <span class=\"eye-catching\">NaN</span> et <span class=\"eye-catching\">Infinity</span>. »</li>\n\t<li>« <span class=\"highlighting\">String</span> inclue la chaîne vide <span class=\"eye-catching\">\"\"</span>. » <span class=\"eye-catching\">Ainsi que toute chaîne de caractère.</span></li>\n\t<li>« <span class=\"highlighting\">Booleans</span> n'a que deux uniques valeurs : <span class=\"eye-catching\">true</span> et <span class=\"eye-catching\">false</span>. »</li>\n</ul>\n\n<p>« Les deux derniers types primitifs sont un peu déroutants : »</p>\n\n<ul>\n\t<li>« La seule valeur du type <span class=\"highlighting\">Null</span> est <span class=\"eye-catching\">null</span>. »</li>\n\t<li>« La seule valeur du type <span class=\"highlighting\">Undefined</span> est <span class=\"eye-catching\">undefined</span>. »</li>\n</ul>\n\n<p class=\"eye-catching\">Note : il est important de garder à l'esprit que les types primitifs Number (0, -10, NaN...), String (\"\", \"coucou\"...) et Bool (true, false) ont chacun leur équivalent en Object. Je parle d'équivalence car <samp>(new String(\"\"))</samp> n'est pas la même chose que <samp>\"\"</samp>, le premier est de type <samp>Object</samp> alors que le second de type <samp>String</samp>. Cela s'éclairera peut-être plus loin. Pour finir il est bon de rappeler que les valeurs 0, -10, NaN, \"\", \"coucou\", function() { return; }, { bla: \"\", blu,\"\" }... sont appelés des expressions ou (opérandes) et +, -, /, ==, !===... sont appelés des opérateurs.</p>\n\n<p>« Tous les types à l'exception de Object sont également appelés “primitif”. Le type d'une variable JavaScript n'est pas déclaré explicitement, il est défini par le moteur d'exécution JavaScript. Dans notre exemple, le type de la variable “five” est Number parce que nous lui avons assigné un nombre entier. »</p>\n\n<p>« Exactement comme d'autres langages de programmation, JavaScript va implicitement convertir le type d'une valeur en fonction de l'opérateur qui est appliquée à la valeur. Et à la différence d'autres langages de programmation, JavaScript <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-9\" title=title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">insiste lourdement là dessus</a>. Par exemple le résultat de <samp>\"5\"</samp> - <samp>\"3\"</samp> est le nombre <samp>2</samp> parce que l'opérateur moins demande la conversion des expressions [\"5\" et \"3\"] en Number. Si un opérateur n'arrive pas à convertir [(trouver une équivalence en Number)] l'un des membres, c'est <samp>NaN</samp> (<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-4.3.23\" title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">Not a Number</a>) qui est utilisé à la place. Par exemple <samp>\"5\"</samp> - <samp>\"Fred\"</samp> est implicitement converti en <samp>5</samp> - <samp>Nan</samp> ce qui donne <samp>NaN</samp>. »</p>\n\n<p>« L'ensemble complet des règles pour les conversions de types implicites n'est pas compliqué tant que vous savez quel type chaque opérateur exige pour les expressions qu'ils manipulent. »</p>\n\n<h3>Connaître et comprendre les règles de conversion implicite</h3>\n\n<p>« Les Object et String suivent la règle suivante : « <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-9.1\" title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">toute valeur doit être convertie en type primitif</a> ». »</p>\n<ul>\n\t<li>Si le type d'une expression doit être [converti en] Number [par l'opérateur], cela signifie que le moteur JavaScript va appeler la méthode <samp>valueOf()</samp> [si l'expression n'est pas de type primitif, donc un type Object] et si le résultat [de la convertion] n'est pas un type primitif, il est converti en type String par la méthode <samp>toString()</samp>. »</li>\n\t<li>Si le type de l'opérande doit être String, cela signifie que le moteur JavaScript commence d'abord par appeler la méthode <samp>toString()</samp> et si le résultat n'est pas un type primitif, il est converti avec la méthode <samp>valueOf()</samp>.</li>\n</ul>\n<p>« Dans chacun des cas, si le résultat obtenu au final n'est pas un type primitif. une exception est levée. »</p>\n\n<p>Voyons plutôt les conversions :</p>\n\n<p>Chaque opérateur demandera la conversion de l'expression en un type primitif bien précis pour fonctionner ( \"if (condition)\" demandera la conversion en un type Boolean de \"condition\", \"nombre * 3\" demandera la conversion en un type Number de \"nombre\", etc...).</p>\n\n<p class=\"eye-catching\">Note : L'opérateur <samp>+</samp> est « spécial ». La majorité des opérateurs imposent un type primitif à leur expression pour effectuer leur opération mais pas <samp>+</samp> qui lui, peut imposer soit des types String (concaténation), soit des types Number (addition). La condition est que si au moins une des expressions est de type String initialement, l'opérateur va demander des types String, s'il n'y a pas un seul type String initialement, l'opérateur va réclamer des types Number. Ce n'est pas le seul opérateur « spécial », par exemple l'opérateur <samp>==</samp> est très complexe dans sa réclamation de conversion d'expression.</p>\n\n<h4>L'expression doit être transformée en type Number</h4>\n\n<p>« Si le type de l'expression doit être <samp>Number</samp>, et que son type actuel est : »</p>\n\n<ul>\n\t<li>un <span class=\"highlighting\">Number</span> : aucune conversion</li>\n\t<li>« un <span class=\"highlighting\">Object</span> : la valeur est convertie en un type primitif et si le résultat n'est pas un nombre alors l'une des conversions suivantes [les 4 suivantes de cette liste] est appliquée. »</li>\n\t<li>« un <span class=\"highlighting\">String</span> : la chaîne est convertie en un nombre conformément aux règles habituelles en JavaScript. » NaN dans la majorité des cas.</li>\n\t<li>« un <span class=\"highlighting\">Boolean</span> : 1 si la valeur est true, sinon 0. »</li>\n\t<li>« un <span class=\"highlighting\">Null</span> : 0. »</li>\n\t<li>« un <span class=\"highlighting\">Undefined</span> : NaN »</li>\n</ul>\n\n<h4>L'expression doit être transformée en type String</h4>\n\n<p>« Si le type de l'expression doit être <samp>String</samp>, et que son type actuel est : »</p>\n\n<ul>\n\t<li>un <span class=\"highlighting\">String</span> : aucune conversion.</li>\n\t<li>« un <span class=\"highlighting\">Object</span> : la valeur est convertie en un type primitif et si le résultat n'est pas une chaîne de caractères alors l'une des conversions suivantes est appliquée. »</li>\n\t<li>« un <span class=\"highlighting\">Number</span> : le nombre sous forme de chaîne, par exemple \"123\" ou \"12.34\". »</li>\n\t<li>« un <span class=\"highlighting\">Boolean</span> : \"true\" or \"false\". »</li>\n\t<li>« un <span class=\"highlighting\">Null</span> : \"null\". »</li>\n\t<li>« un <span class=\"highlighting\">Undefined</span> : \"undefined\". »</li>\n</ul>\n\n<h4>L'expression doit être transformée en type Boolean</h4>\n\n<p>« Si le type de l'expression doit être <samp>Boolean</samp>, et que son type actuel est : »</p>\n\n<ul>\n\t<li>un <span class=\"highlighting\">Boolean</span> : aucune conversion.</li>\n\t<li>« un <span class=\"highlighting\">Object</span> : true. »</li>\n\t<li>« un <span class=\"highlighting\">Number</span> : false si la valeur est zéro [ou NaN], sinon true [même pour Infinity]. »</li>\n\t<li>« un <span class=\"highlighting\">String</span> : false si la valeur est une chaîne vide, sinon true. »</li>\n\t<li>« un <span class=\"highlighting\">Null</span> : false. »</li>\n\t<li>« un <span class=\"highlighting\">Undefined</span> : false. »</li>\n</ul>\n\n<p class=\"eye-catching\">Note : méfier vous ! Regardez l'exemple ci-dessous.</p>\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// A première vue, si on ne cerne pas la différence entre le type String (type primitif) et l'objet String (type Object),\n// et bien on peut penser que ces deux lignes sont équivalentes.\nvar primiveString = \"\";\nvar objectString = new String(\"\");\n\n// Mais la première est un type String.\nif (primiveString) {\n\tconsole.log(\"true\");\n} else {\n\tconsole.log(\"false\"); // On passe ici !\n}\n// Et la conversion en Bool d'un String vide renvoi \"false\".\n\n// Quant à la deuxième, elle est de type Object.\nif (objectString) {\n\tconsole.log(\"true\"); // On passe ici !\n} else {\n\tconsole.log(\"false\");\n}\n// Et la conversion en Bool d'un Object renvoi \"true\" quoi qu'il arrive !\n\n// Mais par contre...\nif (objectString.toString()) {\n\tconsole.log(\"true\");\n} else {\n\tconsole.log(\"false\");\n}\n//...avec toString(), on renvoi bien \"false\".\n\n// car \"\" et (new String(\"\")).toString() sont eux bien égaux.</code></pre>\n\n<h4>L'expression doit être transformée en type Object</h4>\n\n<p>« Si le type de l'expression doit être <samp>Object</samp>, et que son type actuel est : »</p>\n\n<ul>\n\t<li>un <span class=\"highlighting\">Object</span> : aucune conversion.</li>\n\t<li>« un <span class=\"highlighting\">Number</span> : la valeur est injecté dans l'objet équivalent à Number : (new Number(value)). »</li>\n\t<li>« un <span class=\"highlighting\">String</span> : la valeur est injecté dans l'objet équivalent à String : (new String(value)). »</li>\n\t<li>« un <span class=\"highlighting\">Boolean</span> : la valeur est injecté dans l'objet équivalent à Boolean : (new Boolean(value)). »</li>\n\t<li>« un <span class=\"highlighting\">Null</span> : Une exception est levé. »</li>\n\t<li>« un <span class=\"highlighting\">Undefined</span> : Une exception est levé. »</li>\n</ul>\n\n<h3>Et la réponse est !</h3>\n\n<p>« Maintenant que les règles de conversions sont claires, retournons à notre exemple du début. »</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">« var five = 5;\nfive.three = 3;\nalert(five + five.three); »</code></pre>\n\n<p>« Comme expliqué avant, la première ligne crée une variable nommée <samp>five</samp> dont le type est Number. »</p>\n\n<p>« Quand l'<a href=\"http://ecma-international.org/ecma-262/5.1/#sec-11.2.1\" title=\"ECMAScript Language Specification - ECMA-262 Edition 5.1\">assesseur de propriété</a> lit <samp>five</samp>, il est converti en type Object. L'équivalent du type Number est le Constructeur Number [(le type Object)] qui produit un objet [(puisque c'est une fonction)], et pas le type primitif Number. La seconde ligne de notre exemple est donc un équivalent [pour le moteur d'exécution dans ce cas précis] de : »</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">« (new Number(five)).three = 3; »</code></pre>\n\n<p>« Comme vous pouvez le constater, aucune référence à une variable n'a été faite pour l'objet new Number. Après que cette expression ai été évaluée, la propriété three de l'objet Number est abandonnée. »</p>\n\n<p>« Le <samp>five.three</samp> de la troisème ligne crée un nouvel objet Number. Comme le nouvel objet n'a pas de propriété <samp>three</samp>, la propriété spéciale <samp>undefined</samp> (est [affectée et] retournée [et <samp>five.three</samp> est de type Undefined]. Le résultat est équivalent à : »</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">« alert(5 + undefined); »</code></pre>\n\n<p>« L'opérateur d'addition converti chacune des deux expressions en type Number. Dans ce cas <samp>undefined</samp> est converti en <samp>NaN</samp> [et 5 reste de type Number] ce qui donne : »</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">« alert(5 + NaN); »</code></pre>\n\n<p id=\"demo\">« Ce qui explique pourquoi la fenêtre d'erreur dans notre exemple affiche <samp>NaN</samp>. »</p>\n\n<h3>Pour aller plus loin dans la compréhension</h3>\n\n<p>Que ce passerai t-il si le constructeur Number (le type Object (qui affiche 'function' testé par typeof)) possédait bel et bien une propriété nommée « three » ?</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Ajoutons au constructeur de la fonction Number (le type Object) la propriété « three ».\nNumber.prototype.three = 0; // Initialisation la arbitrairement à 0.\n\nvar five = 5;\nfive.three = 3;\nalert(five + five.three);</code></pre>\n\n<p>Cette fois la sortie va t-elle être <samp>NaN</samp> ou <samp>8</samp> ?</p><p>Et bien en vérité elle sera <samp>5</samp> (défini dans le prototype). Pourquoi ? La réponse est que <samp>five.three</samp> devient bien <samp>(new Number(five)).three</samp> et qu'une propriété three existant bien : à ce moment précis de l'exécution, <samp>(new Number(five)).three</samp> ne vaut plus <samp>0</samp> (prototype) mais bien <samp>3</samp> (assignation). Cependant, une fois l'instruction terminée : le <samp>(new Number(five))</samp> disparait et la valeur <samp>3</samp> de la propriété disparaît avec lui. Passé à l'instruction suivante, <samp>five</samp> est lu en tant que type Number et à <samp>five.three</samp> le moteur JavaScript recommence le processus précédent pour aboutir à <samp>0</samp> (pas d'assignation ici).</p>\n\n<p class=\"highlighting\">Obtenir 8 en forçant la valeur du prototype</p>\n\n<p>Pour obtenir en sortie <samp>8</samp> <span class=\"highlighting\">sans toucher au code</span>, la seule solution est de définir le <samp>prototype.three</samp> à <samp>3</samp></p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">Number.prototype.three = 3;\nvar five = 5;\nfive.three = 3;\nalert(five + five.three);</code></pre>\n\n<p class=\"highlighting\">Obtenir 8 par avec une variable intermédiaire</p>\n\n<p>Pour obtenir en sortie <samp>8</samp> on peut également utiliser une variable intermédiaire pour « conserver » l'état de transformation <samp>(new Number(five)).three.</samp></p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">Number.prototype.three = 0;\nvar \n\tfive = 5,\n\ttemp = five.three = 3;\nalert(five + temp);</code></pre>\n\n<p class=\"highlighting\">Obtenir 8 par déclaration Object au lieu de Number</p>\n\n<p>Pour obtenir en sortie <samp>8</samp> on peut également initialiser directement un type Number à partir du constructeur Number.</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">Number.prototype.three = 0;\nvar five = new Number(5);\nfive.three = 3;\nalert(five + five.three);</code></pre>\n\n<p class=\"highlighting\">Obtenir 8 en Bonus</p>\n\n<p>Pour obtenir en sortie <samp>8</samp> on pouvait aussi faire....</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">alert(8);</code></pre>\n\n<p>... okay je m'arrête là :) C'était juste, pour finir en vous disant que bien que les tests ci-avant sont « inutiles » : ils sont là uniquement pour vous montrer les différents mécanismes possibles et la richesse de ceux-ci comparés à d'autres langages plus strictes. Après « c'est bien » ou « c'est mal » ; c'est une autre histoire.</p>\n\n<h2>Function et Null sont dans un bâteau</h2>\n\n<p>D'un côté, Dmitry Baranovskiy et moi-même affirmons que les 6 types en JavaScript sont :</p>\n\n<ul>\n\t<li>Object, Number, String, Boolean, <span class=\"highlighting\">Null</span> et Undefined.</li>\n</ul>\n\n<p>Et pourtant, vous pourrez lire, comme dans <a href=\"http://eloquentjavascript.net/\" title=\"Eloquent JavaScript - A Modern Introduction to Programming\">JavaScript Eloquent</a> (<a href=\"http://eloquentjavascript.net/chapter2.html\" title=\"Eloquent JavaScript - A Modern Introduction to Programming\">ici, ligne 4</a>) que les 6 types de JavaScript sont :</p>\n\n<ul>\n\t<li>Object, Number, String, Boolean, <span class=\"highlighting\">Function</span> et Undefined.</li>\n</ul>\n\n<p>Mais alors qui a raison ? S'il y a bien quelqu'un qui a raison ce sont les <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" title=\"Standard ECMA-262\">spécifications officielles</a> qui liste bien que les 6 types sont <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-8\" title=\"Standard ECMA-262\">Object, Number, String, Boolean, Null et Undefined.</a></p>\n\n<p>Mais alors comment des ouvrages professionnels peuvent se tromper ? En réalité il ne se trompe pas réellement, mais ne font pas référence aux types JavaScipt mais <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-11.4.3\" title=\"Standard ECMA-262\">aux valeurs que peut retourner la fonction <samp>typeof</samp></a> censé retourner le type d'une expression. En effet la spécification demande explicitement aux moteurs JavaScript de retourner 'function' et non pas 'object' pour une fonction (type Object) et de retourner 'object' plutôt que 'null' pour la valeur null (le type Null). Et bah franchement...</p>\n\n<h2>Mémo : les 6 types JavaScript</h2>\n\n<p>Afin de tester ce qui a été évoqué par <span class=\"highlighting\">Dmitry Baranovskiy</span>, voici plusieurs tests.</p>\n\n<h3>Le type Object (et déclinaisons)</h3>\n\n<h4>Object</h4>\n\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/********************/\n/* Le type Object */\n/********************/\n\n// Objet en JavaScript\nvar objectJS = new Object();\nconsole.log(typeof objectJS); // retourne \"object\"\nconsole.log(typeof Object); // retourne \"function\"\nconsole.log(objectJS instanceof Object); // retourne \"true\"\nconsole.log(objectJS instanceof Array); // retourne \"false\"\nconsole.log(objectJS instanceof Function); // retourne \"false\"\n\n// Objet en JSON\nvar objectJSON = {};\nconsole.log(typeof objectJSON); // retourne \"object\"\nconsole.log(typeof {}); // retourne \"object\" (la même chose que \"new Object()\")\nconsole.log(objectJSON instanceof Object); // retourne \"true\"\nconsole.log(objectJS instanceof Array); // retourne \"false\"\nconsole.log(objectJS instanceof Function); // retourne \"false\"</code></pre>\n\n<h4>Array</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**************************/\n/* Le type Object : Array */\n/**************************/\n// Tableau en JavaScript\nvar arrayJS = new Array();\nconsole.log(typeof arrayJS); // retourne \"object\"\nconsole.log(typeof Array); // retourne \"function\"\nconsole.log(arrayJS instanceof Object); // retourne \"true\"\nconsole.log(arrayJS instanceof Array); // retourne \"true\"\nconsole.log(arrayJS instanceof Function); // retourne \"false\"\n\n// Tableau en JSON\nvar arrayJSON = [];\nconsole.log(typeof arrayJSON); // retourne \"object\"\nconsole.log(typeof []); // retourne \"object\" (la même chose que \"new Array()\")\nconsole.log(arrayJSON instanceof Object); // retourne \"true\"\nconsole.log(arrayJSON instanceof Array); // retourne \"true\"\nconsole.log(arrayJSON instanceof Function); // retourne \"false\"</code></pre>\n\n<h4>Function</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/*****************************/\n/* Le type Object : Function */\n/*****************************/\n\n// Fonction en JavaScript\nvar functionJS = function() {};\nconsole.log(typeof functionJS); // retourne \"function\"\nconsole.log(typeof Function); // retourne \"function\"\nconsole.log(functionJS instanceof Object); // retourne \"true\"\nconsole.log(functionJS instanceof Array); // retourne \"false\"\nconsole.log(functionJS instanceof Function); // retourne \"true\"</code></pre>\n\n<h4>Date, RegExp, Error</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/****************************************/\n/* Les autres types Object instanciable */\n/****************************************/\n\n// L'objet Date\nvar date = new Date();\nconsole.log(typeof date); // retourne \"object\"\nconsole.log(typeof Date); // retourne \"function\"\nconsole.log(date instanceof Object); // retourne \"true\"\nconsole.log(date instanceof Date); // retourne \"true\"\nconsole.log(date instanceof Function); // retourne \"false\"\n\n// L'objet RegExp\nvar regex = new RegExp(\" \");\nconsole.log(typeof regex); // retourne \"object\"\nconsole.log(typeof RegExp); // retourne \"function\"\nconsole.log(regex instanceof Object); // retourne \"true\"\nconsole.log(regex instanceof RegExp); // retourne \"true\"\nconsole.log(regex instanceof Function); // retourne \"false\"\n\n// L'objet RegExp court\nvar sRegex = / /;\nconsole.log(typeof sRegex); // retourne \"object\"\nconsole.log(typeof / /); // retourne \"object\" (la même chose que \"new RegExp()\")\nconsole.log(sRegex instanceof Object); // retourne \"true\"\nconsole.log(sRegex instanceof RegExp); // retourne \"true\"\nconsole.log(sRegex instanceof Function); // retourne \"false\"\n\n// L'objet Error\nvar error = new Error();\nconsole.log(typeof error); // retourne \"object\"\nconsole.log(typeof Error); // retourne \"function\"\nconsole.log(error instanceof Object); // retourne \"true\"\nconsole.log(error instanceof Error); // retourne \"true\"\nconsole.log(error instanceof Function); // retourne \"true\"</code></pre>\n\n<h4>JSON, Math, Global (Window)</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**********************************/\n/* Les autres types Object simple */\n/**********************************/\n// L'objet JSON\n//var json = new JSON(); // error\nconsole.log(typeof json); // retourne \"undefined\" (n'existe pas du coup)\nconsole.log(typeof JSON); // retourne \"object\"\n//console.log(json instanceof Object); // error\n//console.log(json instanceof JSON); // error\n//console.log(json instanceof Function); // error\n\n// L'objet Math\n//var math = new Math(); // error\nconsole.log(typeof math); // retourne \"undefined\" (n'existe pas du coup)\nconsole.log(typeof Math); // retourne \"object\"\n//console.log(math instanceof Object); // error\n//console.log(math instanceof Math); // error\n//console.log(math instanceof Function); // error\n\n// L'objet Global (Window dans les navigateurs)\n//var globalVar = new global(); // error\nconsole.log(typeof globalVar); // retourne \"undefined\" (n'existe pas du coup)\nconsole.log(typeof global); // retourne \"object\"\n//console.log(globalVar instanceof Object); // error\n//console.log(globalVar instanceof global); // error\n//console.log(globalVar instanceof Function); // error</code></pre>\n\n<h3>Les types primitifs (et Objets associés)</h3>\n\n<h4>Number</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/******************/\n/* Le type Number */\n/******************/\n\n// Number primitif\nvar pNumber = 104.56;\nconsole.log(typeof pNumber); // retourne \"number\"\nconsole.log(typeof 104.56); // retourne \"number\"\nconsole.log(pNumber instanceof Object); // retourne \"false\"\nconsole.log(pNumber instanceof Number); // retourne \"false\"\n\n// L'Objet Number\nvar number = new Number(104.56);\nconsole.log(typeof number); // retourne \"object\"\nconsole.log(typeof Number); // retourne \"function\"\nconsole.log(number instanceof Object); // retourne \"true\"\nconsole.log(number instanceof Number); // retourne \"true\"\n\n// Number primitif à 0\nvar pNumber0 = 0;\nconsole.log(typeof pNumber0); // retourne \"number\"\nconsole.log(pNumber0 instanceof Object); // retourne \"false\"\nconsole.log(pNumber0 instanceof Number); // retourne \"false\"\n\n// L'Objet Number à 0\nvar number0 = new Number(0);\nconsole.log(typeof number0); // retourne \"object\"\nconsole.log(number0 instanceof Object); // retourne \"true\"\nconsole.log(number0 instanceof Number); // retourne \"true\"\n\n// Number primitif invalide\nvar pNumberN = NaN;\nconsole.log(typeof pNumberN); // retourne \"number\"\nconsole.log(pNumberN instanceof Object); // retourne \"false\"\nconsole.log(pNumberN instanceof Number); // retourne \"false\"\n\n// L'Objet Number invalide\nvar numberN = new Number(NaN);\nconsole.log(typeof numberN); // retourne \"object\"\nconsole.log(numberN instanceof Object); // retourne \"true\"\nconsole.log(numberN instanceof Number); // retourne \"true\"\n\n// Number primitif infinie\nvar pNumberI = Infinity;\nconsole.log(typeof pNumberI); // retourne \"number\"\nconsole.log(pNumberI instanceof Object); // retourne \"false\"\nconsole.log(pNumberI instanceof Number); // retourne \"false\"\n\n// L'Objet Number infinie\nvar numberI = new Number(Infinity);\nconsole.log(typeof numberI); // retourne \"object\"\nconsole.log(numberI instanceof Object); // retourne \"true\"\nconsole.log(numberI instanceof Number); // retourne \"true\"</code></pre>\n\n<h4>String</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/******************/\n/* Le type String */\n/******************/\n\n// String primitif\nvar pString = \"test\";\nconsole.log(typeof pString); // retourne \"string\"\nconsole.log(typeof \"test\"); // retourne \"string\"\nconsole.log(pString instanceof Object); // retourne \"false\"\nconsole.log(pString instanceof String); // retourne \"false\"\n\n// L'Objet String\nvar string = new String(\"test\");\nconsole.log(typeof string); // retourne \"object\"\nconsole.log(typeof String); // retourne \"function\"\nconsole.log(string instanceof Object); // retourne \"true\"\nconsole.log(string instanceof String); // retourne \"true\"\n\n// String vide primitif\nvar pStringE = \"\";\nconsole.log(typeof pStringE); // retourne \"string\"\nconsole.log(pStringE instanceof Object); // retourne \"false\"\nconsole.log(pStringE instanceof String); // retourne \"false\"\n\n// L'Objet vide String\nvar stringE = new String(\"\");\nconsole.log(typeof stringE); // retourne \"object\"\nconsole.log(stringE instanceof Object); // retourne \"true\"\nconsole.log(stringE instanceof String); // retourne \"true\"</code></pre>\n\n<h4>Boolean</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/*******************/\n/* Le type Boolean */\n/*******************/\n\n// Boolean primitif à true\nvar pBoolTrue = true;\nconsole.log(typeof pBoolTrue); // retourne \"boolean\"\nconsole.log(typeof true); // retourne \"boolean\"\nconsole.log(pBoolTrue instanceof Object); // retourne \"false\"\nconsole.log(pBoolTrue instanceof Boolean); // retourne \"false\"\n\n// L'Objet Boolean à true\nvar boolTrue = new Boolean(true);\nconsole.log(typeof boolTrue); // retourne \"object\"\nconsole.log(typeof Boolean); // retourne \"function\"\nconsole.log(boolTrue instanceof Object); // retourne \"true\"\nconsole.log(boolTrue instanceof Boolean); // retourne \"true\"\n\n// Boolean primitif à false\nvar pBoolTrue = false;\nconsole.log(typeof pBoolTrue); // retourne \"boolean\"\nconsole.log(pBoolTrue instanceof Object); // retourne \"false\"\nconsole.log(pBoolTrue instanceof Boolean); // retourne \"false\"\n\n// L'Objet Boolean à false\nvar boolTrue = new Boolean(false);\nconsole.log(typeof boolTrue); // retourne \"object\"\nconsole.log(boolTrue instanceof Object); // retourne \"true\"\nconsole.log(boolTrue instanceof Boolean); // retourne \"true\"</code></pre>\n\n<h4>Null</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/*******************/\n/* Le type Null */\n/*******************/\n\n// Null primitif\nvar pNull = null;\nconsole.log(typeof pNull); // retourne \"object\"\nconsole.log(typeof null); // retourne \"object\"\nconsole.log(typeof Null); // retourne \"undefined\"\nconsole.log(pNull instanceof Object); // retourne \"false\"\n//console.log(pNull instanceof Null); //error</code></pre>\n\n<h4>Undefined</h4>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/*********************/\n/* Le type Undefined */\n/*********************/\n\n// Undefined primitif\nconsole.log(typeof thisVarDoesntExist); // retourne \"undefined\"\nconsole.log(typeof undefined); // retourne \"undefined\"\nconsole.log(typeof Undefined); // retourne \"undefined\"\n//console.log(thisVarDoesntExist instanceof Object); //error\n//console.log(pNull instanceof Undefined); //error</code></pre>", "dates" : { "published" : { "$date" : 1368800400000 }, "updated" : [] }, "title" : "Les <span>types</span> en <span>JavaScript</span> : pour tout savoir !", "urn" : "les-types-en-javascript-pour-tout-savoir" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71af" }, "cache" : { "comment" : { "number" : 2 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c4" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "<p>Posons le décors, le JavaScript ne possède nativement : ni classe, ni héritage, ni encapsulation... et alors ? C'est probablement le langage le plus incompris, car je vous assure que JavaScript est un puissant langage orienté objet et qu'il permet :</p>\n\n<ul>\n\t<li>la création de nouveaux contextes d'exécution autonomes instanciés (new) avec un constructeur, des propriétés et des méthodes personnelles internes (this...) à partir d'un gabarit de construction (classe),</li>\n\t<li>de dupliquer les propriétés/méthodes dans un autre gabarit (héritage) pour ajouter ou modifier des comportements (polymorphisme) le tout depuis différents endroits dans le code (partielle et virtuelle),</li>\n\t<li>de limiter l'accès aux propriétés/méthodes au contexte d'exécution (encapsulation privée) ou les promouvoirs (encapsulation publique)...</li>\n</ul>\n\n<p>avec effectivement d'autres mots clés et mécanismes que ceux dont vous avez l'habitude, et nottament grâce au <span class=\"highlighting\">Prototypage</span>.</p>\n\n<p>En ce qui concerne ceux qui ont déjà un bon pied dans le JavaScript, même si jusqu'à présent vous n'avez jamais réellement vu l'intérêt de créer des structures avancées (l'équivalent de classes) pour un développement côté client, il est indéniable que côté serveur (en <a href=\"http://blog.haeresis.fr/developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Node.js</a> par exemple) cela est nécessaire. Et si vous êtes plus d'un développeur Front-end sur vos sites : ça s'avère nécessaire également. Bien qu'en utilisant des bibliothèques JavaScript comme Prototype ou Mootools vous puissiez assez facilement créer des classes, je vais vous apprendre ici à comprendre la roue, vous en créer une sans l'utilisation du prototypage très simplement et cerise sur le gâteau : de jouer avec vos classes en les remplissant/appelant de la même manière qu'en jQuery !</p>\n\n<p>Pour finir nous verrons en quoi le prototypage peut vous simplifier la vie et en quoi donc JavaScript n'a finalement besoin d'aucune classe, d'aucun héritage et d'aucune encapsulation.</p>\n\n<h2>Du JavaScript, JSON, jQuery à La RACHE</h2>\n\n<p>Étant pratiquant à vos heures de la <a href=\"http://www.la-rache.com/\" title=\"Le site of the International Institute of La RACHE\">méthodologie de La RACHE</a> (Rapid Application Conception and Heuristic Extreme-programming) votre utilisation de JavaScript se limite principalement à trois cas d'utilisation, et cela vous suffit :</p>\n<ul>\n\t<li><span class=\"highlighting\">JavaScript</span> : Vous donnez un objet à manger à une fonction et celle-ci vous le ressort avec les modifications demandées.</li>\n\t<li><span class=\"highlighting\">JSON</span> : Vous créez des objets à la volée avec « {} » et vous les remplissez en fonction de vos besoins.</li>\n\t<li><span class=\"highlighting\">jQuery</span> : vous jonglez dans un DOM et faites des déplacements et duplication vraiment aisément.</li>\n</ul>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Créer des fonctions pour faire quelque chose à mes informations.\nfunction checkAuth(account) {\n\tif (account.email /* ... */ account.password) {\n\t\taccount.valid = true\n\t}\n\treturn account;\n}\n\n// Regrouper mes informations.\nvar account = {\n\temail: $(\"...\").val(\"...\"),\n\tpassword: $(\"...\").val(\"...\"),\n\tvalid: false\n}\n\n// Réaliser les choses.\naccount = checkAuth(account);\n\n/* ... */</code></pre>\n\n<p>L'avantage est que ça va vite à écrire : vous décidez sur le moment comment organiser votre objet et comment réaliser la fonctionnalité.</p> \n\n<p>Les problèmes arrivent quand un script cumule plusieurs centaines de lignes (et plusieurs appels de fichier différents avec plusieurs centaines de lignes) basées sur une création de l'instant et qu'il doit être amélioré / débogué 6 mois plus tard par quelqu'un d'autre (et les yeux bandés !).</p>\n\n<p>Vous ne disposez pas non plus de documentation car sincèrement, même-vous, vous vous demandez comment documenter ça...</p>\n\n<p>Il est temps d'organiser votre code JavaScript avec un développement moins procédurale et plus orienté objet. Oui, mais  s'organiser autour d'objet clairement défini sur lesquels : fautes de documentations, tout le monde pourra se référer au moins dans des fichiers par structure.</p>\n\n<h2>Héritage basé sur les classes (sans prototype)</h2>\n\n<p>Les classes en JavaScript : ça n'existe pas. À la place JavaScript a un mécanisme de prototypage qui est différent de celui des classes et donc des mécanismes que vous avez l'habitude de côtoyer dans vos langages objets. Laissons le prototypage un instant dans cette partie et revenons à nos classes. Une classe est un modèle qui, en l'instanciant (attacher « this » à un contexte d'exécution dédié), donne naissance à des objets formés selon la nomenclature de ladite classe. Mais puisque le JavaScript lui-même est déjà composé d'objet, à première vu on en a pas besoin. Oui mais l'avantage apporté par une classe est de générer facilement des objets complexes et tous formés de la même manière, de les étendres, etc. Si les classes n'existent pas nativement, rien ne nous empêche de simuler leur comportement.</p>\n\n<h3>Même objet, mais syntaxe et structure différente</h3>\n\n<p>L'élément clé <span class=\"highlighting\">new</span> existe également en JavaScript. Mais comment va-t-il nous aider à <span class=\"highlighting\">instancier des classes</span> pour <span class=\"highlighting\">créer des objets</span> en JavaScript ?</p>\n\n<p>Revenons aux sources un moment. Si je désire créer deux autres objets « <samp>account</samp> »  en continuant mon exemple précédent, il est vrai que je n'ai pas besoin de passer par une classe après tout. Je peux écrire à la suite :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/* ... */\n\n// SYNTAXE JSON : Création d'un Object littérale avec la syntaxe JSON (JavaScript Object Notation).\n\nvar bruno = { // Instanciation d'une variable \"bruno\" avec un nouvel élément de type Object selon la syntaxe JSON.\n\temail: \"bruno@email.ici\", // Ajout, en tant que membre, de la propriété \"email\" (en même temps) avec un nouveau type primitif String.\n\tpassword: \"bépoB\" // Ajout, en tant que membre, de la propriété \"password\" (en même temps) avec un nouveau type primitif String.\n};\n\n/* ... */</code></pre>\n\n<p>Ensuite, quelque part plus loin... peut-être dans un autre fichier... je peux également écrire de cette autre façon :</p>\n   \n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/* ... */\n\n// SYNTAXE STANDARD : Création et assemblage d'Objets avec la syntaxe JavaScript standard.\n\nvar magalie = new Object(); // Instanciation d'une variable \"magalie\" avec un nouvel élément de type Object.\nmagalie.mail = new String(\"magalie@email.ici\").toString(); // Ajout, en tant que membre, de la propriété \"mail\" avec un nouveau type Object converti en type primitif String.\nmagalie.pwd = new String(\"azertyM\").toString(); // Ajout, en tant que membre, de la propriété \"pwd\" avec un nouveau type Object converti en type primitif String.\n\n/* ... */</code></pre>\n\n<p>Et, arrivé au moment de vérifier mes « account »,...</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/* ... */\n\nbruno = checkAuth(bruno);\nmagalie = checkAuth(magalie);\n\n/* ... */</code></pre>\n\n<p>... les problèmes commencent. Que c'est-il passé ? En fait j'ai bien créé deux « account » et mes deux syntaxes sont bonnes. Sauf que la fonction <samp>checkUser()</samp> s'attendait à pouvoir toucher à une propriété nommée <samp>valid</samp> qu'on a oublié de déclarer pour notre premier objet et qui était sensé faire un test sur les propriétés <samp>email</samp> et <samp>password</samp> qui n'existent pas dans notre second objet (en plus de <samp>valid</samp>) car on ne les a pas nommés ainsi...</p>\n\n<p>Pour résoudre cela il nous faudrait :</p>\n<ul>\n\t<li>Être sûr que quoi qu'il arrive en créant un « user » les propriétés <samp>username</samp>, <samp>password</samp> et <samp>valid</samp> existent.</li>\n\t<li>Être sur que la fonction <samp>checkUser</samp> soit liée d'une manière ou d'une autre à l'objet « user » puis qu'elle fasse un traitement sur lui.</li>\n</ul>\n<p class=\"highlighting\">Bref : pour résoudre cela il nous faudrait une classe.</p>\n\n<h3>Des brouillons de classe</h3>\n\n<p>Ce qu'il nous faut, c'est un générateur d'objet déjà formé pour être sûr que, si j'utilise ce générateur pour créer mes objets : ils auront tous une structure identique. Ne sautons pas des étapes et faisons des tests de compréhension.</p>\n\n<div class=\"worst-practice\">\n\t<div class=\"title\">Première <del>idée</del> <ins>erreur</ins> : un objet modèle pour nos structures</div>\n\t<div class=\"content\">\n\t\n\t<p>Afin d'éviter de se retrouver avec des objets tous formés différemments ; on décide de se référer à un modèle :</p>\n\t\n<p class=\"highlighting\">Code</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Création d'un brouillon de classe \"Account\" : un gabarit.\nvar account = {\n\temail: \"\", // Ajout de la propriétés \"email\" à \"account\".\n\tpassword: \"\" // Ajout de la propriétés \"password\" à \"account\".\n};</code></pre>\n\n<p class=\"highlighting\">Tests</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno, magalie;\n\n// J'associe ma structure à la variable \"bruno\" et la remplie.\nbruno = account;\nbruno.email = \"bruno@email.ici\";\nbruno.password = \"bépoB\";\nconsole.log(bruno.email); // renvoi \"bruno@email.ici\".\nconsole.log(bruno.password); // renvoi \"bépoB\".\n\n// J'associe ma structure à la variable \"magalie\" et la remplie.\nmagalie = account;\nmagalie.email = \"magalie@email.ici\";\nmagalie.pwd = \"azertyM\"; // Bien que \"pwd\" n'existe pas dans mon gabarit, je peux quand même l'associer et oublier \"password\".\nconsole.log(magalie.email); // renvoi \"magalie@email.ici\".\nconsole.log(magalie.pwd); // renvoi \"azertyM\".\n\nconsole.log(bruno.email); // renvoi \"magalie@email.ici\".\n\n// Je constate que la ré-association à \"magalie\" (ligne 9, 10 et 11) a remplacée celle de \"bruno\" (ligne 2, 3 et 4).</code></pre>\n\n\t\t<p>On constate rapidement plusieurs problèmes :</p>\n\t\t\n\t\t<ul>\n\t\t\t<li>Même si j'ai créé mon gabarit : qui m'empêche de remplir par erreur une valeur inexistante ? C'est le cas ligne 11 des tests avec \"pwd\" et ça marche comme le prouve la ligne 13 des tests qui ne renvoi pas d'erreur.</li>\n\t\t\t<li>Le contexte d'exécution généré en créant un « Account » à la ligne 6 du code ne ce duplique pas lors de l'association à d'autre variable (ligne 2 et 9 des tests) ce qui a pour résultat de fournir les informations de \"magalie\" via \"bruno\" (ligne 16 des tests).</li>\n\t\t</ul>\n\t\t\n\t\t<p>Bref, il va falloir faire mieux que ça !</p>\n\t</div>\n</div>\n\n<div class=\"correct-practice\">\n\t<div class=\"title\">Deuxième <del>idée</del> <ins>piste</ins> : création de contextes d'exécution autonomes différents</div>\t\n\t<div class=\"content\">\n\t\n\t<p>Pour résoudre nos problèmes majeurs précédents, nous allons utiliser le mot clé <samp>function</samp> et créer une fonction ce qui va créer des contexte d'exécution différent pour nos deux « account » :</p>\n\t\n\t<p class=\"highlighting\">Code</p>\n\t\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Création d'un brouillon de classe « Account » avec comme paramètres : \"email\" et \"password\".\nvar account = function (email, password) {\n\t// Création d'un objet à l'intérieur de Account, sa portée est donc limitée à \"Account\".\n\tvar newAccount = {};\n\t\n\tnewAccount.email = email; // Ajout de la propriétés \"email\" à \"newAccount\" avec comme valeur le paramètre \"email\".\n\tnewAccount.password = password; // Ajout de la propriétés \"password\" à \"account\" avec comme valeur le paramètre \"password\".\n\t\n\t// Notre fonction retourne un objet de nomenclature \"Account\".\n\treturn newAccount;\n};</code></pre>\n\n<p class=\"highlighting\">Tests</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno, magalie;\n\nbruno = account(\"bruno@email.ici\", \"bépoB\");\nconsole.log(bruno.email); // renvoi \"bruno@email.ici\".\nconsole.log(bruno.password); // renvoi \"bépoB\".\n\nmagalie = account(\"magalie@email.ici\", \"azertyM\");\nmagalie.pwd = \"azertyM\";\nconsole.log(magalie.email); // renvoi \"magalie@email.ici\".\nconsole.log(magalie.pwd); // renvoi \"azertyM\".\n\nconsole.log(bruno.email); // renvoi toujours \"bruno@email.ici\".</code></pre>\n\n\t\t<p>Bon, cette fois au moins, c'est fonctionnel :</p>\n\t\t\n\t\t<ul>\n\t\t\t<li>Même si l'on peut toujours inventer des propriétés (ligne 6 des tests), dans notre cas ce n'est plus génant car grâce aux paramètres imposées par la fonction (ligne 6 du code) on a au moins une certitude : les propriétés <samp>email</samp> et <samp>password</samp> sont remplies.</li>\n\t\t\t<li>On constate bien à la ligne 10 des tests que <samp>bruno.email</samp> n'a pas été écrasé par <samp>magalie.email</samp> (deux contextes distincts).</li>\n\t\t</ul>\n\t\n\t</div>\n</div>\n\n<h3>Une Classe en JavaScript</h3>\n\n<p>Effectivement, tout cela marche. Mais si on veut se rapprocher du comportement des classes dans les langages objets il va falloir faire mieux que ça. Pourquoi ? Par exemple : de quel type est notre objet dans le cas précédent ?</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var \n\tbruno,\n\taccount = function (email, password) {\n\t\tvar newAccount = {};\n\t\tnewAccount.email = email; \n\t\tnewAccount.password = password;\n\t\treturn newAccount;\n\t};\n\t\nbruno = account(\"bruno@email.ici\", \"bépoB\");\n\nconsole.log(bruno instanceof Object); // renvoi \"true\".\nconsole.log(bruno instanceof account); // renvoi \"false\".</code></pre>\n\n<p>On s'aperçoit à la ligne 13 qu'il va être difficile de faire des objets distincts de cette façon, et je ne vous parle même pas d'héritage !</p>\n\n<h4>Instance, Constructeur, propriétés d'instance et propriétés d'objet</h4>\n\n<p>Voilà ce que l'on va permettre :</p>\n<ul>\n\t<li>Instanciation d'un contexte d'exécution avec une fonction grâce au mot-clé <samp class=\"highlighting\">new</samp>. Une telle fonction en JavaScript est appelée « Constructeur ». Dans ce cas, la pratique veut que l'on commence le nom de la variable par une majuscule.</li>\n\t<li>Attribut d'instance attaché grâce au mot-clé <samp class=\"highlighting\">this</samp>.</li>\n\t<li>Propriétés d'instances et propriétés statiques (utilisables sans instanciation).</li>\n</ul>\n\n<p class=\"highlighting\">Classe</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Création d'une classe \"Account\" avec comme paramètres : \"email\" et \"password\".\nvar Account = function (email, password) {\n\n\t// Cette fois on attache les variables au contexte d'exécution avec comme base \"this\".\n\t// En appelant cette fonction avec <samp>new</samp>, \n\t// <samp>this</samp> correspond alors au contexte d'exécution d'une nouvelle instance d'Account.\n\tthis.email = email;\n\tthis.password = password;\n\n\t// On attache une propriété à la variable \"Account\" (qui sera un objet, une fois la fonction instanciée).\n\t// Si \"Account.nbrOfAccount\" n'existe pas, (premier passage), il vaut 1. \n\t// Sinon il vaut lui-même plus 1.\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\t\n\t// Il n'est pas nécessaire d'inclure de \"return\". Une fonction retourne son instance quand elle est appelée avec new.\n};</code></pre>\n\n<p class=\"eye-catching\">Note : vous pouvez constater que la variable « Account » prend maintenant une majuscule. C'est une convention pour indiquer que cette fonction devra être instanciée avec le mot-clé « new ».</p>\n\n<p class=\"highlighting\">Tests</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno, magalie, badUseCase;\n\t\n// Lecture de \"Account.nbrOfAccount\" sans instanciation.\nconsole.log(Account.nbrOfAccount); // renvoi \"undefined\".\n\n// Instanciation d'un premier \"Account\".\nbruno = new Account(\"bruno@email.ici\", \"bépoB\");\n\n// Tentative de lecture d'une propriété d'instance depuis :\n/* Une instance */ console.log(bruno.email); // renvoi \"bruno@email.ici\".\n/* Un objet (classe) */ console.log(Account.email); // renvoi \"undefined\".\n\n// Tentative de lecture d'une propriété d'objet (de classe) depuis :\n/* Une instance */ console.log(bruno.nbrOfAccount); // renvoi \"undefined\".\n/* Un objet (classe) */ console.log(Account.nbrOfAccount); // renvoi \"1\".\n\n// Instanciation d'un deuxième \"Account\".\nmagalie = new Account(\"magalie@email.ici\", \"azertyB\");\n\n// Lecture de \"Account.nbrOfAccount\" après deux instanciations.\nconsole.log(Account.nbrOfAccount);\t// renvoi 2.\n\n// Création d'une variable dans le contexte d'exécution global.\nglobal.email = \"Rien ici\"; // window.email est un équivalent dans les navigateurs.\nconsole.log(global.email); // renvoi \"Rien ici\".\n\nbadUseCase = Account(\"badusecase@email.ici\", \"azertyB\"); // On n'utilise pas le mot clé \"new\" pour instancier la classe.\n// console.log(badUseCase.email); // error.\nconsole.log(global.email); // renvoi \"badusecase@email.ici\".</code></pre>\n\t\n<p>Il y a deux problèmes à relever ici :</p>\n<ul>\n\t<li>On s'aperçoit à la ligne 4 des « Tests » que si aucune instance n'a été créée, la propriété <samp>nbrOfAccount</samp> de <samp>Account</samp> n'est jamais remplie. Elle est donc de type Undefined (au lieu de par exemple renvoyer 0).</li>\n\t<li>Le second problème vient de l'utilité de <span class=\"highlighting\">this</span>. Si vous utilisez <samp>new</samp> lors de l'appel de <samp>Account</samp> (ligne 7 et 18 des « Tests »), cela permet à <samp>this</samp> d'être associé au <span class=\"eye-catching\">contexte d'exécution de la fonction</span> (nouvelle instance). Cependant, sans le mot-clé <samp>new</samp>, <samp>this</samp> reste associé <span class=\"eye-catching\">au contexte d'exécution global</span> à savoir la variable <samp>global</samp> (par exemple avec Node.js) et la variable <samp>window</samp> dans vos navigateurs (par exemple sous IE, Chrome, Firefox...).</li>\n</ul>\n<p>Réglons ces problèmes avec le code ci-dessous :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\t// On vérifie bien que this est attaché au contexte d'exécution d'une nouvelle instance.\n\tif (this instanceof Account) {\n\t\tthis.email = email;\n\t\tthis.password = password;\n\t\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\t} else {\n\t\t// On crache à la figure (mais gentiment) du développeur qui a fait une bétise :)\n\t\t// L'erreur suivante s'affichera dans votre console (\"La fonction 'Account' doit être instanciée avec le mot-clé 'this'.\").\n\t\tthrow Error(\"'Account' function must be instantiated with the keyword 'this'.\");\n\t}\n};\n// On initialise la variable statique en dehors de la fonction pour qu'elle soit sur 0 initialement.\nAccount.nbrOfAccount = 0;</code></pre>\n\n<p>Malheureusement, l'utilisation de <samp>if (this instanceof Account) {</samp> empêche également à la fonction d'être utilisée par les fonctions « call(this) » ou apply(this) ». Et peut-être même que parfois il est intentionnel d'attacher le contexte à l'objet global. Dans la suite de cet article, nous n'allons pas utiliser ce contrôle (mais sachez qu'il existe).</p>\n\n<p class=\"eye-catching\">Note : comment <samp>Account</samp> peut-être une fonction (ligne 1) et posséder une propriété <samp>nbrOfAccount</samp> (ligne 14). Et bien c'est tout simplement parce qu'une fonction est également un objet. Le type fonction (bien que renvoyé par <samp>typeof</samp>) n'existe pas. Une fonction n'est qu'un objet que l'on peut invoquer. Vous trouverez <a href=\"./les-types-en-javascript-pour-tout-savoir/\" title=\"Les types en JavaScript : pour tout savoir !\">plus d'informations sur les 6 types en JavaScript dans mon billet précédent</a>.</p>\n\n<h4>Accesseurs, encapsulation publique, encapsulation privée</h4>\n\n<p>Cela est fonctionnel, mais minimal. Comment pouvons-nous par exemple contrôller la façon dont une valeur doit être assignée ou renvoyée ? Dans notre exemple, nous aimerions pouvoir assigner un type String (et non un Object String) en valeur de l'attribut <samp>email</samp> et la renvoyer uniquement en minuscule par exemple. Nous allons utiliser pour cela des fonctions. Quand une fonction est une propriété d'un objet instancié par un constructeur, on l'appelle alors « Méthode », même en JavaScript.</p>\n\n<p class=\"highlighting\">Classe</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\t/*** Variables conteneurs. ***/\n\tthis.email = email;\n\tthis.password = password;\n\t\n\t/*** Variables statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\n\t/*****************************************************/\n\t/*** Méthodes d'accession de retour - Getters. ***/\n\n\t// J'associe à la propriété \"getEmail\" d'une instance d'\"Account\" une fonction.\n\t// La différence entre le \"this.email\" et \"this.getEmail()\" est que\n\t// \"this.getEmail()\" va renvoyer l'email en minuscule même si il a été passé avec des majuscules.\n\tthis.getEmail = function () {\n\t\treturn this.email.toLowerCase();\n\t}\n\n\t// J'associe à la propriété \"getPassword\" d'une instance d'\"Account\" une fonction.\n\t// La différence entre le \"this.password\" et \"this.getPassword()\" est que\n\t// \"this.getPassword()\" me permet de hasher le résultat avant de l'affficher.\n\tthis.getPassword = function (hashFunction) {\n\t\tif (typeof hashFunction != 'function') { // Si le premier paramètre n'est pas une fonction.\n\t\t\treturn this.password; // On affiche le mot de passe normalement.\n\t\t} else {\n\t\t\treturn hashFunction(this.password); // Sinon on l'affiche en fonction de ce qu'aura fait la fonction 'hashFunction'.\n\t\t}\n\t}\n\n\t// Les Getters nous permettent donc d'afficher différemment la valeur stockée dans l'instance de l'objet.\n\t// Mais la valeur reste conservée sans les modifications renvoyées.\n\n\n\t/*****************************************************/\n\t/*** Méthodes d'accession d'attribution - Setters. ***/\n\n\t// J'associe à la propriété \"setEmail\" d'une instance d'\"Account\" une fonction.\n\t// La différence entre le \"this.email\" et \"this.setEmail()\" est qu'avant d'attribuer la valeur à mon instance,\n\t// \"this.setEmail()\" me permet de vérifier si c'est bien un email.\n\tthis.setEmail = function (value, isAnEmailFunction) {\n\t\tvalue = (new String(value)).toString(); // On s'assure de travailler avec un type String.\n\t\tif (typeof isAnEmailFunction != 'function') {\n\t\t\tthis.email = value;\n\t\t} else {\n\t\t\tthis.email = isAnEmailFunction(value); // La valeur attribuée passe d'abord un test : est-elle un email valide ?\n\t\t}\n\t}\n\n\t// J'associe à la propriété \"setPassword\" d'une instance d'\"Account\" une fonction.\n\t// La différence entre le \"this.password\" et \"this.setPassword()\" est qu'avant d'attribuer la valeur à mon instance,\n\t// \"this.setPassword()\" me permet de hasher la valeur.\n\tthis.setPassword = function (value, hashFunction) {\n\t\tvalue = (new String(value)).toString();\n\t\tif (typeof hashFunction != 'function') {\n\t\t\tthis.password = value;\n\t\t} else {\n\t\t\tthis.password = hashFunction(value); // La valeur attribuée sera hashée comme 'hashFunction' l'aura décidée.\n\t\t}\n\t}\n\n\t// Les Setters nous permettent donc avant stockage d'exercer un certain nombre de contrôles ou transformations à la valeur passée.\n\t// La valeur reste alors conservée telle qu'elle a été modifiée et non telle qu'elle a été envoyée.\n};\nAccount.nbrOfAccount = 0;</code></pre>\n\n<p class=\"eye-catching\">Note : <samp>this</samp>, à l'intérieur des méthodes, fait bien référence à une instance de « Account » car il fait référence au contexte d'exécution de l'instance. Comme expliqué plus tôt, il faudrait l'appeler avec le mot clé <samp>new</samp> pour que this fasse référence à la méthode en elle-même (ce qui ne sert à rien).</p>\n\n<p class=\"highlighting\">Petit scénario de test</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Ayons un peu d'imagination !\n\n// \"md5(value)\" est une fonction de hash qui existe plus haut dans mon code. \n// Elle hash la chaîne \"value\" en md5 pour empêcher de connaître le mot de passe tout en sachant vérifier si il est bon.\n\n// \"isEmail(value)\" est une fonction qui existe plus haut. \n// Elle vérifie que \"value\" soit un email valide. Si ce n'est pas le cas elle renvoi une erreur.\n\n/* ... */\n\nvar bruno = new Account(); // Si les paramètres ne sont pas passés, \"this.email\" et \"this.password\" sont de type Undefined.\nbruno.setEmail(\"COUCOU\");\nbruno.setPassword(\"bépoB\");\nconsole.log(bruno.email); // renvoi \"COUCOU\".\nconsole.log(bruno.password); // renvoi \"bépoB\" (le mot de passe a été passé en clair).\nconsole.log(bruno.getEmail()); // renvoi \"coucou\" (getEmail renvoi en minuscule).\nconsole.log(bruno.getPassword(md5)); // renvoi \"88255bfff0707a085e2f3faa5aa0d8cc\".\n\nvar magalie = new Account();\n// magalie.setEmail(\"COUCOU\", isEmail); // error, car ce n'est pas un email.\nmagalie.setPassword(\"AzertyM\", md5);\nconsole.log( magalie.password ); // renvoi \"237e4d6319a517c12bfbc8dc4c9c4fa4\" (la valeur est transformée avant stockage).\nconsole.log( magalie.getPassword() ); // renvoi \"237e4d6319a517c12bfbc8dc4c9c4fa4\".\nconsole.log( magalie.getPassword(md5) ); // renvoi \"eb20d719c7709e19a31936e36753244a\" (le md5 de 237e4d6319a517c12bfbc8dc4c9c4fa4).\n\nmagalie.email = 17;\n// console.log( magalie.getEmail() ); // error, on nous dit que \"toLowerCase()\" n'existe pas sur 17.</code></pre>\n\n<p>Les Getters et Setters vont nous être d'une grande utilité comme vous avez pu le constater cependant, tout ce travail est mis en l'air puisque l'on peut (les développeurs) passer directement par <samp>this.email</samp> par exemple (ligne 26 du scénario) et attribuer des valeurs sans vérification.</p>\n\n<p>On va donc privatiser les propriétés comme suit :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\tvar \n\t\tpublics = this, // On attache this à publique pour utiliser un mot avec du sens qu'en on associe les variables au contexte d'exécution.\n\t\tprivates = {}; // On créé un objet conteneur uniquement visible dans la fonction et ses sous fonctions. Pour rester cohérent, on l'appel privates.\n\t\n\t/*** Variables privées. ***/\n\tprivates.email = email; // Cette propriété est attachée à privates, elle n'est donc pas accessible de l'extérieur.\n\tprivates.password = password;\n\t\n\t/*** Variables statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\n\t/*** Méthodes publiques. ***/\n\tpublics.getEmail = function () { // Cette méthode est attachéé à publics, elle est donc accessible de l'extérieur.\n\t\treturn privates.email.toLowerCase(); // \"privates.email\" est accessible car une méthode fait partie du contexte d'exécution de son constructeur.\n\t}\n\tpublics.setEmail = function (value, isAnEmailFunction) {\n\t\tvalue = (new String(value)).toString();\n\t\tif (typeof isAnEmailFunction != 'function') {\n\t\t\tprivates.email = value;\n\t\t} else {\n\t\t\tprivates.email = isAnEmailFunction(value);\n\t\t}\n\t}\n\t\n\tpublics.getPassword = function (hashFunction) {\n\t\tif (typeof hashFunction != 'function') {\n\t\t\treturn privates.password;\n\t\t} else {\n\t\t\treturn hashFunction(privates.password);\n\t\t}\n\t}\n\tpublics.setPassword = function (value, hashFunction) {\n\t\tvalue = (new String(value)).toString();\n\t\tif (typeof hashFunction != 'function') {\n\t\t\tprivates.password = value;\n\t\t} else {\n\t\t\tprivates.password = hashFunction(value);\n\t\t}\n\t}\n};\nAccount.nbrOfAccount = 0;</code></pre>\n\n<p>En n'associant plus les propriétés <samp>email</samp> et <samp>password</samp> à <samp>this</samp> mais seulement à une simple variable interne (ligne 5), elles ne sont plus accessibles de l'extérieur.</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno = new Account();\nbruno.setEmail(\"bruno.lesieur@gmail.com\");\nconsole.log(bruno.email); // renvoi \"undefined\".\nconsole.log(bruno.getEmail()); // renvoi \"bruno.lesieur@gmail.com\".\n\nbruno.email = 17;\nconsole.log(bruno.getEmail()); // renvoi \"bruno.lesieur@gmail.com\".\n\nconsole.log(Account.nbrOfAccount); // renvoi 1.</code></pre>\n\n<p class=\"eye-catching\">Note : le fait d'utiliser <samp>publics</samp> au lieu de <samp>this</samp> ou même d'attacher des variables en propriété à <samp>privates</samp> n'est absoluement pas obligatoire. Cela sert dans notre exemple à bien différencier ce qui est publique de ce qui est privé.</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Une classe acceptable</div>\n\t<div class=\"content\">\n\t\n\t<p>Un dernier problème reste à régler. Si je passe non pas par <samp>setEmail</samp> ou <samp>setPassword</samp> mais directement par mon constructeur, je ne pourrais pas par exemple vérifier que l'email est bon. Il suffit alors de ne plus associer les propriétés aux variables privées directement mais en passant par les Setters eux-mêmes dans le constructeur.</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\tvar \n\t\tpublics = this,\n\t\tprivates = {};\n\t\n\t// Je n'assigne plus directement les propriétés sous peine de devoir réécrire les contrôles, ou ne pas en avoir du tout.\n\t\n\t/*** Variables/Méthodes statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\n\t/*** Méthodes publiques. ***/\n\tpublics.getEmail = function () {\n\t\treturn privates.email.toLowerCase();\n\t}\n\tpublics.setEmail = function (value, isAnEmailFunction) {\n\t\tvalue = (new String(value)).toString();\n\t\tif (typeof isAnEmailFunction != 'function') {\n\t\t\tprivates.email = value;\n\t\t} else {\n\t\t\tprivates.email = isAnEmailFunction(value);\n\t\t}\n\t}\n\t\n\tpublics.getPassword = function (hashFunction) {\n\t\tif (typeof hashFunction != 'function') {\n\t\t\treturn privates.password;\n\t\t} else {\n\t\t\treturn hashFunction(privates.password);\n\t\t}\n\t}\n\tpublics.setPassword = function (value, hashFunction) {\n\t\tvalue = (new String(value)).toString();\n\t\tif (typeof hashFunction != 'function') {\n\t\t\tprivates.password = value;\n\t\t} else {\n\t\t\tprivates.password = hashFunction(value);\n\t\t}\n\t}\n\t\n\t/*** Constructeur ***/\n\t\n\t// À la place je fais appel directement aux Setters dans ma classe.\n\t// Je fais appel à eux après qu'ils aient été définis pour éviter les erreurs.\n\t// Je m'aperçois que je ne peux pas passer de fonction md5 à \"setPassword\" de cette manière.\n\t// Rien ne m'empêche de modifier les paramètres du constructeur pour permettre de le faire passer par là.\n\t\n\tif (email) {\n\t\tpublics.setEmail(email); // Je vérifie que la construction est bonne pour le paramètre \"email\".\n\t}\n\tif (password) {\n\t\tpublics.setPassword(password); // Je vérifie que la construction est bonne pour le paramètre \"password\".\n\t}\n};\nAccount.nbrOfAccount = 0;</code></pre>\n\t</div>\n</div>\n\n<h4>Getters et Setters rassemblés et chaînage à la jQuery</h4>\n\n<p>Utiliser un Getter et un Setter distinct est peut-être ce que vous avez toujours fait, mais pourquoi ne pas utiliser la même fonction pour attribuer une valeur ou la retourner ? Pure folie me dites-vous ? Avez-vous entendu parler d'une librairie se nommant jQuery ? Peut-être Prototype ou Mootools ? Bon, ça vous dit peut-être rien, mais c'est exactement ce qu'elles font.</p>\n<p>Voici le principe des Getters et Setters tout en un, ce qui permet le chaînage.</p>\n<ul>\n\t<li>Si je dois manipuler la propriété privée \"email\", je le fais via la fonction publique \"email()\".</li>\n\t<li>Si je veux retourner la propriété \"email\", j'appel \"email()\" sans arguments.</li>\n\t<li>Si je veux attribuer une valeur à \"email\", j'appel \"email(value)\" avec pour \"value\" la valeur que je veux assigner.</li>\n\t<li>Quand j'attribue une valeur, au lieu que ma fonction ne retourne rien, elle retourne l'objet qui contient \"email\". Cela permet le chaînage.</li>\n</ul>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\tvar \n\t\tpublics = this,\n\t\tprivates = {};\n\t\n\t/*** Variables/Méthodes statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\n\t/*** Méthodes publiques. ***/\n\t\n\t// \"getEmail\" et \"setEmail\" deviennent une seule et même fonction, \"email\".\n\t// Nous pouvons nous permettre de l'appeler comme cela, car \"email\" n'existe pas.\n\t// Effectivement, maintenant que \"email\" est associée à \"privates\", ce nom est libre.\n\t\n\tpublics.email = function (value, isAnEmailFunction) {\n\t\n\t\t// On vérifie que la fonction est utilisée comme un Getter.\n\t\t// Pour en être sûr, il suffit de vérifier si la fonction n'a aucun paramètre.\n\t\t// On vérifie donc que \"value\" a comme type Undefined.\n\t\n\t\tif (typeof value == 'undefined') {\n\t\t\treturn privates.email.toLowerCase();\n\t\t\t\n\t\t// Cependant, si une valeur est passée, c'est qu'on utilise la fonction comme un Setter.\n\t\t// Dans ces cas-là, on y met la partie Setter.\n\t\t\t\n\t\t} else {\n\t\t\tvalue = (new String(value)).toString();\n\t\t\tif (typeof isAnEmailFunction != 'function') {\n\t\t\t\tprivates.email = value;\n\t\t\t} else {\n\t\t\t\tprivates.email = isAnEmailFunction(value);\n\t\t\t}\n\t\t\treturn publics;\n\t\t}\n\t}\n\t\n\t// Idem par ici.\n\t\n\tpublics.password = function (value, hashFunction) {\n\t\n\t\t// Cependant, comme notre Getter peut prendre en premier paramètre une fonction,\n\t\t// on vérifie que \"value\" ne soit pas de type Function (Object donc), car si c'est le cas,\n\t\t// nous réclamons tout de même le Getter.\n\t\n\t\tif (typeof value == 'undefined' || typeof value == 'function') {\n\t\t\t\n\t\t\t// Nous passons donc \"value\" à \"hashFunction\" puisqu'en réalité lui n'a pas été demandé en mode \"Getter\". \n\t\t\thashFunction = value;\n\t\t\n\t\t\tif (typeof hashFunction != 'function') {\n\t\t\t\treturn privates.password;\n\t\t\t} else {\n\t\t\t\treturn hashFunction(privates.password);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = (new String(value)).toString();\n\t\t\tif (typeof hashFunction != 'function') {\n\t\t\t\tprivates.password = value;\n\t\t\t} else {\n\t\t\t\tprivates.password = hashFunction(value);\n\t\t\t}\n\t\t\treturn publics;\n\t\t}\n\t}\n\t\n\t/*** Constructeur ***/\n\tif (email) {\n\t\tpublics.email(email);\n\t}\n\tif (password) {\n\t\tpublics.password(password);\n\t}\n};\nAccount.nbrOfAccount = 0;</code></pre>\n\n<p>Avec un exemple d'utilisation du chainage :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">console.log((new Account()).email(\"BRUNO@EMAIL.ICI\").password(\"bépoB\").email()); // renvoi \"bruno@email.ici\".</code></pre>\n\n<p class=\"eye-catching\">Note : pour faciliter la compréhension de la suite de notre article, nous allons retirer le support de \"isAnEmailFunction\" et de \"hashFunction\" dans nos exemples.</p>\n\n<h3>L'héritage de classe en JavaScript</h3>\n\n<p>On ne peut pas parler de classe sans parler d'héritage. Il n'existe pas plus que de réelle classe de quoi les faire hériter. Pourtant, le mécanisme de polymorphisme existe bien en JavaScript et nous allons reproduire ce que l'on peut appeler de l'héritage. L'idée c'est qu'une classe fille possède l'intégralité des méthodes publiques de sa classe mère en plus de ses propres méthodes. Voyons ensemble un moyen de faire de l'héritage de classe à partir du pattern de la partie précédente (et toujours sans prototypage).</p>\n\n<p>Nous allons créer une classe « User ». Un user est un « Account » amélioré qui possède son propre nom et pourquoi pas diverses informations relatives à son état d'utilisateur (nom, prénom, date de naissance...). Nous allons juste ajouter une nouvelle propriété : le <span class=\"highlighting\">username</span>.</p>\n\n<p class=\"highlighting\">Classe héritée</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Créons un objet \"User\" prennant en paramètre la même chose que \"Account\".\n// Cependant, \"username\" est un paramètre en plus spécifique à \"User\". \nvar User = function (username, password, email /* , firstname, lastname, birthdate */) {\n\tvar \n\t\tpublics = this,\n\t\tprivates = {};\n\t\n\t/****************/\n\t/*** Héritage ***/\n\t\n\t// Voici ce qui nous permet de faire de l'héritage, la méthode \"call\" (ou \"apply\") de tous les objets Function.\n\t// Normalement, seul \"Account\" peut créer un \"Account\", c'est-à-dire un contexte d'exécution qu'il s'auto-associe.\n\t// Cela lui permet de disposer de toutes les méthodes publiques qu'on lui a assigné.\n\t\n\t// Mais la méthode \"call\" permet de lier le contexte d'exécution instancié de la fonction appelante (ici celui de \"Account\")\n\t// au contexte d'exécution d'une autre fonction (ici \"this\", c'est-à-dire celui de \"User\").\n\t// Le premier paramètre est donc \"this\" et les autres sont ceux qu'aurait normalement reçu le constructeur de \"Account\".\n\tAccount.call(this, email, password);\n\t\n\t// L'héritage multiple est donc ici permis, nous pourrions associer et une classe \"Account\", \n\t// et un classe \"Person\" pour former le contexte d'exécution rempli de la toute nouvelle classe \"User\".\n\t// Ainsi User = Account + Person.\n\t\n\t// Person.call(this, firstname, lastname, birthdate);\n\n\t/*** Variables/Méthodes statiques. ***/\n\tUser.nbrOfUser = (typeof User.nbrOfUser != 'undefined') ? User.nbrOfUser + 1 : 1;\n\n\t/*** Méthodes publiques. ***/\n\tpublics.username = function (value) {\n\t\tif (typeof value == 'undefined') {\n\t\t\treturn privates.username;\n\t\t} else {\n\t\t\tprivates.username = value;\n\t\t\treturn publics;\n\t\t}\n\t}\n\t\n\t/*** Constructeur ***/\t\t\n\tif (username) {\n\t\tpublics.username(username);\n\t}\n};\nUser.nbrOfUser = 0;</code></pre>\n\n<p class=\"highlighting\">Tests</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno = (new Account())\n\t.email(\"bruno@email.ici\")\n\t.password(\"bépoB\");\n\nvar magalie = (new User())\n\t.username(\"Magalie\")\n\t.password(\"AzertyM\")\n\t.email(\"magalie@email.ici\");\n\nconsole.log(bruno.email()); // renvoi \"bruno@email.ici\".\nconsole.log(magalie.email()); // renvoi \"magalie@email.ici\".\n// console.log(bruno.username()); // error\nconsole.log(magalie.username());  // renvoi \"Magalie\".\nconsole.log(Account.nbrOfAccount); // renvoi 2 (puisqu'un \"User\" est également un \"Account\").\nconsole.log(User.nbrOfUser); // renvoi 1.</code></pre>\n\n<p>Vous pouvez trouver gênant que <samp>nbrOfAccount</samp> s'incrémente quand même lors de la création d'un nouveau « User ». Est-ce que vous vous rappelez de <samp>(this instanceof Account)</samp> sensé n'exécuter le code que si <samp>this</samp> s'attache à un contexte d'exécution émanent d'une fonction « Account » uniquement ? Et bien sachez que son défaut (ou son avanbtage, c'est au choix) est qu'il interdit l'exécution de code dans le contexte d'exécution global mais également dans les classes héritées.</p>\n\n<p>Nous pouvons dès lors ajouter une variable statique à « Account » :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\t/* ... */\n\n\t/*** Variables/Méthodes statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\t\n\t// Ajout d'une fonction pour ne compter que les objets non hérités.\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\n\t\n\t/* ... */\n};\nAccount.nbrOfAccount = 0;\nAccount.nbrOfRealAccount = 0;</code></pre>\n\n<h2>Héritage par délégation ou prototypal</h2>\n\n<p>La partie précédente, bien que fonctionnelle, ne va pas nous permettre d'aller plus loin dans notre exercice de simuler le comportement de classe en JavaScript. La réelle question c'est : est-ce réellement important ? Et si plutôt que de nous focaliser sur la façon de faire ressembler le système à celui des autres langages nous tirions plutôt partie des mécanismes en place pour faire mieux que ça ? Je vais vous présenter le prototypage en JavaScript.</p>\n\n<h3>Variable privées ou prototypes, il faut choisir</h3>\n\n<p>Actuellement, nous créons nos méthodes au sein du constructeur (faisant office de classe). Cela est possible mais il existe le mécanisme de prototypage qui nous permet de réaliser cela de manière plus performante. Cependant, il va y avoir des changements à opérer, notamment celui de perdre le bénéfice d'une vrai encapsulation privée.</p>\n\n<div class=\"worst-practice\">\n\t<div class=\"title\">L'encapsulation privée n'est pas possibe avec le prototypage</div>\n\t<div class=\"content\">\n\t\n\t<p>Utilisons le prototypage avec notre <span class=\"useless\">classe</span> constructeur « Account »</p>\n\t\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\tvar \n\t\tpublics = this,\n\t\tprivates = {};\n\t\n\t/*** Variables/Méthodes statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\n\t\n\t// Nous sortons les méthodes publiques du corps du constructeur.\n\t// Cela afin de les associer par la voix du prototype.\n\t// Nous verrons plus loin en quoi cela est différent.\n\t\n\t/*** Constructeur ***/\n\tif (email) {\n\t\tpublics.email(email);\n\t}\n\tif (password) {\n\t\tpublics.password(password);\n\t}\n};\nAccount.nbrOfAccount = 0;\nAccount.nbrOfRealAccount = 0;\n\n/*** Méthodes publiques. ***/\n\n// Nous accrochons les méthodes au prototype de \"Account\".\n// Et le premier constat est que la variable \"privates\" n'existe plus dans notre prototype.\n// Nous pourrions la redéfinir dans la fonction elle-même...\n\nAccount.prototype.email = function (value) {\n\n\t// Vérifions si \"privates\" est conservée dans un contexte d'exécution.\n\tconsole.log(privates);\n\n\t// Si \"privates\" n'existe pas on le créé, sinon on l'utilise.\n\tvar privates = privates || {};\n\n\tif (typeof value == 'undefined') {\n\n\t\t// Que nous renvoi \"privates.email\" ?\n\t\tconsole.log(privates.email);\t\t\n\t\t\n\t\treturn privates.email.toLowerCase();\n\t} else {\n\t\tprivates.email = (new String(value)).toString();\n\n\t\t// Que nous renvoi \"privates.email\" ?\n\t\tconsole.log(privates.email);\n\n\t\t// Transformation de \"publics\" en \"this\" car publics n'existe plus.\n\t\treturn this;\n\t}\n}\nAccount.prototype.password = function (value) {\n\tvar privates = privates || {};\n\n\tif (typeof value == 'undefined') {\n\t\treturn privates.password;\n\t} else {\n\t\tprivates.password = (new String(value)).toString();\n\t\treturn this;\n\t}\n}\n\nvar bruno = (new Account())\n\t.email(\"bruno@email.ici\")\n\t.password(\"bépoB\");\n\nconsole.log(bruno.email()); // error</code></pre>\n\t\t<p>En exécutant la ligne 66 tout ce passe bien. Quand la fonction <samp>email()</samp> est appelée avec un paramètre ligne 67, on passe dans le code ligne 34. La variable <samp>privates</samp> est alors undefinded ce qui est normal. Puis on passe par la ligne 37 qui nous créé notre variable <samp>privates</samp> et par la ligne 49 qui nous affiche bien notre valeur. Tout baigne ! Le problème viens quand on réclame cette valeur à la ligne 70. On pourrait s'attendre à ce que cette fois-ci la ligne 34 nous renvoi « { email: \"bruno@email.ici\" } » mais non, elle retourne de nouveau « undefined ». Ce qui fait qu'à la ligne 37 on recréé de nouveau la variable « privates », que la ligne 42 nous affiche « undefined » et qu'on nous crache à la figure ligne 44 car <samp>toLowerCase()</samp> n'est pas une méthode du type Undefined.</p>\n\t\n\t</div>\n</div>\n\n<p>Une méthode attachée à un Objet par son prototype n'a :</p>\n<ul>\n\t<li>pas accès aux variables définis dans le constructeur,</li>\n\t<li>et n'a pas de contexte d'exécution personnel auquel se référer lui permettant de conserver des valeurs après la fin de l'exécution de la fonction.</li>\n</ul>\n<p>Cette limitation est dû au fonctionnement même du prototypage. En réalité les méthodes attachées au prototype d'un objet n'appartiennent pas à l'instance de l'objet une fois celui-ci appelé avec <samp>new</samp> mais peuvent tout de même manipuler les propriétés et méthodes de l'instance qui sont attachées à <samp>this</samp> et sont elles-mêmes disponible via <samp>this</samp>. Cela signifie que les méthodes ne sont pas « dupliquées » à chaque instance mais seulement appelées par elle et référencées une unique fois dans le prototype.</p>\n\n<ul>\n\t<li>C'est un gain indéniable de performance et de place mémoire occupée par les objets.</li>\n\t<li>Cela permet de définir ou redéfinir des méthodes dans des fichiers séparés.</li>\n\t<li class=\"warning\">Mais cela limite l'utilisation des variables privées.</li>\n</ul>\n\n<h3>De fausses variables privées</h3>\n\n<p>Une solution simple est donc d'attacher les variables anciennement privées à <samp>this</samp> de manière à les rendre disponibles à l'utilisation par les prototypes. Le problème est bien évidemment qu'elles pourront être lues ou assignées sans passer par leurs méthodes respectives. C'est un problème que nous allons limiter en indiquant qu'elles sont privées (bien qu'elles ne le soient pas). Il sera convenu avec vos développeurs qu'il ne faut jamais toucher à ces variables en dehors du constructeur et des prototypes.</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Objet : constructeur + prototypes</div>\n\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\n\t\n\t// Voici notre fausse variable privée.\n\t// Elle est bien accessible en passant par \n\t// l'objet __private qui est accessible par une instance.\n\t// Mais vous vous l'interdirez.\n\t// Pour prévenir l'écrasement de this.__privates, on test d'abords son existence.\n\t \n\tthis.__privates = this.__privates || {};\n\t\n\t/*** Constructeur ***/\n\tif (email) {\n\t\tthis.email(email);\n\t}\n\tif (password) {\n\t\tthis.password(password);\n\t}\n\n\t/*** Variables/Méthodes statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\n\t\t\n};\nAccount.nbrOfAccount = 0;\nAccount.nbrOfRealAccount = 0;\n\n/*** Méthodes publiques. ***/\nAccount.prototype.email = function (value) {\n\tvar privates = this.__privates; // On crée un raccourci aux variables privées.\n\tif (typeof value == 'undefined') {\n\t\treturn privates.email.toLowerCase();\n\t} else {\n\t\tprivates.email = (new String(value)).toString();\n\t\treturn this;\n\t}\n}\nAccount.prototype.password = function (value) {\n\tvar privates = this.__privates; // On crée un raccourci aux variables privées.\n\tif (typeof value == 'undefined') {\n\t\treturn privates.password;\n\t} else {\n\t\tprivates.password = (new String(value)).toString();\n\t\treturn this;\n\t}\n}</code></pre>\n\t</div>\n</div>\n\n<h3>Héritage de prototype</h3>\n\n<p>Occupons nous à présent du cas de « User ». Les constructeurs sont bien hérités avec notre appel à <samp>call</samp> mais quand est-il des prototypes ? Et bien pour simuler un héritage il va falloir « recopier » l'intégralité des prototypes de « Account » dans « User » en prenant soin de ne jamais écraser un prototype portant le même nom dans la classe héritière.</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Héritage : constructeurs + prototypes</div>\n\t<div class=\"content\">\n\t\n\t<p class=\"highlighting\">Héritage (multiple)</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var User = function (username, password, email /* , firstname, lastname, birthdate */) {\n\tthis.__privates = this.__privates || {};\n\n\t/*** Héritage ***/\n\n\t// Ici on recopie l'intégralité des prototypes de \"Account\" dans \"User\".\n\t// Il faut le faire avant l'appel de \"Account.call()\" sinon arrivé à \"this.email()\"\n\t// dans le constructeur \"Account\" ça plantera car \"User\" n'aura pas encore le prototype de \"email()\".\n\t\n\t// On parcourt tous les prototypes de \"Account\".\n\tfor (var p in Account.prototype) {\n\t\t// On empèche d'écraser un prototype qu'on aurait volontairement surchargé pour le constructeur fils.\n\t\tif (typeof User.prototype[p] != 'function') {\n\t\t\tUser.prototype[p] = Account.prototype[p];\t\t\t\t\n\t\t}\n\t}\n\tAccount.call(this, email, password);\n\t\n\t/*********************/\n\t/* Héritage multiple */\n\t\n\t// Nous pourrions également hériter d'un constructeur \"Person\" ici et obtenir un objet contenant les prototypes des deux constructeurs \"Account\" et \"Person\".\n\t/*\n\t\tfor (var p in Person.prototype) {\n\t\t\tif (typeof User.prototype[p] != 'function') {\n\t\t\t\tUser.prototype[p] = Person.prototype[p];\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tPerson.call(this, firstname, lastname, birthdate);\n\t*/\n\t\t\n\t/*** Variables/Méthodes statiques. ***/\n\tUser.nbrOfUser = (typeof User.nbrOfUser != 'undefined') ? User.nbrOfUser + 1 : 1;\n\t\n\t/*** Constructeur ***/\t\t\n\tif (username) {\n\t\tthis.username(username);\n\t}\n};\nUser.nbrOfUser = 0;\n\n/*** Méthodes publiques. ***/\nUser.prototype.username = function (value) {\n\tvar privates = this.__privates;\n\tif (typeof value == 'undefined') {\n\t\treturn privates.username;\n\t} else {\n\t\tprivates.username = value;\n\t\treturn this;\n\t}\n}</code></pre>\n\t<p class=\"highlighting\">Tests globaux</p>\n\t\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">console.log(\n\t(new Account()).email(\"bruno@email.ici\").password(\"bépoB\").email() // renvoi \"bruno@email.ici\".\n);\nvar magalie = new User(\"Magalie\", \"AzertyM\", \"magalie@email.ici\");\nconsole.log(magalie.email()); // renvoi \"magalie@email.ici\".\n\nconsole.log(magalie instanceof Account); // renvoi true.\nconsole.log(magalie instanceof User); // renvoi true.\n\nconsole.log(Account.nbrOfAccount); // renvoi 2.\nconsole.log(Account.nbrOfRealAccount); // renvoi 1.\nconsole.log(User.nbrOfUser); // renvoi 1.</code></pre>\n\t</div>\n</div>\n\n<p>Pour finir, je vous offre un moyen de complètement prototyper votre classe mais qui vous interdira de l'héritage multiple.</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title\">Création complète par prototype</div>\n\t<div class=\"content\">\n\t\n\t<p class=\"highlighting\">Code</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/********************/\n/** Account Object **/\n/********************/\nvar Account = function (email, password) {\n\tthis.init(email, password);\n\n\t/*** Variables/Méthodes statiques. ***/\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\n}\nAccount.nbrOfAccount = 0;\nAccount.nbrOfRealAccount = 0;\n\n/*** Constructeur ***/\nAccount.prototype.init = function (email, password) {\n\tthis.__privates = this.__privates || {};\n\t\n\tif (email) {\n\t\tthis.email(email);\n\t}\n\tif (password) {\n\t\tthis.password(password);\n\t}\n};\n\n/*** Méthodes ***/\nAccount.prototype.email = function (value) {\n\tvar privates = this.__privates;\n\tif (typeof value == 'undefined') {\n\t\treturn privates.email.toLowerCase();\n\t} else {\n\t\tprivates.email = (new String(value)).toString();\n\t\treturn this;\n\t}\n}\nAccount.prototype.password = function (value) {\n\tvar privates = this.__privates;\n\tif (typeof value == 'undefined') {\n\t\treturn privates.password;\n\t} else {\n\t\tprivates.password = (new String(value)).toString();\n\t\treturn this;\n\t}\n}\n\n/*****************/\n/** User Object **/\n/*****************/\nvar User = function (username, password, email) {\n\tthis.init(username, password, email);\n\t\n\t// Variables/Méthodes statiques. //\n\tUser.nbrOfUser = (typeof User.nbrOfUser != 'undefined') ? User.nbrOfUser + 1 : 1;\n};\nUser.nbrOfUser = 0;\n\n/*** Passage de prototype ***/\nUser.prototype = new Account();\nUser.prototype.super = User.prototype.init;\n\n/*** Constructeur ***/\nUser.prototype.init = function (username, password, email) {\n\tthis.super(email, password);\n\tthis.__privates = this.__privates || {};\n\t\t\n\tif (username) {\n\t\tthis.username(username);\n\t}\n};\n\n/*** Méthodes ***/\nUser.prototype.username = function (value) {\n\tvar privates = this.__privates;\n\tif (typeof value == 'undefined') {\n\t\treturn privates.username;\n\t} else {\n\t\tprivates.username = value;\n\t\treturn this;\n\t}\n}</code></pre>\n\n<p class=\"highlighting\">Tests</p>\n\t\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">console.log(\n\t(new Account()).email(\"bruno@email.ici\").password(\"bépoB\").email() // renvoi \"bruno@email.ici\".\n);\nvar magalie = new User(\"Magalie\", \"AzertyM\", \"magalie@email.ici\");\nconsole.log(magalie.email()); // renvoi \"magalie@email.ici\".\n\nconsole.log(magalie instanceof Account); // renvoi true.\nconsole.log(magalie instanceof User); // renvoi true.\n\nconsole.log(Account.nbrOfAccount); // renvoi 2.\nconsole.log(Account.nbrOfRealAccount); // renvoi 1.\nconsole.log(User.nbrOfUser); // renvoi 1.</code></pre>\n\t</div>\n</div>\n\n<h2>Pour aller plus loin</h2>\n\n<p>Je suis certain que ces patterns sont non exhaustifs et qu'il existe encore bien d'autres variantes pour structurer ses données dans sa partie modèle en JavaScript. Si cela vous a inspiré, que vous-même vous connaissez des astuces pour contourner certaines limitations que j'ai mentionnées ou pour tout autre remarque n'hésitez pas.</p>\n\n<p>Pour finir, si des points vous ont semblé un peu vagues ou que vous voulez en savoir plus sur les Prototypes ainsi que tous les mécanismes qui ont permis de réaliser ces pseudo-classes, je vous invite à lire <a href=\"http://fgribreau.com/articles/voyage-au-coeur-de-javascript.html\" title=\"Voyage au coeur de JavaScript\">Voyage au coeur de JavaScript</a> qui est un long article résumant de manière détaillée et concise les mécanismes mis en jeu dans JavaScript.</p>", "dates" : { "published" : { "$date" : 1370080800000 }, "updated" : [] }, "title" : "<span>Classes</span>, <span>héritage</span>, <span>encapsulation</span> <span>vs</span> <span>Prototype</span> en <span>JS</span>", "urn" : "classes-heritage-encapsulation-vs-prototype-en-js" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b0" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "<p>Je rencontre souvent des personnes se plaignant de problèmes de <samp>z-index</samp> et qui les évitent ou se contente de dire que les <samp>z-index</samp> ça pose problème. Bien souvent le problème vient du fait que le développeur ne s'attend pas à ce que la priorité d'affichage des <samp>z-index</samp> fonctionnent en cascade dans le DOM. Voyez plutôt l'exemple suivant :</p>\n\n<h2>Un exemple d'utilisation du z-index problématique</h2>\n\n<div id=\"ex-global\">\n\t<div id=\"ex-content\">\n\t\tCoucou je suis le contenu principale !<br />\n\t\tz-index: 1;\n\t\t<div id=\"ex-test\">\n\t\t\tCoucou je suis un problème !<br />\n\t\t\tz-index: 7777;\n\t\t</div>\n\t</div>\n\t<div id=\"ex-footer\">\n\t\t<div>\n\t\t\tCoucou je suis le pied de page !<br />\n\t\t\tz-index: 2;\n\t\t</div>\n\t</div>\n</div>\n\n<p>Nous observons que la zone avec un z-index de 7777 passe en dessous de la zone avec un z-index de 2. Comment cela est-il possible ? « J'ai des problèmes de z-index ».</p>\n\n<p>Regardons de plus prêt le code :</p>\n\n<h3>HTML</h3>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;div id=\"content\"&gt;\n\tCoucou je suis le contenu principale !&lt;br /&gt;\n\tz-index: 1;\n\t&lt;div id=\"test\"&gt;\n\t\tCoucou je suis un problème !&lt;br /&gt;\n\t\tz-index: 7777;\n\t&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"footer\"&gt;\n\t&lt;div&gt;\n\t\tCoucou je suis le pied de page !&lt;br /&gt;\n\t\tz-index: 2;\n\t&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<h3>CSS</h3>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">#content {\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 1; /* Le contenu doit s'afficher en arrière plan */\n}\n#footer  {\n\tpadding-top: 100px;\n\tmargin: 0 auto;\n\twidth: 50%;\n}\n#footer > div {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 2; /* Le contenu s'affiche au-dessus de #content */\n}\n#test {\n\tposition: absolute;\n\twidth: 80%;\n\theight: 200px;\n\tz-index: 7777; /* Le contenu ne s'affiche pas au-dessus de #footer comme attendu... */\n\tleft: 10%;\n}</code></pre>\n\n<h2>z-index et priorité d'affichage en cascade dans le DOM</h2>\n<p>Tous les éléments dont nous allons parler sont des éléments en <samp>position: relative</samp>, <samp>position: absolute</samp> ou <samp>position: fixed</samp>.</p>\n\n<h3>Priorité aux éléments frères bas</h3>\n<p>On part des éléments les plus hauts dans le DOM et de même niveau (frères). C'est l'élément situé en dessous d'un autre dans le code source qui s'affiche par dessus l'autre.</p>\n\n<h3>Changer les priorités</h3>\n<p>Pour modifier ce comportement on applique un z-index plus grand aux éléments plus haut pour les forcer à passer par dessus.</p>\n\n<h3>Priorité aux éléments parents</h3>\n<p>Quoi qu'il arrive, et peut importe le z-index utilisé, un élément fils d'un élément avec un z-index plus faible qu'un de ses frères ne passera jamais au-dessus de ce frère.</p>\n\n<h2>Mon conseil</h2>\n\n<p class=\"highlighting\">Le mieux est de ne pas mélanger l'affichage relatif/absolue/fixe d'éléments fils venant de différent pères eux-mêmes relatifs.</p>", "dates" : { "published" : { "$date" : 1372443060000 }, "updated" : [] }, "style" : "#ex-content {\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n\tpadding: 8px;\r\n\tcolor: #ffffff;\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: #800000;\r\n\tz-index: 1;\r\n}\r\n#ex-footer  {\r\n\tpadding-top: 100px;\r\n\tmargin: 0 auto;\r\n\twidth: 50%;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n}\r\n#ex-footer > div {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: #008000;\r\n\tz-index: 2;\r\n\tpadding: 8px;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n\tcolor: #ffffff;\r\n}\r\n#ex-test {\r\n\tposition: absolute;\r\n\twidth: 80%;\r\n\theight: 200px;\r\n\tbackground-color: #000080;\r\n\tz-index: 7777;\r\n\tleft: 10%;\r\n\tpadding: 8px;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n\tcolor: #ffffff;\r\n}\r\n#ex-global {\r\n\theight: 300px;\r\n\tposition: relative;\r\n\tmargin: 16px;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n}", "title" : "<span>Problème</span> de <span>z-index</span> et <span>priorité</span> d'<span>affichage</span>", "urn" : "probleme-de-z-index-et-priorite-d-affichage" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b1" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b7" } ], "content" : "<p>Pourquoi je n'utilise pas Bootstrap ? Cela peut sembler une « évolution » de nos méthodes de travail Front-end mais gare au loup et attention de ne pas tomber dans un travers que le W3C tente d'enrayer au fur et à mesure des évolutions HTML et CSS.</p>\n\n<p>Commençons par le commencement. Qu'est-ce que Bootstrap ? Comme plein d'autre « Librairie » ou « Framework » CSS dans la même veine, Bootstrap est un outil permettant d'augmenter la productivité des développeurs Front-end le maîtrisant, dans le but de fournir le plus rapidement possible un rendu visuel ergonomique et si possible responsive.</p>\n\n<p>Mon problème ne vient pas tant de sa finalité qui est louable, mais belle et bien de la mise en oeuvre technique qui permet d'atteindre cette finalité. Pour être concis avant de développer : <span class=\"highlighting\">Bootstrap est une régression pour un travail Front-end de qualité.</span></p>\n\n<p>Je ne compte persuader personne, et à défaut de convaincre, je vais au moins vous expliquer mon point de vue.</p>\n\n<h2>Les deux approches possibles pour de l'intégration Front-end</h2>\n\n<h3>L'approche Sémantique/Visuelle (ou celle du W3C)</h3>\n\n<p>Cette approche considère que dans un fichier HTML, les balises doivent avoir du sens et être complétée (que ce soit par leurs genres, leurs noms, leurs ids ou leurs classes) de manière sémantique de façon à donner du sens au document.</p>\n\n<p class=\"eye-catching\">Exemple : si j'ai deux éléments qui se suivent : le premier pourrait porter l'attribut <samp>class=\"main\"</samp> et le second l'attribut <samp>class=\"aside\"</samp>.</p>\n\n<p class=\"highlighting\">L'attribut <samp>class</samp> est donc dans cette approche une extension de l'attribut <samp>id</samp> (mais en version multiple) et le HTML garde un unique rôle : le rôle sémantique.</p>\n\n<h3>L'approche « Tout en un » (ou celle de Bootstrap &amp; cie)</h3>\n\n<p>Cette approche considère que dans un fichier HTML, les balises doivent représenter un visuel et être complétées de manière à laisser transparaitre rapidement le résultat visuel.</p>\n\n<p class=\"eye-catching\">Exemple : si j'ai deux éléments qui se suivent : le premier pourrait porter l'attribut <samp>class=\"left\"</samp> et le second l'attribut <samp>class=\"right\"</samp>.</p>\n\n<p class=\"highlighting\">L'attribut <samp>class</samp> est donc dans cette approche une extension de l'attribut <samp>style</samp> (mais une sorte de raccourci) ou il n'est pas nécessaire de lister les directives CSS dans la structure mais dans un fichier CSS séparé.</p>\n\n<h2>Comparaison de code des deux approches</h2>\n\n<p>Pour les plus curieux, voici techniquement la différence entres les codes :</p>\n\n<h3>Sémantique et visuel séparé</h3>\n\n<p class=\"highlighting\">HTML :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;div class=\"header\"&gt;\n\t&lt;div class=\"logo\"&gt;\n\t\tLe logo\n\t&lt;/div&gt;\n\t&lt;div class=\"menu\"&gt;\n\t\tLes menus\n\t&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"content\"&gt;\n\t&lt;div class=\"main\"&gt;\n\t\tLe contenu\n\t&lt;/div&gt;\n\t&lt;div class=\"aside\"&gt;\n\t\tLes a cotés\n\t&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<p class=\"highlighting\">CSS :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">/* Empècher les écoulements de flottants */\n.header:after,\n.content:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: both;\n}\n\n/* Flotter à gauche en 50% */\n.logo,\n.main {\n\tfloat: left;\n\twidth: 50%;\n}\n\n/* Afficher en gras le contenu principale */\n.main {\n\tfont-weight: bold;\n}\n\n/* Flotter à droite et centrer le texte en 50% */\n.menu,\n.aside {\n\tfloat: right;\n\ttext-align: center;\n\twidth: 50%;\n}\n\n/* Cacher de l'écran */\n.logo {\n\tposition: absolute;\n\tleft: -7777px;\n}\n\n/* Entrer le padding dans le calcul interne */\n.logo,\n.menu,\n.main,\n.aside {\n\tbox-sizing: border-box;\n}</code></pre>\n\n<h3>Framework CSS comme Bootstrap</h3>\n\n<p class=\"highlighting\">HTML :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;div class=\"clr\"&gt;\n\t&lt;div class=\"left hidden boxsizing w50\"&gt;\n\t\tLe logo\n\t&lt;/div&gt;\n\t&lt;div class=\"right txtcenter boxsizing w50\"&gt;\n\t\tLes menus\n\t&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"clr\"&gt;\n\t&lt;div class=\"left bold boxsizing w50\"&gt;\n\t\tLe contenu\n\t&lt;/div&gt;\n\t&lt;div class=\"right txtcenter boxsizing w50\"&gt;\n\t\tLes a cotés\n\t&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<p class=\"highlighting\">CSS :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">/* Empècher les écoulements de flottants */\n.clr:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: both;\n}\n\n/* Flotter à gauche */\n.left {\n\tfloat: left;\n}\n\n/* Flotter à droite */\n.right {\n\tfloat: right;\n}\n\n/* 50% de la taille */\n.w50 {\n\twidth: 50%;\n}\n\n/* Ecrire en gras */\n.bold {\n\tfont-weight: bold;\n}\n\n/* Centrer le texte */\n.txtcenter {\n\ttext-align: center; /* Le texte centré */\n}\n\n/* Cacher de l'écran */\n.hidden {\n\tposition: absolute;\n\tleft: -7777px;\n}\n\n/* Empècher les écoulement de flottants */\n.boxsizing {\n\tbox-sizing: border-box;\n}</code></pre>\n\n<h2>Pourquoi l'approche sémantique est la meilleure (selon moi)</h2>\n\n<h3>La raison historique ; de la séparation du fond et de la forme</h3>\n\n<p>Le W3C améliore les normes de structures HTML dans un but de séparation de la structure et du rendu. Voyons ça plus en détail :</p>\n\n<h4>D'abord HTML</h4>\n\n<p>Le HTML dans ses débuts embarquait des balises permettant de créer du fond (ou de structurer) tel que &lt;div&gt;, &lt;span&gt;, &lt;table&gt;, etc... et des balises permettant de créer de la forme (ou du rendu) tel que &lt;font&gt;, &lt;i&gt;, &lt;b&gt;, &lt;center&gt;, etc... Les deux étaient mélangés et c'est bien dans le fichier HTML, au travers de sa structure que l'on décidait qu'un texte devrait être rouge, centré et avoir une taille de 20 pixel.</p>\n\n<h4>Puis le xHTML</h4>\n\n<p>Une évolution logique a donc été de supprimer (ou déprécier) les balises porteuses d'un rendu visuel et de leur préférer un sens sémantique (tout en accordant une grande importance au CSS pour l'habillage). Ainsi un texte centré ou rouge se créé via une feuille CSS et on ne considère plus un texte important comme &lt;b&gt; (bold) mais plutôt ayant un sens &lt;strong&gt; (fort). C'est au développeur de choisir si finalement &lt;strong&gt; n'a pas plutôt un rendu italique et souligné via CSS.</p>\n\n<p>Il y a donc une volonté du Web de séparer la structure et le rendu. Ce que je trouve assez logique.</p>\n\n<h4>On continue avec le HTML5</h4>\n\n<p>Toujours dans ce soucis de structure sémantique, les balises en elles-mêmes se voit rajoutée du sens et c'est pour cela que &lt;header&gt;, &lt;footer&gt;, &lt;section&gt;, &lt;article&gt;, &lt;aside&gt;, &lt;figure&gt;... font leur apparition.</p>\n\n<p>Cela signifie que l'approche de Bootstrap prend le contre-pied de cette idée de séparation et instaure selon moi une approche plus liée qui n'est pas en accord avec la philosophie que je partage avec le W3C.</p>\n\n<h2>Les raisons techniques</h2>\n\n<h3>La taille du fichier HTML généré</h3>\n\n<p>Ajouter des classes à outrance pour habiller visuellement sa structure HTML surcharge anormalement le DOM d'au moins deux manières :</p>\n\n<ul>\n\t<li>Obligation de wrapper des éléments pour qu'ils fonctionnent tels que Bootstrap l'a prévu.</li>\n\t<li>Multiplication du nombre de classes dans l'attribut <samp>class</samp>.</li>\n</ul>\n\n<p>Cela défère le poids de la CSS vers le HTML. Or, autant les fichiers CSS peuvent être mis en cache, autant la structure HTML peut difficilement l'être étant donné sa nature changeante en fonction du controlleur qui la génère.</p>\n\n<h3>La surcharge CSS</h3>\n\n<p>Bootstrap n'est pas négligeable en taille. Cela impose un pré-chargement plus lourds au premier chargement de page (en suposant qu'ensuite le fichier soit mis en cache). De manière assez amusante, plus Bootstrap \"supporte\" des péréphériques petits avec de faibles débits à l'utilisation (ajout de fichiers CSS et JS), plus il est lourd en poids...</p>\n\n<h3>La maitrise de l'outil</h3>\n\n<p>L'avantage offert par Bootstrap est perdu dès l'instant ou l'outil est utilisé par des personnes ne le connaissant pas (rapidité d'intégration). Pire encore, cela expose l'intégration par de multiples personnes à mélanger l'approche Bootstrap à une approche sémantique.</p>\n\n<h3>Maintenance de code et changement de design</h3>\n\n<p>La structure étant intimement liée au framework Bootstrap et au visuel soumis, le code HTML est bon à revoir dans son architecture pour un changement de design. La structure étant liée aux controlleurs car créée par eux, c'est le Back-end qui se retrouve impacté par un changement de design là ou seulement les CSS et les JS auraient du bouger (sans que le Back soit touché par du changement de design).</p>\n\n<h3>Ne pas rendre service au Front-end apprenant</h3>\n\n<p>L'approche « tout en un » masque le plus important : les mécanismes de fonctionnement des classes en elles-mêmes. Pourquoi -pour réaliser telles actions- elles utilisent ces attributs précisément ? Si cet état de boîte noire peut s'avérer intéressant pour des débutants et un gain de temps pour les experts : cela maintient l'écart entre les deux. Et, les seuls apprenant réellement à utiliser les nouveautés du CSS en comprenant les mécanismes sous-jacent sont ceux qui maintiennent Bootstrap (ou équivalent) ou ceux qui ne l'utilisent pas.</p>\n\n<h2>Pourquoi utiliser Bootstrap alors ?</h2>\n\n<h3>A utiliser pour :</h3>\n\n<ul>\n\t<li>Développer des « Proof of Concept » ou remplacer la création PSD par une création temps réel de façon rapide.</li>\n\t<li>Faire des sites à la pelle et avec de très petits budgets où le résultat en performance et en qualité reste un problème mais ou l'argent fournis pour la réalisation manque.</li>\n\t<li>Habiller un Back-office personnalisé qui n'a pas fait l'objet d'une créa et que l'on espère « user friendly » rapidement et simplement (une création purement fonctionnelle sans problème de performances à grande échelle ou de soucis de SEO).</li>\n</ul>\n\n<h3>A ne pas utiliser pour :</h3>\n\n<ul>\n\t<li>Des petits sites car cela augmente bien souvent de 90% le poids du site, il vaut donc mieux ne pas le faire et perdre un peu de temps pour un gain en performance maintenance et sémantique.</li>\n\t<li>De grosses structures car cela leur font perdre la flexibilité du changement d'UI sans impacter le Back-end, impose la formation de toutes les ressources Front-end travaillant sur le projet à Bootstrap et il résulte de la construction même des pages un impact SEO non négligeable due au poids du HTML, sa sémantique limitée et plus globalement au temps de chargement des pages...</li>\n</ul>\n\n<h2>Mélanger les deux approches pour en garder les avantages ?</h2>\n\n<p>Si l'on extrait les problèmes majeures en considérant que nos ressources seront formées à utiliser Bootstrap nous nous retrouvons avec les deux points suivants.</p>\n\n<h3>La lourdeur de la librairie</h3>\n\n<p>Que ce soit pour Bootstrap ou pour une autre librairie, le premier chargement sera laborieux (avant que le fichier n'ai été téléchargé une fois et mis en cache). On peut palier à ce problème en utilisant une version du script hébergé sur des serveurs comme c'est le cas pour jQuery par exemple. Ainsi pour Bootstrap ont peut se faire servir par <a href=\"http://www.bootstrapcdn.com/\" title=\"CDN for Bootstrap\">http://www.bootstrapcdn.com/</a>. L'avantage est que tous les sites utilisant le chargement par CDN Bootsrap participe à mettre en cache pour vous le fichier. Cela signifie que ce n'est plus nécésairement votre première page ouverte qui ralentira le chargement du visiteur mais peut-être celle d'un autre site.</p>\n\n<h3>Remettre les classes « tout en un » de nouveau dans la CSS</h3>\n\n<p>Finalement ce qu'il nous faudrait pour résoudre notre soucis et remettre la sémantique à l'ordre du jour, c'est d'adresser dans la feuille CSS (et non dans la page HTML elle-même) notre suite de classe. Si nous pouvions par exemple transformer ceci :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;div class=\"clr\"&gt;\n\t&lt;div class=\"left hidden boxsizing w50\"&gt;\n\t\tLe logo\n\t&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">/* Fichier complet de Bootstrap */</code></pre>\n\n<p>en ceci</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;div class=\"header\"&gt;\n\t&lt;div class=\"logo\"&gt;\n\t\tLe logo\n\t&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">/* Fichier complet de Bootstrap */\n\n.header {\n\t@extend .clr\t\n}\n.logo {\n\t@extend .left .hidden .boxsizing .w50\n}</code></pre>\n\n<p>le tour serait joué.</p>\n\n<p>C'est exactement ce que permet une approche comme <a href=\"http://sass-lang.com/\" title=\"Sass - Syntactically Awesome Stylesheets\">SASS</a> ou <a href=\"http://lesscss.org/\" title=\"LESS &laquo; The Dynamic Stylesheet language\">LESS</a>. Elles permettent d'écrire de manière intuitive et non redondante des suites de sélecteurs CSS pour au final générer le fichier CSS qui va bien. Je ne vais pas expliquer ici comment cela fonctionne mais de cette manière vous pourriez remplir vos classes HTML de manière sémantique tout en conservant vos habitudes d'intégration avec Bootsrap.</p>\n\n<h2>Ne soyons plus objectif quelques instants (du Troll !)</h2>\n\n<p>Sinon à part ça, vous trouvez pas vous qu'elles manquent d'originalité les pages Bootstrap ? Elles ont toutes la même tronche !</p>", "dates" : { "published" : { "$date" : 1372788120000 }, "updated" : [] }, "title" : "<span>CSS</span> et <span>sémantique</span> d'une <span>Intégration</span> <span>HTML</span>", "urn" : "css-et-semantique-d-une-integration-html" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b2" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ce" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<p>C'est suite à plusieurs conversations m'invitant à ne pas utiliser de multiples balises h1 dans mes intégrations HTML (et plus récemment une demande « insistante » sur le fait de ne pas le faire) que je me vois forcé de marcher sur les pas de <a href=\"http://www.goetter.fr/\" title=\"Site Raphaël Goetter\">Raphaël Goetter</a> -qui avait <a href=\"http://blog.goetter.fr/post/16632403397/le-mythe-de-lelement-h1-unique-en-html\" title=\"Le mythe de l’élément H1 unique en HTML\">déjà abordé le sujet</a>- pour expliquer pourquoi : en plus d'être tout à fait valide, cette pratique est bénéfique.</p>\n\n<p>Tout document HTML5 dispose de cloison de contenu (<a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#sectioning-content\" title=\"Sectionneur de contenu\">sectioning content</a>) que sont <samp>article</samp>, <samp>aside</samp>, <samp>nav</samp> et <samp>section</samp>. Ces zones de contenu peuvent chacune contenir une balise <samp>header</samp> et <samp>footer</samp> (ne cloisonnant pas elles-mêmes le contenu) et de multiple éléments de titrage (<a href=\"http://www.w3.org/TR/html-markup/h1.html\" title=\"Titre en HTML\">heading</a>) allant de <samp>h1</samp> à <samp>h6</samp>.</p>\n\n<p>Bien que l'utilisation de plus d'une balise <samp>h1</samp> ai pu rationnellement laisser à débattre (même si techniquement les standards ne l'interdise pas), les recommandations et même l'interdiction d'une telle pratique ne sont plus pertinentes et rationnelles à l'heure du HTML5.</p>\n\n<h2>La balise h1 et les balises entêtes h2-h6</h2>\n\n<h3>Que dit la référence HTML</h3>\n\n<p>Le <a href=\"http://www.w3.org/TR/html-markup/h1.html\" title=\"Titre en HTML\">W3C</a>, sans parler de HTML5, nous explique (<a href=\"http://www.w3.org/TR/html-markup/h1.html\" title=\"Titre en HTML\">ici</a>) que : « Les éléments h1 à h6 servent de titre pour les sections auxquelles ils sont rattachés. ». Dans les contraintes additionnelles (là où logiquement nous devrions donc trouver notre interdiction de multiple <samp>h1</samp>) il est seulement mentionné que :</p>\n\n<ul>\n\t<li>« L'élément h1 ne doit pas être contenu comme élément enfant d'un élément address. »</li>\n\t<li>« L'attribut align sur l'élément h1 est obsolète. Utilisez CSS à la place. »</li>\n</ul>\n\n<p>Aucune interdiction n'est donc mentionnée dans cette partie. Ces balises sont autorisés dans <a href=\"http://www.w3.org/TR/html-markup/common-models.html#common.elem.flow\" title=\"Eléments de flux\">les éléments listés ici</a>.</p>\n\n<h3>Que dit la référence HTML5</h3>\n\n<p>Le <a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/sections.html#the-section-element\" title=\"Titre en HTML5\">W3C</a> nous explique (<a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/sections.html#the-section-element\" title=\"Titre en HTML5\">ici</a>) : « L'élément section représente une zone ou une application générique à un document. Une section, dans ce contexte, est un regroupement de contenu avec une même thématique, et de fait avec des balises d'entêtes. ».</p>\n\n<p>Le <a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/sections.html#headings-and-sections\" title=\"Titre et section en HTML5\">W3C</a> nous explique également (<a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/sections.html#headings-and-sections\" title=\"Titre et section en HTML5\">ici</a>) que : « Les éléments h1–h6 et l'élément hgroup sont des éléments d'entêtes. ».</p>\n\n<h2>Exemple donné par le W3C</h2>\n\n<p>Avant de présenter des exemples tous valide, soulignons que le W3C explique : « Les sections peuvent contenir des balises d'entête de n'importe quel niveau. Mais l'auteur insiste lourdement sur le fait de n'utiliser que des éléments <samp>h1</samp>, ou d'utiliser les éléments de rang appropriés pour les sections imbriquées à différents niveaux. »</p>\n\n<h3>Exemple valide</h3>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;body&gt;\n\t&lt;h1&gt;Foo&lt;/h1&gt;\n\n\t&lt;h2&gt;Bar&lt;/h2&gt;\n\t&lt;blockquote&gt;\n\t\t&lt;h3&gt;Bla&lt;/h3&gt;\n\t&lt;/blockquote&gt;\n\n\t&lt;p&gt;Baz&lt;/p&gt;\n\n\t&lt;h2&gt;Quux&lt;/h2&gt;\n\n\t&lt;section&gt;\n\t\t&lt;h3&gt;Thud&lt;/h3&gt;\n\t&lt;/section&gt;\n\n\t&lt;p&gt;Grunt&lt;/p&gt;\n&lt;/body&gt;</code></pre>\n\n<h3>Deux exemples valides, mais avec une différence de clareté</h3>\n\n<p class=\"highlighting\">Peu lisible</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;body&gt;\n\t&lt;h4&gt;Apples&lt;/h4&gt;\n\t&lt;p&gt;Apples are fruit.&lt;/p&gt;\n\n\t&lt;section&gt;\n\t\t&lt;h2&gt;Taste&lt;/h2&gt;\n\t\t&lt;p&gt;They taste lovely.&lt;/p&gt;\n\n\t\t&lt;h6&gt;Sweet&lt;/h6&gt;\n\t\t&lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;\n\n\t\t&lt;h1&gt;Color&lt;/h1&gt;\n\t\t&lt;p&gt;Apples come in various colors.&lt;/p&gt;\n\t&lt;/section&gt;\n&lt;/body&gt;</code></pre>\n\n<p class=\"highlighting\">Plus lisible</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;body&gt;\n\t&lt;h1&gt;Apples&lt;/h1&gt;\n\t&lt;p&gt;Apples are fruit.&lt;/p&gt;\n\n\t&lt;section&gt;\n\t\t&lt;h2&gt;Taste&lt;/h2&gt;\n\t\t&lt;p&gt;They taste lovely.&lt;/p&gt;\n\n\t\t&lt;section&gt;\n\t\t\t&lt;h3&gt;Sweet&lt;/h3&gt;\n\t\t\t&lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;\n\t\t&lt;/section&gt;\n\t&lt;/section&gt;\n\n\t&lt;section&gt;\n\t\t&lt;h2&gt;Color&lt;/h2&gt;\n\t\t&lt;p&gt;Apples come in various colors.&lt;/p&gt;\n\t&lt;/section&gt;\n&lt;/body&gt;</code></pre>\n\n<h3>Le plus facile à maintenir (les sections peuvent bouger)</h3>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;body&gt;\n\t&lt;h1&gt;Apples&lt;/h1&gt;\n\t&lt;p&gt;Apples are fruit.&lt;/p&gt;\n\n\t&lt;section&gt;\n\t\t&lt;h1&gt;Taste&lt;/h1&gt;\n\t\t&lt;p&gt;They taste lovely.&lt;/p&gt;\n\n\t\t&lt;section&gt;\n\t\t\t&lt;h1&gt;Sweet&lt;/h1&gt;\n\t\t\t&lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;\n\t\t&lt;/section&gt;\n\t&lt;/section&gt;\n\n\t&lt;section&gt;\n\t\t&lt;h1&gt;Color&lt;/h1&gt;\n\t\t&lt;p&gt;Apples come in various colors.&lt;/p&gt;\n\t&lt;/section&gt;\n&lt;/body&gt;</code></pre>\n\n<h2>Les multiples h1 et le SEO</h2>\n\n<p>Et qu'en dise les moteurs ? Cela est tout à fait pris en compte par les moteurs et heureusement. En se posant deux minutes : on s'aperçoit aisément qu'une architecture sectionné avec plusieurs h1 est plus facilement maintenable qu'une architecture à plat parsemée de <samp>h1</samp> à <samp>h6</samp>.</p>\n\n<p>Mais je laisse la parole à <a href=\"http://www.mattcutts.com/blog/\" title=\"Matt Cutts: Gadgets, Google, and SEO\">Matt Cutts</a>, ingénieur chez Google depuis 2000 communiquant énormément via son blog du SEO chez Google :</p>\n\n<div class=\"video\">\n\t<iframe width=\"500\" height=\"330\" src=\"//www.youtube.com/embed/GIn5qJKU8VM\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\n<p>\n\tLe monsieur nous explique que s'il y a une raison logique à avoir plusieurs sections et plusieurs balises <samp>h1</samp> dans une page, ce n'est pas mauvais de les mettre en place. Il insiste sur le fait qu'une page intégralement remplis de <samp>h1</samp> est problématique en ce qui concerne par exemple un rendu sans CSS (si celle-ci ne se charge pas par exemple) et qu'il est toujours bon d'utiliser les autres balises de niveau. L'important est que les balises h1 restent réservées si possible à la partie entête de chaque section. Mais si elles sont utilisées de manière logique et avec parcimonie il n'y a aucun inconvénient SEO.\n</p>\n\n<h2>Il est autorisé d'avoir plusieurs h1 dans une page HTML5</h2>\n\n<p>\n\tEn conclusion utilisés plusieurs balises <samp>h1</samp> dans un document HTML5 est non seulement valide, mais recommandé par le W3C pour respecter une logique de hierarchie. De plus si deux éléments de premier niveau se valent en importance, il n'y a pas de problème à utiliser deux balises <samp>h1</samp>, le <samp>title</samp> étant l'unique élément pouvant représenter un titre unique pour une page donnée.\n</p>", "dates" : { "published" : { "$date" : 1375883520000 }, "updated" : [] }, "style" : ".video {\r\n\tmargin: 8px 0;\r\n}\r\n.video iframe {\r\n\twidth: 100%;\r\n\tmargin: 0 auto;\r\n}\r\n", "title" : "Les <span>balises</span> <span>h1</span> multiples autorisées en <span>HTML5</span>", "urn" : "les-balises-h1-multiples-autorisees-en-html5" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b3" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48c3" } ], "content" : "<p>Le « Responsive Web Design » comme son nom l’indique est le concept de « Responsive Design » adapté au Web. Il est parfois raccourci par le terme  « RWD » ou simplement par « Responsive ».</p>\n\n<p>Dans la majorité des cas d’utilisations, il est utilisé comme raccourci pour désigner la version Mobile d’un site web originalement conçu pour un écran d’ordinateur.</p>\n\n<p>La vérité est que le Responsive Web Design n’est qu’un des nombreux concepts appliqués à un site web pour le rendre « utilisable agréablement » sur mobile tout en sachant qu’il ne se limite pas qu’au mobile et qu’il vaut tout aussi bien pour :</p>\n\n<ul>\n\t<li>une tablette,</li>\n\t<li>une phablette (terminal intermédiaire se situant entre le smartphone et la tablette),</li>\n\t<li>un ordinateur et tous ses types d’écrans (HD, 3D, tactile),</li>\n\t<li>une télévision numérique,</li>\n\t<li>un tableau de bord de voiture,</li>\n\t<li>une console de jeu portable,</li>\n\t<li>…et tout appareil capable d’afficher un site web par l’intermédiaire d’un navigateur web.</li>\n</ul>\n\n<p>En plus du fait que Responsive Web Design ne signifie donc pas obligatoirement « version mobile », il est le porte étendard d’une liste de concept comme l’« Adaptative Web Design ». Difficile de comprendre ce dont on parle réellement quand il est question de Responsive Web Design.</p>\n\n<h2>Les concepts permettant (entre autre) de faire du web mobile</h2>\n\n<p>Faisons un petit tour des termes et concepts autour de la réalisation mobile d’une interface web.</p>\n\n<h3>Adaptatif Web Design</h3>\n\n<p>L’idée derrière ce terme est que la partie fonctionnelle d’un site web est différente en fonction du périphérique qui réclame la page web. Si je demande une page sur un téléphone, il est probable que je ne fournisse pas la vidéo HD que j’aurais fourni si elle avait été demandée sur un ordinateur. Il est également probable que je ne fournisse pas de carte Google Maps sur mobile mais plutôt un lien ouvrant l’application Google Maps sur le téléphone alors que sur ordinateur, une grande carte interactive aurait été proposée.</p>\n\n<p>Ce concept repose donc sur un design fonctionnel (et donc visuel) adapté au périphérique de l’utilisateur. Le cas le plus extrême de ce concept pourrait être de ne pas proposer seulement des fonctionnalités adaptées mais un site dédié complet (un site version ordinateur à une adresse, un site version mobile à une autre).</p>\n\n<p class=\"eye-catching\"><span class=\"highlighting\">Technique</span> : Cela demande d’utiliser du JavaScript côté client et également de communiquer des informations clientes au serveur pour qu’il décide quelles sont les fonctionnalités nécessaires au périphérique. Le serveur peut donc décider de renvoyer certaines fonctionnalités. Dans un cas de site mobile dédié, de renvoyer l’utilisateur sur le site mobile en question.</p>\n\n<h3>Responsive Web Design</h3>\n\n<p>Notre fameux Responsive Web Design, expression fourre-tout dont l’idée originale associée au terme est qu'en fonction de la taille et des interactions utilisateurs possibles (souris ou doigts) le design n’est pas présenté de la même manière.</p>\n\n<p>Aussi un affichage sur 3 grandes colonnes côte à côte sur grand écran se résumera à 3 éléments l’un en dessous de l’autre sur mobile. Un menu large vertical se permettant de prendre de la place sur grand écran se résumera à un menu vertical masqué par défaut pour garder de la place visible sur mobile, etc… Il est donc tout à fait possible qu’avec le même périphérique, en fonction qu’il affiche la page en mode portrait ou en mode paysage, le rendu soit différent.</p>\n\n<p>Le Responsive Design adapté au web utilise principalement la technique de « Responsive Layout » qui est la fusion de deux concepts sous-jacents. Voici donc (Responsive Layout inclus) les 3 principes responsives.</p>\n\n<h4>Basic Layout</h4>\n\n<p>Chaque partie du design bouge de manière fluide en fonction de la largeur du périphérique qui l’affiche. On obtient donc des titres sur 1 ligne qui peuvent passer sur 3 et tous les éléments ne font que s’étirer et passer les un sous les autres. Il n’y a aucune disposition spéciale ou changement notable de design entre une basse et une haute résolution, seulement un étirement infini : c’est le concept de « fluidité ». Il est dit basique dans le sens ou le rendu « sans CSS » d’une page web possède ces caractéristiques.</p>\n\n<p>Ce concept est utilisé majoritairement pour les sites mobiles dédiés (un autre site web uniquement réservé à l’affichage mobile) permettant éventuellement un affichage sur grand mobile et tablette).</p>\n\n<p class=\"eye-catching\"><span class=\"highlighting\">Technique</span> : La feuille CSS est simple et ne fait pas intervenir de Media Queries. Les tailles sont fournies en % et non en pixel et beaucoup de valeur sont en auto. Les éléments ne prennent qu’une ligne et s’empile les un sous les autres.</p>\n\n<h4>Adaptative Layout</h4>\n\n<p>A ne pas confondre avec l’Adaptative Web Design, ce concept défini le fait qu’un même site web revêt une apparence différente en fonction de résolution d’écran défini à l’avance. Il peut donc en résulter un affichage pour bureau et un affichage pour mobile (et même un affichage pour tablette) sur la même application (page web). Cependant le design est donc adapté uniquement pour 2 ou 3 résolution faisant office de « gap ».</p>\n\n<p>Il en découle donc qu’un périphérique dont l’affichage se situe entre deux gaps prendra l’apparence du gap le plus petit et laissera des blancs de part et d’autre de la page. Ce blanc peut être masqué en forçant alors le zoom de l’écran pour qu’ils n’apparaissent plus.</p>\n\n<p class=\"eye-catching\"><span class=\"highlighting\">Technique</span> : La feuille CSS utilise des Media Queries. L’approche « if … else if  …  else » est envisageable dans le sens ou entre les gaps il n’y a aucune modification CSS. Il y a donc un pend mobile, un pend tablette et un pend ordinateur par exemple. L’approche en cascade (on commence par le desktop, puis on écrase les propriétés différentes au fur et à mesure qu’on descend) est tout aussi valide et permet à terme d’évoluer vers du (Limited) Responsive Layout.</p>\n\n<h4>Responsive Layout</h4>\n\n<p>Ce concept est un mélange des deux précédentes approches. Il y a toujours des gaps visuels définis à des résolutions précises mais ces gaps, tout en présentant une disposition différente, garde une cohérence en terme de placement permettant « entre les gaps » de faire intervenir le concept de fluidité. Ainsi quel que soit la résolution du périphérique, le design est toujours adapté à l’écran en rendant fluide le gap précédent ou suivant.</p>\n\n<div class=\"variation\">\n\t<h4>Limited Responsive Layout</h4>\n\n\t<p>C’est le concept le plus répandu et le plus associé au « Responsive Web Design ». Il est identique au concept du dessus cependant :</p>\n\t<ul>\n\t\t<li>en-dessous du plus petit gap le site n’est plus Responsive mais scrollable et/ou</li>\n\t\t</li>au-dessus du plus grand gap le site n’est plus Responsive mais des zones vides s’étendent de part et d’autre de l’écran.</li>\n\t</ul>\n</div>\n\n<h3>Desktop First</h3>\n\n<p>Ce concept ne portait pas de nom avant l’arrivée du concept de « Mobile First » mais il désigne tout simplement un site qui a été créé pour s’afficher sur un ordinateur en premier lieu. Ce n’est qu’ensuite, avec le concept de « Progressive Enhancement » (Amélioration Progressive) que vient se greffer des gaps visuels pour les versions tablette et mobile (avec éventuellement de la fluidité).</p>\n\n<p>Cette approche donne lieu en générale à des sites finaux « Limited Responsive Layout » ou le site original est le gap final du rendu visuel. En générale ce type d’approche permet de supporter des vieux navigateurs comme IE7 et IE8 tout en permettant du « Responsive Web Design » sur les autres. Cette approche à le défaut d’alourdir en poids les fichiers au fur et à mesure qu’on habille des périphériques aux écrans plus petits.</p>\n\n<p class=\"eye-catching\"><span class=\"highlighting\">En bref</span> : Desktop First supporte les vieux navigateurs facilement mais impose un travail spécifique pour les tablettes et mobiles.</p>\n\n<h3>Mobile First</h3>\n\n<p>C’est l’approche se rapprochant le plus de l’idée première du « Responsive Web Design » permettant un affichage Responsive du petit écran vers les écrans très grand. Cette approche consiste à d’abord pensé le site et le design sur petit périphérique comme des mobiles (d’où le nom) puis ensuite d’augmenter le design vers des périphériques plus gros.</p>\n\n<p>Cette approche, en plus de permettre une responsivité infinie permet également de s’assurer que ce sont les plus petits périphériques qui chargent le moins de ressources. Cette approche impose cependant le concept de « Fallback Mechanism » (Dégradation élégante) pour ajouter le support de IE8 et/ou IE7 n’étant pas supporté de base dans cette approche (ou ayant alors l’apparence mobile).</p>\n\n<p class=\"eye-catching\"><span class=\"highlighting\">En bref</span> : Supporte les tablettes et mobiles facilement mais également les écrans HD, etc..., impose un travail spécifique pour IE8 et/ou IE7.</p>\n\n<h3>Progressive Enhancement</h3>\n\n<p>L’amélioration progressive est un concept visant à développer une application (dans notre cas un site web) en partant de standard volontairement âgé et encore supporté par les navigateurs les plus récents pour couvrir une compatibilité maximale avec les anciens périphériques, navigateurs, etc... Elle permet notamment un support sans JavaScript ou un support IE7 ou IE8 plus facile à mettre en place mais bride l’accès aux technologies récentes dans le sens ou les mettre en place devient excessivement complexe et couteux puisqu’il faut continuer le support des navigateurs ne permettant pas nativement de tel chose.</p>\n\n<p>S’ajoute comme une nouvelle brique le passage en Responsive Web Design, très chronophage, et demandant bien souvent une refonte profonde du code initiale de manière à l’améliorer. Bien qu’ils conviennent aux sites existant il est parfois bien plus judicieux dans le cas du passage en Responsive d’un site de le refaire avec l’approche qui va suivre.</p>\n\n<h3>Fallback Mechanism</h3>\n\n<p>A contre-pied de l’amélioration progressive, la dégradation élégante consiste à utiliser des standards à la pointe de la technologie et en phase avec les périphériques de nos temps de manière à offrir une expérience utilisateur la plus agréable possible compte tenu des outils que leur appareil leur offre.</p>\n\n<p>Cela permet facilement d’adapter les designs et les fonctionnalités au monde actuel du web. Il va ensuite être question d’ajouter une surcouche pour gérer les anciens périphériques ne disposant pas de quoi utiliser les nouvelles fonctionnalités (comme IE8 ou IE7). Il convient alors de les rendre utilisable sans nécessairement reproduire à l’identique la fonctionnalité ou le visuel. La structure initiale est souvent légère et adaptée pour une approche Responsive et donc pour faire des versions mobiles (même avec une approche Desktop First).</p>\n\n<h2>Maintenant que tout le monde se comprend...</h2>\n\n<p>...Peut-être pourrez-vous plus aisément bien border le périmètre d'action quand vous réalisez un site Responsive Web Design ou plus vulgairement une « Version Mobile ».</p>", "dates" : { "published" : { "$date" : 1378487700000 }, "updated" : [] }, "style" : "p.eye-catching,\r\n.variation {\r\nmargin-left: 32px;\r\nfont-size: 0.9em;\r\n}", "title" : "Les <span>concepts</span> autour du <span>Responsive Web Design</span>", "urn" : "les-concepts-autour-du-responsive-web-design" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b4" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48cc" }, { "$oid" : "5310456355dfd5f7698d48b8" } ], "content" : "<p>On parle souvent de la grande vélocité de Node.js et de son brillant avenir. Mais il n'est pas toujours judicieux de l'utiliser. Pour certains cas d'utilisations, c'est le meilleur choix à faire (application web temps réel). Pour d'autres cas, ça le deviendra mais c'est encore un peu tôt (CMS web). Et pour d'autre il ne sera jamais réellement adapté (intelligence artificielle). Voici <a href=\"http://nodeguide.com/convincing_the_boss.html\" title=\"Felix's Node.js Convincing the boss guide\">l'adaptation française</a> d'un article de <a href=\"http://felixge.de/\" title=\"Felix Geisendörfer\">Felix Geisendörfer</a>, contributeur Node.js. Il nous explique de manière pragmatique comment raisonnablement et rationnellement il est possible d'utiliser Node.js pour son business.</p>\n\n<p>« Maintenant que vous êtes au point sur l'utilisation de Node.js, il est temps de convaincre votre boss. Enfin peut-être. J'ai eu l'occasion de conseiller différente entreprise sur la question : Node.js est la bonne technologie ? Et parfois, la réponse est tout simplement non.</p>\n\n<p>Ce guide est ma collection opiniâtre des conseils pour ceux d'entre vous qui veulent savoir si Node.js fait sens pour leur entreprise, et si oui, comment convaincre la direction.</p>\n\n<h2>Les mauvais cas d'utilisation</h2>\n\n<h3>Des applications à forte charge CPU</h3>\n\n<p>Même si j'adore Node.js, il y a plusieurs cas d'utilisation où ça n'a pas de sens de l'utiliser. Les cas les plus évidents sont ceux des applications avec une importante utilisation du CPU avec peu de communication Entrée/Sortie. Donc, si vous avez l'intention d'écrire un logiciel d'encodage vidéo, d'intelligence artificielle ou un logiciel similaire gourmand en processeur, s'il vous plaît n'utiliser pas Node.js. Alors qu'en Node.js vous allez un peu galérer, vous aurez probablement de meilleurs résultats avec C ou C++.</p>\n\n<p>Cela étant dit, Node.js vous permet d'écrire facilement des addons C++, de sorte que vous pourriez l'utiliser comme un moteur de script utilisant lui-même vos algorithmes ultra-secrets.</p>\n\n<h3>Des applications HTML simple (Créer, Lire, Mettre à jour et Effacer)</h3>\n\n<p>Alors que Node.js devient un outil amusant pour écrire toutes sortes d'applications web, ne vous attendez pas à ce qu'il vous fournisse plus que PHP, Ruby ou Python sur ces points. Oui, votre application sera probablement plus évolutive, mais cependant votre application ne vous permettra pas, magiquement, d'obtenir plus de trafic tout simplement parce que vous l'écrivez en Node.js.</p>\n\n<p>La vérité est que si nous commençons à regarder du côté de bons frameworks Node.js, il n'y a rien de plus puissant que Rails, CakePHP ou Django sur la scène à l'heure actuelle. Si la plupart de vos applications se contente d'un simple rendu HTML basé sur une base de données précise, s'aider de Node.js ne vous fournira pas beaucoup d'avantages commerciaux tangibles.</p>\n\n<h3>NoSQL + Node.js + Truc qui fait classe mais c'est tout</h3>\n\n<p>Si l'architecture pour vos prochaines applications contient du NoSQL, arrêtez vous un instant, et lisez ceci :</p>\n\n<p>Oui, Redis, CouchDB, MongoDB, Riak, Casandra, etc... ont tous l'air vraiment tentant, mais c'est peut-être la pomme rouge à laquelle Eve n'a pas pu résister. Si vous prenez déjà un risque technologique avec Node.js, vous ne devriez pas les multiplier avec plus de technologie que vous ne comprenez probablement pas encore complètement.</p>\n\n<p>Bien sûr, il y a des cas d'utilisation légitimes pour choisir une base de données orientée document. Mais si vous essayez de créer une entreprise basée sur votre logiciel, s'en tenir à la technologie des bonnes vieilles base de données relationnelles (comme postgres ou mysql) pourrait bien être plus pertinent que satisfaire votre esprit de nerd et d'impressionner vos amis.</p>\n\n<h2>Les bons cas d'utilisation</h2>\n\n<h3>Les APIs JSON</h3>\n\n<p>Construire des APIs légèrse REST / JSON est quelque chose pour laquelle Node.js brille vraiment. Son modèle non-bloquant Entrée/Sortie combiné à JavaScript en font un excellent choix pour emballer d'autres sources de données telles que des bases de données ou des services Web et de les exposer via une interface JSON.</p>\n\n<h3>Applications simple d'une seule page</h3>\n\n<p>Si vous envisagez d'écrire une application avec une page lourde unique avec AJAX (pensez à Gmail), Node.js répond parfaitement au besoin. La capacité de traiter de nombreuses demandes à la secondes avec un temps de réponse faible, ainsi que le partage des tâches comme la validation d'informations entre le client et le serveur en font un excellent choix pour les applications web modernes qui font beaucoup de traitement sur ​​le client.</p>\n\n\n<h3>Les lignes de commande des OS</h3>\n\n<p>Avec node.js qui est encore jeune, c'est tentant de re-inventer toutes sorte de software pour lui. Cependant, une meilleure approche est de taper dans le vaste univers des lignes de commandes de vos OS. Les capacités de Node permettent de créer des milliers de processus fils et de traiter leurs retours comme un flux permettant de tirer partie des développements existants.</p>\n\n<h3>Flux de données</h3>\n\n<p>Généralement les traitements web se limitent aux requêtes et réponses http et aux évènements piochés dans une pile. La vérité est que ces informations font partie d'un flux et les applications Node.js peuvent tirer partie de cela. Le plus gros exemple est celui des uploads en temps réel et également des ponts entre les différentes couches de données.</p>\n\n<h3>Les applications en temps réel</h3>\n\n<p>Un autre grand aspect de Node.js est la facilité avec laquelle vous pouvez développer des systèmes temps réel souples. Par cela j'entends des trucs comme Twitter, des logiciels de chat, de paris sportifs ou des interfaces avec les réseaux de messageries instantanées.</p>\n\n<p>Mais soyez prudent, bien que JavaScript soit un langage dynamique avec garbage collector, votre temps de réponse peut dépendre du temps que mets le garbage collector à faire son ménage (à ce moment votre programme est arrêté). Donc n'essayez pas de créer un system temps réel ultra-précis en Node, cela nécessite des temps de réponses cohérents. Erlang est probablement un meilleurs choix pour ce type d'application.</p>\n\n<h2>Convaincre le Boss</h2>\n\n<p>Une fois que vous avez déterminé que votre cas d'utilisation est parfait pour Node.js, il est temps pour convaincre votre patron ou votre hiérarchie qu'il faut l'utiliser.</p>\n\n<h3>Construction d'un prototype</h3>\n\n<p>La meilleure façon de mettre le pied dans la porte, est de suggérer de prendre une semaine pour construire un prototype simple d'une certaine partie de l'application que vous avez à l'esprit. Il est généralement facile d'obtenir le feu vert pour cela, car cela n'implique pas encore un engagement à long terme.</p>\n\n<h3>Trouver des développeurs</h3>\n\n<p>Pensez ce que vous voulez du JavaScript, mais il devient le langage commun à tout les appareils de programmation. Quasiment tous les ordinateurs personnels à un ou plusieurs interpréteurs JavaScript (navigateurs) installés, ce qui signifie qu'il est presque impossible à la plupart des développeurs web de ne pas l'apprendre à un moment donné dans leur carrière.</p>\n\n<p>Cela signifie que vous avez un grand pannel de compétences dans vos rangs, et vous avez probablement déjà beaucoup de talent dans votre propre entreprise. Donc, si vous travaillez pour une entreprise en pleine croissance, c'est un solide argument favorisant Node.js.</p>\n\n<h3>Communauté dynamique</h3>\n\n<p>A ce stade, la communauté Node.js se développe à un rythme fou, attirant certains des développeurs les plus brillants de l'industrie. Cela signifie aussi que l'écosystème de Node augmente chaque jour, et il est également facile d'obtenir un support gratuit et commercial auprès de diverses sources.</p>\n\n<h3>Performance</h3>\n\n<p>Cet argument doit être soigneusement avancé, mais si la performance est un aspect essentiel de votre demande, Node.js a beaucoup à offrir. Avec cinq entreprises (Mozilla, Google, Apple, Microsoft, Opera) en compétition sur la meilleure mise en œuvre JavaScript, l'interprèteur sous-jacente de Node (V8 de Google) est devenu incroyablement rapide, et cela s'améliore de jour en jour.</p>\n\n<p>En combinant cela avec le modèle non-bloquant de Node en Entrée/Sortie, vous pouvez toujours vous accrocher pour avoir un programme moux. La plupart des applications Node sont facilement capable de gérer des milliers de connexions simultanées, ce qui peut-être considéré comme un standard pour lui.</p>\n\n<h3>Risque pour l'entreprise</h3>\n\n<p>L'un des risques avec un jeune projet open source est le manque d'engagement à long terme par ses auteurs. Ce n'est pas le cas avec Node.js. Node est actuellement sponsorisé par Joyent, qui a embauché Ryan Dahl et plusieurs autres contributeurs de base, il y a donc une véritable force économique soutenant le développement futur du projet.</p>\n\n<p>Entre autres choses, cela a déjà tenté des sociétés comme Yahoo! et HP (anciennement Palm) qui ont assez de confiance en Node.js pour construire leurs produits de prochaine génération dessus. Votre Boss peut certainement se détendre en lisant leurs témoignages rassurants.</p>\n\n<h2>Convaincre un client</h2>\n\n<p>Si vous êtes une société autonome ou un freelance, convaincre un client d'utiliser Node.js peut-être une autre histoire. Après tout, ils sont généralement très dépendant de votre avis, tout autant que du support continu que vous appportez à leur logiciels.</p>\n\n<p>Mon conseil est d'être un peu plus conservateur, et vérifier tout de même si Node est un bon ajustement. Si c'est le cas, assurez-vous que vous avez les ressources et le temps pour soutenir la demande sur le long terme. L'équipe Node.js publie de nouvelles versions à un rythme rapide, et donc vous ne devez jamais attendre plus de 3 à 6 mois pour le mettre à jour vers la dernière version. »</p>", "dates" : { "published" : { "$date" : 1378725060000 }, "updated" : [] }, "title" : "Node.js : le <span>guide</span> pour convaincre son Boss", "urn" : "node-js-le-guide-pour-convaincre-son-boss" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b5" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48cf" } ], "content" : "<p>Il y a des solutions simples pour gérer avec une feuille CSS l'affichage de différentes langues. Vous vous êtes peut-être déjà confronté à un problème similaire : votre super menu s'affichant en ligne est parfait dans la langue des Vulcains avec une taille de caractère mais malheureusement ne l'ai plus avec la langue des Na'vis. Quand votre site sera déployé pour des localisations différentes, les feuilles CSS ne pourront alors pas être les mêmes et vous allez maintenir autant de fichiers différents que de localisation ? C'est ce que vous ferriez en faisant un très mauvais choix. Arrêtons-nous 5 minutes pour explorer une piste bien pratique pour assurer la maintenance d'une feuille CSS et de ces différentes localisations.</p>\n\n<h2>Oubliez les multiples variantes d'une même feuille CSS</h2>\n\n<p>Une idée rapide serait de créer une feuille CSS initiale basée sur le rendu de texte \"Lorem Ipsum\" et de vérifier que son affichage se passe sans accroche. Il conviendrait ensuite de dupliquer cette CSS de base une fois finie et de modifier toutes les propriétés CSS qui divergent pour une autre langue de manière à ce que tout se passe bien également.</p>\n\n<p>Mais QUID de la maintenance ? Si maintenant je dois modifier la feuille CSS de base à partir de laquelle mes 30 variantes par localisations ont été crées : je vais devoir réinjecter localisation par localisation toutes les nouvelles modifications en prenant soin de ne pas écraser dans chacunes les lignes qui varies en fonction de la langue. Je ne vous parle même pas des conflits.</p>\n\n<p>Il y a également de forte chance qu'au final, prise par groupe, les variantes pour 30 localisations ne soient qu'au nombre de 3 (petits mots, mots moyens et grands mots). Ça fait beaucoup de fichiers inutiles, car redondant, tout ça.</p>\n\n<h2>Une feuille CSS unique pour toutes les localisations</h2>\n\n<p>Et si plutôt que d'éparpiller le code de manière redondante dans autant de fichier qu'il y a de localisation, nous gérions la localisation dans un seul et unique fichier ? Vous allez me dire que chaque localisation aurait alors des lignes qui ne la concerne pas et souffrirait d'un poids de page inutilement élevé ? Vous avez raison, mais faisons abstraction de ce point pour le moment.</p>\n\n<h3>Traiter les cas particuliers en fin de fichier</h3>\n\n<h4>Création avec comme base l'anglais</h4>\n\n<p>Tout commence de la même manière : on crée sa feuille CSS en se basant sur la langue anglaise qui a été fournie comme référence pour la création. Après plusieurs lignes, notre design est fini et les textes s'affichent comme suit :</p>\n\n<p class=\"highlighting\">HTML5 en anglais</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;html lang=\"en-us\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;Localisation example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"logo\"&gt;\n            &lt;h1&gt;&lt;a href=\"javascript:;\" title=\"Return to Home\"&gt;Title&lt;/a&gt;&lt;/h1&gt;\n        &lt;/div&gt;\n\n        &lt;nav class=\"main-nav\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Products\"&gt;Products&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Care and Advice\"&gt;Care and Advice&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Fun and Games\"&gt;Fun and Games&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"About Us\"&gt;About Us&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"News\"&gt;News&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class=\"highlighting\">CSS3 sans localisation</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">/* Séparateurs haut et bas de l'exemple */\nbody {\n     border-bottom: 1px solid #aaa;\n     border-top: 1px solid #aaa;\n     padding: 8px 0;\n}\n\n/* Maintenir le titre à gauche */\n.logo {\n    position: absolute;\n    font-size: 1.7em;\n    font-weight: bold;\n    padding: 0 16px;\n}\n\n/* Placer la zone menu à droite */\n.main-nav {\n    float: right;\n}\n\n/* Rendre le ul « transparent » */\n.main-nav ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n/* Permettre aux items d'êtres en ligne */\n.main-nav li {\n    display: inline-block;\n    padding-left: 0;\n}\n\n/* Inclure de l'espace à gauche de tous les items sauf le premier */\n.main-nav li + li {\n    padding: 8px 0 8px 11px;\n}\n\n/* Créer un séparateur entre chaque item */\n.main-nav li + li:before {\n    margin-right: 13px;\n    content: \"|\";\n}</code></pre>\n\n<p class=\"highlighting\">Rendu</p>\n\n<div class=\"example\">\n    <div class=\"elogo\">\n        <h1><a href=\"javascript:;\" title=\"Return to Home\">Title</a></h1>\n    </div>\n\n    <div class=\"emain-nav\">\n        <ul>\n            <li><a href=\"javascript:;\" title=\"Home\">Home</a></li>\n            <li><a href=\"javascript:;\" title=\"Products\">Products</a></li>\n            <li><a href=\"javascript:;\" title=\"Care and Advice\">Care and Advice</a></li>\n            <li><a href=\"javascript:;\" title=\"Fun and Games\">Fun and Games</a></li>\n            <li><a href=\"javascript:;\" title=\"About Us\">About Us</a></li>\n            <li><a href=\"javascript:;\" title=\"News\">News</a></li>\n        </ul>\n    </div>\n</div>\n\n<h4>Localisation en français et problèmes</h4>\n\n<p>Le marché français souhaite une version du site dans sa langue et fournit donc les traductions pour la localisation. Après injection, notre code HTML ressemble à ça :</p>\n\n<p class=\"highlighting\">HTML5 en français</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;html lang=\"fr-fr\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;Exemple de localisation&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"logo\"&gt;\n            &lt;h1&gt;&lt;a href=\"javascript:;\" title=\"Retour à l'accueil\"&gt;Titre&lt;/a&gt;&lt;/h1&gt;\n        &lt;/div&gt;\n\n        &lt;nav class=\"main-nav\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Accueil\"&gt;Accueil&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Produits\"&gt;Produits&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Soins et Conseils\"&gt;Soins et Conseils&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Divertissements et Jeux\"&gt;Divertissements et Jeux&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"A propos\"&gt;A propos&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"javascript:;\" title=\"Actualités\"&gt;Actualités&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class=\"highlighting\">et CSS3 identique à la précédente feuille</p>\n\n<p class=\"highlighting\">Rendu</p>\n\n<div class=\"example\">\n    <div class=\"elogo\">\n        <h1><a href=\"javascript:;\" title=\"Retour à l'accueil\">Titre</a></h1>\n    </div>\n\n    <div class=\"emain-nav\">\n        <ul>\n            <li><a href=\"javascript:;\" title=\"Accueil\">Accueil</a></li>\n            <li><a href=\"javascript:;\" title=\"Produits\">Produits</a></li>\n            <li><a href=\"javascript:;\" title=\"Soins et Conseils\">Soins et Conseils</a></li>\n            <li><a href=\"javascript:;\" title=\"Divertissements et Jeux\">Divertissements et Jeux</a></li>\n            <li><a href=\"javascript:;\" title=\"A propos\">A propos</a></li>\n            <li><a href=\"javascript:;\" title=\"Actualités\">Actualités</a></li>\n        </ul>\n    </div>\n</div>\n\n<p>Et là votre mise en page est mise à mal. Une première solution serait de forcer la traduction à ne pas avoir de caractères en plus que la version anglaise. Parfois c'est envisageable... et parfois pour certaine langue c'est impossible.</p>\n\n<h4>Localisation de la feuille CSS</h4>\n\n<p>C'est là que vous vous demandez s'il ne va pas falloir maintenir une feuille différente qui sera chargée ou non sur la page en fonction de la localisation. Le problème est que vous allez par exemple faire une feuille différente pour la localisation française et espagnole alors que pour un peu les ajustements seront identiques pour ces deux localisations. Puis, par la suite, le texte va changer et vous ferez la chasse aux ajustements à travers tous vos fichiers.</p>\n\n<p>Pour ma part, je vous propose de gérer toutes les localisations dans les CSS initiales ; par exemple tout en bas. Effectivement, quand le site sera affiché dans telle ou telle langue il y aura des instructions chargées inutilement. Mais dans la masse de propriétés « non localisée » la taille devient négligeable.</p>\n\n<p>Modifions donc notre feuille CSS initiale :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">/*-------------------*\\\n    $SOMMAIRE\n\\*-------------------*/\n/**\n * SOMMAIRE..........c'est moi !\n * STANDARD..........les propriétés CSS de la page.\n * LOCALISATION......les propriétés variants en fonction de la langue.\n */\n\n\n\n\n/*-------------------*\\\n    $STANDARD\n\\*-------------------*/\n\n\n/* Séparateurs haut et bas de l'exemple */\nbody {\n     border-bottom: 1px solid #aaa;\n     border-top: 1px solid #aaa;\n     padding: 8px 0;\n}\n\n/* Maintenir le titre à gauche */\n.logo {\n    position: absolute;\n    font-size: 1.7em;\n    font-weight: bold;\n    padding: 0 16px;\n}\n\n/* Placer la zone menu à droite */\n.main-nav {\n    float: right;\n}\n\n/* Rendre le ul « transparent » */\n.main-nav ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n/* Permettre aux items d'êtres en ligne */\n.main-nav li {\n    display: inline-block;\n    padding-left: 0;\n}\n\n/* Inclure de l'espace à gauche de tous les items sauf le premier */\n.main-nav li + li {\n    padding: 8px 0 8px;\n    padding-left: 11px; /* Propriété sortie pour être surchargée seule plus loin */\n}\n\n/* Créer un séparateur entre chaque item */\n.main-nav li + li:before {\n    margin-right: 13px;\n    content: \"|\";\n}\n\n\n\n/*-------------------*\\\n    $LOCALISATION\n\\*-------------------*/\n\n.main-nav li + li:lang(fr) {\n    padding-left: 4px;\n}\n\n.main-nav li + li:before:lang(fr) {\n    margin-right: 6px;\n}</code></pre>\n\n<p class=\"highlighting\">Rendu</p>\n\n<div class=\"example fr\">\n    <div class=\"elogo\">\n        <h1><a href=\"javascript:;\" title=\"Retour à l'accueil\">Titre</a></h1>\n    </div>\n\n    <div class=\"emain-nav\">\n        <ul>\n            <li><a href=\"javascript:;\" title=\"Accueil\">Accueil</a></li>\n            <li><a href=\"javascript:;\" title=\"Produits\">Produits</a></li>\n            <li><a href=\"javascript:;\" title=\"Soins et Conseils\">Soins et Conseils</a></li>\n            <li><a href=\"javascript:;\" title=\"Divertissements et Jeux\">Divertissements et Jeux</a></li>\n            <li><a href=\"javascript:;\" title=\"A propos\">A propos</a></li>\n            <li><a href=\"javascript:;\" title=\"Actualités\">Actualités</a></li>\n        </ul>\n    </div>\n</div>\n\n<h4>Le pseudo sélecteur :lang() et l'attribut lang</h4>\n\n<p>Grâce au pseudo sélecteur <samp>:lang()</samp> vous pouvez conditionnellement appliquer du style à un élément HTML en HTML5 en fonction du contenu de l'attribut lang de la balise <samp>&lt;html&gt;</samp>.</p>\n\n<p>Dans le cas de figure ci-dessous :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-html\">&lt;html lang=\"fr-fr\"&gt;\n    ...\n    &lt;div class=\"content\"&gt;Texte&lt;/div&gt;\n    ...\n&lt;/html&gt;</code></pre>\n\n<p>les sélecteurs 1 et 2 ci-après seront appliqués, mais pas le 3 :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">.content:lang(fr-fr) {\n    color: #ccc;\n}\n\n.content:lang(fr) {\n    font-weight: bold;\n}\n\n.content:lang(en-us) {\n    color: #f00;\n}</code></pre>\n\n<h3>Support xHTML/HTML4 ou CSS 2.1</h3>\n\n<p>Cette technique peut également être utilisée sans le pseudo sélecteur <samp>:lang()</samp> qui a l'avantage de matcher avec « fr-fr » si on spécifie simplement « fr » mais de ne pas fonctionner tout cours avec les navigateurs les plus <del>inutiles</del> vieux.</p>\n\n<h4>Seulement avec du CSS 2.1</h4>\n\n<p>Il convient de remplacer <samp>:lang(fr-fr)</samp> en fin d'instruction par [lang=fr-fr] en début. Ainsi le code précédent devient :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">[lang=fr-fr] .content {\n    color: #ccc;\n}\n\n[lang=fr] .content,\n[lang=fr-fr] .content {\n    font-weight: bold;\n}\n\n[lang=en-us] .content {\n    color: #f00;\n}</code></pre>\n\n<h4>Sans HTML5</h4>\n\n<p>L'idée est ici de remplacer <samp>&lt;html lang=\"fr-fr\"&gt;</samp> qui n'est pas valide xHTML/HTML4 par <samp>&lt;html class=\"fr-fr\"&gt;</samp> et de manager côté Back-end la présence ou non de cette classe en fonction de la langue. Le code CSS devient alors :</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">.fr-fr .content {\n    color: #ccc;\n}\n\n.fr .content,\n.fr-fr .content {\n    font-weight: bold;\n}\n\n.en-us .content {\n    color: #f00;\n}</code></pre>\n\n<p class=\"eye-catching\">Note : n'hésitez pas, même en HTML5, à ajouter cette classe pour améliorer les performances de vos sélecteurs.</p>\n\n<h2>Le mot de la fin</h2>\n\n<p>Au final vous maintiendrez beaucoup moins de fichier et pourrez gérer les différentes tailles de contenu par groupe de pays !</p>\n\n<pre class=\"prettyprint linenums\"><code class=\"language-css\">.header:lang(es),\n.header:lang(de),\n.header:lang(fr) {\n    /* Propriété communes */\n}\n.header:lang(us) {\n    /* Propriété communes */\n}\n\n.content:lang(de),\n.content:lang(fr) {\n    /* Propriété communes */\n}\n.content:lang(es),\n.content:lang(us) {\n    /* Propriété communes */\n}\n\n.footer:lang(fr) {\n    /* Propriété communes */\n}\n.footer:lang(de),\n.footer:lang(es),\n.footer:lang(us) {\n    /* Propriété communes */\n}</code></pre>", "dates" : { "published" : { "$date" : 1383234420000 }, "updated" : [] }, "style" : ".example {\r\npadding: 8px 0;\r\nborder-top: 1px solid #aaa;\r\nborder-bottom: 1px solid #aaa;\r\nbackground-color: #fff;\r\n}\r\n.dark .example {\r\nbackground-color: #000;\r\n}\r\n.example:after {\r\nclear: both;\r\ncontent: \"\";\r\ndisplay: block;\r\n}\r\n.example .elogo {\r\nposition: absolute;\r\nfont-size: 1.7em;\r\nfont-weight: bold;\r\npadding: 0 16px;\r\n}\r\n.example .emain-nav {\r\nfloat: right;\r\n}\r\n.example .emain-nav ul {\r\nlist-style: none;\r\nmargin: 0;\r\npadding: 0;\r\n}\r\n.example .emain-nav li {\r\ndisplay: inline-block;\r\npadding-left: 0;\r\n}\r\n.example .emain-nav li + li {\r\npadding: 8px 0 8px;\r\npadding-left: 11px;\r\n}\r\n.example .emain-nav li + li:before {\r\nmargin-right: 13px;\r\ncontent: \"|\";\r\n}\r\n.fr.example .emain-nav li + li:before {\r\nmargin-right: 6px;\r\n}\r\n.fr.example .emain-nav li + li {\r\npadding-left: 4px;\r\n}\r\n@media (max-width: 950px) {\r\n.example .emain-nav li:nth-child(6),\r\n.example .emain-nav li:nth-child(5),\r\n.example .emain-nav li:nth-child(3) {\r\ndisplay:none;\r\n}\r\n.example {\r\nwidth: 360px;\r\n}\r\n}", "title" : "Gérer plusieurs <span>langues</span> en <span>HTML5</span> et <span>CSS3</span>", "urn" : "gerer-plusieurs-langues-en-html-5-et-css3" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b6" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48cc" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b6" } ], "content" : "<p>Cet article est une adaptation du <span class=\"highlighting\">Google JavaScript Style Guide</span> en <span class=\"highlighting\">FR</span>. Je n'applique pas nécessairement moi-même toutes les bonnes pratiques listées ci-dessous mais si vous ne vous êtes jamais posé la question : « Comment maintenir un code gardant l'équilibre entre lisibilité et performance avec mon équipe ou les personnes susceptibles de relire mon code » cet article peut s'avérer intéressant. Si vous avez déjà vos pratiques : c'est peut-être l'occasion (comme pour moi) d'en revoir certaines.</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title highlighting\">Google JavaScript Style Guide en français</div>\n\t<nav class=\"content\">\n\t\t<ol>\n\t\t\t<li><a class=\"highlighting\" href=\"./les-bonnes-pratiques-javascript-selon-google/\" title=\"Les bonnes pratiques JavaScript selon Google\">Les bonnes pratiques JavaScript selon Google</a></li>\n\t\t\t<li>Convention de nommage et commentaires JavaScript selon Google</li>\n\t\t</ol>\n\t</nav>\n</div>\n\n<h2>Google JavaScript Style Guide en français</h2>\n\n<p>Vous pourrez trouver l'article original <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" title=\"Google JavaScript Style Guide\">Google JavaScript Style Guide</a> derrière <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" title=\"Google JavaScript Style Guide\">ce lien</a>. Au moment où je réalise cette traduction, le document est en <span class=\"eye-catching\">version 2.93</span>. À partir de maintenant, tout ce qui suit provient de l'article de Google.</p>\n\n<h2>Avant-propos</h2>\n\n<p>JavaScript est le principal langage de programmation de la partie cliente d'un navigateur web utilisé par beaucoup de projets Google open-source. Ce guide de style représente la liste des bonnes et des mauvaises pratiques lors d'un développement JavaScript.</p>\n\n<h2>Règles du langage JavaScript</h2>\n\n<h3>var</h3>\n\n<p>Déclarations des variables avec <samp>var</samp> : Toujours - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Quand vous ne spécifiez pas <samp>var</samp>, la variable est attachée au contexte global de l'application, venant écraser des valeurs de variables potentiellement existantes. De la même manière, sans cette déclaration, il est difficile de définir à quelle portée lexicale la variable est rattachée (ex : La variable pourrait tout aussi bien être attachée à <samp>document</samp>, à <samp>window</samp> ou à la fonction courante). Donc n'oubliez jamais de déclarer avec <samp>var</samp>.</p>\n</div>\n\n<h3>Constante</h3>\n\n<ul>\n\t<li>Utiliser des <samp>NAMES_LIKE_THIS</samp> comme nom de variable pour les <span class=\"eye-catching\">valeurs</span> constantes.</li>\n\t<li>Utiliser <samp>@const</samp> (en commentaire) pour indiquer la non réaffectabilité d'une variable (une variable ou une propriété).</li>\n\t<li>Ne jamais utiliser le mot clé <samp>const</samp> car il n'est pas supporté par Internet Explorer.</li>\n</ul>\n\n<p><span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p class=\"highlighting\">Valeurs constantes</p>\n\t<p>Si la valeur d'une variable doit restée constante et inchangeable tout au long de l'exécution du programme, on peut lui donner un nom tel que <samp>CONSTANT_VALUE_CASE</samp>. Les variable nommées en <samp>ALL_CAPS</samp> impliquent donc le commentaire <samp>@const</samp> (car la valeur n'est pas réaffectable).</p>\n\t<p>Les <a href=\"http://blog.haeresis.fr/les-types-en-javascript-pour-tout-savoir/\" title=\"Les types en JavaScript : pour tout savoir !\">types primitifs</a> (<samp>Number</samp>, <samp>String</samp> et <samp>Boolean</samp>) peuvent être des valeurs constantes.</p>\n\t<p>La constance d'un type <samp>Object</samp> est plus subjective — Les objets peuvent être considérés comme constant uniquement s'ils ne montrent aucun signe de changement d'état. Cela n'est pas nécésairement triviale à appréhender pour un compilateur.</p>\n\n\t<p class=\"highlighting\">Pointeurs constants (variables et propriétés)</p>\n\t<p>La notation <samp>@const</samp> en commentaire d'une variable ou d'une propriété implique qu'elle ne sera pas réaffectable. Ceci est appliquable par un compilateur lors de la compilation. Cette convention est cohérente avec le mot-clé <samp>const</samp> (que nous n'utilisons pas en raison du manque de soutien dans Internet Explorer).</p>\n\t<p>La notation <samp>@const</samp> sur une méthode implique que cette fonction ne sera pas héritable par des sous classes.</p>\n\t<p>La notation <samp>@const</samp> sur un constructeur implique que cette classe ne pourra pas être hérité (comme le <samp>final</samp> de Java).</p>\n\n\n\t<p class=\"highlighting\">Exemples</p>\n\t<p>A noter que <samp>@const</samp> n'implique pas nécéssairement une écriture de variable comme celle-ci : <samp>CONSTANT_VALUES_CASE</samp>. Cependant, écrire une variable comme cela <samp>CONSTANT_VALUES_CASE</samp> implique <samp>@const</samp>.\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**\n * Temps maximal pour la Demande en millisecondes.\n * @type {number}\n */\ngoog.example.TIMEOUT_IN_MILLISECONDS = 60 * 1000;</code></pre>\n\n\t\t\t<p>Le nombre de secondes dans une minute ne change jamais. C'est une valeur constante. L'écriture <samp>ALL_CAPS</samp> requière le commentaire <samp>@const</samp>, et donc la constante ne peut pas être réaffectée.</p>\n\n\t\t\t<p>Les compilateurs open-source permettront à une variable d'être réaffectée si elle <span class=\"highlighting\">n'est pas</span> marquée comme <samp>@const</samp>.</p>\n\t\t</div>\n\t</div>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**\n * URL associée à la Carte en tant que chaine de caractères.\n * @const\n */\nMyClass.fetchedUrlCache_ = new goog.structs.Map();\n\n/**\n * La Classe ne peut pas être héritée.\n * @const\n * @constructor\n */\nsloth.MyFinalClass = function() {};</code></pre>\n\n\t\t\t<p>Dans ce cas, le pointeur ne sera jamais réaffectée, cependant il peut changer d'un appel à l'autre (C'est pourquoi il est écrit en <samp>camelCase</samp>, et non en <samp>ALL_CAPS</samp>).</p>\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Point-virgule</h3>\n\n<p>Toujours utiliser les point-virgules - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Une utilisation implicite des point-virgules (ne pas les mettre) pose problème, des problèmes difficiles à debboguer. Ne le faites pas. Ça vaudra mieux pour vous.</p>\n\n\t<p>Il y a quelques endroits ou l'oubli de point-virgule est particulièrement dangereux :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">MyClass.prototype.myMethod = function() {\n  return 42;\n}  // Pas de point-virgule ici.\n\n(function() {\n  // Du code à exécuter ici et isolé dans un champ lexical localisé.\n})();</code></pre>\n\n\t\t\t<p class=\"highlighting\">Quel est le problème ?</p>\n\n\t\t\t<p>Erreur JavaScript - Tout d'abord la première fonction retourne 42 puis est appelé en tant que paramètre par la seconde fonction, quand 42 est appelé cela cause une erreur.</p>\n\n\t\t</div>\n\t</div>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = {\n  'i': 1,\n  'j': 2\n}  // Pas de point-virgule ici.\n\n// Essayons de faire une chose sur Internet Explorer et une autre sur Firefox.\n// Je sais que vous ne devez pas écrire du code comme ça, et que c'est un peu tiré par les cheveux.\n[normalVersion, ffVersion][isIE]();</code></pre>\n\n\t\t\t<p class=\"highlighting\">Quel est le problème ?</p>\n\n\t\t\t<p>Vous aurez probablement une erreur comme 'no such property in undefined' à l'exécution car il essayera d'appeler <samp>x[ffVersion][isIE]()</samp>.</p>\n\t\t</div>\n\t</div>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var THINGS_TO_EAT = [apples, oysters, sprayOnCheese] // Pas de point-virgule ici.\n\n// Exécution conditionnelle a la bash.\n-1 == resultOfOperation() || die();</code></pre>\n\n\t\t\t<p class=\"highlighting\">Quel est le problème ?</p>\n\n\t\t\t<p><samp>die</samp> est exécuté à moins que <samp>resultOfOperation()</samp> ai comme valeur <samp>NaN</samp> et <samp>THINGS_TO_EAT</samp> sera assigné par le résultat de la fonction <samp>die()</samp>.</p>\n\t\t</div>\n\t</div>\n\n\n\t<p class=\"highlighting\">Pourquoi ?</p>\n\t<p>JavaScript a besoin d'un point-virgule à la fin des instructions, sauf quand il peut être sur et certain de deviner les fins d'instructions. Dans chacun des exemples précédents, une déclaration de fonction ou de litéral objet/tableau (écriture au format JSON) est utilisé près d'une instruction. Les crochets de fermeture ne sont pas assez pour deviner la fin d'une instruction. Javascript ne termine jamais une instruction si le caractère suivant est un opérateur de fermeture.</p>\n\n\t<p>Cela surprend pas mal de gens, aussi soyez sur de ne pas oublier de point-virgules dans vos travaux.</p>\n\n\t<p class=\"highlighting\">Clarification : point-virgules et fonctions</p>\n\t<p>Les point-virgules doivent être placé à la fin d'une affectation de fonction, mais pas à la fin d'une déclaration de fonction. Cette distinction est facilement illustrée avec l'exemple suivant :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var foo = function() {\n  return true;\n};  // Point-virgule ici.\n\nfunction foo() {\n  return true;\n}  // Pas de point-virgule ici.</code></pre>\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Fonction imbriquée</h3>\n\n<p>Oui - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Les fonctions imbriquées peuvent s'avérer très utiles, par exemple en ce qui concerne la portée des fonctions ou pour cloisonner des fonctions d'aide au débogguage ou développement. Utilisez les sans retenu.</p>\n</div>\n\n<h3>Déclaration de fonction dans un block</h3>\n\n<p>Non - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Ne faites pas ça :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">if (x) {\n  function foo() {}\n}</code></pre>\n\t\t</div>\n\t</div>\n\n\t<p>Bien que la plupart des moteurs d'exécution JavaScript supporte les Déclaration de fonction dans les blocks, cela ne fait pas parti des spécifications ECMAScript (voir <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" title=\"Standard ECMA-262\">ECMA-262</a>, partie 13 et 14). Ce type d'implémentation peut donc s'avérer incompatible avec d'autre implémentation ou avec des propositons futures d'évolution des normes ECMAScript. ECMAScript autorise les déclarations de fonction uniquement dans le contexte globale (la racine des scripts) ou celui d'une fonction. À la place, il faut utiliser l'assignation de fonction dans une variable pour créer une fonction dans un block :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">if (x) {\n  var foo = function() {}\n}</code></pre>\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Exceptions</h3>\n\n<p>Oui - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Vous ne pouvez tout simplement pas éviter les exceptions si vous faites quelque chose de non-trivial (à l'aide d'un Framework, etc...). Allez-y.</p>\n</div>\n\n<h3>Exceptions personalisées</h3>\n\n<p>Oui - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Sans exceptions personalisées, retourner les informations d'erreur d'une fonction qui elle même retourne une valeur est assez délicat, pour ne pas dire bancale. Les mauvaise solutions sont de passer une variable erreur pour récupérer celle-ci ou d'avoir une propriété dans un objet passé destiné à accueillir l'erreur. Cela s'apparente à un détournement de l'exception de base. Il est donc possible d'utiliser des exceptions customisées quand cela est nécessaire.</p>\n</div>\n\n<h3>Fonctionalités standards</h3>\n\n<p>Toujours préférer des fonctionalités standards à des fonctionalités non-standards - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Pour une portabilité et une compatibilité maximum, il faut toujours préférer des fonctionalités standards à des fonctionalités non-standards (ex : <samp>string.charAt(3)</samp> à la place de <samp>string[3]</samp> ou l'accès au DOM avec fonctions standards au lieu d'utiliser un raccourci spécifique au compilateur).</p>\n</div>\n\n<h3>Le type Object des types primifs</h3>\n\n<p>Non - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Il n'y a pas de raison d'utiliser le type Object correspondant à un type primitif, en plus cela est dangereux :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = new Boolean(false);\nif (x) {\n  alert('hi');  // Affiche 'hi' quand même.\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Ne faites pas ça !</p>\n\n\t<p>Cependant le cast d'objet par cette méthode est parfais (pas de <samp>new</samp>).</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = Boolean(0);\nif (x) {\n  alert('hi');  // Ce message ne s'affichera jamais.\n}\ntypeof Boolean(0) == 'boolean'; // Bon.\ntypeof new Boolean(0) == 'object'; // Pas sécurisé.</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Cela est très utile pour caster les types <samp>number</samp>, <samp>boolean</samp> et <samp>string</samp>.</p>\n\n</div>\n\n<h3>Hiérarchie multi-niveau par prototype</h3>\n\n<p>Pas recommandé - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>La Hiérarchie multi-niveau par prototype est la manière dont le JavaScript gère l'héritage. Vous avez une hierarchie multi-niveau quand une fonction définie D est complètement inclue dans une fonction définie B via leurs prototype. Cette hierarchisation est plus difficile à maintenir qu'il n'y parait !</p>\n\n\t<p>Pour cette raison, il vaut mieux utiliser <samp>goog.inherits()</samp> de la <samp><a href=\"http://code.google.com/closure/library/\" title=\"Closure Library\">Closure Library</a></samp> ou quelque chose de similaire.</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">function D() {\n  goog.base(this)\n}\ngoog.inherits(D, B);\n\nD.prototype.method = function() {\n  ...\n};</code></pre>\n\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Déclaration de méthode et de propriété</h3>\n\n<p><samp>/** @constructor */ function SomeConstructor() { this.someProperty = 1; } Foo.prototype.someMethod = function() { ... };</samp> - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Bien qu'il y ai plusieurs manière d'attacher des méthodes et propriétés à un objet créer via <samp>new</samp>, il vaut mieux préférer :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">Foo.prototype.bar = function() {\n  /* ... */\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>La meilleure manière de procéder pour les autres initialisations est celle effectuée dans le constructeur en tant qu'attribut :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/** @constructor */\nfunction Foo() {\n  this.bar = value;\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p class=\"highlighting\">Pourquoi ?</p>\n\n\t<p>Les moteurs JavaScript actuelle ont une optimisation basée sur la \"forme\" d'un objet ; <a href=\"https://developers.google.com/v8/design#prop_access\" title=\"Fast Property Access\">ajouter une propriété à un objet (également d'écraser une valeur incluse dans le prototype) change la forme et dégrade les performances</a>.</p>\n</div>\n\n<h3>delete</h3>\n\n<p>Préferez <samp>this.foo = null</samp> - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">Foo.prototype.dispose = function() {\n  this.property_ = null;\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>à la place de</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">Foo.prototype.dispose = function() {\n  delete this.property_;\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Dans les moteurs JavaScript moderne, changer le nombre de propriété d'un objet est plus lent que de réassigner une valeur. Le mot clé <samp>delete</samp> doit être évité sauf s'il est nécésaire de détruire une propriété d'un objet itératif  avec une liste de clé/valeur, ou pour changer son nom (le nom de la clé dans l'objet).</p>\n</div>\n\n<h3>Closures</h3>\n\n<p>Oui mais attention - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>La capacité de créer des champs lexicaux ou contexte d'exécution persistant (closure) est la fonctionalité la plus utile et la plus étudiée de JS. <a href=\"http://jibbering.com/faq/faq_notes/closures.html\" title=\"Javascript Closures\">Vous trouverez ici une bonne description de comment fonctionne les closures</a>.</p>\n\n\t<p>Une chose qu'il faut cependant garder à l'esprit est qu'un contexte d'exécution garde un pointeur sur le champ lexical qu'il englobe. Il en résulte que, attacher un contexte d'exécution à un élément du DOM peut créer des références circulaire et une fuite de mémoire. Prenons l'exemple de code suivant comme exemple :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">function foo(element, a, b) {\n  element.onclick = function() { /* utiliser ici a et b */ };\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Le contexte d'exécution de la fonction garde une référence sur <samp>a</samp>, et <samp>b</samp> même s'ils ne sont jamais utilisé. Cependant les éléments eux-mêmes (dans la fonction interne) garde une référence au contexte d'exécution parent, nous avons donc une boucle qui ne sera jamais nettoyée par le récupérateur de mémoire. Une telle situation doit plutôt être développée de cette manière, avec la structure suivante :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">function foo(element, a, b) {\n  element.onclick = bar(a, b);\n}\n\nfunction bar(a, b) {\n  return function() { /* utiliser a et b */ }\n}</code></pre>\n\n\t\t</div>\n\t</div>\t\n</div>\n\n<h3>eval()</h3>\n\n<p>Seulement pour la désérialisation (ex: Pour l'évaluation de réponses RPC) - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p><samp>eval()</samp> rend la sémantique du code confuse et est dangereux à utiliser quand il contient des valeurs entré par un utilisateur. Il y a généralement un meilleur moyen, plus clair et plus sécurisé d'écrire le même code aussi son utilisation n'est pas autorisée.</p>\n\n\t<p>Pour les réponses RPC vour pouvez utiliser l'objet <samp>JSON</samp> et lire le résultat avec <samp>JSON.parse()</samp> à la place de <samp>eval()</samp>.</p>\n\n\t<p>Nous avons par exemple un serveur qui retourne quelque chose comme ça :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">{\n  \"name\": \"Alice\",\n  \"id\": 31502,\n  \"email\": \"looking_glass@example.com\"\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var userInfo = eval(feed);\nvar email = userInfo['email'];</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Si le flux retourné inclut du code JavaScript malicieux, quand il sera évalué grâce à <samp>eval()</samp>, ce code sera exécuté.</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var userInfo = JSON.parse(feed);\nvar email = userInfo['email'];</code></pre>\n\n\t\t</div>\n\t</div>\n\t<p>Avec <samp>JSON.parse()</samp> un format JSON invalide (incluant du code executable JavaScript) jettera une exeption.</p>\n</div>\n\n<h3>with() {}</h3>\n\n<p>Non - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Utiliser <samp>with</samp> va rendre obscure la sémantique de votre programme. Cela parceque l'objet passé en paramètre à <samp>with</samp> peut avoir des propriétés pouvant entré en conflit avec les variables locales à <samp>with</samp>, cela peut radicalement changer le fonctionnement de votre programme. Par exemple, que fait ce code ?</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">with (foo) {\n  var x = 3;\n  return x;\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Réponse : rien. La variable locale <samp>x</samp> peut-être mis à mal par une des propriétes de <samp>foo</samp>, et peut-être même une propriété d'assignement, qui dans notre cas asignerait 3 à x et pourrait produire un comportement aberant.</p>\n</div>\n\n<h3>this</h3>\n\n<p>Seulement dans une fonction constructeur, méthodes, et pour la persistance du champ lexical - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Le sens de <samp>this</samp> peut-être différent en fonction des situations. Parfois, il fait référence au contexte d'exécution d'un objet (dans la plupard des cas), le contexte de l'appelant (dans <samp>eval()</samp>), un noeud dans le DOM (quand il est utilisé dans un attribut d'évènement HTML), un objet instancié (constructeur) ou dans d'autre objets (si la fontion est appelé avec <samp>call()</samp> ou <samp>apply()</samp>.</p>\n\n\t<p>Parcequ'il est facile de s'emêler quand à la signification du <samp>this</samp>, sont utilisation doit se limiter à :</p>\n\t<ul>\n\t\t<li>dans les constructeurs</li>\n\t\t<li>dans les méthodes des objets (incluant la création de champs lexicaux persistant)</li>\n\t</ul>\n</div>\n\n<h3>Boucle for-in</h3>\n\n<p>Seulement pour les itérations avec clés sur : object/map/hash - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Les boucles <samp>for-in</samp> sont souvent utilisés à tord avec les <samp>Array</samp>. Cette erreur vient du fait que la boucle ne s'effectut plus de l'index 0 à l'index <samp>length - 1</samp> mais en lisant les clés des objets et des chaines de prototypes. Il y a donc quelques cas ou ce parcourt ne fonctionne pas :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">function printArray(arr) {\n  for (var key in arr) {\n    print(arr[key]);\n  }\n}\n\nprintArray([0,1,2,3]);  // Ceci marche.\n\nvar a = new Array(10);\nprintArray(a);  // Ceci ne marche pas.\n\na = document.getElementsByTagName('*');\nprintArray(a);  // Ceci ne marche pas.\n\na = [0,1,2,3];\na.buhu = 'wine';\nprintArray(a);  // Ceci ne marche pas.\n\na = new Array;\na[3] = 3;\nprintArray(a);  // Ceci ne marche pas.</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Toujours utiliser des boucles normales pour parcourrir les tableaux :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">function printArray(arr) {\n  var l = arr.length;\n  for (var i = 0; i < l; i++) {\n    print(arr[i]);\n  }\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\n</div>\n\n<h3>Les tableaux associatifs</h3>\n\n<p>Ne jamais utiliser un <samp>Array</samp> pour des tableaux de type : map/hash/associatif - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Les tableaux associatifs ne sont pas permis... ou du moins vous ne pouvez pas utiliser des clés d'index autre que des nombres dans les tableaux. Si vous avez besoin de map/hash : utiliser un <samp>Object</samp> plutôt qu'un <samp>Array</samp> car les fonctionalités dont vous avez besoin sont celles d'un objet et non celles d'un tableau. Les <samp>Array</samp> héritent seulement des <samp>Object</samp> (comme tous les autres objets en JS que vous pouvez utiliser comme <samp>Date</samp>, <samp>RegExp</samp> et <samp>String</samp>).</p>\n</div>\n\n<h3>Déclaration de String sur plusieurs lignes</h3>\n\n<p>Non - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Ne faites pas ça :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Les espaces blancs en début de chaque ligne ne peuvent pas être retirés au moment de la compilation. Les espaces blancs après le Backslash conduit à des erreurs difficiles à débogguer ; de plus plusieurs moteur d'exécution JavaScript ne le supporte pas car effectivement cela ne fait pas parti des spécifications ECMAScript.</p>\n\n\t<p>Utiliser la concaténation de chaine à la place :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';</code></pre>\n\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Écriture litérale des Array et Object (JSON)</h3>\n\n<p>Oui - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Utiliser la notation litérale (JSON) pour les constructeurs d'<samp>Array</samp> et d'<samp>Object</samp></p>\n\n\t<p>Les constructeurs de tableau sont source d'erreur à cause du passage des arguments.</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// La taille est 3.\nvar a1 = new Array(x1, x2, x3);\n\n// La taille est 2.\nvar a2 = new Array(x1, x2);\n\n// Si x1 est un nombre et un entier naturel la taille sera celle de x1.\n// Si x1 est un nombre mais n'est pas un entier naturel cela renverra une exception.\n\n// De plus le tableau peut ne contenir qu'un élément avec x1 en tant que valeur.\nvar a3 = new Array(x1);\n\n// La taille est 0.\nvar a4 = new Array();</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>A cause de cela, si quelqu'un change le code et passe 1 argument au lieu de 2, le tableau ne changera pas de taille.</p>\n\n\t<p>Pour éviter ce genre de problèmes et cas étrange, utiliser toujours la version litérale.</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var a = [x1, x2, x3];\nvar a2 = [x1, x2];\nvar a3 = [x1];\nvar a4 = [];</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Les constructeur d'objet n'ont pas le même problème : mais pour la lisibilité et la cohérance l'écriture litérale pour les objets est utilisé.</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var o = new Object();\n\nvar o2 = new Object();\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2['strange key'] = 3;</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Peut-être écrit :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var o = {};\n\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  'strange key': 3\n};</code></pre>\n\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Modifier le prototype des objets natifs</h3>\n\n<p>Non - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Modifier les objets natifs comme <samp>Object.prototype</samp> et <samp>Array.prototype</samp> est strictement interdit. Modifier d'autres objets natifs comme <samp>Function.prototype</samp> est moins dangereux mais toujours difficile à déboguer en production et doit être évité.</p>\n</div>\n\n<h3>Les commantaires conditionnels d'Internet Explorer</h3>\n\n<p>Non - <span class=\"eye-catching a-like toggle-more\">En savoir plus</span></p>\n\n<div class=\"toggle-content\">\n\t<p>Ne faites pas :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var f = function () {\n    /*@cc_on if (@_jscript) { return 2* @*/  3; /*@ } @*/\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Les commentaires conditionnels IE peuvent empêcher les outils automatiques de fonctionner correctement.</p>\n</div>\n\n<h2>Convention de nommage et commentaires JavaScript</h2>\n\n<p>Cette partie sera traitée dans un second article vers lequel je mettrai un lien ici prochainement.</p>", "dates" : { "published" : { "$date" : 1385812380000 }, "updated" : [] }, "script" : "$(\".toggle-more\").click(function () {\r\n\t$(this).parents(\"p\").next(\"div\").toggle('fast');\r\n});", "style" : ".toggle-content {\r\n\tdisplay: none;\r\n}", "title" : "Les <span>bonnes pratiques</span> <span>JavaScript</span> selon <span>Google</span>", "urn" : "les-bonnes-pratiques-javascript-selon-google" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b7" }, "cache" : { "comment" : { "number" : 0 } }, "content" : "<p>Cet article est une adaptation du Google JavaScript Style Guide en FR. La partie ci dessous est spécifique à la manière de travailler de Google et ne constitue pas en soit une manière de procéder absolue, cependant cela peut vous servir de base de travail en groupe. Plusieurs conseils sont d'ailleurs très bon à suivre comme le fait d'attacher explicitement ses contextes d'exécution à une variable faisant office de « namespace » et d'autres discutable comme le nombre d'espace nécéssaire à l'indentation. J'espère que tout ceci pourra vous aiguiller du mieux possible.</p>\n\n<div class=\"correct-practice\">\n\t<div class=\"title highlighting\">Google JavaScript Style Guide en français</div>\n\t<nav class=\"content\">\n\t\t<ol>\n\t\t\t<li><a class=\"highlighting\" href=\"./les-bonnes-pratiques-javascript-selon-google/\" title=\"Les bonnes pratiques JavaScript selon Google\">Les bonnes pratiques JavaScript selon Google</a></li>\n\t\t\t<li><a class=\"highlighting\" href=\"./conventions-et-commentaires-javascript-selon-google/\" title=\"Conventions et commentaires JavaScript selon Google\">Conventions et commentaires JavaScript selon Google</a></li>\n\t\t</ol>\n\t</nav>\n</div>\n\n<h2>Google JavaScript Style Guide en français</h2>\n\n<p>Vous pourrez trouver l'article original <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" title=\"Google JavaScript Style Guide\">Google JavaScript Style Guide</a> derrière <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" title=\"Google JavaScript Style Guide\">ce lien</a>. Au moment où je réalise cette traduction, le document est en <span class=\"eye-catching\">version 2.93</span>.</p>\n\n<h2>Avant-propos</h2>\n\n<p>JavaScript est le principal langage de programmation de la partie cliente d'un navigateur web utilisé par beaucoup de projets Google open-source. Ce guide de style représente la liste des bonnes et des mauvaises pratiques lors d'un développement JavaScript.</p>\n\n<h2>Règles du langage JavaScript</h2>\n\n<p>Lire mon précédent article : <a class=\"highlighting\" href=\"./les-bonnes-pratiques-javascript-selon-google/\" title=\"Les bonnes pratiques JavaScript selon Google\">Les bonnes pratiques JavaScript selon Google</a>.</p>\n\n<h2>Conventions pour le JavaScript</h2>\n\n<h3>Nommage</h3>\n\n<p>\n\tEn générale, nommé \n\tles fonctions <samp>functionNamesLikeThis</samp>, \n\tles variables <samp>variableNamesLikeThis</samp>,\n\tles classes (constructeur) <samp>ClassNamesLikeThis</samp>,\n\tles énumérations <samp>EnumNamesLikeThis</samp>,\n\tles méthodes <samp>methodNamesLikeThis</samp>,\n\tles constantes <samp>CONSTANT_VALUES_LIKE_THIS</samp>,\n\tles propriétés <samp>foo.namespaceNamesLikeThis.bar</samp> et\n\tles noms de fichier <samp>filenameslikethis.js</samp>.\n\t- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\n\t<h4>Propriétés et méthodes</h4>\n\n\t<ul>\n\t\t<li>Les propriétés et méthodes privées (Private) doivent commencé par un underscore.</li>\n\t\t<li>Les propriétés et méthodes protégées (Protected) doivent être nommée sans commencé par un underscore (comme les publiques).</li>\n\t</ul>\n\n\t<p>\n\t\tPour plus d'informations sur <samp>private</samp> et <samp>protected</samp>, rendez-vous à la section ««««««««««««««visibilité»»»»»»»»»»»».\n\t</p>\n\n\t<h4>Paramètres de fonctions et de méthodes</h4>\n\n\t<p>\n\t\tLes arguments de fonction optionnelle doivent commencé par <samp>opt_</samp>.\n\t</p>\n\n\t<p>\n\t\tLes fonctions pouvant prendre un nombre variable d'arguments en entrée doivent avoir un dernier argument nommé <samp>var_args</samp>. Vous ne devez, dans votre code, non plus faire référence à <samp>var_args</samp> ; utilisez un tableau d'arguments.\n\t</p>\n\n\t<p>\n\t\tLes arguments optionnelles peuvent également prendre l'annotation <samp>@param</samp> en commentaire. Comme les deux conventions sont accepté par les compilateurs, utiliser les deux est préférable.\n\t</p>\n\n\t<h4>Accesseurs Get et Set</h4>\n\n\t<p>\n\t\tNous vous décourageons d'utiliser les accesseurs EcmaScript 5 pour rendre accessible les propriétés. Cependant, s'ils douvent être utilisés, les getteurs ne montre aucan signe d'utilité.\n\t</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**\n * MAUVAIS -- Ne faites PAS ça.\n */\nvar foo = { get next() { return this.nextId++; } };</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<h4>Des fonctions comme accesseurs</h4>\n\n\t<p>\n\t\tLes méthodes de Get ou de Set pour les propriétés ne sont pas requis. Cependant s'ils doivent être utilisés, les Getters doivent être nommés <samp>getFoo()</samp> et les Setters doivent être nommés <samp>setFoo(value)</samp> (Pour les booléen, <samp>isFoo()</samp> est également possible, et souvent cela sonne mieux).\n\t</p>\n\n\t<h4>Les espaces de nom (Namespaces)</h4>\n\n\t<p>\n\t\tJavaScript n'a pas de base de système de package et d'espace de nom.\n\t</p>\n\n\t<p>\n\t\tLes conflits de nom de Variables Globales sont difficile à débogguer, et cause des problèmes insolubles quand deux projets essaient d'être intégrés ensemble. Dans l'optique de rendre du code JavaScript commun partageable, nous avons adopté une convention pour prévenir les conflits. \n\t</p>\n\n\t<p><span class=\"highlighting\">Utilisation de namespaces pour le code global</span></p>\n\n\t<p>\n\t\tTOUJOURS préfixer une variable dans le champ lexical global avec un espace de nom relatif au projet ou à la librairie. Si vous travaillez sur « Project Sloth », un nom possible serait le namespace <samp>sloth.*</samp>\n\t</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var sloth = {};\n\nsloth.sleep = function() {\n  ...\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>\n\t\tBeaucoup de librairie JavaScript, tout comme <a href=\"http://code.google.com/closure/library/\" title=\"the Closure Library\">the Closure Library</a> et <a href=\"http://www.dojotoolkit.org/\" title=\"Dojo toolkit\">Dojo toolkit</a> vous fournissent des fonctions de hauts niveaux pour déclarer vos espaces de nom.\n\t</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">goog.provide('sloth');\n\nsloth.sleep = function() {\n  ...\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p><span class=\"highlighting\">Respecter la paternité d'espace de nom</span></p>\n\n\t<p>Quand vous choisissez de créer un espace de nom enfant, assurez-vous que les propriétaire de l'espace de nom parent en sont informés. Si vous démarrez un projet qui créé des « hats » pour les « sloths », soyez sure que l'équipe en charge de <samp>sloth</samp> sait que vous utilisez <samp>sloth.hats</samp>.</p>\n\n\t<p><span class=\"highlighting\">Utiliser des espaces de nom différent pour le code externe et le code interne</span></p>\n\n\t<p>« Un code externe » est un code qui vient de l'extérieur de la base de code, et il est compilé indépendemment. Les espaces de nom externe et interne doivent être strictement séparé. Si vous utilisez une librairie externe vous donnant accès à <samp>foo.hats.*</samp>, votre code interne ne doit pas être défini dans <samp>foo.hats.*</samp>, car cela pourrait poser problème à d'autre équipe voulant ajouter des espaces de nom au votre (qui ne vous appartient pas).</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">foo.require('foo.hats');\n\n/**\n * MAUVAIS -- Ne faites PAS ça.\n * @constructor\n * @extends {foo.hats.RoundHat}\n */\nfoo.hats.BowlerHat = function() {\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>\n\t\tSi vous avez besoin de définir de nouvelles APIs dans un espace de nom externe, vous allez devoir exporter explicitement ces fonctions. Votre code appelera des APIs internes par leurs espaces de nom internes, ceci pour la robustesse et une optimisation du code par le compileur.\n\t</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">foo.provide('googleyhats.BowlerHat');\n\nfoo.require('foo.hats');\n\n/**\n * @constructor\n * @extends {foo.hats.RoundHat}\n */\ngoogleyhats.BowlerHat = function() {\n  ...\n};\n\ngoog.exportSymbol('foo.hats.BowlerHat', googleyhats.BowlerHat);</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p><span class=\"highlighting\">Créer des alias pour les longs espace de nom facilite la lecture</span></p>\n\n\t<p>Utilisez des alias locals sur les variables pour augmenter la lisibilité de votre code. Le nom pourra concorder avec le dernier nom de variable de la chaine d'espace de nom.</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**\n * @constructor\n */\nsome.long.namespace.MyClass = function() {\n};\n\n/**\n * @param {some.long.namespace.MyClass} a\n */\nsome.long.namespace.MyClass.staticHelper = function(a) {\n  ...\n};\n\nmyapp.main = function() {\n  var MyClass = some.long.namespace.MyClass;\n  var staticHelper = some.long.namespace.MyClass.staticHelper;\n  staticHelper(new MyClass());\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Ne créer pas d'alias sur les espaces de nom. Les alias d'espace de nom doivent uniquement être créé en utilisant «««««««««««««««««««««««««goog.scope »»»»»»»»»»»»»»»»»»»»»»»»».</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">myapp.main = function() {\n  var namespace = some.long.namespace;\n  namespace.MyClass.staticHelper(new namespace.MyClass());\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>\n\t\tIl est donc interdit d'accéder à une propriété d'un alias, sauf si c'est un enumérateur.\n\t</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/** @enum {string} */\nsome.long.namespace.Fruit = {\n  APPLE: 'a',\n  BANANA: 'b'\n};\n\nmyapp.main = function() {\n  var Fruit = some.long.namespace.Fruit;\n  switch (fruit) {\n    case Fruit.APPLE:\n      ...\n    case Fruit.BANANA:\n      ...\n  }\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">myapp.main = function() {\n  var MyClass = some.long.namespace.MyClass;\n  MyClass.staticHelper(null);\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Ne jamais créer d'alias dans le champ lexical global. Utilisez-les uniquement dans des contextes d'exécution interne.</p>\n\n\t<h4>Nom de fichier</h4>\n\n\t<p>Les noms de fichier doivent être écris uniquement avec des minuscules en vu d'enrayer la confusion sur les plateformes sensibles à la casse. Les nom de fichier doivent finir par <samp>.js</samp>, et ne doivent contenir aucune ponctuation excepté pour - ou _ (préferrez - à _).</p>\n</div>\n\n<h3>Méthodes toString() personnalisées</h3>\n\n<p>\nDoit toujours marcher sans effets de bord.\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\t<p>\n\t\tVous pouvez contrôler la manière dont un objet ce retourne sous forme de chaine de caractère en définissant une méthode <samp>toString()</samp> personnalisée. Cela est bien, mais vous devez vous assurer que votre méthode (1) fontionne dans tous les cas et (2) qu'elle n'a pas d'effets de bord. Si votre méthode ne possède pas ces critères, vous irez droit à la catastrophe. Par exemple, si <samp>toString()</samp> appelle une méthode qui doit faire une assertion, l'assertion peut se solder par le retour du nom de l'objet qui l'a fait rater, ce qui bien sur requier d'appeler <samp>toString()</samp>.\n\t</p>\n</div>\n\n<h3>Initialisation différée</h3>\n\n<p>\nOK.\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\t<p>\n\t\tIl n'est pas toujours possible d'initialiser une variable au moment ou elle est déclarée, en ce sens l'initialisation différée est une bonne chose.\n\t</p>\n</div>\n\n<h3>Champ lexical explicite (contexte d'execution / scope)</h3>\n\n<p>\nToujours.\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\t<p>\n\t\tUtilisez toujours un champ lexical explicite - cela améliore la portabilité et la clarté. Par exemple, n'attaché pas implicitement un ensemble de variable à l'objet <samp>window</samp>. Il est possible ainsi d'utiliser votre code dans un autre programme ou l'objet <samp>window</samp> n'existerrait pas.\n\t</p>\n</div>\n\n<h3>Formattage de code</h3>\n\n<p>\nDéplier pour plus d'informations.\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\t<p>\n\t\tNous suivons (chez Google) <a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Formatting\" title=\"Règle de formatage C++\">les règles de formatage C++</a> dans l'idée, avec des clarifications additionnelles.\n\t</p>\n\n\t<h4>Accolades</h4>\n\n\t<p>À cause des insertions de points virgules, toujours ouvrir ceux-ci sur la même ligne que ce qui demande l'ouverture d'une accolade. Par example :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">if (something) {\n\t// ...\n} else {\n\t// ...\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<h4>Initialisation d'objet et de tableau</h4>\n\n\t<p>L'initialisation ce fait sur une seule ligne autant que possible.</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var arr = [1, 2, 3]; // Pas d'espace aprés [ ni avant ].\nvar obj = {a: 1, b: 2, c: 3}; // Pas d'espace aprés { ni avant }.</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Les tableaux et objets initialisés sur plusieurs lignes sont indentés de deux espaces, avec l'accolade ouvrante sur la même ligne :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Initialisation d'objet.\nvar inset = {\n  top: 10,\n  right: 20,\n  bottom: 15,\n  left: 12\n};\n\n// Initialisation de tableau.\nthis.rows_ = [\n  '\"Slartibartfast\" &lt;fjordmaster@magrathea.com&gt;',\n  '\"Zaphod Beeblebrox\" &lt;theprez@universe.gov&gt;',\n  '\"Ford Prefect\" &lt;ford@theguide.com&gt;',\n  '\"Arthur Dent\" &lt;has.no.tea@gmail.com&gt;',\n  '\"Marvin the Paranoid Android\" &lt;marv@googlemail.com&gt;',\n  'the.mice@magrathea.com'\n];\n\n// Utilisé en paramètre de méthode.\ngoog.dom.createDom(goog.dom.TagName.DIV, {\n  id: 'foo',\n  className: 'some-css-class',\n  style: 'display:none'\n}, 'Hello, world!');</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Les longs attributs ou valeurs presentent des problèmes dans une liste d'initialisation, aussi préférrez toujours une initialisation non alignée. Par exemple :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">CORRECT_Object.prototype = {\n  a: 0,\n  b: 1,\n  lengthyName: 2\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Mais pas comme ça :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">WRONG_Object.prototype = {\n  a          : 0,\n  b          : 1,\n  lengthyName: 2\n};</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<h4>Paramètres de fonctions</h4>\n\n\t<p>Quand cela est possible, touts les paramètres de fonctions doivent être écrits sur la même ligne. S'il dépasse 80 caractères, les paramètres doivent être renvoyé à la ligne de manière lisible. Pour gagner de la place, vous pouvez les aligner par groupe de 80 caractères ou le cas échéant em mettre un par ligne pour augmenter la lisibilité. L'indentation doit être faites de 4 espaces, ou être alignée avec la paranthèse ouvrante. Ci-dessous vous trouverrez les exemples les plus commun de mise en groupe et retour à la ligne des arguments :</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Quatre espace, par groupe de 80. Marche avec les longs nom de fonctions.\n// Par groupe de 80, prend peu de place.\ngoog.foo.bar.doThingThatIsVeryDifficultToExplain = function(\n    veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,\n    tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {\n  // ...\n};\n\n// Quatre espace, un paramètre par ligne. Marche avec les longs nom de fonctions,\n// Gardez le nom, et mettez en avant chaque paramètres.\ngoog.foo.bar.doThingThatIsVeryDifficultToExplain = function(\n    veryDescriptiveArgumentNumberOne,\n    veryDescriptiveArgumentTwo,\n    tableModelEventHandlerProxy,\n    artichokeDescriptorAdapterIterator) {\n  // ...\n};\n\n// Indentation alignée à la paranthèse, par groupe de 80.\n// Prend peu de place.\nfunction foo(veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,\n             tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {\n  // ...\n}\n\n// Indentation alignée à la paranthèse, un paramètre par ligne.\n// Gardez le nom, et mettez en avant chaque paramètres.\nfunction bar(veryDescriptiveArgumentNumberOne,\n             veryDescriptiveArgumentTwo,\n             tableModelEventHandlerProxy,\n             artichokeDescriptorAdapterIterator) {\n  // ...\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Quand une fonction appelée est elle même indenté vis à vis de son parent, vous êtes libre d'indenter les paramètres par rapport à l'indentation du parent. Ceux qui suit est un exemple d'indentation acceptable.</p>\n\t\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">if (veryLongFunctionNameA(\n        veryLongArgumentName) ||\n    veryLongFunctionNameB(\n        veryLongArgumentName)) {\n  veryLongFunctionNameC(veryLongFunctionNameD(\n      veryLongFunctioNameE(\n          veryLongFunctionNameF)));\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<h4>Passage de fonction anonymes</h4>\n\n\t<p>Quand vous déclarez une fonction anonyme dans une liste de paramètre d'appel d'une fonction, le corps de la fonction doit être indenté de deux espaces vis à vis de la ligne d'ouverture de la fonction, ou de deux espace par rapport au mot-clé <samp>function</samp>. Ceci dans le but de rendre le corps de la fonction anonyme plus facile à lire (c'est-à-dire pas écrasé à droite de votre éditeur).</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">prefix.something.reallyLongFunctionName('whatever', function(a1, a2) {\n  if (a1.equals(a2)) {\n    someOtherLongFunctionName(a1);\n  } else {\n    andNowForSomethingCompletelyDifferent(a2.parrot);\n  }\n});\n\nvar names = prefix.something.myExcellentMapFunction(\n    verboselyNamedCollectionOfItems,\n    function(item) {\n      return item.name;\n    });</code></pre>\n\n\t\t</div>\n\t</div>\n\n \t<h4>Créer des alias avec goog.scope</h4>\n\n \t<p><samp><a href=\"https://docs.google.com/document/pub?id=1ETFAuh2kaXMVL-vafUYhaWlhl6b5D9TOvboVg7Zl68Y\" title=\"Créer des alias avec goog.scope\">goog.scope</a></samp> peut être utilisé pour racourcir les références à un espace de nom (namespace) dans les programmes en utilisant la librairie <a href=\"http://code.google.com/closure/library/\" title=\"the Closure Library\">the Closure Library</a>.</p>\n\n\t<p>Seulement un <samp>goog.scope</samp> peut être invoqué par fichier. Toujours placé dans le contexte d'exécution global.</p>\n\n\t<p>L'ouverture <samp>goog.scope (function () {</samp> doit être exactement précédée par un saut de ligne et être à la suite de l'utilisation des <samp>goog.provide</samp>, des <samp>goog.require</samp>, ou des commentaires de haut de fichiers. La fermeture doit se faire à la dernière ligne du fichier. Ajoutez <samp>// goog.scope</samp> à la suite de la ferneture. Séparrez le commentaire du point-virgule de deux espaces.</p>\n\n\t<p>De la même manière qu'avec les espaces de nom en C++, n'indentez pas après l'utilisation de <samp>goog.scope</samp>. À la place, continuez au caractère 0 de la ligne.</p>\n\n\t<p>Les alias de nom ne pourront pas être ré-assignés à d'autres objets (ex : la plupard des constructeurs, les enumérateurs ou même les espaces de nom). Ne faites pas ça (voir plus loin comment réassigné un alias à un constructeur) :</p>\n\n\t<div class=\"worst-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">goog.scope(function() {\nvar Button = goog.ui.Button;\n\nButton = function() { ... };\n...</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Les noms doivent être les mêmes que la dernière propriété du contexte global qui en faisait un alias.</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">goog.provide('my.module.SomeType');\n\ngoog.require('goog.dom');\ngoog.require('goog.ui.Button');\n\ngoog.scope(function() {\nvar Button = goog.ui.Button;\nvar dom = goog.dom;\n\n// Faire un nouvel alias juste après la déclaration d'un constructeur.\nmy.module.SomeType = function() { ... };\nvar SomeType = my.module.SomeType;\n\n// Déclarer une méthode sur le prototype comme à l'accoutumé.\nSomeType.prototype.findButton = function() {\n  // Button as été défini comme alias plus haut.\n  this.button = new Button(dom.getElement('my-button'));\n};\n...\n});  // goog.scope</code></pre>\n\n\t\t</div>\n\t</div>\n\n \t<h4>Indentation des retours à la ligne</h4>\n\n \t<p>À l'exception de l'?????????????écriture litéral des tableaux ou objets????????????</a>, ainsi que les fonctions anonymes, tous les retours à la ligne doivent être indenté alignée à côté de l'expression du dessus, de quatre espaces (pas de deux) de manière plus marquée que l'expression parente (Ici « à côté de l'expression du dessus » et « expression parente » font référence aux parenthèses du niveau courant).</p>\n\n\t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">someWonderfulHtml = '' +\n                    getEvenMoreHtml(someReallyInterestingValues, moreValues,\n                                    evenMoreParams, 'a duck', true, 72,\n                                    slightlyMoreMonkeys(0xfff)) +\n                    '';\n\nthisIsAVeryLongVariableName =\n    hereIsAnEvenLongerOtherFunctionNameThatWillNotFitOnPrevLine();\n\nthisIsAVeryLongVariableName = siblingOne + siblingTwo + siblingThree +\n    siblingFour + siblingFive + siblingSix + siblingSeven +\n    moreSiblingExpressions + allAtTheSameIndentationLevel;\n\nthisIsAVeryLongVariableName = operandOne + operandTwo + operandThree +\n    operandFour + operandFive * (\n        aNestedChildExpression + shouldBeIndentedMore);\n\nsomeValue = this.foo(\n    shortArg,\n    'Some really long string arg - this is a pretty common case, actually.',\n    shorty2,\n    this.bar());\n\nif (searchableCollection(allYourStuff).contains(theStuffYouWant) &&\n    !ambientNotification.isActive() && (client.isAmbientSupported() ||\n                                        client.alwaysTryAmbientAnyways())) {\n  ambientNotification.activate();\n}</code></pre>\n\n\t\t</div>\n\t</div>\n\n \t<h4>Saut de ligne</h4>\n\n \t<p>Utilisez les sauts de ligne pour grouper de façon logique les portions de code. Par example :</p>\n\n \t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">doSomethingTo(x);\ndoSomethingElseTo(x);\nandThen(x);\n\nnowDoSomethingWith(y);\n\nandNowWith(z);</code></pre>\n\n\t\t</div>\n\t</div>\n\n \t<h4>Opérateurs binaires et ternaires</h4>\n\n \t<p>Toujours mettre l'opérateur sur la ligne précédente. Sinon, les sauts de ligne et l'indentation suivent les mêmes règles que dans d'autres guides de style Google. Ce placement de l'opérateur a été initialement convenu rapport à l'insertion de point-virgule automatique. En fait, l'insertion de point-virgule ne peut pas se produire avant un opérateur binaire, tout nouveau code devrait s'en tenir à ce style pour être parfait.</p>\n\n  \t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = a ? b : c;  // Tout sur la même ligne est correcte.\n\n// Indentation +4 est OK.\nvar y = a ?\n    longButSimpleOperandB : longButSimpleOperandC;\n\n// indenté avec le premier opérateur est également OK.\nvar z = a ?\n        moreComplicatedB :\n        moreComplicatedC;</code></pre>\n\n\t\t</div>\n\t</div>\n\n\t<p>Ceci inclut également l'opérateur « point ».</p>\n\n  \t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = foo.bar().\n    doSomething().\n    doSomethingElse();</code></pre>\n\n\t\t</div>\n\t</div>\n</div>\n\n<h3>Parenthèses</h3>\n\n<p>\nSeulement si elles sont nécéssaire.\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\t<p>À utiliser avec parciemonie et uniquement quand la sémantique ou la syntaxe les réclames.</p>\n\t<p>Ne jamais utiliser de parenthèse pour les opérateurs unaires comme <samp>delete</samp>, <samp>typeof</samp> et <samp>void</samp> ou tout autre mot-clé comme <samp>return</samp>, <samp>throw</samp> ou tout autres (<samp>case</samp>, <samp>in</samp> ou <samp>new</samp>).</p>\n</div>\n\n<h3>Chaînes de caractères</h3>\n\n<p>\nPréférrez ' plutôt que \".\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\n</p>\n\n<div class=\"toggle-content\">\n\t<p>Pour une meilleurs lisibilités l'apostrophe (') est préférée aux guillemets (\"). Cela est d'autant plus pratique quand on créer une chaine avec du HTML :</p>\n\n  \t<div class=\"best-practice\">\n\t\t<div class=\"content\">\n\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var msg = 'This is some HTML';</code></pre>\n\n\t\t</div>\n\t</div>\n</div>", "dates" : { "published" : { "$date" : 1385812380000 }, "updated" : [] }, "script" : "$(\".toggle-more\").click(function () {\r\n\t$(this).parents(\"p\").next(\"div\").toggle('fast');\r\n});", "style" : ".toggle-content {\r\n\tdisplay: none;\r\n}", "title" : "<span>Conventions</span> et <span>commentaires</span> <span>JavaScript</span> selon <span>Google</span>", "urn" : "conventions-et-commentaires-javascript-selon-google" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b8" }, "cache" : { "comment" : { "number" : 0 } }, "content" : "<p>Quelque chose de bien pratique disparait tous les jours depuis l'arrivée du Responsive Web Design. C'est la fonctionalité d'un affichage Desktop non responsive sur mobile ou tablette. Mais Si ! Celle que l'on trouve en pied de page de site et qui dit « Afficher ce site dans sa version pour Ordinateur ». Comme certain le savent, le fait de gérer un affichage mobile et desktop sur le même site à rendu caduc la nécésité d'un site dédiée mobile dans beaucoup de cas et de ce fait, le lien vers la version desktop qui se trouvait en bas de la version mobile n'existe plus.</p>\n\n<p>Cela est bien dommage étant donné que de plus en plus de tablette (et même mobile) sont parfaitement capable d'afficher un site Desktop dans de bonne condition. De plus, même si dans certain cas l'ergonomie est bancale, on va pouvoir tout de même consulter cette fichue image que l'on souhaitait montrer à un ami sur mobile et qui malheureusement est <samp>display: none;</samp> « Ha merde, faudra que tu regardes sur un PC ».</p>\n\n<p>Je vous propose avec le même site de permettre à tout périphérique d'afficher le site dans sa version Desktop avec le même code source bien entendu. C'est partie !</p>\n\n<h2>Sans plus attendre voici ce que cela permettrait</h2>\n\n<a href=\"javascript:;\" class=\"super-test\">Test</a>", "dates" : { "published" : { "$date" : 1383930000000 }, "updated" : [] }, "title" : "Gérer un affichage desktop sur mobile avec du Responsive", "urn" : "gerer-un-affichage-desktop-sur-mobile-avec-du-responsive" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b9" }, "cache" : { "comment" : { "number" : 0 } }, "content" : "<p>Je remplirai cette partie à la fin de l'article.</p>\n\n\n\n", "dates" : { "published" : { "$date" : 1382649900000 }, "updated" : [] }, "title" : "<span>Composant</span> <span>JavaScript</span> <span>responsive</span> sans !<span>important</span> en <span>CSS</span>", "urn" : "composant-javascript-responsive-sans-important-en-css" }
{ "__v" : 0, "_id" : { "$oid" : "535699ec2e3a607c06f9a51d" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48ca" } ], "content" : "<p>On me demande souvent quelle est la structure JavaScript que j&#39;utilise pour développer mes sites web. C&#39;est une question à laquelle je ne sais jamais si un simple « <a href=\"http://jquery.com/\" title=\"jQuery JavaScript Library\">jQuery</a> » suffit ou si l&#39;on s&#39;attend à m&#39;entendre répondre « <a href=\"http://mootools.net/\" title=\"MooTools JavaScript Framework\">MooTools</a> », « <a href=\"https://jqueryui.com/\" title=\"jQuery UI JavaScript Components\">jQuery UI</a> », « <a href=\"http://backbonejs.org/\" title=\"Backbone JavaScript Framework\">Backbone</a> », « <a href=\"http://knockoutjs.com/\" title=\"Knockout JavaScript Framework\">Knockout</a> », « <a href=\"https://angularjs.org/\" title=\"AngularJs JavaScript Framework\">AngularJs</a> » ou je ne sais quelle autre composant/librairie/framework JavaScript Front-end extraordinaire !</p>\n<p>Au delà du fait que l&#39;utilisation de ses ressources précédemment citées dépend du fait que l&#39;on souhaite réaliser un site web ou un outil web ou une application web etc. je finis toujours par expliquer que j&#39;utilise ma propre architecture JavaScript à travers toutes les différentes pages d&#39;un site web.</p>\n<p>Je vais donc vous livrer à travers cet article l&#39;architecture JavaScript que j&#39;ai adopté. Afin de la comprendre pas à pas, j&#39;utiliserai comme fil conducteur la réalisation d&#39;un site vitrine. Ma façon de structurer le JavaScript client n&#39;est pas absolue mais elle vous permettra de comprendre la logique derrière mes différents sites dont vous trouverrez les sources sur GitHub ou même du moteur <a href=\"https://haeresis.github.com/NodeAtlas/\" title=\"Créer et maintenir des Assets HTML ou sites multilingues simplement en Node.js\">NodeAtlas</a>.</p>\n<h2 id=\"architecture-javascript-d-un-site-web\">Architecture JavaScript d&#39;un site web</h2>\n<p>Pour commencer, j&#39;estime qu&#39;il y a quatre zones de JavaScript par page que je nomme <strong>Boot</strong>, <strong>Framework</strong>, <strong>Common</strong> et <strong>Specific</strong>. Aucune ligne JavaScript ne doit se trouver en dehors de ces quatre zones. Ces quatre zones, dans un site en production sont matérialisées par quatre (au maximum) fichiers.</p>\n<p>En voici l&#39;exemple sur une page d&#39;accueil :</p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;La page d&#39;accueil&lt;/title&gt;\n        &lt;!-- Meta / Feuilles de style --&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/boot.min.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;home&quot;&gt;\n        &lt;!-- Contenu de la page --&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/framework.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/home.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/common.min.js&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"la-zone-de-boot\">La zone de Boot</h3>\n<p>Cette zone est facultative. Elle est la seule à ralentir le chargement de la page car les fichiers JavaScript de cette zone sont chargés et exécutés avant le rendu visuel final de la page, avant même que la balise <samp>body</samp> ne soit chargée. C&#39;est pour cela que les bonnes pratiques demandent au maximum de charger les fichiers en pied de page et que ce qui sera chargé dans le <samp>head</samp> fasse un poids minimal en taille de fichier et en temps d&#39;exécution JavaScript. Le type de script qui se trouve ici est celui qui va modifier la structure HTML au dessus du <samp>body</samp> à savoir sur l&#39;élément html ou dans le <samp>head</samp>. Cela en vu d&#39;éviter le phénomène de <a href=\"http://fr.wikipedia.org/wiki/FOUC\" title=\"Flash Of Unstyled Content\">FOUC</a>.</p>\n<p>On retrouve donc ici, avant minification et rassemblement des JS, des scripts comme <a href=\"http://modernizr.com/\" title=\"An indispensable tool\">Modernizr</a> ou <a href=\"https://code.google.com/p/html5shiv/\" title=\"HTML5 IE enabling script\">HTMLShiv</a> qui vont impacter le rendu des balises avec les feuilles CSS. C&#39;est ici qu&#39;on laissera une ligne de code pour injecter par exemple une classe <samp>js</samp> dans la balise <samp>html</samp> afin d&#39;avertir les futurs scripts ou les sélecteurs CSS que JavaScript est activé. Si aucun de ces scripts ne vous interessent pour votre site, la zone de <strong>Boot</strong> peut donc être ignorée.</p>\n<h3 id=\"la-zone-de-framework\">La zone de Framework</h3>\n<p>C&#39;est ici que vont se trouver le chargement de toutes vos librairies/frameworks JavaScript. Vous chargerez également des plugins pour vos librairies ou même vos propres fonctions JavaScript. Bref, ici c&#39;est tout ce que vous utilisez Cross-site.</p>\n<p>Cela peut ressembler à ça dans un environnement de développement :</p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;!-- Titre / Meta / Feuilles de style --&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;home&quot;&gt;\n        &lt;!-- Contenu de la page --&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/jquery/date.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/jquery/string.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/jquery/jquery-2.1.0.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/jquery/jquery.ba-hashchange.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/jquery-ui/jquery-ui-1.10.4.js&quot;&gt;&lt;/script&gt;\n\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/ckeditor/ckeditor.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/ckeditor/config.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;javascript/ckeditor/lang/fr.js&quot;&gt;&lt;/script&gt;\n        &lt;!-- Autres JavaScript --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"la-zone-common\">La zone Common</h3>\n<p>C&#39;est la première des deux zones que nous allons décortiquer plus bas dans cette article (les zones précédentes étant dans 95% des cas du code générique). Ici, tout va être dédié à l&#39;interaction des scripts de la zone Framework avec le DOM du site. Cependant, ce fichier unique en version de développement (dans la majorité des cas) comme en version de production sera chargé sur toutes les pages du site comme les deux premières zones. Ne sera donc réfférencé ici que les fonctions qui seront appelées sur plus d&#39;une page.</p>\n<h3 id=\"la-zone-specific\">La zone Specific</h3>\n<p>Cette dernière zone est <em>facultative</em> et spécifique à chaque page. Elle se matérialise par un fichier portant le nom du template de page associé à lui. Sur la page d&#39;accueil ce fichier est donc <samp>home.js</samp> tandis que sur la page de contact il s&#39;appelle <samp>contact-us.js</samp>. Il ne doit contenir <strong>que</strong> du code unique à la page courante.</p>\n<p>Si le code de cette zone pour un template spécifique donne un fichier bien trop petit en poids pour qu&#39;il soit négligeable à côté du <samp>common.js</samp>, il peut être interessant de mettre quelques lignes normalement spécifique dans la partie <strong>Common</strong>. Nous verrons cela plus loin.</p>\n<h2 id=\"site-web-de-fil-rouge\">Site web de fil rouge</h2>\n<p>Pour commencer, nous allons imaginer un petit site web embarquant diverses zones HTML (des composants) qui auront chacune des fonctions JavaScript propres à travers différentes pages. Voici sans plus attendre les différents types de pages embarquant nos divers composants :</p>\n<h3 id=\"liste-des-templates-de-page\">Liste des templates de page</h3>\n<h4 id=\"la-page-d-accueil\">La page d&#39;accueil</h4>\n<ul>\n<li>Le composant <em>Menu principal</em></li>\n<li>Le composant <em>Aperçu des pages</em></li>\n<li>Le composant <em>Aperçu des produits</em></li>\n<li>Le composant <em>Formulaire d&#39;inscription à la newsletter</em></li>\n<li>Le composant <em>Retour en haut de page</em></li>\n</ul>\n<p><em>Contenu de <strong>home.htm</strong></em></p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;La page d&#39;accueil&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;home&quot;&gt;\n        &lt;nav class=&quot;main-nav&quot;&gt;&lt;!-- Zone Menu principal --&gt;&lt;/nav&gt;\n        &lt;nav class=&quot;page-overview&quot;&gt;&lt;!-- Zone Aperçu des pages --&gt;&lt;/nav&gt;\n        &lt;nav class=&quot;product-overview&quot;&gt;&lt;!-- Zone Aperçu des produits --&gt;&lt;/nav&gt;\n        &lt;form class=&quot;newsletter-form&quot;&gt;&lt;!-- Zone Formulaire d&#39;inscription à la newsletter --&gt;&lt;/form&gt;\n        &lt;nav class=&quot;back-to-top&quot;&gt;&lt;!-- Zone Retour en haut de page --&gt;&lt;/nav&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"les-pages-de-produits\">Les pages de produits</h4>\n<ul>\n<li>Le composant <em>Menu principal</em></li>\n<li>Le composant <em>Aperçu des produits</em></li>\n<li>Le composant <em>Description d&#39;un produit</em></li>\n</ul>\n<p><em>Contenu de <strong>products/[name-of-product].htm</strong></em></p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;La page de produit&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;product&quot;&gt;\n        &lt;nav class=&quot;main-nav&quot;&gt;&lt;!-- Zone Menu principal --&gt;&lt;/nav&gt;\n        &lt;nav class=&quot;product-overview&quot;&gt;&lt;!-- Zone Aperçu des produits --&gt;&lt;/nav&gt;\n        &lt;article class=&quot;product-content&quot;&gt;&lt;!-- Zone Description d&#39;un produit --&gt;&lt;/article&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"les-page-d-articles\">Les page d&#39;articles</h4>\n<ul>\n<li>Le composant <em>Menu principal</em></li>\n<li>Le composant <em>Aperçu des articles</em></li>\n<li>Le composant <em>Contenu d&#39;un article</em></li>\n<li>Le composant <em>Retour en haut de page</em></li>\n</ul>\n<p><em>Contenu de <strong>articles/[title-of-article].htm</strong></em></p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;La page d&#39;article&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;article&quot;&gt;\n        &lt;nav class=&quot;main-nav&quot;&gt;&lt;!-- Zone Menu principal --&gt;&lt;/nav&gt;\n        &lt;nav class=&quot;article-overview&quot;&gt;&lt;!-- Zone Aperçu des articles --&gt;&lt;/nav&gt;\n        &lt;article class=&quot;article-content&quot;&gt;&lt;!-- Zone Contenu d&#39;un article --&gt;&lt;/article&gt;\n        &lt;nav class=&quot;back-to-top&quot;&gt;&lt;!-- Zone Retour en haut de page --&gt;&lt;/nav&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"la-page-f-a-q-\">La page F.A.Q.</h4>\n<ul>\n<li>Le composant <em>Menu principal</em></li>\n<li>Le composant <em>Liste de Question/Réponse</em></li>\n<li>Le composant <em>Retour en haut de page</em></li>\n</ul>\n<p><em>Contenu de <strong>faq.htm</strong></em></p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;La page de la faq&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;faq&quot;&gt;\n        &lt;nav class=&quot;main-nav&quot;&gt;&lt;!-- Zone Menu principal --&gt;&lt;/nav&gt;\n        &lt;section class=&quot;questions-answers-list&quot;&gt;&lt;!-- Zone Liste de Question/Réponse --&gt;&lt;/section&gt;\n        &lt;nav class=&quot;back-to-top&quot;&gt;&lt;!-- Zone Retour en haut de page --&gt;&lt;/nav&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"la-page-de-contact\">La page de contact</h4>\n<ul>\n<li>Le composant <em>Menu principal</em></li>\n<li>Le composant <em>Formulaire d&#39;envoi d&#39;un email</em></li>\n</ul>\n<p><em>Contenu de <strong>contact-us</strong>.htm</em></p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixhtml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;fr-fr&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;La page de contact&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=&quot;contact-us&quot;&gt;\n        &lt;nav class=&quot;main-nav&quot;&gt;&lt;!-- Zone Menu principal --&gt;&lt;/nav&gt;\n        &lt;form class=&quot;contact-us-form&quot;&gt;&lt;!-- Zone Formulaire d&#39;envoi d&#39;un email --&gt;&lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"liste-des-composants\">Liste des composants</h3>\n<p>On peut donc repérer un certain nombre de composant sur lesquels nous allons appliquer des intéractions JavaScript.</p>\n<p>Le composant <em>Menu principal</em></p>\n<ul>\n<li>Celui-ci à des sous-menus qui ne s&#39;affichent qu&#39;avec des interactions par clique qui vont nécésiter du JavaScript. Il dispose également d&#39;une barre de recherche pour trouver une page dans le site qui nécessitera également du JavaScript.</li>\n</ul>\n<p>Le composant <em>Aperçu des pages</em></p>\n<ul>\n<li>Celui-ci sera un slider complet (flèches, swipe tactile, barre de progression) avec effets de transition qui va nécésiter du JavaScript.</li>\n</ul>\n<p>Le composant <em>Aperçu des produits</em></p>\n<ul>\n<li>Celui-ci sera un slider affichant une liste d&#39;éléments en ligne qui partent en overflow horizontal. Ceci va nécésiter du JavaScript.</li>\n</ul>\n<p>Le composant <em>Formulaire d&#39;inscription à la newsletter</em></p>\n<ul>\n<li>Celui-ci collectera les informations du formulaire pour ensuite les envoyer en AJAX si il passe les tests de validation. Ceci va nécessiter du JavaScript.</li>\n</ul>\n<p>Le composant <em>Retour en haut de page</em></p>\n<ul>\n<li>Celui-ci renverra en haut de page avec un effet de défilement doux qui nécessitera du JavaScript.</li>\n</ul>\n<p>Le composant <em>Description d&#39;un produit</em></p>\n<ul>\n<li>Celui-ci sera découpé en trois parties, chacunes cachées derrière des onglets. Passer d&#39;une partie à l&#39;autre nécessitera du JavaScript.</li>\n</ul>\n<p>Le composant <em>Aperçu des articles</em></p>\n<ul>\n<li>Même comportement que pour Aperçu des produits.</li>\n</ul>\n<p>Le composant <em>Contenu d&#39;un article</em></p>\n<ul>\n<li>Pas de JavaScript prévu pour ce composant.</li>\n</ul>\n<p>Le composant <em>Liste de Question/Réponse</em></p>\n<ul>\n<li>Celui-ci comportera une liste de question/réponse dont la réponse sera initialement cachée. Afficher les réponses nécessitera du JavaScript.</li>\n</ul>\n<p>Le composant <em>Formulaire d&#39;envoi d&#39;un email</em></p>\n<ul>\n<li>Celui-ci collectera les informations du formulaire pour ensuite les envoyer en AJAX s&#39;il passe les tests de validation. Ceci va nécésiter du JavaScript.</li>\n</ul>\n<h2 id=\"amennager-le-fichier-common-et-les-fichiers-specific\">Amennager le fichier Common et les fichiers Specific</h2>\n<p>Le plus simple en terme de structure serait de faire un fichier à plat contenant l&#39;intégralité de notre JavaScript. Il nous faudra de quoi parcourir le DOM aisément aussi j&#39;utiliserai jQuery (ce qui pour la structure final n&#39;est pas obligatoire, mais aidera à la compréhension tout au long de l&#39;article).</p>\n<p>Cette structure ne tiendra pas la route si le site doit grandir, mais c&#39;est une base que je vais vous exposer pour vous expliquer la suite.</p>\n<p><em>Contenu de <strong>javascript/common.js</strong></em></p>\n<pre class=\"prettyprint linenums\"><code class=\"this.options.langPrefixjavascript\">var temp;\nvar timer;\n\nfunction openMenu() { /* Code... */ }\n\nfunction launchSearch() { /* Code... */ }\n\n$(&quot;.main-nav&quot; /* handler */).bind(/* event */, function () {\n    openMenu();\n    /* ... */\n});\n\n$(&quot;.main-nav&quot; /* handler */).bind(/* event */, function () { \n    launchSearch();\n    /* ... */\n});\n\n/* ... */\n\n/* Aperçu des page */\n\nfunction createSlider() { /* ... */ }\nfunction changeStepSlider() { /* ... */ }\nfunction startAutoSlider() { /* ... */ }\n\ncreateSlider();\nchangeStepSlider();\nstartAutoSlider();\n\n/* ... */\n</code></pre>\n<p><del>Mistaken text.</del></p>\n<p>coucou_ces_moi_que_vla</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n", "dates" : { "published" : { "$date" : 1397602800000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "<span>Structurer</span> le <span>JavaScript</span> d'un site sans <span>Framework</span>", "urn" : "structurer-le-javascript-d-un-site-sans-framework" }
