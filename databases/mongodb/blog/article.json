{ "_id" : { "$oid" : "530afe7a31a27642989254ec" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "En CSS, tout comme avec le librairie JavaScript [jQuery], il faut _utiliser des sélecteurs_ pour _cibler une balise_ ou un ensemble de balise :\n\n- on utilise le **sélecteur #** si l'on désire accéder à l'élément par la valeur de son _attribut id_ ou,\n- on utilise le **sélecteur .** si on désire accéder à l'élément par une des valeurs de son _attribut class_.\n\nEn combinant les deux sélecteurs précédent on peut sélectionner une balise par son _attribut id_ **et** son _attribut class_.\n\nOn peut donc cibler la _balise HTML_ suivante :\n\n```html\n<div id=\"main\" class=\"example\"></div>\n```\n\navec le _sélecteur CSS_ suivant :\n\n```css\ndiv#main.example { /* ... */ }\n```\n\n\n\n\n\n## Comment sélectionner l'id d'une balise si celui-ci contient un point ? ##\n\nIl n'est a première vue pas possible de sélectionner une balise par la valeur de son _attribut id_ si celui-ci contient un point.\n\n\n\n\n> ### Cibler une balise HTML par son id s'il contient un point est impossible ###\n\n> _`Impossible de faire :`_ On ne peut pas cibler la _balise HTML_ suivante :\n\n> ```html\n<div id=\"main.example\">...</div>\n```\n\n> avec le _sélecteur CSS_ suivant :\n\n> ```css\ndiv#main.example { /* ... */ }\n```\n\n> parce que la partie située après le point, à savoir <em>example</em>, est interprétée non pas comme la suite du nom de l'id, mais comme une valeur d'attribut class.\n\n\n\n\n\n## La solution pour les id contenant des points sont le \\ et le \\\\\\ ##\n\nLa solution pour cibler un id ou une classe contenant le caractère `.` est simple, il suffit de l'**échapper avec le caractère \\** en CSS et **les caractères \\\\\\** avec [jQuery].\n\n\n\n\n> ### Cibler une balise HTML par son id s'il contient un point est possible avec le BackSlash ###\n\n> **`Il faut faire :`** On peut cibler la _balise HTML_ suivante,\n\n> ```html\n<div id=\"main.example\">...</div>\n```\n\n> avec le _sélecteur CSS_ suivant :\n\n> ```css\ndiv#main\\.example { /* ... */ }\n```\n\n> ou le _sélecteur [jQuery]_ suivant :\n\n> ```javascript\n$(\"div#main\\\\.example\");\n```\n\nNotez bien qu'en CSS on utilise un BackSlash _\\_ alors qu'avec jQuery il faut également échapper le caractère échappement d'où deux BackSlash** \\\\\\**.\n\n  [jQuery]: http://jquery.com/ (jQuery: The Write Less, Do More, JavaScript Library)", "dates" : { "published" : { "$date" : 1355832720000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Comment <span>cibler</span> un <span>id</span> qui contient un point", "urn" : "comment-cibler-un-id-qui-contient-un-point" }
{ "_id" : { "$oid" : "530f4a3e6f56ae3b67f67204" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" } ], "content" : "Beaucoup de design demande que les bordures des cadres de contenu soient des images pour avoir des bords aux motifs complexes ou faire des effets d'ombre. Bien qu'il existe des propriétés CSS3 qui gèrent cela à présent, la compatibilité sur tous les navigateurs ne sera possible que si ceci est réalisé avec du CSS standard et du HTML.\n\n\n\n\n\n\n## Avec un tableau ou la mauvaise façon de faire ##\n\nL'objet HTML presque exclusivement utilisé pour réaliser cela est la balise `<table>` et ses enfants `<tr>` et `<td>`. C'est l'un des rares objets permettant dans sa configuration brute de gérer dynamiquement un cadre qui s'adapte au contenu qu'il contient sans CSS.\n\nCependant, l'usage premier d'une balise `<table>` est d'afficher des données sous forme de tableau **et ne doit** servir qu'à ça.\n\n> Donc se servir de la balise `<table>` pour faire du positionnement de contenu c'est mal et se servir de la balise `<table>` pour faire des cadres en image c'est mal.\n\nUn exemple de ce qui certes fonctionne mais qui n'ai pas à faire ci-dessous :\n\n\n\n\n> ### On ne doit jamais utiliser la balise `<table>` pour autre chose que du contenu de type donnée ###\n\n> _`Mauvaise façon :`_ Avec ce type de structure HTML :\n\n> ```html\n<table class=\"global\">\n    <thead>\n        <tr>\n            <td class=\"top-left\"></td>\n            <td class=\"top\"></td>\n            <td class=\"top-right\"></td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"left\"></td>\n            <td class=\"content\">{Contenu réel}</td>\n            <td class=\"right\"></td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr>\n            <td class=\"bottom-left\"></td>\n            <td class=\"bottom\"></td>\n            <td class=\"bottom-right\"></td>\n        </tr>\n    </tfoot>\n</table>\n```\n\n> ça marche effectivement en collant :\n\n> - des images de type coin en `background-image` des classes `top-left`, `top-right`, `bottom-left`, `bottom-right`,\n> - des images qui se répètent en `repeat-x_`des classes `top` et `bottom` et\n> - des images qui se répètent en `repeat-y` des classes `left` et `right`.\n\n\n\n\n\n## Avec une `div` ou la bonne pratique ##\n\n_Mais alors comment réaliser des bordures en images autour d'un contenu ?_\n\nPar n'importe quel autre moyen possible et imaginable ! Les seuls contraintes seront la compatibilité inter-navigateur.\n\nSachez qu'il est tout à fait possible de faire remplir ce rôle par des `<div>` de façon aussi dynamique que le tableau `<table>`. Les `<div>` divisent l'espace d'affichage et permettent au CSS d'habiller le tout.\n\nEt comme je suis de bonne humeur, je vais livrer ici ma technique qui est compatible tout navigateur ! Quelle chance ;)\n\n\n\n\n> ### Une bonne manière de créer des cadres dynamiques en image sans tableau ###\n\n> **`Bonne façon :`** En utilisant cette structure HTML :\n\n> ```html\n<div class=\"global-width\">\n    <div class=\"top-right\">\n        <div class=\"bottom-right\">\n            <div class=\"bottom-left\">\n                <div class=\"top-left\">\n                    <div class=\"top\"></div>\n                    <div class=\"left\">\n                        <div class=\"right\">\n                            <div class=\"content-height\">\n                                {Contenu réel}\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"bottom\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n> il suffit d'associer :\n\n> - des images de type coin en background-image des classes `top-left`, `top-right`, `bottom-left`, `bottom-right`,\n> - des images qui se répètent en `repeat-x` des classes `top` et `bottom` et\n> - des images qui se répètent en `repeat-y` des classes `left` et `right`.\n\n> La largeur du tableau ce paramètre avec la classe `global-width` et sa hauteur avec la classe `content-height`.\n\n> > **Attention :** La largeur se calcule en incluant la largeur des bords `left` et `right` alors que la hauteur se calcule en excluant la hauteur des bords `top` et `bottom`.\n\n> Voici un exemple de CSS associé pour notre tableau :\n\n> ```css\ndiv.global-width {\n    width: auto;\n}\n\n> div.content-height {\n    height: auto;\n}\n\n> div.top {\n    margin-left: 23px;\n    margin-right: 23px;\n    height: 23px;\n    background-image: url('top.png');\n    background-repeat: repeat-x;\n}\n\n> div.top-right {\n    background-image: url('top-right.png');\n    background-position: top right;\n    background-repeat: no-repeat;\n}\n\n> div.right {\n    padding-right: 23px;\n    background-image: url('right.png');\n    background-position: right;\n    background-repeat: repeat-y;\n}\n\n> div.bottom-right {\n    background-image: url('bottom-right.png');\n    background-position: bottom right;\n    background-repeat: no-repeat;\n}\n\n> div.bottom {\n    margin-left: 23px;\n    margin-right: 23px;\n    height: 23px;\n    background-image: url('bottom.png');\n    background-repeat: repeat-x;\n}\n\n> div.bottom-left {\n    background-image: url('bottom-left.png');\n    background-position: bottom left;\n    background-repeat: no-repeat;\n}\n\n> div.left {\n    padding-left: 23px;\n    background-image: url('left.png');\n    background-repeat: repeat-y;\n}\n\n> div.top-left {\n    background-image: url('top-left.png');\n    background-repeat: no-repeat;\n}\n```\n\n\n\n\n\n## Autres modèles avec des `<div>` ##\n\nSi vous avez d'autres modèles n'hésitez pas à les laisser dans les commentaires, je les ajouterai ici.\n\n\n\n\n### Structure en semi-tableau ###\n\nVoici une alternative qui vous semble peut-être plus naturelle. Cependant sous **IE7** et **IE8** il y a un décalage de pixel impossible à enlever justement au niveau des flottants,.  À réserver donc si vous ne supportez pas ces navigateurs.\n\n```html\n<div class=\"global-width\">\n    <div>\n        <div class=\"top-left\"></div>\n        <div class=\"top-right\"></div>\n        <div class=\"top\"></div>\n    </div>\n    <div class=\"left\">\n        <div class=\"right\">\n            <div class=\"content-height\">\n                {Contenu réel}\n            </div>\n        </div>\n    </div>\n    <div>\n        <div class=\"bottom-left\"></div>\n        <div class=\"bottom-right\"></div>\n        <div class=\"bottom\"></div>\n    </div>\n</div>\n```\n\nen appliquant :\n\n- à `top-left`, `bottom-left` un `float: left;`,\n- à `top-right`, `bottom-right` un `float: right;` et\n- à `top` et `bottom` un `margin-left: <largeur bord gauche>;` et `margin-right: <largeur bord droit>;`.", "dates" : { "published" : { "$date" : 1358064120000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Faire des <span>bordures</span> en image sans la balise <span>Table</span>", "urn" : "faire-des-bordures-en-image-sans-la-balise-table" }
{ "_id" : { "$oid" : "530f5e87620731fe86cb71a1" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bf" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48b9" } ], "content" : "<img style=\"float: left; margin: 0 8px 8px 0\" src=\"http://blog.haeresis.fr/upload/image/taquin.png\" alt=\"Démonstration du jeu du taquin\" width=\"120\" height=\"120\" />\n\nVous connaissez probablement ce jeu ou l'on mélange une image composée de 4 fois 4 carrés dans le seul but de la remettre en ordre une fois celle-ci mélangée. Il peut s'agir de la reconstituer de mémoire ou à partir d'un modèle. Ce jeu c'est le Taquin et je vous le propose sous la forme d'un plugin jQuery pour votre site.\n\n\n\n\n\n## Démonstration du plugin ##\n\nEn jouant avec les paramètres ci-dessous vous pourrez construire le Taquin qui vous intéresse. Vous n'aurez plus qu'à l'inclure dans votre site. Bien entendu, pour les développeurs, le détail du plugin est fait plus loin dans cet article.\n\n\n\n\n### Paramètres ###\n\n<div>\n    <form>\n            <fieldset>\n                <legend>Image Source</legend>\n                <div>\n                    <label>Url :</label>\n                    <input id=\"taquin-url\" type=\"text\" value=\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\" />\n                    <span class=\"detail\">Adresse relative ou absolue autorisée.</span>\n                </div>\n                <div>\n                    <label>Largeur :</label>\n                    <input id=\"taquin-width\" type=\"text\" value=\"0\" />px\n                    <span class=\"detail\">Laissez 0 pour la dimention originale.</span>\n                </div>\n                <div>\n                    <label>Largeur :</label>\n                    <input id=\"taquin-height\" type=\"text\" value=\"0\" />px\n                    <span class=\"detail\">Laissez 0 pour la dimention originale.</span>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Propriétés</legend>\n                <div>\n                    <label>Nombre de division :</label>\n                    <input id=\"taquin-division\" type=\"text\" value=\"4\" />\n                    <span class=\"detail\">Le mimnimum possible est 2.</span>\n                </div>\n                <div>\n                    <label>Partie cachée :</label>\n                    <select id=\"taquin-hide-part\">\n                        <option value=\"br\">Bas droite</option>\n                        <option value=\"bl\">Bas gauche</option>\n                        <option value=\"tr\">Haut droite</option>\n                        <option value=\"tl\">Haut gauche</option>\n                    </select>\n                    <span class=\"detail\">Valeur possible : tl, tr, bl, br.</span>\n                </div>\n                <div>\n                    <label>Profondeur de tri :</label>\n                    <input id=\"taquin-mixing\" type=\"text\" value=\"200\" />\n                    <span class=\"detail\">Nombre de déplacement pour mélange.</span>\n                </div>\n            </fieldset>\n            <fieldset>\n                <legend>Validation</legend>\n                <input id=\"validation\" type=\"button\" value=\"Générer votre Taquin\" />\n            </fieldset>\n        </form>\n</div>\n\n\n\n### Aperçu ###\n\nCliquer sur l'image ci-dessous pour voir le résultat après mélange.\n\n<div class=\"taquin\"></div>\n\n\n\n### Installation ###\n\nSi vous n'êtes pas un expert en JavaScript, vous pouvez paramétrer le jeu ci-dessus (dans « Aperçu ») avec les éléments dans « Paramètres » et inclure les codes ci-dessous dans votre site.\n\n<ul>\n    <li>Il faut auparavant avoir inclus le script jQuery dans sa page.</li>\n    <li>Le chemin du plugin est celui où vous avez placé le script sur votre site.</li>\n</ul>\n<div class=\"overflow-y\">\n    <form>\n        <fieldset>\n            <legend>Script à inclure en pied de Body</legend>\n            <div>\n                <textarea class=\"taquin-result\"></textarea>\n            </div>\n            <span class=\"detail\">En supposant que votre fichier soit accessible à l'adresse ./jquery/plugin/</span>\n        </fieldset>\n        <fieldset>\n            <legend>HTML à inclure n'importe ou dans le Body</legend>\n            <div>\n                <textarea>&lt;div id=\"taquin\"&gt;&lt;/div&gt;</textarea>\n            </div>\n        </fieldset>\n    </form>\n</div>\n\n<h2>Téléchargement</h2>\n\n<div class=\"best-practice\">\n    <div class=\"title\">Code source du fichier Plugin JQuery Game Taquin</div>\n    <div class=\"content\">\n        <p>Vous trouverez ce code à <a href=\"http://www.haeresis.fr/framework/jquery/plugin/jquery.game-taquin.js\">http://www.haeresis.fr/framework/jquery/plugin/jquery.game-taquin.js</a></p>\n        <p>sinon</p>\n        <p>Copiez-collez le code ci-dessus dans un fichier appelé par exemple <b>jquery.game-taquin.js</b> :</p>\n        <pre class=\"prettyprint linenums lang-js\">\n////////////////////////////////////////////\n// Jeu du Taquin en jQuery sur vos sites. //\n//////////////////////////////////////////////\n// Auteur : Bruno Lesieur - www.haeresis.fr //\n//////////////////////////////////////////////\n(function ($) {\n    \"use strict\";\n\n    // ==Description==\n    // Pour chaque élément 'fn' :\n    // Créé un nouvel élément juste après l'image cible composée de &lt;div&gt; en absolute. \n    // Un clique permet de mélanger le jeu.\n    // La résolution du tableau remet les éléments aux états initiaux.\n\n    // ==image==\n    // Ceci réprésente l'adresse de l'image qui sera fractionnée pour être jouée.\n\n    // ==params==\n    // width : Indique la taille que fait l'image en largeur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.\n    // height : Indique la taille que fait l'image en hauteur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.\n    // division : Indique le nombre de carré en largeur/hauteur qui compose le taquin.\n    // hidePart : Indique quelle partie du carré est masquée pour faire office de trou pour les déplacements. Les valeurs possibles sont Haut Gauche \"tl\", Haut droite \"tr\", Bas gauche \"bl\", Bas droite \"br\" (par défaut).\n    // mixing : Indique le nombre de déplacement fait aléatoirement pour simuler un mélange à la main du taquin.\n    // success : Si écrasé par une fonction, exécute cette fonction en cas de complétion du taquin. Sinon, renvoi sous chaine de caractère le message passé dans un \"alert()\".\n\n    $.fn.gameTaquin = function (image, params, success) {\n\n        // Paramètres initiaux écrasés s'ils sont passés en paramètres d'entrées.\n        params = $.extend({\n            width: 0,\n            height: 0,\n            division: 4,\n            hidePart: \"br\",\n            mixing: 200,\n            success: \"Complete\"\n        }, params);\n\n        // Si la division est inférieur à 2, la valeur est 2.\n        if (params.division &lt; 2) { params.division = 2; }\n\n        // Fonction éxécutée par défaut en cas de succès.\n        if (!$.isFunction(params.success)) {\n            var temp = params.success;\n            params.success = function () {\n                alert(temp);\n            };\n        }\n\n        /***********************************************/\n        /** Initialisation des variables et fonctions **/\n        /***********************************************/\n\n        var clickFunction,\n            gameStart,\n            gameState,\n            squareWidth = 0,\n            squareHeight = 0;\n\n        // Créer les états de jeu.\n        function initialiseGameVar(gameDivision) {\n            var game = [],\n                gameRow,\n                gameDiv,\n                xi = 0,\n                yi = 0,\n                currentDisplay;\n\n            for (xi = 0; xi &lt; gameDivision; xi += 1) {\n                gameRow = [];\n                for (yi = 0; yi &lt; gameDivision; yi += 1) {\n                    gameDiv = [];\n\n                    currentDisplay = true;\n                    if ((xi === 0) && (yi === 0) && (params.hidePart === \"tl\")) { currentDisplay = false; }\n                    if ((xi === (gameDivision - 1)) && (yi === 0) && (params.hidePart === \"tr\")) { currentDisplay = false; }\n                    if ((xi === 0) && (yi === (gameDivision - 1)) && (params.hidePart === \"bl\")) { currentDisplay = false; }\n                    if ((xi === (gameDivision - 1)) && (yi === (gameDivision - 1)) && (params.hidePart === \"br\")) { currentDisplay = false; }\n\n                    gameDiv[0] = currentDisplay;\n                    gameDiv[1] = \"taquin-\" + xi + \"-\" + yi;\n                    gameRow[yi] = gameDiv;\n                }\n                game[xi] = gameRow;\n            }\n\n            return game;\n        }\n\n        // Repéré la case dans le jeu.\n        function getId(taquin) {\n            var classList = taquin.attr(\"class\").split(/\\s+/),\n                result = \"\";\n\n            $.each(classList, function (index, item) {\n                if (index === 0) {\n                    result = item;\n                }\n            });\n\n            return result;\n        }\n\n        function getCoord(id) {\n            var coord = [],\n                xi = 0,\n                yi = 0;\n\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    if (gameState[xi][yi][1] === id) {\n                        coord[0] = xi;\n                        coord[1] = yi;\n                    }\n                }\n            }\n\n            return coord;\n        }\n\n        // Repéré l'élément vide.\n        function getEmpty() {\n            var empty = [],\n                xi = 0,\n                yi = 0;\n\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    if (gameState[xi][yi][0] === false) {\n                        empty[0] = xi;\n                        empty[1] = yi;\n                        empty[2] = gameState[xi][yi][1];\n                    }\n                }\n            }\n\n            return empty;\n        }\n\n        // vérifier si un élément peut être bougé.\n        function getIsMovable(x, y) {\n            var isMovable = false;\n\n            try {\n                if (gameState[x][y - 1][0] === false) { isMovable = true; }\n            } catch (err1) {}\n            try {\n                if (gameState[x + 1][y][0] === false) { isMovable = true; }\n            } catch (err2) {}\n            try {\n                if (gameState[x][y + 1][0] === false) { isMovable = true; }\n            } catch (err3) {}\n            try {\n                if (gameState[x - 1][y][0] === false) { isMovable = true; }\n            } catch (err4) {}\n\n            return isMovable;\n        }\n\n        // Mélange pièce.\n        function randomGame(mixing) {\n            var empty,\n                possibleMove,\n                temp,\n                i = 0,\n                j = 0,\n                xi = 0,\n                yi = 0,\n                xj = 0,\n                yj = 0,\n                rand = 0,\n                newPosTop = 0,\n                newPosLeft = 0;\n\n            for (j = 0; j &lt; mixing; j += 1) {\n                empty = getEmpty();\n                possibleMove = [];\n                i = 0;\n\n                // On cherche les voisins déplaçable.\n                try { if (gameState[empty[0]][empty[1] - 1][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0];\n                    possibleMove[i][1] = empty[1] - 1;\n                    i += 1;\n                } } catch (err1) {}\n                try { if (gameState[empty[0] + 1][empty[1]][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0] + 1;\n                    possibleMove[i][1] = empty[1];\n                    i += 1;\n                } } catch (err2) {}\n                try { if (gameState[empty[0]][empty[1] + 1][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0];\n                    possibleMove[i][1] = empty[1] + 1;\n                    i += 1;\n                } } catch (err3) {}\n                try { if (gameState[empty[0] - 1][empty[1]][0] === true) {\n                    possibleMove[i] = [];\n                    possibleMove[i][0] = empty[0] - 1;\n                    possibleMove[i][1] = empty[1];\n                    i += 1;\n                } } catch (err4) {}\n\n                // On choisit au hasard le voisin à interchanger.\n                rand = Math.floor(Math.random() * possibleMove.length);\n\n                // On l'interchange dans l'état de jeu.\n                temp = gameState[empty[0]][empty[1]];\n                gameState[empty[0]][empty[1]] = gameState[possibleMove[rand][0]][possibleMove[rand][1]];\n                gameState[possibleMove[rand][0]][possibleMove[rand][1]] = temp;\n            }\n\n            // On trouve les déplacements pour l'animation.\n            // Pour chaque élément positionné au départ.\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    // On cherche sa nouvelle position\n                    for (xj = 0; xj &lt; gameState.length; xj += 1) {\n                        for (yj = 0; yj &lt; gameState[0].length; yj += 1) {\n                            // On trouve la nouvelle position.\n                            if (gameStart[xi][yi][1] === gameState[xj][yj][1]) {\n                                // On récupère les coordonnées de la nouvelle position.\n                                if (gameStart[xi][yi][0] === true) {\n                                    newPosTop = parseInt((squareHeight * yj) - $(\".taquin-\" + xi + \"-\" + yi).position().top, 10) + \"px\";\n                                    newPosLeft = parseInt((squareWidth * xj) - $(\".taquin-\" + xi + \"-\" + yi).position().left, 10) + \"px\";\n\n                                    $(\".taquin-\" + xi + \"-\" + yi).animate({\n                                        top: \"+=\" + newPosTop,\n                                        left: \"+=\" + newPosLeft\n                                    });\n                                } else {\n                                    $(\".taquin-\" + xi + \"-\" + yi).css({\n                                        \"top\": (squareHeight * yj),\n                                        \"left\": (squareWidth * xj)\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Démarrer le jeu\n        function launcher(generate) {\n            // On enlève l'intialisation de jeu.\n            generate.find(\".taquin-part\").unbind(\"click\");\n\n            // On cherche l'élément vide.\n            var empty = getEmpty();\n\n            $(\".\" + empty[2]).animate({ opacity: \"0\" }, function () {\n                // On le cache.\n                $(this).hide();\n\n                // On mélange le jeu.\n                randomGame(params.mixing);\n\n                // Annules toutes les animations s'il y en a de pas finie.\n                generate.find(\".taquin-part\").clearQueue();\n\n                // Permettre le déplacement des pièces, jeu jouable !\n                generate.find(\".taquin-part\").bind(\"click\", function () {\n                    clickFunction(generate, $(this));\n                });\n            });\n        }\n\n        // Quand on clique sur une partie après le lancement du jeu.\n        clickFunction = function (generate, source) { // rempli ici mais défini plus haut car appelé dans la fonction d'au dessus.\n            var empty,\n                moveTop = 0,\n                moveLeft = 0,\n                tempTop = 0,\n                tempLeft = 0,\n                temp,\n\n            // Identifier l'élément.\n                id = getId(source),\n\n            // Trouver sa position dans le jeu.\n                coord = getCoord(id),\n\n            // Vérifier si il est déplaçable.\n                isMovable = getIsMovable(coord[0], coord[1]);\n\n            // Si il est déplaçable, interchanger les positions.\n            if (isMovable) {\n                // Trouver l'élément vide.\n                empty = getEmpty();\n\n                // On trouve les déplacements pour l'animation.\n                generate.find(\".\" + empty[2]).show();\n                moveTop = generate.find(\".\" + id).position().top - generate.find(\".\" + empty[2]).position().top;\n                moveLeft = generate.find(\".\" + id).position().left - generate.find(\".\" + empty[2]).position().left;\n                generate.find(\".\" + empty[2]).hide();\n\n                //On met les variable en temporaire pour l'interchangement.\n                tempTop = source.position().top;\n                tempLeft = source.position().left;\n\n                // On inverse les positions de l'éléments vide.\n                temp = gameState[coord[0]][coord[1]];\n                gameState[coord[0]][coord[1]] = gameState[empty[0]][empty[1]];\n                gameState[empty[0]][empty[1]] = temp;\n\n                // On anime le changement.\n                source.unbind(\"click\").animate({\n                    top: \"-=\" + moveTop,\n                    left: \"-=\" + moveLeft\n                }, function () {\n                    source.bind(\"click\", function () {\n                        clickFunction(generate, source);\n                    });\n\n                    // Si l'état initial après animation est le même que l'état actuel, on a fini le jeu.\n                    if (gameState.toString() === gameStart.toString()) {\n                        // On enlève les fonctions de déplacement.\n                        generate.find(\".taquin-part\").unbind(\"click\");\n\n                        // On cherche l'élément vide pour le ré-afficher.\n                        var empty = getEmpty();\n                        $(\".\" + empty[2]).show().animate({ opacity: \"1\" }, function () {\n                            // On replace le mécanisme de démarrage du jeu.\n                            generate.find(\".taquin-part\").bind(\"click\", function () {\n                                launcher(generate);\n                            });\n                            // On exécute la fonction de réussite.\n                            params.success();\n                        });\n                    }\n                });\n\n                generate.find(\".\" + empty[2]).css({\n                    \"top\": tempTop + \"px\",\n                    \"left\": tempLeft + \"px\"\n                });\n            }\n        };\n\n        // Fonction exécutée sur chaque élément sélectionné comme model pour devenir un taquin.\n        function taquin(generate, imageOriginalSize) {\n            var gameDivision = params.division,\n                imageWidth = 0,\n                imageHeight = 0,\n                xi = 0,\n                yi = 0,\n                backgroundSizeString;\n\n            // Récupère la largeur et hauteur des partis du taquin.\n            if (parseInt(params.width, 10) !== 0) { imageWidth = params.width; } else { imageWidth = imageOriginalSize[0]; }\n            if (parseInt(params.height, 10) !== 0) { imageHeight = params.height; } else { imageHeight = imageOriginalSize[1]; }\n            squareWidth = Math.round(imageWidth / gameDivision);\n            squareHeight = Math.round(imageHeight / gameDivision);\n\n            // Initialise l'état initial et actuelle du jeu.\n            gameStart = initialiseGameVar(gameDivision);\n            gameState = initialiseGameVar(gameDivision);\n\n            generate.css({\n                \"position\": \"relative\",\n                \"width\": imageWidth + \"px\",\n                \"height\": imageHeight + \"px\"\n            });\n\n            // Générer les partis du taquin.\n            for (xi = 0; xi &lt; gameStart.length; xi += 1) {\n                for (yi = 0; yi &lt; gameStart[0].length; yi += 1) {\n                    backgroundSizeString = ((params.width != 0) ? params.width : imageOriginalSize[0]) + \"px \" + ((params.height != 0) ? params.height : imageOriginalSize[1]) + \"px\";\n                    $(\"&lt;div&gt;\", {\n                        css: {\n                            cursor: \"pointer\",\n                            backgroundImage: \"url('\" + image + \"')\",\n                            backgroundPosition : \"-\" + parseInt(squareWidth * xi, 10) + \"px -\" + parseInt(squareHeight * yi, 10) + \"px\",\n                            \"background-size\" : backgroundSizeString,\n                            position: \"absolute\",\n                            top: parseInt(squareHeight * yi, 10) + \"px\",\n                            left: parseInt(squareWidth * xi, 10) + \"px\",\n                            width: squareWidth + \"px\",\n                            height: squareHeight + \"px\"\n                        }\n                    }).appendTo(generate).addClass(gameStart[xi][yi][1]).addClass(\"taquin-part\");\n                }\n            }\n\n            // Permettre de démarrer le jeu.\n            generate.find(\".taquin-part\").bind(\"click\", function () {\n                launcher(generate);\n            });\n        }\n\n        // S'execute pour chaque élément 'fn' trouvé.\n        return this.each(function () {\n\n            // Information sur l'image.\n            var waitForImageSize,\n                forImage = new Image(),\n                element = $(this),\n                imageSize = [];\n\n            forImage.src = image;\n\n            // Quand on obtient une taille pour l'image, on execute le mécanisme.\n            waitForImageSize = setInterval(function () {\n                if (forImage.width !== 0) {\n                    imageSize[0] = forImage.width;\n                    imageSize[1] = forImage.height;\n\n                    // Génère l'élément qui contiendra les partis du taquin.\n                    var generate = $(\"&lt;div&gt;\").addClass(\"taquin-generate\");\n                    if (element.next().hasClass(\"taquin-generate\")) {\n                        element.next().remove();\n                    }\n                    element.after(generate);\n\n                    taquin(generate, imageSize);\n                    clearInterval(waitForImageSize);\n                }\n            }, 50);\n        });\n    };\n}(jQuery));\n        </pre>\n    </div>\n</div>\n\n<h2>Documentation</h2>\n\n<h3>Utilisation</h3>\n\n<p>La fonction de base s'utilise comme suit :</p>\n\n<ul>\n    <li>$(<span class=\"highlighting\">dom_element</span>).gameTaquin(<span class=\"highlighting\">image</span>);</li>\n</ul>\n\n<p>Exemple sur l'élément de DOM suivant <span class=\"highlighting\">&lt;div id=\"taquin\"&gt;&lt;/div&gt;</span>.</p>\n\n<pre class=\"prettyprint linenums lang-js\">\n$(\"#taquin\").gameTaquin(\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\");\n</pre>\n\n<h4>image</h4>\n\n<p>Ceci réprésente l'adresse de l'image qui sera fractionnée pour être jouée.</p>\n\n<h3>Paramètres</h3>\n\n<p>Les paramètres se donnent sous forme d'objet JSON après l'url de l'image :</p>\n\n<ul>\n    <li>$(DOM_ELEMENT).gameTaquin(IMAGE_URL, <span class=\"highlighting\">{ PARAMETERS... }</span>);</li>\n</ul>\n\n<p>Les paramètres sont cumulables comme dans cet exemple.</p>\n\n<pre class=\"prettyprint linenums lang-js\">\n$(\"#taquin\").gameTaquin(\n    \"http://blog.haeresis.fr/upload/image/image-taquin.jpg\",\n    {\n        division: 6,\n        hidePart: \"tl\",\n        success: \"Félicitation !\"\n    }\n);\n</pre>\n\n<h4>width</h4>\n<p>Indique la taille que fait l'image en largeur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.</p>\n\n<h4>height</h4>\n<p>Indique la taille que fait l'image en hauteur. Si rien ou zéro est précisé, la taille par défaut est celle de l'image.</p>\n\n<h4>division</h4> \n<p>Indique le nombre de carré en largeur/hauteur qui compose le taquin.</p>\n\n<h4>hidePart</h4> \n<p>Indique quelle partie du carré est masquée pour faire office de trou pour les déplacements. Les valeurs possibles sont Haut Gauche \"tl\", Haut droite \"tr\", Bas gauche \"bl\", Bas droite \"br\" (par défaut).</p>\n\n<h4>mixing</h4> \n<p>Indique le nombre de déplacement fait aléatoirement pour simuler un mélange à la main du taquin.</p>\n\n<h4>success</h4>\n<p>Si écrasé par une fonction, exécute cette fonction en cas de complétion du taquin. Sinon, renvoi sous chaine de caractère le message passé dans un \"alert()\".</p>", "dates" : { "published" : { "$date" : 1359705720000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "(function () {\n\tvar $scriptTaquin = $(\".script-taquin\"),\n\t\t$taquin = $(\".taquin\"),\n\t\t$taquinResult = $(\".taquin-result\"),\n\t\t$taquinUrl;\n\n\tif ($taquin.length > 0) {\n\t\tif ($scriptTaquin.length === 0) {\n\t\t\t$body.append('<\\script class=\"script-taquin\" type=\"text/javascript\" src=\"./javascript/jquery/jquery.game-taquin.js\">');\n\t\t}\n\n\t\t$taquin.gameTaquin(\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\");\n\n\t\t$taquinResult.val(\n\t\t\t('&lt;script type=\"text/javascript\" src=\"jquery/plugin/jquery.game-taquin.js\"&gt;&lt;/script&gt;\\r\\n' +\n\t\t\t'&lt;script type=\"text/javascript\"&gt;\\r\\n' +\n\t\t\t'\\t$(\"#taquin\").gameTaquin(\"http://blog.haeresis.fr/upload/image/image-taquin.jpg\");\\r\\n' +\n\t\t\t\"&lt;/script&gt;\").replace(/&lt;/gi,\"<\").replace(/&gt;/gi,\">\")\n\t\t);\n\n\t\t$taquin.hide();\n\n\t\t$(\"#validation\").click(function () {\n\t\t\t$taquinUrl = $(\"#taquin-url\");\n\n\t\t\tconsole.log(typeof $taquin.gameTaquin);\n\n\t\t\t/*$taquin.gameTaquin(\n\t\t\t\t$taquinUrl.attr(\"value\"), \n\t\t\t\t{ \n\t\t\t\t\twidth: $(\"#taquin-width\").attr(\"value\"), \n\t\t\t\t\theight: $(\"#taquin-height\").attr(\"value\"), \n\t\t\t\t\tdivision: $(\"#taquin-division\").attr(\"value\"), \n\t\t\t\t\thidePart: $(\"#taquin-hide-part option:selected\").attr(\"value\"), \n\t\t\t\t\tmixing: $(\"#taquin-mixing\").attr(\"value\")\n\t\t\t\t}\n\t\t\t);*/\n\n\t\t\t$taquinResult.val(\n\t\t\t\t('&lt;script type=\"text/javascript\" src=\"jquery/plugin/jquery.game-taquin.js\"&gt;&lt;/script&gt;\\r\\n' +\n\t\t\t\t'&lt;script type=\"text/javascript\"&gt;\\r\\n' +\n\t\t\t\t'\\t$(\"#taquin\").gameTaquin(' + '\\r\\n' +\n\t\t\t\t\t'\\t\\t\"' + $taquinUrl.attr(\"value\") + '\", ' + \"\\r\\n\" +\n\t\t\t\t\t\"\\t\\t{\\r\\n\" + \n\t\t\t\t\t\"\\t\\t\\t\" + \"width: \" + $(\"#taquin-width\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t\\t\" + \"height: \" + $(\"#taquin-height\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t\\t\" + \"division: \" + $(\"#taquin-division\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t\\t\" + 'hidePart: \"' + $(\"#taquin-hide-part option:selected\").attr(\"value\") + '\", \\r\\n' +\n\t\t\t\t\t\"\\t\\t\\t\" + \"mixing: \" + $(\"#taquin-mixing\").attr(\"value\") + \", \\r\\n\" +\n\t\t\t\t\t\"\\t\\t}\\r\\n\" +\n\t\t\t\t\"\\t);\\r\\n\" +\n\t\t\t\t\"&lt;/script&gt;\").replace(/&lt;/gi,\"<\").replace(/&gt;/gi,\">\")\n\t\t\t);\n\t\t});\n\t}\n}())", "stylesheet" : ".text form,\n.taquin-generate {\n    margin-top: 16px;\n}", "title" : "<span>Jeu</span> du Taquin en <span>jQuery</span> sur vos sites !", "urn" : "jeu-du-taquin-en-jquery-pour-vos-sites" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a2" }, "cache" : { "comment" : { "number" : 3 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c1" }, { "$oid" : "5310456355dfd5f7698d48c2" }, { "$oid" : "5310456355dfd5f7698d48c0" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<img class=\"float-left\" src=\"./upload/image/ie10.png\" alt=\"Logo Internet Explorer 10\" width=\"80\" height=\"80\" />\r\n\r\n<p>Internet Explorer 10, la dernière version d'Internet Explorer à l'heure où j'écris ce billet, est le navigateur par défaut des systèmes d'exploitations Windows 8 et Windows Phone 8 (dans sa version mobile). Cependant, depuis le 26 février 2013, IE10 est également disponible sur Windows 7 ce qui m'amène à cet article puisque j'ai enfin décidé de l'installer. Jetons un œil à cette version et surtout à la possibilité formidable de tester les anciennes versions d'IE dans IE10.</p>\r\n\r\n<h2>Faut-il installer IE10 sous Windows 7 ?</h2>\r\n\r\n<p>J'ai mis quelques semaines avant d'installer cette nouvelle version (je suis sous Seven) tout simplement parce que je ne savais pas répondre aux questions suivantes :</p>\r\n<ul>\r\n<li>Windows 8 est obligatoire pour IE10 ?</li>\r\n<li>Est-ce que IE9 et IE10 peuvent être simultanément installé ?</li>\r\n<li>Y a-t-il un mode de compatibilité IE9 dans IE10 ?</li>\r\n</ul>\r\n\r\n<p>En effet dans mon environnement actuel je développe mes interfaces web en prenant soin de tester le rendu dans IE9, FF, Chrome, Opera et Safari ainsi que sur <a href=\"https://www.google.fr/search?q=Tester+IE7%2FIE8+avec+une+VM\" title=\"Tester IE7/IE8 avec une VM\">IE7/IE8 en passant par une machine virtuelle embarquant un Windows XP</a> n'ayant pas obtenu l'entière satisfaction de <a href=\"https://www.google.fr/search?q=IETester\" title=\"Où télécharger IETester\">IETester</a> notamment du point de vue du débogue JavaScript. Je freinais des quatre pieds à l'idée de devoir passer dans une VM pour tester mes rendus sous IE9 une fois IE10 installé.</p>\r\n\r\n<p class=\"highlighting\">Soufflez un bon coup, vous pouvez passer de IE9 à IE10 dès à présent, mettre de côté vos VM IE7/IE8 et laissez tomber IETester : Internet Explorer 10 vous permet de tester les anciennes versions d'IE ! Rien que ça. Voilà comment procéder.</p>\r\n\r\n<h3>IE10 sous Vista ou XP</h3>\r\n\r\n<p>Je fais l'impasse sur les systèmes non Windows, mais afin de pousser les utilisateurs à la migration Seven et Eight, Microsoft n'a pas prévu de version pour Vista et XP.\r\n\r\n<h2>Comment debugger les anciens IE avec Internet Explorer 10</h2>\r\n\r\n<h3>Où télécharger Internet Explorer 10</h3>\r\n\r\n<p>Tout d'abord, cela va de sois, il faut tourner sous Windows 7 ou Windows 8 et vous rendre à cette adresse : <a href=\"http://windows.microsoft.com/fr-fr/internet-explorer/downloads/ie-10/worldwide-languages\" title=\"Télécharger Internet Explorer 10\">http://windows.microsoft.com/fr-fr/internet-explorer/downloads/ie-10/worldwide-languages</a>. Choisissez ensuite votre version et votre langue.</p>\r\n<p>Après l'installation et le redémarrage de votre machine. Ouvrez IE et... et ça a vraiment marché ?</p>\r\n\r\n<h3>La touche F12 pardi, la touche F12 !</h3>\r\n\r\n<div class=\"center\">\r\n<img class=\"openable\" src=\"./upload/image/ie10-development-f12.png\" alt=\"Outils de développement F12\" width=\"500\" height=\"340\" style=\"width: 76%;height: auto;\" />\r\n</div>\r\n\r\n<p>A l'instar de ses autres cousins navigateurs et même de ses vieux frères l'utilisation du mode de compatibilité Internet Explorer 10 se cache derrière la touche F12 qui affichera les outils pour développeur. Si cette touche est cassée sur votre clavier et que vous ne voulez pas en changer, vous pouvez également passer sur l'icône rouage et cliquer sur « Outils de développement F12 ».</p>\r\n\r\n<h3>Différence entre Mode navigateur et Mode de document</h3>\r\n\r\n<p>L'interface pour les développeurs se présente comme ci-dessous :</p>\r\n\r\n<div class=\"center\">\r\n<img class=\"openable\" src=\"./upload/image/ie10-development-view.png\" alt=\"Aperçu de l'outil de développement\" width=\"500\" height=\"299\" style=\"width: 76%;height: auto;\" />\r\n</div>\r\n\r\nLa zone bleue dans le menu est le « Mode de document » et juste à sa gauche se trouve le « Mode navigateur ».\r\n\r\n<h4>Mode navigateur</h4>\r\n\r\n<p>Sans que visuellement vous ne le discerniez, IE10 va se faire passer auprès des serveurs pour l'IE que vous allez lui demander d'être. Il va donc requêter et traiter les réponses comme s'il était le navigateur en question.</p>\r\n<ul>\r\n<li><span class=\"highlighting\">Internet Explorer 10</span> : Mode par défaut. Le navigateur se comporte comme un IE10.</li>\r\n<li><span class=\"highlighting\">Affichage de compatibilité Internet Explorer 10</span> : Ce mode va choisir dans quel IE il est le plus judicieux de traiter le rendu d'une page.</li>\r\n<li><span class=\"highlighting\">Internet Explorer 9</span> : Force le navigateur à se faire passer pour IE9.</li>\r\n<li><span class=\"highlighting\">Internet Explorer 8</span> : Force le navigateur à se faire passer pour IE8.</li>\r\n<li><span class=\"highlighting\">Internet Explorer 7</span> : Force le navigateur à se faire passer pour IE7.</li>\r\n</ul>\r\n\r\n<h4>Mode de document</h4>\r\n\r\n<p>IE10 va traiter le rendu visuel d'une page comme s'il avait été exécuté par le navigateur en question en prenant volontairement en compte les bogues inhérent à la version et son non respect des standards.</p>\r\n\r\n<ul>\r\n<li><span class=\"highlighting\">Normes (Pages par défaut)</span> : Prend en compte les DOCTYPEs et respecte les normes du web pour le rendu de la page.</li>\r\n<li><span class=\"highlighting\">Quirks</span> : Passe en mode Quirks (voir plus bas).</li>\r\n<li><span class=\"highlighting\">Normes d'Internet Explorer 9</span> : Affiche la page avec la totalité des standards respectés/connus de IE9.</li>\r\n<li><span class=\"highlighting\">Normes d'Internet Explorer 8</span> : Affiche la page avec la totalité des standards respectés/connus de IE8.</li>\r\n<li><span class=\"highlighting\">Normes d'Internet Explorer 7</span> : Affiche la page avec la totalité des standards respectés/connus de IE7.</li>\r\n</ul>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Un petit exemple</div>\r\n\t<div class=\"content\">\r\n\t\t<p>Si je visionne cette page en Mode de document « Normes d'Internet Explorer 9 » tout en restant en Mode navigateur « Internet Explorer 10 » le titre de la page s'affichera en blanc et sera illisible car les normes interprétées par IE9 ne prennent pas en compte la propriété CSS3 « text-shadow ». Pourtant j'ai indiqué grâce au commentaires conditionnels que si IE plus petit que 10, le texte devait être rouge (pour être lisible). Ce commentaire n'est pas interprété par le navigateur car il se dit IE10 interprétant comme IE9.</p>\r\n\t\t<p class=\"highlighting\">Pour avoir le rendu tel que IE9 le donnerait il faut bien switcher en Mode navigateur IE9 ET en Mode de document IE9.</p>\r\n\t</div>\r\n</div>\r\n\r\n<h3>Qu'est-ce que le mode Quirks ?</h3>\r\n\r\n<p>Cela permet de repasser à l'époque ou il n'y avait pas de normes W3C pour afficher ou déboguer les pages telles qu'elles ont été conçues à cette époque.Je vous invite à lire cet article intéressant sur le mode Quirks et sur les différences notables de rendu : <a href=\"http://www.lesintegristes.net/2008/04/06/que-se-passe-t-il-en-mode-quirks-traduction/\" title=\"Que se passe-t-il en mode Quirks ?\">Que se passe-t-il en mode Quirks ?</a></p>\r\n\r\n<h3>Pourquoi il n'y a pas de mode compatibilité IE6 dans IE10 ?</h3>\r\n\r\n<p>C'est vrai que cela peut sembler étrange. On voit bien IE5 dans la liste mais pas IE6. On peut supposer ceci :</p>\r\n\r\n<ul>\r\n<li>Le Quirks Internet Explorer 5 n'est en réalité que le Quirks IE tel que supporté par Internet Explorer 5.5 incluant peut-être le rendu Internet Explorer 6.</li>\r\n<li>Peut-être n'a-t-il pas été inclus car il ne représentait pas vraiment le réel rendu IE6 puisque celui-ci dépend peut-être de sa version Win98 ou XP.</li>\r\n</ul>\r\n\r\n<p>Cependant, je n'ai pas la réponse. Si vous l'avez, n'hésitez pas à m'en faire part, cela m'intéresse.</p>\r\n\r\n<h2>Pour conclure</h2>\r\n\r\n<p>L'outil intégré de IE10 est une excellente alternative pendant la phase de développement à IETester ou même un affichage en VM dès lors qu'on décide de supporter les sites jusqu'à IE7.</p>\r\n\r\n<p>Cependant, avant de passer un site en environnement de qualité, je recommande tout de même de faire un test dans une VM en ce qui concerne IE7 et IE8 mais on a pas de grand soucis à se faire pour IE9.<p>", "dates" : { "published" : "2013-03-14 12:12:00", "updated" : [ "2013-03-14 12:12:00" ] }, "title" : "<span>Tester</span> la <span>compatibilité</span> IE7, IE8 et IE9 avec <span>IE10</span>", "urn" : "tester-la-compatibilite-ie7-ie8-ie9-avec-ie10" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a3" }, "cache" : { "comment" : { "number" : 4 } }, "categories" : [ { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "<p>Les ergonomes s'accordent à dire qu'un des moyens pour informer l'utilisateur qu'il peut interagir avec un élément est de changer son apparence au survol de la souris. On peut réaliser cela rapidement en CSS avec plus ou moins d'effets et de complexité ou utiliser JavaScript pour faire quelque chose de plus poussé. Il va être question ici d'étudier une autre possibilité du survol de la souris qui consiste en l'apparition et l'animation d'éléments autres que l'objet survolé. En outre cet article va vous présenter la manière de gérer des menus contextuels en passant par jQuery et même CSS3.</p>\r\n\r\n<h2>Les bases du survol en CSS</h2>\r\n\r\n<p>Petit rappel donc sur la possibilité de changer le style d'un élément au survol de la souris grâce aux CSS en utilisant la <span class=\"eye-catching\">pseudo-class</span> <span class=\"highlighting\">:hover</span>. Celle-ci est compatible IE7+ et autres navigateurs sur toutes balises HTML survolable et seulement fonctionnelle sur la balise &lt;a&gt; dans le cas d'une utilisation IE6- (comprendre ici IE6 et versions inférieures). Comme toute <span class=\"eye-catching\">pseudo-class</span> elle ne fonctionne pas dans l'<span class=\"eye-catching\">attribut HTML</span> <span class=\"highlighting\">style</span>.</p>\r\n\r\n<h3>Exemple de menu simple avec :hover</h3>\r\n\r\n<p class=\"highlighting\">HTML dans &lt;body&gt;</p>\r\n\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;nav class=\"menu\"&gt;\r\n\t&lt;div&gt;\r\n\t\t&lt;a href=\"\" title=\"\"&gt;Navigateurs&lt;/a&gt;\r\n\t\t&lt;ul&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Chrome&lt;/a&gt;&lt;/li&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Firefox&lt;/a&gt;&lt;/li&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;IE&lt;/a&gt;&lt;/li&gt;\r\n\t\t&lt;/ul&gt;\r\n\t&lt;/div&gt;\r\n\t&lt;div&gt;\r\n\t\t&lt;a href=\"\" title=\"\"&gt;OS&lt;/a&gt;\r\n\t\t&lt;ul&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Windows&lt;/a&gt;&lt;/li&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Linux&lt;/a&gt;&lt;/li&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Mac&lt;/a&gt;&lt;/li&gt;\r\n\t\t&lt;/ul&gt;\r\n\t&lt;/div&gt;\r\n\t&lt;div&gt;\r\n\t\t&lt;a href=\"\" title=\"\"&gt;Appareils&lt;/a&gt;\r\n\t\t&lt;ul&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;PC/MAC&lt;/a&gt;&lt;/li&gt;\r\n\t\t\t&lt;li&gt;&lt;a href=\"\" title=\"\"&gt;Smartphone&lt;/a&gt;&lt;/li&gt;\r\n\t\t&lt;/ul&gt;\r\n\t&lt;/div&gt;\r\n&lt;/nav&gt;\r\n</pre>\r\n\r\n<p class=\"highlighting\">CSS avec link</p>\r\n\r\n<pre class=\"prettyprint linenums lang-css\">\r\n/** On prévoit de ne pas laisser écouler les flottants hors du menu. **/\r\n.menu:after { \r\n\tcontent: \"\"; /* Génération d'un élément après .menu. */\r\n\tdisplay: block; /* Donner un comportement à l'élément. */\r\n\tclear: both; /* Pas de flottement à gauche ou à droite. */\r\n}\r\n\r\n/** On arrondit la gauche et la droite du menu. **/\r\n.menu div:first-child { /* Gauche correspond au premier élément. */\r\n\tborder-top-left-radius: 8px;\r\n\tborder-bottom-left-radius: 8px;\r\n}\r\n.menu div:last-child {  /* Droite correspond au dernier élément. */\r\n\tborder-top-right-radius: 8px;\r\n\tborder-bottom-right-radius: 8px;\r\n}\r\n\r\n.menu div {\r\n\tposition: relative; /* Définition de &lt;div&gt; comme référence de positionnement. */\r\n\tfloat: left; /* display: inline-block; fait l'affaire si pas de support pour IE7. */\r\n\tpadding: 8px;\r\n\tbackground-color: #bbbbbb;\r\n\tbackground: linear-gradient(to bottom, #dddddd, #bbbbbb); /* Ajouter préfixes propriétaires -webkit-, -o-, etc... */\r\n}\r\n.menu div ul {\r\n\tposition: absolute; /* Placer l'élément par rapport à son parent et hors du flux. */\r\n\tleft: 0;\r\n\tdisplay: none; /* Cacher l'élément. */\r\n\tz-index: 7;\r\n\tmargin-left: 0;\r\n\tbackground-color: #cccccc;\r\n}\r\n\r\n/** Utilisation de :hover pour afficher les sous-liens au survol de la souris. **/\r\n.menu div:hover ul {\r\n\tdisplay: block;\r\n}\r\n\r\n.menu li {\r\n\tlist-style: none;\r\n}\r\n</pre>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Aperçu</div>\r\n\t<div class=\"content\">\r\n\t\t<nav class=\"ex-menu-1\">\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t</div>\r\n</div>\r\n\r\n<h3>Un peu d'animation au survol souris avec transition:</h3>\r\n\r\n<p>Il faut faire attention avec la <span class=\"eye-catching\">propriété</span> <span class=\"highlighting\">transition:</span> CSS3. Cette propriété est triviale pour de l'animation au survol de la souris sur un élément pour changer sa propre apparence et se passer de JavaScript. Cependant, dans le cas de l'exemple précédent, ou le hover modifie l'apparence d'un autre élément que celui survolé, il faut garder à l'esprit plusieurs choses :</p>\r\n\r\n<ul>\r\n\t<li>La transition sera bloquée si l'objet passe de <span class=\"eye-catching\">display: none;</span> vers un autre affichage.</li>\r\n\t<li>La transition ne fonctionnera pas vers une valeur automatique (<span class=\"eye-catching\">height: auto;</span>).</li>\r\n\t<li>La transition ne fonctionnera pas sans ses préfixes propriétaires (-webkit-, -o-, -moz-...) à ce jour.</li>\r\n</ul>\r\n\r\n<p>Modifions la CSS du code précédent pour prendre en compte ces remarques. Il va falloir cacher le menu sans utiliser <span class=\"eye-catching\">display: none;</span>. On va faire appel à <span class=\"highlighting\">heigh:</span> et <span class=\"highlighting\">overflow:</span></p>\r\n\r\n<pre class=\"prettyprint linenums lang-css\">\r\n/*** ... ***/\r\n\r\n.menu div ul {\r\n\t/*** ... ***/\r\n\r\n\t/* display: none; &lt;= On retire display: none;. */\r\n\r\n\t/*** ... ***/\r\n\r\n\t/** On simule le display: none; d'une autre façon. **/\r\n\theight: 0;\r\n\tpadding: 0;\r\n\toverflow: hidden;\r\n\r\n\t/** Au survol de l'élément, on changera sa hauteur avec transition pendant 0.5s. **/\r\n\ttransition: height 0.5s; /* Ajouter -webkit-, -o-, etc... */\r\n}\r\n\r\n.menu div:hover ul {\r\n\t/* display: block; &lt;= Plus besoin de display:block;. */\r\n\theight: 80px; /* Obligation de forcer la valeur de la propriété de transition sur autre que auto. */\r\n}\r\n\r\n/*** ... ***/\r\n\r\n/** On remplace la perte padding de &lt;ul&gt; par des marges sur les &lt;li&gt;. **/\r\n.menu li {\r\n\tmargin: 0 8px 0 8px;\r\n}\r\n.menu li:first-child {\r\n\tmargin-top: 8px;\r\n}\r\n.menu li:last-child {\r\n\tmargin-bottom: 8px;\r\n}\r\n</pre>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Aperçu</div>\r\n\t<div class=\"content\">\r\n\t\t<nav class=\"ex-menu-2\">\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t</div>\r\n</div>\r\n\r\n<p class=\"eye-catching\">On note un changement pour le troisième élément &lt;ul&gt; puisque sa hauteur a été imposée. Il faudrait donc régler toutes les hauteurs en fonction du nombre d'élément &lt;i&gt; (pas très pratique...).</p>\r\n\r\n<h2>Animation et survol avec JavaScript et jQuery</h2>\r\n\r\n<p>Nous allons voir ici comment produire l'effet CSS3 précédent en JavaScript avec la librairie jQuery. Cela permettra aux navigateurs ne supportant pas la <span class=\"eye-catching\">propriété</span> CSS3 <span class=\"highlighting\">transition:</span> de tout de même afficher cette animation. Nous allons dans un premier temps conserver la CSS précédente, mais couper la transition CSS3.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-css\">\r\n/*** ... ***/\r\n\r\n.menu div ul {\r\n\t/*** ... ***/\r\n\r\n\t/* transition: height 0.5s; &lt;= Sera géré en JavaScript. */\r\n}\r\n\r\n.menu div:hover ul {\r\n\t/* height: 80px; &lt;= Peut repasser en automatique. */\r\n\theight: auto;\r\n}\r\n\r\n/*** ... ***/\r\n</pre>\r\n\r\n<h3>Equivalence simple</h3>\r\n\r\n<p>C'est parti pour un code JavaScript équivalent à <span class=\"highlighting\">transition:</span>. N'oubliez pas d'inclure jQuery.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n$(document).ready(function () { // Si le script n'est pas en pied de page, on va attendre le chargement complet du DOM.\r\n\r\n\t/* Pour chacune des 3 &lt;div&gt; du menu, on va... */\r\n\t$(\".menu div\").each(function () {\r\n\t\tvar $ul = $(this).find(\"ul\"); // ...rendre accessible les variables dans les deux parties de hover...\r\n\r\n\t\t/* ...et initialiser un comportement au passage/retrait de la souris. */\r\n\t\t$(this).hover(function () {\r\n\t\t\t/* Pour le survol on... */\r\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height(); // ...garde en mémoire la taille réelle de &lt;ul&gt; si affichée...\r\n\t\t\t$ul\r\n\t\t\t\t.height(0) // ...repart d'une hauteur de zéro...\r\n\t\t\t\t.stop() // ...stop l'éventuelle animation de fermeture...\r\n\t\t\t\t.animate({ height: tempHeight.toString() }, 500); // ...et on déclenche l'animation d'ouverture.\r\n\t\t}, function () {\r\n\t\t\t/* Pour le retrait on... */\r\n\t\t\t$ul\r\n\t\t\t\t.stop() // ...stop l'éventuelle animation d'ouverture...\r\n\t\t\t\t.animate({ height: \"0\" }, 500); // ...et on déclenche l'animation de fermeture.\r\n\t\t});\r\n\t});\r\n});\r\n</pre>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Aperçu</div>\r\n\t<div class=\"content\">\r\n\t\t<nav class=\"ex-menu-3\">\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t</div>\r\n</div>\r\n\r\n<h3>Effectuer l'animation avec plus de condition qu'un simple survol</h3>\r\n\r\n<p>Afin d'éviter l'ouverture intempestive de votre menu au passage de la souris au-dessus de celui-ci vous avez plusieurs alternatives qui s'offrent à vous. Je vais en fournir deux ici, mais libre à vous de trouver d'autres solutions.</p>\r\n\r\n<h4>N'effectuer le hover que si la souris reste plus d'un certain temps</h4>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n$(document).ready(function () {\r\n\t$(\".menu div\").each(function () {\r\n\t\tvar \r\n\t\t\t$ul = $(this).find(\"ul\"),\r\n\t\t\ttempTimer; // On crée une variable pour manipuler le délai dans les deux parties du hover.\r\n\r\n\t\t$(this).hover(function () {\r\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t\t$ul.height(0);\r\n\t\t\ttempTimer = setTimeout(function () { // On déclenche l'animation avec un temps de latence.\r\n\t\t\t\t$ul\r\n\t\t\t\t\t.stop()\r\n\t\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t\t}, 1000); // On règle l'équivalence que l'on juge adapté. J'ai mis 1 seconde pour l'exemple.\r\n\t\t}, function () {\r\n\t\t\tclearTimeout(tempTimer); // Si on sort avant la fin du délai, on n'effectuera pas l'animation.\r\n\t\t\t$ul\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: \"0\" }, 500);\r\n\t\t});\r\n\t});\r\n});\r\n</pre>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Aperçu</div>\r\n\t<div class=\"content\">\r\n\t\t<nav class=\"ex-menu-4\">\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t</div>\r\n</div>\r\n\r\n<p class=\"eye-catching\">En passant rapidement la souris, on ne risque pas de déclencher d'ouverture. J'ai excessivement exagéré le délai à une seconde pour le mettre en évidence.</p>\r\n\r\n<h4>N'effectuer le hover que si la souris ne bouge plus</h4>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n$(document).ready(function () {\r\n\r\n\t/** On permet d'accéder aux valeurs réelles de la souris à tout moment avec :\r\n\t\tpour x : $(\".menu div\").data(\"x\"), \r\n\t\tpour y : $(\".menu div\").data(\"y\"). **/\r\n\t$(\".menu div\").mousemove(function (e) {\r\n\t\t$.data(this, \"x\", e.pageX); // On met a jour la souris en x.\r\n\t\t$.data(this, \"y\", e.pageY); // On met a jour la souris en y.\r\n\t}).data(\"x\", 0).data(\"y\", 0) // On initialise les valeurs.\r\n\t.each(function () {\r\n\t\tvar\r\n\t\t\t$this = $(this),\r\n\t\t\t$ul = $this.find(\"ul\"),\r\n\t\t\ttempTimer, tempX, tempY; // Variables accessibles dans les deux parties de hover.\r\n \r\n\t\t$this.hover(function () {\r\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t\t$ul.height(0);\r\n\t\t\ttempTimer = setInterval(function () { // On vérifie à intervalle régulier...\r\n\t\t\t\tif (tempX == $this.data(\"x\") && tempY == $this.data(\"y\")) { // ...si la souris ne bouge plus.\r\n\t\t\t\t\tclearInterval(tempTimer); // Alors on arrête la vérification et on ouvre le menu.\r\n\t\t\t\t\t$ul\r\n\t\t\t\t\t\t.stop()\r\n\t\t\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t\t\t}\r\n\t\t\t\ttempX = $this.data(\"x\"); // Noter la précédente position en x de la souris.\r\n\t\t\t\ttempY = $this.data(\"y\"); // Noter la précédente position en y de la souris.\r\n\t\t\t}, 50); // Temps entre chaque vérification de position.\r\n\t\t}, function () {\r\n\t\t\tclearInterval(tempTimer); // Si on quitte l'objet, on arrête également la vérification.\r\n\t\t\t$ul\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: \"0\" }, 500);\r\n\t\t});\r\n\t});\r\n});\r\n</pre>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Aperçu</div>\r\n\t<div class=\"content\">\r\n\t\t<nav class=\"ex-menu-5\">\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Navigateurs</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Chrome</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Firefox</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">IE</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">OS</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Windows</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Linux</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Mac</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<a href=\"\" title=\"\">Appareils</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">PC/MAC</a></li>\r\n\t\t\t\t\t<li><a href=\"\" title=\"\">Smartphone</a></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t</div>\r\n</div>\r\n\r\n<p class=\"eye-catching\">Tant que votre souris sera en mouvement sur le menu, le menu ne se dépliera pas. On peut également remplacer l'égalité stricte par une fourchette de valeur afin d'élargir ce que l'on considère comme une souris fixe.</p>\r\n\r\n<h4>D'autres techniques</h4>\r\n\r\n<p>Si vous aussi vous avez des tips d'utilisation du survol souris n'hésitez pas à les partager en commentaire.</p>", "dates" : { "published" : "2013-03-21 18:06:00", "updated" : [ "2013-03-21 18:06:00" ] }, "script" : "$(document).ready(function () {\r\n\t$(\".ex-menu-3 div\").each(function () {\r\n\t\tvar $ul = $(this).find(\"ul\");\r\n\t\t$(this).hover(function (e) {\r\n\t\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t\t$ul\r\n\t\t\t\t.height(0)\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t}, function () {\r\n\t\t\t$ul\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: \"0\" }, 500);\r\n\t\t});\r\n\t});\r\n});\r\n\r\n$(\".ex-menu-4 div\").each(function () {\r\n\tvar \r\n\t\t$ul = $(this).find(\"ul\"),\r\n\t\ttempTimer; \r\n\r\n\t$(this).hover(function () {\r\n\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t$ul.height(0);\r\n\t\ttempTimer = setTimeout(function () {\r\n\t\t\t$ul\r\n\t\t\t\t.stop()\r\n\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t}, 1000);\r\n\t}, function () {\r\n\t\tclearTimeout(tempTimer);\r\n\t\t$ul\r\n\t\t\t.stop()\r\n\t\t\t.animate({ height: \"0\" }, 500);\r\n\t});\r\n});\r\n\r\n$(\".ex-menu-5 div\").mousemove(function (e) {\r\n\t$.data(this, \"x\", e.pageX);\r\n\t$.data(this, \"y\", e.pageY);\r\n}).data(\"x\", 0).data(\"y\", 0)\r\n.each(function () {\r\n\tvar\r\n\t\t$this = $(this),\r\n\t\t$ul = $this.find(\"ul\"),\r\n\t\ttempTimer, tempX, tempY;\r\n\r\n\t$this.hover(function () {\r\n\t\tvar tempHeight = $ul.css(\"height\", \"auto\").height();\r\n\t\t$ul.height(0);\r\n\t\ttempTimer = setInterval(function () {\r\n\t\t\tif (tempX == $this.data(\"x\") && tempY == $this.data(\"y\")) {\r\n\t\t\t\tclearInterval(tempTimer);\r\n\t\t\t\t$ul\r\n\t\t\t\t\t.stop()\r\n\t\t\t\t\t.animate({ height: tempHeight.toString() }, 500);\r\n\t\t\t}\r\n\t\t\ttempX = $this.data(\"x\");\r\n\t\t\ttempY = $this.data(\"y\");\r\n\t\t}, 50);\r\n\t}, function () {\r\n\t\tclearInterval(tempTimer);\r\n\t\t$ul\r\n\t\t\t.stop()\r\n\t\t\t.animate({ height: \"0\" }, 500);\r\n\t});\r\n});", "style" : ".ex-menu-1 div:nth-child(1),\r\n.ex-menu-2 div:nth-child(1),\r\n.ex-menu-4 div:nth-child(1),\r\n.ex-menu-5 div:nth-child(1),\r\n.ex-menu-3 div:nth-child(1) {\r\n\tborder-top-left-radius: 8px;\r\n\tborder-bottom-left-radius: 8px;\r\n}\r\n.ex-menu-1 div:last-child,\r\n.ex-menu-2 div:last-child,\r\n.ex-menu-4 div:last-child,\r\n.ex-menu-5 div:last-child,\r\n.ex-menu-3 div:last-child {\r\n\tborder-top-right-radius: 8px;\r\n\tborder-bottom-right-radius: 8px;\r\n}\r\n.ex-menu-1:after,\r\n.ex-menu-2:after,\r\n.ex-menu-4:after,\r\n.ex-menu-5:after,\r\n.ex-menu-3:after {\r\n\tcontent: \"\";\r\n\tdisplay: block;\r\n\tclear: left;\r\n}\r\n.ex-menu-1 div,\r\n.ex-menu-2 div,\r\n.ex-menu-4 div,\r\n.ex-menu-5 div,\r\n.ex-menu-3 div {\r\n\tbackground-color: #bbbbbb;\r\n\tbackground: -webkit-linear-gradient(top, #dddddd, #bbbbbb);\r\n\tbackground: -o-linear-gradient(top, #dddddd, #bbbbbb);\r\n\tbackground: -moz-linear-gradient(top, #dddddd, #bbbbbb);\r\n\tbackground: linear-gradient(to bottom, #dddddd, #bbbbbb);\r\n\tpadding: 8px;\r\n\tfloat: left;\r\n\tposition: relative;\r\n}\r\n.ex-menu-1 div ul,\r\n.ex-menu-2 div ul,\r\n.ex-menu-4 div ul,\r\n.ex-menu-5 div ul,\r\n.ex-menu-3 div ul {\r\n\tmargin-left: 0;\r\n\tbackground-color: #cccccc;\r\n\r\n\tdisplay: none;\r\n\tposition: absolute;\r\n\tz-index: 7;\r\n\tleft: 0;\r\n}\r\n.ex-menu-1 div:hover ul,\r\n.ex-menu-2 div:hover ul,\r\n.ex-menu-4 div:hover ul,\r\n.ex-menu-5 div:hover ul,\r\n.ex-menu-3 div:hover ul {\r\n\tdisplay: block;\r\n}\r\n.ex-menu-2 div ul,\r\n.ex-menu-4 div ul,\r\n.ex-menu-5 div ul,\r\n.ex-menu-3 div ul {\r\n\tpadding: 0;\r\n\tdisplay: block;\r\n\theight: 0;\r\n\toverflow: hidden;\r\n}\r\n.ex-menu-2 div ul {\r\n\t-webkit-transition: height 0.5s;\r\n\t-moz-transition: height 0.5s;\r\n\t-o-transition: height 0.5s;\r\n\ttransition: height 0.5s;\r\n}\r\n.ex-menu-2 div:hover ul {\r\n\theight: 80px;\r\n}\r\n.ex-menu-3 div:hover ul,\r\n.ex-menu-5 div:hover ul,\r\n.ex-menu-4 div:hover ul {\r\n\theight: auto;\r\n}\r\n.ex-menu-1 li,\r\n.ex-menu-2 li,\r\n.ex-menu-4 li,\r\n.ex-menu-5 li,\r\n.ex-menu-3 li {\r\n\tlist-style: none;\r\n}\r\n.ex-menu-2 li,\r\n.ex-menu-4 li,\r\n.ex-menu-5 li,\r\n.ex-menu-3 li {\r\n\tmargin: 0 8px 0 8px;\r\n}\r\n.ex-menu-2 li:first-child,\r\n.ex-menu-4 li:first-child,\r\n.ex-menu-5 li:first-child,\r\n.ex-menu-3 li:first-child {\r\n\tmargin-top: 8px;\r\n}\r\n.ex-menu-2 li:last-child,\r\n.ex-menu-4 li:last-child,\r\n.ex-menu-5 li:last-child,\r\n.ex-menu-3 li:last-child {\r\n\tmargin-bottom: 8px;\r\n}", "title" : "L'<span>animation</span> et le <span>survol</span> <span>souris</span> avec <span>CSS3</span> ou <span>jQuery</span>", "urn" : "gerer-l-animation-et-le-survol-souris-avec-jquery" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a4" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48c4" }, { "$oid" : "5310456355dfd5f7698d48bc" } ], "content" : "Vous connaissez tous l'instruction `switch` en _JavaScript_ ; c'est une bonne alternative à la suite d'instruction `if, else if, else if, else if... else` dans le cas de choix multiples. Et si vous vous en débarrassiez pour quelque chose de plus ~~simple~~ concis ?\n\n\n\n\n\n## Les cas d'école ##\n\n\n\n\n### if, else if, encore else if, toujours else if... et else ###\n\nTout d'abord, rappelons la façon la plus ~~simple~~ connue de faire un choix parmi plusieurs valeurs :\n\n```javascript\n// On a la variable \"character\" à tester.\n\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc.\" */;\n\nif (character === \"edward\") {\n    description = \"Edward Elric fait 1m57 + 6cm de mèche + 2 cm de talon.\";\n} else if (character === \"alphonse\") {\n    description = \"Alphonse Elric change de voix durant FMA Brotherhood.\";\n} else if (character === \"winry\") {\n    description = \"Winry Rockbell est secrètement amoureuse de R2D2.\";\n} else {\n    description = \"Y a pas mal de personnage.\";\n}\n\n// On récupère la valeur de description.\n```\n\n\n\n\n### Tu as trop de choix, utilise un Switch ! ###\n\nAvec l'instruction `switch`, on peut également produire le même résultat. Et oui, paraît que c'est plus rapide, ça utilise moins de caractères (346 au lieu de 352 !), c'est mieux de faire ça (on me l'a dit), ça sauve plus de chatons prématurés, bref c'est formidable !\n\n```javascript\n// On a encore la variable \"character\" à tester.\n\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */;\n\nswitch (character) {\n    case \"edward\":\n        description = \"Edward Elric fait 1m57 + 6cm de mèche + 2 cm de talon.\";\n        break;\n    case \"alphonse\":\n        description = \"Alphonse Elric change de voix durant FMA Brotherhood.\";\n        break;\n    case \"winry\":\n        description = \"Winry Rockbell est secrètement amoureuse de R2D2.\";\n        break;\n    default : \n        description = \"Y a pas mal de personnage.\";\n}\n\n// On récupère encore la valeur de description.\n```\n\n_Simplement, il y a quelques petites choses qui m'ennuient avec le `switch`_. Non pas que ce soit une mauvaise idée de l'utiliser, mais j'ai du mal avec sa syntaxe (bien que je m'y sois fait) et oublier le mot clé `break` vous envoie droit au bûché. C'est vrai, dans la majorité des cas il est nécessaire : alors ça aurait été sympa qu'il soit implicite, quitte à utiliser un mot-clé pour simuler le fonctionnement d'un `switch` sans `break`.</p>\n\n\n\n\n\n## Ce problème fait l'Objet d'une astuce ##\n\n\n\n\n#### L'alternative au Switch, (et au If) ? ####\n\nLes deux cas ci-dessus peuvent être remplacés élégamment par un parcourt de valeur dans un **litérale JSON** ! Voyez plutôt :\n\n```javascript\n// On a toujours la variable \"character\" à tester.\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */, \n    descriptions;\n\n/* J'associe à une clé, une valeur. Une sorte de dictionnaire. */\ndescriptions = {\n    \"edward\" : \"Edward Elric fait 1m57 + 6cm de mèche + 2 cm de talon.\",\n    \"alphonse\" : \"Alphonse Elric change de voix durant FMA Brotherhood.\",\n    \"winry\" : \"Winry Rockbell est secrètement amoureuse de R2D2.\",\n    \"other\" : \"Y a pas mal de personnage.\"\n}\n\n/* Je cherche la valeur clé dans mon dictionnaire. Si elle n'est pas trouvé,\n'descriptions[character]' renvoi 'undefinded' qui est testé comme 'false' et on prend alors la valeur par défaut 'other'. */\ndescription = descriptions[character] || descriptions[\"other\"];\n\n// On récupère toujours la valeur de description.\n```\n\nCela a l'avantage de séparer la logique (dernière ligne), des données (l'objet JSON) ; ce qui n'est pas le cas de nos précédents exemples.\n\n\n\n\n### Et pour plusieurs instructions ? ###\n\nRien ne vous empêche de vous créer ce genre de \"Switch\" avec un Objet qui fait un calcule avant retour :\n\n```javascript\n// On a toujours la variable \"character\" à tester.\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */, \n    descriptions;\n\ndescriptions = {\n    \"edward\" : function () {\n        // Trucs un peu plus conséquents.\n        return; // Le résultat. \n    },\n    \"alphonse\" : function () {\n        // Trucs un peu plus conséquents.\n        return; // Le résultat. \n    },\n    \"winry\" : function () {\n        // Trucs un peu plus conséquents.\n        return; // Le résultat. \n    },\n    \"other\" : function () {\n        // Trucs un peu plus conséquents.\n        return; // Le résultat. \n    }\n}\n\n// On choisit le bon calcul/résultat à obtenir.\ndescription = descriptions[character] || descriptions[\"other\"];\n\n// Et on l'exécute.\ndescription();\n```\n\nVous pouvez également préparer des traitements différents en fonction de la variable.\n\n```javascript\n// On a toujours la variable \"character\" à tester.\nvar description /* = \"Information obtenue d'une input, d'une variable GET/POST ou d'un cookie etc...\" */, \n    descriptions = {};\n\ndescriptions[\"edward\"] = function () {\n    // Traitement de controle ici.\n};\n\ndescriptions[\"winry\"] = function () {\n    // Traitement de controle ici.\n};\n\ndescriptions[\"edward\"] = function () {\n    // Traitement de controle ici.\n};\n\ndescriptions[\"other\"] = function () {\n    // Traitement de controle ici.\n};\n\n// On choisit la bonne fonction à exécuter.\ndescription = descriptions[character] || descriptions[\"other\"];\n\n// Et on l'exécute.\ndescription();\n```\n\n\n\n\n\n## Le(s) mot(s) de la fin ##\n\nJe ne me risquerais pas à dire que c'est une bonne pratique, mais c'est au moins une bonne astuce que j'utilise régulièrement. Qu'en pensez vous ?", "dates" : { "published" : { "$date" : 1364035440000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Une <span>alternative</span> au <span>Switch</span>, c'est possible en <span>JavaScript</span>", "urn" : "une-alternative-au-switch-c-est-possible-en-javascript" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a5" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "Savez-vous qu'en _HTML5_, l'attribut `lang` (équivalent _xHTML_ de `xml:lang`) peut être placé dans n'importe quelles balises de la page. Il définit alors dans quelle langue doit être interprétée la portion de code dans cette balise et ses enfants. Cet attribut fonctionne de paire avec la pseudo-class `:lang()` que l'on retrouve en _CSS3_.\n\nNous allons mettre en avant ces deux amis le temps d'un article et le temps de comprendre à quel point ils s'entendent bien.\n\n\n\n\n\n## L'attribut `lang` en HTML5 ##\n\nAbordons en premier lieu l'utilisation de l'attribut `lang` en [HTML5 telle que décrite par le W3C] simple coup d'œil à la page minimale de tous documents _HTML5_. Voyons plutôt :\n\n [HTML5 telle que décrite par le W3C]: http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#the-lang-and-xml:lang-attributes (L'attribut HTML5 lang tel que décrit par le W3C)\n\n\n\n### Exemple de sémantique d'une page HTML5 ###\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Document HTML5 de base</title>\n    </head>\n    <body>\n        <blockquote lang=\"en\" cite=\"http://www.ffdream.com/encyclopedie-mythe_ultimecia2.html\">\n            <p>I'll be here...</p>\n            <p>Why...?</p>\n            <p>I'll be waiting...here...</p>\n            <p>For what?</p>\n            <p>I'll be waiting...for you...so...</p>\n            <p>If you come here...</p>\n            <p>You'll find me.</p>\n            <p>I promise.</p>\n        </blockquote>\n        <p>Citation de l'introduction de Final Fantasy VIII</p>\n    </body>\n</html>\n```\n\nVous l'avez remarqué, il est là, à la ligne 2, `<html lang=\"fr-fr\">`. Vous aurez probablement lu également qu'il remplace `<meta http-equiv=\"content-language\" content=\"fr-fr\" />` en _xHTML_. C'est aussi juste que c'est incorrecte. En réalité, un _http-equiv_ complète/corrige/remplace le travail d'une _entête http_. Ainsi quand une réponse du serveur web ne contient pas l'entête `Content-Language: fr-fr`, le navigateur sait quand même dans quelle langue interpréter les données (ici française). Si le document est en _HTML5_ (Le navigateur le sait grâce à `<!DOCTYPE html>`) il sait d'avance qu'il faut interpréter chaque nœud du document dans la langue indiquée par son plus proche parent ayant un attribut `lang` remplis.\n\nVous l'avez peut-être compris, en _HTML5_, on ne dit pas \"mon document est écris en français\" mais \"cette partie de mon document est écrite en française, mais celle-ci est écrite en anglaise\". C'est exactement le cas dans mon exemple précédent ; si vous regardez attentivement à la ligne 8, la balise `<blockquote>` contient un attribut `lang` \"en\" ! Par conséquent —car l'action de langue se propage sur tous les nœuds fils— toutes les balises `<p>` enfants sont également à interpréter en anglais.\n\nRien n’empêche tout de même de définir dans le _header http_ renvoyé par le serveur `Content-Language:` pour définir la langue principale du document.\n\n\n\n\n\n## La pseudo-class :lang() en CSS3 ##\n\nAbordons à présent l'utilisation de la pseudo-class `:lang()` en [CSS3 telle que décrite par le W3C]. A l'instar de `:nth-child()`, elle prend un paramètre pour fonctionner. La langue d'interprétation de l'élément cible est le paramètre en question (par exemple `:lang(fr-fr)`). Et je vous laisse deviner quel mécanisme permet à la pseudo-class de définir la langue d'interprétation du nœud ? Bingo ! L'attribut `lang` HTML5 du/des nœud(s) ciblé(s) ou de son/leur plus proche parent contenant l'attribut `lang`.</p>\n\n  [CSS3 telle que décrite par le W3C]: \"http://www.w3.org/TR/css3-selectors/#lang-pseudo\" (La pseudo-class CSS3 :lang() telle que décrite par le W3C)\n\n\n\n\n### Exemple de ciblage CSS ###\n\n<pre class=\"prettyprint linenums lang-css\">\n/* La seule phrase en rouge sera : */\n/* \"Citation de l'introduction de Final Fantasy VIII\". */\n/* Les autres phrases ne le seront pas car elles ne sont pas interprétées en français. */\np:lang(fr-fr) { \n\tcolor: #ff0000;\n}\n</pre>\n\n<p class=\"warning\">Attention : <samp>&lt;html lang=\"fr-fr\"&gt;</samp> peut être ciblée par <samp>:lang(fr)</samp> et <samp>:lang(fr-fr)</samp> mais <samp>&lt;html lang=\"fr\"&gt;</samp> ne peut être ciblée que par <samp>:lang(fr)</samp> et pas par <samp>:lang(fr-fr)</samp>.</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/* Ceci fonctionne aussi pour fr-fr ! */\np:lang(fr) { \n\tcolor: #ff0000;\n}\n</pre>\n\n<p class=\"highlighting\">A savoir : <samp>:lang()</samp> est fonctionnelle IE8+ (pour un support plus vaste vous pouvez plutôt faire appel aux classes CSS conditionnelles).</p>\n\n<p class=\"example\">C'est bien beau tout ça, mais quel intérêt ? Voyons ça plus bas.</p>\n\n<h2>Synergie des deux technologies pour du multilingue</h2>\n\n<p>Imaginons un template HTML taillé pour afficher une même page en multilingue. Un moteur de template pour PHP, ASP, Ruby, Node.js etc... transforme le template en deux pages distinctes fournis au client en fonction de la demande de la page en français ou en anglaise (avec une url différente par exemple). Il pourrait ressembler à cela :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;html lang=\"{CULTURE_COUNTRY}\"&gt;\n\n&lt;!-- ... header, body, etc... --&gt;\n\n&lt;section&gt;\n\t&lt;div class=\"languages\"&gt;\n\t\t&lt;span&gt;{OTHERS_LANGUAGES}&lt;/span&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"fr-fr\"&gt;{LANG_FRENCH}&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"en-gb\"&gt;{LANG_ENGLISH}&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"es-es\"&gt;{LANG_SPANISH}&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;form id=\"form\" method=\"post\" action=\"./\"&gt;\n\t\t&lt;header&gt;{TITLE}&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\t&lt;header&gt;{TITLE_ALLOWS}&lt;/header&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;!-- BEGIN allows --&gt;\n\t\t\t\t&lt;li&gt;{allows.ELEMENT_ALLOWS}&lt;/li&gt;\n\t\t\t\t&lt;!-- END allows --&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;footer&gt;{END_ALLOWS}&lt;/footer&gt;\n\t\t&lt;/aside&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-email\"&gt;{LABEL_EMAIL}&lt;/label&gt;\n\t\t\t&lt;input id=\"form-email\" type=\"text\" placeholder=\"{LABEL_EMAIL}\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-password\"&gt;{LABEL_PASSWORD}&lt;/label&gt;\n\t\t\t&lt;input id=\"form-password\" type=\"password\" placeholder=\"{LABEL_PASSWORD}\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label&gt;&lt;input id=\"form-submit\" type=\"submit\" value=\"{LABEL_REGISTRATION}\" /&gt;&lt;/label&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/section&gt;\n</pre>\n\n<p class=\"highlighting\">et génèrerait en français :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;html lang=\"fr-fr\"&gt;\n\n&lt;!-- ... header, body, etc... --&gt;\n\n&lt;section&gt;\n\t&lt;div class=\"languages\"&gt;\n\t\t&lt;span&gt;Autres langues&lt;/span&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"fr-fr\"&gt;Français&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"en-gb\"&gt;English&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"es-es\"&gt;Español&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;form id=\"form\" method=\"post\" action=\"./\"&gt;\n\t\t&lt;header&gt;Inscription&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\t&lt;header&gt;Notre service permet&lt;/header&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li&gt;de tchatter avec d'autres utilisateurs&lt;/li&gt;\n\t\t\t\t&lt;li&gt;de partager vos photos&lt;/li&gt;\n\t\t\t\t&lt;li&gt;de rencontrer des personnes en vrai&lt;/li&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;footer&gt;Pour le reste, vous êtes grand !&lt;/footer&gt;\n\t\t&lt;/aside&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-email\"&gt;Email&lt;/label&gt;\n\t\t\t&lt;input id=\"form-email\" type=\"text\" placeholder=\"Email\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-password\"&gt;Mot de passe&lt;/label&gt;\n\t\t\t&lt;input id=\"form-password\" type=\"password\" placeholder=\"Mot de passe\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label&gt;&lt;input id=\"form-submit\" type=\"submit\" value=\"Inscription\" /&gt;&lt;/label&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/section&gt;\n</pre>\n\n<p class=\"highlighting\">et génèrerait en anglais :</p>\n\n<pre class=\"prettyprint linenums lang-html\">\n&lt;html lang=\"en-gb\"&gt;\n\n&lt;!-- ... header, body, etc... --&gt;\n\n&lt;section&gt;\n\t&lt;div class=\"languages\"&gt;\n\t\t&lt;span&gt;Others languages&lt;/span&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"fr-fr\"&gt;Français&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"en-gb\"&gt;English&lt;/a&gt;\n\t\t&lt;a href=\"\" title=\"\" lang=\"es-es\"&gt;Español&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;form id=\"form\" method=\"post\" action=\"./\"&gt;\n\t\t&lt;header&gt;Registration&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\t&lt;header&gt;Our service allows you&lt;/header&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li&gt;to chat with other users&lt;/li&gt;\n\t\t\t\t&lt;li&gt;to share your photos&lt;/li&gt;\n\t\t\t\t&lt;li&gt;to meet people in real life&lt;/li&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;footer&gt;It's your ride now!&lt;/footer&gt;\n\t\t&lt;/aside&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-email\"&gt;Email&lt;/label&gt;\n\t\t\t&lt;input id=\"form-email\" type=\"text\" placeholder=\"Email\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label for=\"form-password\"&gt;Password&lt;/label&gt;\n\t\t\t&lt;input id=\"form-password\" type=\"password\" placeholder=\"Password\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;div class=\"field\"&gt;\n\t\t\t&lt;label&gt;&lt;input id=\"form-submit\" type=\"submit\" value=\"Registration\" /&gt;&lt;/label&gt;\n\t\t&lt;/div&gt;\n\t&lt;/form&gt;\n&lt;/section&gt;\n</pre>\n\n<h3>Premier exemple : habillage deux colonnes</h3>\n\n<p>Habillons le code précédent avec la CSS suivante, je vous invite à lire attentivement la partie <span class=\"highlighting\">Partie langues et ponctuation</span> :</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/********************************/\n/** Partie design et placement **/\n/********************************/\n\n/* Les langues en haut à droite. */\nsection .languages {\n\tfloat: right;\n\tfont-size: 0.8em;\n}\n\n/* Pas de flottants qui dépassent du formulaire. */\nsection form:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: both;\n}\n\n/* Mise du titre en avant. */\nsection > header {\n\tfont-size: 1.5em;\n\tborder-bottom: dashed 1px #cccccc;\n}\n\n/* Les informations accompagnant le formulaire à droite. */\nsection aside {\n\tfloat: right;\n\tpadding: 6px 6px 6px 16px;\n\twidth: 55%;\n\tbox-sizing: border-box;\n\t-moz-box-sizing: border-box;\n}\n\n/* Homogénéité des tailles pour les labels. */\nsection label {\n\tdisplay: inline-block;\n\twidth: 100px;\n\tbox-sizing: border-box;\n\t-moz-box-sizing: border-box;\n}\n\n/* Alignement et espacement des champs. */\nsection .field {\n\tpadding: 16px 16px 0 8px;\n\twidth: 45%;\n\tbox-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\ttext-align: right;\n}\n\n/***********************************/\n/** Partie langues et ponctuation **/\n/***********************************/\n\n/* lang(fr) cible l'élément que si lui-même ou l'un de ses parents contient lang=\"fr\" ou lang=\"fr-*\", */\n/* contrairement à [lang=fr-fr] qui ne cible l'élément que s'il a un attribut lang. */\nsection:lang(fr) a[lang=fr-fr]:after { \n\tcontent: \" -\"; /* Ajout d'un tiret après le français en français. */\n}\nsection:lang(en) a[lang=en-gb]:after {\n\tcontent: \" -\"; /* Ajout d'un tiret après l'anglais en anglais. */\n}\n\n/* Après {OTHERS_LANGUAGES}, en français un espace sépare les \":\" du texte, et pas en anglais. */\nsection .languages span:lang(fr):after {\n\tcontent: \" :\";\n}\nsection .languages span:lang(en):after {\n\tcontent: \":\";\n}\n\n/* On cache le lien de changement vers la langue courante, utiliser :lang() sur \".lang\" ou \"section\" revient au même, */\n/* les balises héritent toutes deux de l'attribut lang de la balise &lt;html&gt;. */\nsection .languages:lang(fr) a[lang=fr-fr] {\n\tdisplay: none;\n}\nsection .languages:lang(en) a[lang=en-gb] {\n\tdisplay: none;\n}\n\n/* Deux points après le {OTHERS_LANGUAGES} et chaque label pour cet exemple : */\n/* en français, */\nsection aside header:lang(fr):after,\nsection label:lang(fr):after {\n\tcontent: \" :\";\n}\n/* en anglais, */\nsection aside header:lang(en):after,\nsection label:lang(en):after {\n\tcontent: \":\";\n}\n/* mais pas de tiret après le bouton de validation. */\nsection label:last-child:after {\n\tcontent: \"\";\n}\n/* Une virgule après chaque item de la liste. */\n/* Sauf pour le dernier qui a un point. */\nsection li:after {\n\tcontent: \",\";\n}\nsection li:last-child:after {\n\tcontent: \".\";\n}\n</pre>\n\n<p>Ce qui nous donne en français puis en anglais :</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 1 en Français</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-1\" lang=\"fr-fr\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Autres langues</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-fr-1\">\n\t\t\t\t<div class=\"subscribe\">Inscription</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Notre service permet</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>de tchatter avec d'autres utilisateurs</li>\n\t\t\t\t\t\t<li>de partager vos photos</li>\n\t\t\t\t\t\t<li>de rencontrer des personnes en vrai</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">Pour le reste, vous êtes grand !</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-email-1\">Email</label>\n\t\t\t\t\t<input id=\"form-fr-email-1\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-password-1\">Mot de passe</label>\n\t\t\t\t\t<input id=\"form-fr-password-1\" type=\"password\" placeholder=\"Mot de passe\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-fr-submit-1\" type=\"button\" value=\"Inscription\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 1 en Anglais</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-1\" lang=\"en-gb\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Others languages</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-en-1\">\n\t\t\t\t<div class=\"subscribe\">Registration</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Our service allows you</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>to chat with other users</li>\n\t\t\t\t\t\t<li>to share your photos</li>\n\t\t\t\t\t\t<li>to meet people in real life</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">It's your ride now!</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-email-1\">Email</label>\n\t\t\t\t\t<input id=\"form-en-email-1\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-password-1\">Password</label>\n\t\t\t\t\t<input id=\"form-en-password-1\" type=\"password\" placeholder=\"Password\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-en-submit-1\" type=\"button\" value=\"Registration\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<p class=\"highlighting\">Quel intérêt de séparer quelques éléments de ponctuation des phrases elles-mêmes. Vous allez le comprendre avec le second exemple qui utilise la même structure HTML que le premier</p>\n\n<h3>Deuxième exemple : habillage en ligne</h3>\n\n<p>Changeons l'apparence précédente avec cette nouvelle CSS :</p>\n\n<pre class=\"prettyprint linenums lang-css\">\n/********************************/\n/** Partie design et placement **/\n/********************************/\n\n/* Les langues en haut à droite */\nsection .languages {\n\tfloat: right;\n\tfont-size: 0.9em;\n}\n\n/* On cache {OTHERS_LANGUAGES} */\nsection .languages span {\n\tdisplay: none;\n}\n\n/* On cache le lien de changement vers la langue courante, utiliser :lang() sur \".lang\" ou \"section\" revient au même, */\n/* les balises héritent toutes deux de l'attribut lang de la balise &lt;html&gt;. */\nsection .languages:lang(fr) a[lang=fr-fr] {\n\tdisplay: none;\n}\nsection .languages:lang(en) a[lang=en-gb] {\n\tdisplay: none;\n}\n\n/* Mise en avant du titre. */\nsection > header {\n\tfont-size: 1.2em;\n\tfont-weight: bold;\n}\n\n/* Mise en ligne d'élément nativement en block dans l'aside. */\n/* Le texte de l'aside ne sera plus en liste mais en ligne. */\nsection aside header,\nsection aside footer,\nsection ul,\nsection li {\n\tdisplay: inline;\n}\n/* On rend inexistant le &lt;ul&gt;. */\nsection ul {\n\tmargin-left: 0;\n\tpadding: 0;\n}\n/* on centre le texte */\nsection aside {\n\ttext-align: center;\n\tpadding: 16px;\n}\n\n/* Mise en ligne d'élément nativement en block dans le formulaire. */\n/* Le formulaire ne sera plus en liste mais en ligne. */\nsection .field {\n\tpadding: 8px;\n}\n\n/***********************************/\n/** Partie langues et ponctuation **/\n/***********************************/\n\n/* lang(fr) cible l'élément que si lui même ou l'un de ses parents contient lang=\"fr\" ou lang=\"fr-*\", */\n/* contrairement à [lang=fr-fr] qui ne cible l'élément que s'il a un attribut lang. */\nsection:lang(fr) a[lang=fr-fr]:after { \n\tcontent: \" |\"; /* Ajout d'un pipe après le français en français. */\n}\nsection:lang(en) a[lang=en-gb]:after {\n\tcontent: \" |\"; /* Ajout d'un pipe après l'anglais en anglais. */\n}\n\n/* On décide, car la liste n'est plus qu'une phrase, de l'entourer de guillemets. */\nsection aside header:lang(fr):before {\n\tcontent: \"« \";\n}\nsection aside footer:lang(fr):after {\n\tcontent: \" »\";\n}\nsection aside header:lang(en):before {\n\tcontent: \"“\";\n}\nsection aside footer:lang(en):after {\n\tcontent: \"”\";\n}\n\n/* Ponctuation de la liste devenue une phrase. */\nsection li:after {\n\tcontent: \", \"; /* Chaque item est séparé par une virgule */\n}\nsection li:nth-last-child(2):lang(fr):after {\n\tcontent: \" et \"; /* Mais l'avant dernier, en français, par un \"et\" */\n}\nsection li:nth-last-child(2):lang(en):after {\n\tcontent: \" and \"; /* Alors qu'en anglais, se sera par un \"and\" */\n}\nsection li:last-child:after {\n\tcontent: \".\"; /* Finalement, on remplace la virgule finale par un point. */ \n}\n</pre>\n\n<p>Ce qui nous donne en français puis en anglais :</p>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 2 en Français</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-2\" lang=\"fr-fr\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Autres langues</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-fr-2\">\n\t\t\t\t<div class=\"subscribe\">Inscription</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Notre service permet</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>de tchatter avec d'autres utilisateurs</li>\n\t\t\t\t\t\t<li>de partager vos photos</li>\n\t\t\t\t\t\t<li>de rencontrer des personnes en vrai</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">Pour le reste, vous êtes grand !</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-email-2\">Email</label>\n\t\t\t\t\t<input id=\"form-fr-email-2\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-fr-password-2\">Mot de passe</label>\n\t\t\t\t\t<input id=\"form-fr-password-2\" type=\"password\" placeholder=\"Mot de passe\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-fr-submit-2\" type=\"button\" value=\"Inscription\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<div class=\"best-practice\">\n\t<div class=\"title\">Exemple 2 en Anglais</div>\n\t<div class=\"content\">\n\t\t<section class=\"example-2\" lang=\"en-gb\">\n\t\t\t<div class=\"lang\">\n\t\t\t\t<span>Others languages</span>\n\t\t\t\t<span class=\"a fr-fr\">Français</span>\n\t\t\t\t<span class=\"a en-gb\">English</span>\n\t\t\t\t<span class=\"a es-es\">Español</span>\n\t\t\t</div>\n\t\t\t<form id=\"form-en-2\">\n\t\t\t\t<div class=\"subscribe\">Registration</div>\n\t\t\t\t<div class=\"aside\">\n\t\t\t\t\t<div class=\"header\">Our service allows you</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>to chat with other users</li>\n\t\t\t\t\t\t<li>to share your photos</li>\n\t\t\t\t\t\t<li>to meet people in real life</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"footer\">It's your ride now!</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-email-2\">Email</label>\n\t\t\t\t\t<input id=\"form-en-email-2\" type=\"text\" placeholder=\"Email\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"form-en-password-2\">Password</label>\n\t\t\t\t\t<input id=\"form-en-password-2\" type=\"password\" placeholder=\"Password\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label><input id=\"form-en-submit-2\" type=\"button\" value=\"Registration\" /></label>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</section>\n\t</div>\n</div>\n\n<h2>De l'utilisation de lang et lang</h2>\n\n<p>Je viens de vous présenter l'une des possibilités offertes par l'attribut <samp>lang</samp> et la pseudo-class <samp>:lang()</samp>. Cet article n'a pas pour but de dire si la déportation de certains éléments de ponctuations dans une CSS est une bonne ou une mauvaise pratique, mais plutôt de présenter nos deux éléments à travers un exemple concret et surtout de les découvrir pour ceux qui ne les connaissaient pas. Il ne vous aura peut-être pas échappé non plus que l'utilisation de la technique des classes CSS conditionnelles peut remplacer ce mécanisme natif.</p>", "dates" : { "published" : { "$date" : 1364297460000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "style" : ".example-1 .lang {\r\n\tfloat: right;\r\n\tfont-size: 0.8em;\r\n}\r\n.example-1 .a {\r\n\tcolor: #0000ff;\r\n\tcursor: pointer;\r\n}\r\n.example-1 .a:hover {\r\n\tcolor: #ff0000;\r\n}\r\n.example-1 form:after {\r\n\tcontent: \"\";\r\n\tdisplay: block;\r\n\tclear: both;\r\n}\r\n.example-1 .subscribe {\r\n\tfont-size: 1.5em;\r\n\tborder-bottom: dashed 1px #cccccc;\r\n}\r\n.example-1 .aside {\r\n\tfloat: right;\r\n\tpadding: 8px 8px 8px 16px;\r\n\twidth: 55%;\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n}\r\n.example-1 label {\r\n\tdisplay: inline-block;\r\n\twidth: 100px;\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n}\r\n.example-1 .field {\r\n\tpadding: 16px 16px 0 8px;\r\n\twidth: 45%;\r\n\tbox-sizing: border-box;\r\n\t-moz-box-sizing: border-box;\r\n\ttext-align: right;\r\n}\r\n\r\n.example-1 .lang .fr-fr:after {\r\n\tcontent: \" -\";\r\n}\r\n.example-1 .lang .en-gb:after {\r\n\tcontent: \" -\";\r\n}\r\n.example-1 .lang span:first-child:lang(fr):after {\r\n\tcontent: \" :\";\r\n}\r\n.example-1 .lang span:first-child:lang(en):after {\r\n\tcontent: \":\";\r\n}\r\n.example-1 .lang:lang(fr) .a.fr-fr {\r\n\tdisplay: none;\r\n}\r\n.example-1 .lang:lang(en) .a.en-gb {\r\n\tdisplay: none;\r\n}\r\n.example-1 .header:lang(fr):after,\r\n.example-1 label:lang(fr):after {\r\n\tcontent: \" :\";\r\n}\r\n.example-1 .header:lang(en):after,\r\n.example-1 label:lang(en):after {\r\n\tcontent: \":\";\r\n}\r\n.example-1 label:last-child:after {\r\n\tcontent: \"\";\r\n}\r\n.example-1 li:after {\r\n\tcontent: \",\";\r\n}\r\n.example-1 li:last-child:after {\r\n\tcontent: \".\";\r\n}\r\n\r\n.example-2 .lang {\r\n\tfloat: right;\r\n\tfont-size: 0.9em;\r\n}\r\n.example-2 .lang span:first-child {\r\n\tdisplay: none;\r\n}\r\n.example-2 .a {\r\n\tcolor: #0000ff;\r\n\tcursor: pointer;\r\n}\r\n.example-2 .a:hover {\r\n\tcolor: #ff0000;\r\n}\r\n.example-2 .lang:lang(fr) .a.fr-fr {\r\n\tdisplay: none;\r\n}\r\n.example-2 .lang:lang(en) .a.en-gb {\r\n\tdisplay: none;\r\n}\r\n.example-2 .subscribe {\r\n\tfont-size: 1.2em;\r\n\tfont-weight: bold;\r\n}\r\n.example-2 .header,\r\n.example-2 .footer,\r\n.example-2 ul,\r\n.example-2 li {\r\n\tdisplay: inline;\r\n}\r\n.example-2 .aside {\r\n\ttext-align: center;\r\n\tpadding: 16px;\r\n}\r\n.example-2 .field {\r\n\tdisplay: inline-block;\r\n\tpadding: 8px;\r\n}\r\n.example-2 ul {\r\n\tmargin-left: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n.example-2 .lang .fr-fr:after {\r\n\tcontent: \" |\";\r\n}\r\n.example-2 .lang .en-gb:after {\r\n\tcontent: \" |\";\r\n}\r\n.example-2 li:after {\r\n\tcontent: \", \";\r\n}\r\n.example-2 .header:lang(fr):before {\r\n\tcontent: \"« \";\r\n}\r\n.example-2 .footer:lang(fr):after {\r\n\tcontent: \" »\";\r\n}\r\n.example-2 .header:lang(en):before {\r\n\tcontent: \"“\";\r\n}\r\n.example-2 .footer:lang(en):after {\r\n\tcontent: \"”\";\r\n}\r\n.example-2 li:nth-last-child(2):lang(fr):after {\r\n\tcontent: \" et \";\r\n}\r\n.example-2 li:nth-last-child(2):lang(en):after {\r\n\tcontent: \" and \";\r\n}\r\n.example-2 li:last-child:after {\r\n\tcontent: \".\";\r\n}", "stylesheet" : "", "title" : "L'<span>attribut</span> <span>HTML5</span> <span>lang</span> et la <span>pseudo-class</span> <span>CSS3</span> :lang()", "urn" : "l-attribut-html5-lang-et-la-pseudo-class-css3-lang" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a6" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<p>La navigation interne à une page web d'un site consiste à utiliser une ancre et y faire référence pour forcer l'affichage du navigateur sur la zone en question. Penchons nous d'abord sur l'utilisation « légacy* » de ce mécanisme et ensuite sur les améliorations ergonomiques envisageables avec du JavaScript (et du jQuery).</p>\r\n\r\n<p id=\"pdefinition\" class=\"eye-catching\"><a id=\"adefinition\">*</a> tel qu'il fonctionne de manière standard depuis sa création.</p>\r\n\r\n<h2>L'ancre interprétée nativement par le navigateur</h2>\r\n\r\n<p>L'utilisation standard de la balise <samp>&lt;a&gt;</samp> est celle de permettre la navigation entre différentes pages d'un même site ou d'autre sites/ressources sur la toile.</p>\r\n\r\n<p>Une seconde utilisation —celle qui nous intéresse dans cet article— est de permettre la navigation interne à une page. Cette seconde utilisation peu grosso-modo être divisée en 3 types de lien :</p>\r\n<ul>\r\n\t<li>\r\n\t\t<span class=\"highlighting\">accès rapide</span> : on va plus loin dans la page (\"Aller au menu\", \"Aller à l'article\"...),\r\n\t</li>\r\n\t<li>\r\n\t\t<span class=\"highlighting\">navigation interne</span> : réservée pour des intéractions (\"Retour en haut de page\", \"Référence au commentaire 14\"...),\r\n\t</li>\r\n\t<li>\r\n\t\t<span class=\"highlighting\">évitement</span> : plus de détails dans l'article <a href=\"http://www.alsacreations.com/article/lire/572-Les-liens-d-evitement.html\" title=\"Les liens d'évitement - Alsacreations\">Les liens d'évitement - Alsacreations</a>.\r\n\t</li>\r\n</ul> \r\n<p>Bien que la finalité de chaque utilisation soit différente, le mécanisme de mise en place est identique.</p>\r\n\r\n<h3>La balise a et l'attribut name</h3>\r\n\r\n<p>Dans les débuts, il n'y avait qu'une façon d'atteindre une zone précise d'un document : le couple balise <samp>&lt;a&gt;</samp> et attribut <samp>name</samp>. Prenons l'exemple d'une phrase présente plus haut dans cet article et voyons comment l'ancrer de manière à y accéder par un lien.</p>\r\n\r\n<p>Pour atteindre l'ancre « adefinition » :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;a name=\"adefinition\"&gt;*&lt;/a&gt; tel qu'il fonctionne de manière standard depuis sa création.\r\n</pre>\r\n\r\n<p>On utilise le lien :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\nCliquer sur &lt;a href=\"la-navigation-interne-dans-une-page-web/#adefinition\"&gt;Atteindre&lt;/a&gt;\r\n</pre>\r\n\r\n<p><span class=\"highlighting\">Résultat :</span> Cliquer sur <a href=\"la-navigation-interne-dans-une-page-web/#adefinition\">Atteindre</a></p>\r\n\r\n<p class=\"warning\">Gardez à l'esprit qu'en xHTML ou en HTML5 l'attribut name sur la balise <samp>&lt;a&gt;</samp> est obsolète.</p>\r\n\r\n<p class=\"eye-catching\">Note : comme vous pouvez le constater dans notre exemple, la phrase est cachée par le menu. Malheureusement l'ancre ne permet pas de définir une valeur de décalage (offset). On peut facilement envisager d'ancrer un élément plus haut que la zone véritablement souhaitée pour la rendre bien lisible mais QUID de l'accessibilité et de la maintenance des ancres à posteriori.</p>\r\n\r\n<h3>L'attribut id comme ancre</h3>\r\n\r\n<p>Puis très vite les navigateurs se sont nativement affranchis de la balise <samp>&lt;a name=\"\"&gt;</samp> en permettant de cibler n'importe quel élément HTML. Pour cela —parce que l'attribut <samp>name</samp> n'est pas disponible sur toutes les balises— on utilise l'attribut <samp>id</samp> disponible sur toutes les balises.</p>\r\n\r\n<p>Pour atteindre l'ancre « pdefinition » :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;p id=\"pdefinition\" class=\"eye-catching\"&gt;\r\n\t&lt;a name=\"adefinition\"&gt;*&lt;/a&gt; tel qu'il fonctionne de manière standard depuis sa création.\r\n&lt;/p&gt;\r\n</pre>\r\n\r\n<p>On utilise le lien :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\nCliquer sur &lt;a href=\"la-navigation-interne-dans-une-page-web/#pdefinition\"&gt;Atteindre&lt;/a&gt;\r\n</pre>\r\n\r\n<p><span class=\"highlighting\">Résultat :</span> Cliquer sur <a href=\"la-navigation-interne-dans-une-page-web/#pdefinition\">Atteindre</a></p>\r\n\r\n<p class=\"eye-catching\">Note : vous remarquerez que le système natif impose d'ajouter l'ancre à l'url. Cela peut s'avérer être un avantage pour communiquer l'adresse et la position précise d'un commentaire en un seul lien cependant pour les mécanismes AJAX utilisant le détournement de l'ancre (la partie hash de l'adresse se situant après le « # ») cela est un handicape certain.</p>\r\n\r\n<h2>Les ancres HTML et le JavaScript</h2>\r\n\r\n<p>A présent voyons quelques exemples de manipulation d'ancres avec du JavaScript.</p>\r\n\r\n<h3>Décaller l'affichage de l'ancre du haut du navigateur</h3>\r\n\r\n<p>Comme noté précédemment, il serait possible de simplement placer son ancre plus haut que l'endroit réel où l'on souhaite arriver. Cependant pour des questions d'accessibilité, il vaut mieux que l'élément ancré soit réellement l'élément que l'on souhaite afficher.</p>\r\n\r\n<p>Le script JavaScript ci-dessous va vous permettre de décaler l'affichage de vos ancres :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n\t// Pour tous les liens commençant par #.\r\n\t$(\"a[href^='#']\").click(function (e) {\r\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\r\n\t\te.preventDefault(); \r\n\t\t\t\t\r\n\t\t// On ajoute le hash dans l'url.\r\n\t\twindow.location.hash = $(this).attr(\"href\");\r\n\t\t\r\n\t\t// Une fois en place on va forcer l'affichage 40 pixels plus haut.\r\n\t\t$(window).scrollTop( $(window).scrollTop() - 40 );\r\n\t});\r\n</pre>\r\n\r\n<p><span class=\"highlighting\">Exemple :</span> <a id=\"ddefinition\" href=\"#pdefinition\" title=\"Atteindre #pdefinition avec un offset de -40\">Atteindre #pdefinition avec un offset de -40</a></p>\r\n\r\n<h3>Faire défiler la page jusqu'à une ancre</h3>\r\n\r\n<p>Nous allons rajouter un effet pour surcharger le comportement de base. La page ne sautera plus du lien vers l'ancre, mais accompagnera l'utilisateur jusqu'à l'ancre ce qui lui permettra de ne pas être perdu. Il pourra ainsi appréhender où se situe la nouvelle zone dans la page courante.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n\t// Pour tous les liens commençant par #.\r\n\t$(\"a[href^='#']\").click(function (e) {\r\n\t\tvar \r\n\t\t\tyPos,\r\n\t\t\tyInitPos,\r\n\t\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\r\n\t\t\t\r\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\r\n\t\te.preventDefault(); \r\n\t\t\r\n\t\tyInitPos = $(window).scrollTop();\r\n\t\t\r\n\t\t// On ajoute le hash dans l'url.\r\n\t\twindow.location.hash = $(this).attr(\"href\");\r\n\t\t\r\n\t\t// Comme il est possible que l'ajout du hash perturbe le défilement, on va forcer le scrollTop à son endroit inital.\r\n\t\t$(window).scrollTop(yInitPos);\r\n\t\t\r\n\t\t// On cible manuellement l'ancre pour en extraire sa position.\r\n\t\t// Si c'est un ID on l'obtient.\r\n\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\r\n\r\n\t\t// Sinon on cherche l'ancre dans le name d'un a.\r\n\t\tif (target.length == 0) {\r\n\t\t\ttarget = ($(\"a[name=\" + $(this).attr(\"href\").replace(/#/gi,\"\") + \"]:first\"))\r\n\t\t}\r\n\t\t\r\n\t\t// Si on a trouvé un name ou un id, on défile.\r\n\t\tif (target.length == 1) {\r\n\t\t\tyPos = target.offset().top; // Position de l'ancre.\r\n\t\t\r\n\t\t\t// On anime le défilement jusqu'à l'ancre.\r\n\t\t\t$('html,body').animate({ scrollTop: yPos - 40 }, 1000); // On décale de 40 pixels l'affichage pour ne pas coller le bord haut de l'affichage du navigateur et on défile en 1 seconde jusqu'à l'ancre.\r\n\t\t}\r\n\t});\r\n</pre>\r\n\r\n<p><span class=\"highlighting\">Exemple :</span></p>\r\n<ul>\r\n\t<li>Sur id : <a id=\"edefinition\" href=\"#pdefinition\" title=\"Défiler juqu'à #pdefinition\">Défiler juqu'à #pdefinition</a></li>\r\n\t<li>Sur name : <a id=\"fdefinition\" href=\"#adefinition\" title=\"Défiler juqu'à #adefinition\">Défiler juqu'à #adefinition</a></li>\r\n</ul>\r\n\r\n<h4>Variante : ne pas conserver le hash dans l'url</h4>\r\n\r\n<p>Cela permet aux d'applications web avec de l'AJAX se servant du hash pour la navigation globale de ne pas perturber l'adresse. Il suffit de supprimer les lignes suivantes de l'exemple précédent :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n\t...\r\n\tyInitPos,\r\n\t...\r\n\tyInitPos = $(window).scrollTop();\r\n\twindow.location.hash = $(this).attr(\"href\");\r\n\t$(window).scrollTop(yInitPos);\r\n</pre>\r\n\r\n<h4>Variante : ne pas conserver le hash dans l'url sans défilement</h4>\r\n\r\n<p>Au cas où vous préféreriez simplement annuler l'ajout du hash, mais conserver le comportement initial (sans défilement) il suffit de remplacer la ligne :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n\t$('html,body').animate({ scrollTop: yPos - 40 }, 1000);\r\n</pre>\r\n\r\n<p>par la ligne</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n\t$(window).scrollTop(yPos - 40);\r\n</pre>\r\n\r\n<p>Quoi de plus simple :)</p>\r\n\r\n<h3>Problème d'ancre avec la balise base</h3>\r\n\r\n<p>Si vous ne la connaissez pas encore, sachez que la balise <samp>&lt;base&gt;</samp> permet de choisir la référence d'une url dans le cas d'un appel relatif à une page dans un lien. Elle est réellement pratique pour les fichiers appelés par réécriture d'url incluant donc de faux sous répertoires.</p>\r\n\r\n<h4>Résoudre un problème...</h4>\r\n\r\n<p>Voyez plutôt l'exemple :</p>\r\n\r\n<div class=\"worst-practice\">\r\n\t<div class=\"title\">Problème de chemin relatif avec réécriture d'url</div>\r\n\t<div class=\"content\">\r\n\t\t<p>Je décide de ne pas utiliser d'url absolue car mon site peut changer d'adresse racine. Je n'ai pas envie de changer tous mes liens en base de données si changement d'adresse par exemple. J'utilise donc l'url relative.</p>\r\n\t\t<p>À cette adresse <span class=\"highlighting\">http://blog.haeresis.fr/</span>, je dois inclure ma CSS comme suit :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"css/common.css\" media=\"screen\" /&gt;\r\n</pre>\r\n\t\t<p>Et à cette adresse <span class=\"highlighting\">http://blog.haeresis.fr/categories/</span>, je dois inclure ma CSS comme suit :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"../css/common.css\" media=\"screen\" /&gt;\r\n</pre>\r\n\t\t<p>Le problème intervient donc dès lors que l'inclusion de <samp>&lt;link&gt;</samp> est dans un fichier commun à toutes les pages. Avec la réécriture d'url, je n'ai aucune idée du niveau d'arborescence qui sépare mon fichier de la page courante.</p>\r\n\t</div>\r\n</div>\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Exemple de résolution avec base</div>\r\n\t<div class=\"content\">\r\n\t\t<p>Grâce à l'utilisation de <samp>&lt;base&gt;</samp> avant tous mes liens je peux définir la base de l'appel d'un fichier qui se fait initialement depuis le dossier de l'adresse courante de manière identique à toutes les pages (quel que soit le niveau d'arborescence) et ceux pour tous les liens de la page.</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;base href=\"http://blog.haeresis.fr/\" /&gt;\r\n&lt;link type=\"text/css\" rel=\"stylesheet\" href=\"css/common.css\" media=\"screen\" /&gt;\r\n</pre>\r\n\t\t<p>Cela n'empêchera pas de devoir changer la base s'il y a changement d'adresse du site. Mais le travail est alors minime et les liens relatifs enregistrés en base (ceux d'un article par exemple) marcheront partout, quel que soit la profondeur de l'adresse de l'article.</p>\r\n\t</div>\r\n</div>\r\n\r\n<h4>...peut en apporter un autre</h4>\r\n\r\n<p>Tout semble aller pour le mieux dans le meilleur des mondes ; mais revenons à notre lien <samp>&lt;a href=\"#pdefinition\"&gt;</samp>. Il pointe maintenant vers la base du site et non plus vers la page courante à cause de <samp>&lt;base&gt;</samp> ! Cela a pour effet de bord de ne pas atteindre l'ancre dans la page mais de chercher à atteindre l'ancre à l'adresse de &lt;base&gt;. Il faut alors compléter son lien pour se ré-accorder à la base du site.</p>\r\n\r\n<div class=\"worst-practice\">\r\n\t<div class=\"title\">Mise en évidence de l'effet de bord</div>\r\n\t<div class=\"content\">\r\n\t\t<p>Nous sommes à l'adresse : <span class=\"highlighting\">http://blog.haeresis.fr/la-navigation-interne-dans-une-page-web/</span></p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;head&gt;\r\n\t...\r\n\t&lt;base href=\"http://blog.haeresis.fr/\" /&gt;\r\n\t...\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\t...\r\n\t&lt;a href=\"#pdefinition\" title=\"Atteindre l'ancre\"&gt;Atteindre l'ancre&lt;a&gt; <!-- Ne marche plus car la nouvelle base n'est plus la page courante. -->\r\n\t&lt;a href=\"la-navigation-interne-dans-une-page-web/#pdefinition\" title=\"Atteindre l'ancre\"&gt;Atteindre l'ancre&lt;a&gt; <!-- Marche puisque base + a concorde avec la page courante. -->\r\n\t...\r\n&lt;/body&gt;\r\n</pre>\r\n\t\t<p><span class=\"highlighting\">Problème : </span> <a href=\"#pdefinition\" title=\"Atteindre l'ancre\">Cette ancre ne marche pas à cause de la base du site</a></p>\r\n\t</div>\r\n</div>\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Un peu de JavaScript et on oublit</div>\r\n\t<div class=\"content\">\r\n\t\t<p>Si vous voulez absolument éviter de réécrire l'url de la page courante (parce que si elle change d'adresse, le monde s'éteindra) vous pouvez remplacer :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n\t&lt;a href=\"#pdefinition\" title=\"Ancre\"&gt;Ancre&lt;a&gt;\r\n</pre>\r\n\t\t<p>par :</p>\r\n<pre class=\"prettyprint linenums lang-html\">\r\n\t&lt;a href=\"#pdefinition\" onclick=\"window.location.hash = 'pdefinition'; return false\" title=\"Ancre\"&gt;Ancre&lt;/a&gt;\r\n</pre>\r\n\t\t<p>ou automatiser le système avec jQuery :</p>\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n\t// Pour tous les liens commençant par #.\r\n\t$(\"a[href^='#']\").click(function (e) {\r\n\t\te.preventDefault(); // On annule le comportement initial.\r\n\t\twindow.location.hash = $(this).attr(\"href\"); // On change le hash de l'adresse.\r\n\t});\r\n</pre>\r\n\t\t<p class=\"eye-catching\">Note : Vous me direz que sans JavaScript on retournera à l'accueil et vous aurez raison...</p>\r\n\t</div>\r\n</div>\r\n\r\n<h2>En conclusion</h2>\r\n\r\n<p>La simplicité avec laquelle on peut atteindre une ancre s'envole dès l'instant où l'on souhaite faire plus que cela. Ainsi utiliser les ancres avec la balise base, décaler l'offset d'une ancre ou animer la page jusqu'à l'ancre sont autant de tâches réalisables mais qui nécessitent un minimum de connaissances et de précautions.</p>", "dates" : { "published" : "2013-04-19 16:49:00", "updated" : [ "2013-04-19 16:49:00" ] }, "script" : "$(document).ready(function () {\r\n\t$(\"#edefinition, #fdefinition\").click(function (e) {\r\n\t\t\tvar \r\n\t\t\tyPos,\r\n\t\t\tyInitPos,\r\n\t\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\r\n\t\t\t\r\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\r\n\t\te.preventDefault(); \r\n\t\t\r\n\t\tyInitPos = $(window).scrollTop();\r\n\t\t\r\n\t\t// On ajoute le hash dans l'url.\r\n\t\twindow.location.hash = $(this).attr(\"href\");\r\n\t\t\r\n\t\t// Comme il est possible que l'ajout du hash perturbe le défilement, on va forcer le scrollTop à son endroit inital\r\n\t\t$(window).scrollTop(yInitPos);\r\n\t\t\r\n\t\t// On cible manuellement l'ancre pour en extraire sa position.\r\n\t\t// Si c'est un ID on l'obtient.\r\n\t\ttarget = ($($(this).attr(\"href\") + \":first\"));\r\n\r\n\t\t// Sinon on cherche l'ancre\r\n\t\tif (target.length == 0) {\r\n\t\t\ttarget = ($(\"a[name=\" + $(this).attr(\"href\").replace(/#/gi,\"\") + \"]:first\"))\r\n\t\t}\r\n\t\t\r\n\t\t// Si on a eu un name ou un id, on défile.\r\n\t\tif (target.length == 1) {\r\n\t\t\tyPos = target.offset().top; // Position de l'ancre.\r\n\t\t\r\n\t\t\t// On anime le défilement jusqu'à l'ancre.\r\n\t\t\t$('html,body').animate({ scrollTop: yPos - 40 }, 1000); // On décale de 40 pixels l'affichage pour ne pas coller le bord haut de l'affichage du navigateur et on défile en 1 seconde jusqu'à l'ancre.\r\n\t\t}\r\n\t});\r\n\t$(\"#ddefinition\").click(function (e) {\r\n\t\t// On annule le comportement initial au cas ou la base soit différente de la page courante.\r\n\t\te.preventDefault(); \r\n\t\t\t\t\r\n\t\t// On ajoute le hash dans l'url.\r\n\t\twindow.location.hash = $(this).attr(\"href\");\r\n\t\t\r\n\t\t// Une fois en place on va forcer l'affichage 40 pixel plus haut.\r\n\t\t$(window).scrollTop( $(window).scrollTop() - 40 );\r\n\t});\r\n});", "title" : "La <span>navigation</span> interne dans une <span>page</span> web", "urn" : "la-navigation-interne-dans-une-page-web" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a7" }, "cache" : { "comment" : { "number" : 3 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c6" }, { "$oid" : "5310456355dfd5f7698d48c1" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48c2" }, { "$oid" : "5310456355dfd5f7698d48c0" } ], "content" : "<p>Alors que certains s'en réjouissent et que d'autres le craignent, le support des vieux navigateurs tel que Internet Explorer 6, Internet Explorer 7 et Internet Explorer 8 est terminé pour jQuery...</p>\r\n\r\n<p>...et cela dès aujourd'hui puisque jQuery 2.0 est arrivé. Alignons quelques faits pour aider à juger l'utilité de la chose.</p>\r\n\r\n<h2>La part des navigateurs en Mars 2013</h2>\r\n\r\n<p>Celle-ci concerne le monde entier :</p>\r\n\r\n<ul>\r\n\t<li>Chrome fait <span class=\"highlighting\">38%</span></li>\r\n\t<li>Firefox fait <span class=\"highlighting\">20%</span></li> \r\n\t<li>Safari fait <span class=\"highlighting\">8%</span></li>\r\n\t<li>Opera fait <span class=\"highlighting\">1%</span></li>\r\n\t<li>IE10 fait <span class=\"highlighting\">2%</span></li>\r\n\t<li>IE9 fait <span class=\"highlighting\">16%</span></li>\r\n\t<li>IE8 fait <span class=\"highlighting\">10%</span></li>\r\n\t<li>IE7 fait <span class=\"highlighting\">0.6%</span></li>\r\n\t<li>IE6 fait <span class=\"highlighting\">0.0...%</span></li>\r\n</ul>\r\n\r\n<p class=\"eye-catching\">\r\n\tSource : <a href=\"http://gs.statcounter.com/#browser_version_partially_combined-ww-monthly-201303-201303-bar\" title=\"Source de la part des navigateurs en Mars 2013\">StatCounter.com</a>\r\n</p>\r\n\r\n<h2>Le support de jQuery</h2>\r\n\r\n<h3>Support et poids de jQuery 1.9.1</h3>\r\n\r\n<p>La version 1.9.1 de jQuery supporte IE6/7/8/9/10, Chrome, Firefox, Safari, Opera. Elle supporte donc <span class=\"highlighting\">95.6%</span> des navigateurs (et surement d'autres).</p>\r\n<p>Elle pèse en production <span class=\"highlighting\">90.4kB</span>.</p>\r\n\r\n<p class=\"eye-catching\">\r\n\tSource : <a href=\"http://code.jquery.com/jquery-1.9.1.min.js\" title=\"Source de la production jQuery1.9.1\">jquery-1.9.1.min.js</a>\r\n</p>\r\n\r\n<h3>Support et poids de jQuery 2.0</h3>\r\n\r\n<p>La version 2.0 supporte IE9/10, Chrome, Firefox, Safari, Opera.\r\nElle supporte donc <span class=\"highlighting\">85%</span> des navigateurs (et surement d'autres en moins).</p>\r\n<p>Elle pèse en production <span class=\"highlighting\">81.1kB</span>.</p>\r\n\r\n<p class=\"eye-catching\">\r\n\tSource : <a href=\"http://code.jquery.com/jquery-2.0.0.min.js\" title=\"Source de la production jQuery2.0\">jquery-2.0.0.min.js</a>\r\n</p>\r\n\r\n<h2>Conparaison poids/support de jQuery 1.9.1 et 2.0</h2>\r\n\r\n<p>La librairie jQuery 2.0 de production est <span class=\"highlighting\">9%</span> (et pas 12%) plus légère que jQuery 1.9.1</p>\r\n<p>La librairie jQuery 2.0 supporte <span class=\"highlighting\">9%</span> d'utilisateurs en moins que jQuery 1.9.1</p>\r\n\r\n<h2>Que faut-il en penser ?</h2>\r\n\r\n<p>Pour ma part, cela soulève trois questions :</p>\r\n\r\n<ul class=\"highlighting\">\r\n\t<li>N'est-il pas encore tôt pour balayer le support IE8 ? (10% des navigateurs)</li>\r\n\t<li>N'est-il pas tant d'arrêter le support IE6 et IE7 ? (moins de 1% des navigateurs)</li>\r\n\t<li>Supporter 9% d'utilisateurs en moins pour être 9% moins lourds est-il justifié ?</li>\r\n</ul>\r\n\r\n<p>Et vous ? Que pensez-vous de l'arrêt du support IE6/7/8 de jQuery ?</p>", "dates" : { "published" : "2013-04-20 11:49:00", "updated" : [ "2013-04-20 11:49:00" ] }, "title" : "<span>jQuery</span> 2.0 ne supporte plus <span>IE6, IE7 et IE8</span>", "urn" : "jquery-2-ne-supporte-plus-ie6-ie7-et-ie8" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a8" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48c8" } ], "content" : "N'avez-vous jamais rêvé d'utiliser jQuery dans vos traitements serveur ? N'avez-vous jamais cherché un équivalent pour PHP ou C# dans l'espoir de manipuler aisément les templates HTML de vos chers moteurs de template avant envoie côté client ? Êtes-vous tombé amoureux de JavaScript ? Ce langage étrange qui semble basique, mais qui est finalement objet, sans type mais finalement typé, procédurale mais finalement événementiel, mono-thread mais finalement multi-traitement asynchrone...\n\nEt si vous réalisiez vos développements Back-end en JavaScript ? C'est possible avec Node.js !\n\n\n\n\n\n## Avantages de Node.js ##\n\nNode.js ? Oui mais pourquoi ? Voici une petite liste non-exhaustive des points forts de Node.js.\n\n- Un seul langage Front-end et Back-end, le langage est connu de tous (au moins des développeurs Front-end) et rien est à réapprendre (peut-être une mise à niveau pour les Back-end).\n- Open Source sous licence MIT.\n- Projet soutenu par de grandes sociétés comme Microsoft et Google.\n- Un gestionnaire de modules performant et très simple.\n- Pas de serveur web lourd (voir plus loin).\n- Mono-thread et événementiel avec une grande performance.\n- Simplicité de mise en oeuvre (si si) surtout avec le [Framework NodeAtlas](http://haeresis.github.io/NodeAtlas/).\n- Interactions en temps réel pour de vrais applications web grâce à socket.io.\n- Manipulation de DOM côté serveur simple avec Cheerio (jQuery).\n- ...\n\nBref, passons à la suite.\n\n\n\n\n\n## Passer de Apache/PHP à Node.js ##\n\nJe devine déjà quelles sont vos premières interrogations. Comment diable utiliser JavaScript pour faire du développement côté serveur ? Je veux bien mais :\n\n\n\n### Questions existentielles ###\n\n- Comment je fais de la lecture/écriture de fichier ? C'est impossible en JavaScript.\n- Comment je fais de l'inclusion de fichier ? C'est impossible en JavaScript.\n- Comment un setInterval ou un setTimeout peuvent marcher côté serveur ?\n- Comment ça fonctionne avec Apache ? IIS ?\n- Moi je veux bien, mais ça se débogue ?\n- ...\n\nJ'aurais dit la même chose il y a quelques temps. Essayons d'y voir plus clair.\n\nLe JavaScript que vous avez l'habitude de côtoyer dans vos navigateurs, chers intégrateurs, n'est qu'une partie de l'iceberg. Il n'est pas interprété de la même manière en fonction des navigateurs car chacun met à disposition des briques de JavaScript pour le développement web. Cependant tout le monde s'accorde à dire que permettre au JavaScript de manipuler des fichiers coté client ce n'est pas très nette, et tout le monde s'accorde à dire que cibler un noeud HTML avec `document.getElementById` c'est la moindre des choses. Sachez que si l'implémentation de JavaScript est si uniforme entre différents interpréteurs c'est parce qu'ils suivent tous les mêmes directives : celle de ECMA International qui définie les standards du « ECMAScript scripting langage » alias notre bon vieux JavaScript. Vous trouverez plus de détails sur l'historique de ECMAScript/JavaScript sur la toile (et découvrirez que certaines implémentations connues de tous ne sont pas des standards).\n\n<figure>\n\t<figcaption>Le JavaScript des navigateurs et celui de Node.js</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/js-browser-vs-node.png\" alt=\"Le JavaScript des navigateurs et celui de Node.js\" width=\"618\" height=\"428\" style=\"max-width: 94%;height: auto;\" />\n</figure>\n\nTout en suivant au mieux les directives de [ECMA International](http://www.ecma-international.org/default.htm \"Site de l'ECMA International\"), il est donc tout à fait possible de développer un interpréteur JavaScript pour une utilisation du langage hors d'un navigateur qui pourrait faire appel à des fichiers dans des fichiers, lire et écrire dans des fichiers, etc... Cet interpréteur s'appelle [Node.js]. Cependant, Node.js n'a pas réinventé la roue, il utilise comme socle le même interpréteur JavaScript que celui qu'utilise Google Chrome le « [V8 JavaScript Engine](https://code.google.com/p/v8/ \"Site du projet V8 JavaScript Engine\") ». Par exemple, là où la variable mère du socle du moteur « JavaScript V8 Engine » sous Chrome est `window`, celui de [Node.js] (même socle) est `global`\n\n\n\n### Architecture web avec Node.js ###\n\nComment faire fonctionner Apache ou IIS avec [Node.js] ? C'est très simple, il suffit de ne pas les faire fonctionner du tout. En fait, avec [Node.js], vous n'en avez pas besoin. Il va falloir re-créer vous-même un serveur web. Hola... il est possible que vous n'ayez jamais mis les mains dans Apache bien que vous ayez quelques notions d'échanges Client/Serveur alors de là à développer votre serveur web... Et bien dite vous que c'est très simple et que ça sera l'occasion de bien comprendre les rôles de PHP, Apache, de vos pages en PHP, etc...\n\nCependant si vous n'avez pas le temps de ré-inventer la roue, bien entendu on l'a déjà fait pour vous :\n- [NodeAtlas](https://github.com/Haeresis/NodeAtlas) est un vrai « CodeIgniter » pour réaliser les sites les plus simples aux plus complexes. \n- [forever](https://github.com/nodejitsu/forever) vous permettra de maintenir vos sites en vie sur serveur de production.\n- [bouncy](https://github.com/substack/bouncy), [nginx](http://nginx.com/) and co. feront du reverse proxy pour vos multiples sites.\n- Et même avec [issnode](https://github.com/tjanczuk/iisnode), vous pourrez gérer sur IIS vos site [Node.js] comme s'ils étaient de vrai apps .NET et même [les développer avec Visual Studio](http://nodejstools.codeplex.com/) si ça vous chante.\n\n<figure>\n\t<figcaption>Architecture PHP vs Node.js</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/php-vs-node.png\" alt=\"Architecture PHP vs Node.js\" width=\"618\" height=\"400\" style=\"max-width: 94%;height: auto;\" />\n</figure>\n\n\n\n\n\n## En résumé ##\n\nFinalement [Node.js] n'est qu'un interpréteur JavaScript enrichissant celui-ci avec diverses API (appelées module) qui permet d'exécuter des fichier .js (Ca remplace donc aisément des scripts PHP, Ruby, Python, Bash...).\n\nPour faire un site web, la première étape sera donc de créer un serveur web. Mais si on commençait par le commencement ? [Installer et utiliser Node.js sous Windows](http://blog.haeresis.fr/installer-et-utiliser-nodejs-sous-windows/ \"Installer et utiliser Node.js sous Windows\")\n\n  [Node.js]: http://nodejs.org/", "dates" : { "published" : { "$date" : 1366805340000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "<span>Développer</span> en <span>JavaScript</span> côté <span>serveur</span> avec <span>Node.js</span>", "urn" : "developper-en-javascript-cote-serveur-avec-nodejs" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71a9" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c9" }, { "$oid" : "5310456355dfd5f7698d48cb" }, { "$oid" : "5310456355dfd5f7698d48ca" } ], "content" : "Avez-vous déjà ressenti de la Flemme empathique ? Mais qu'est-ce que c'est au juste la Flemme empathique ou Flemme par empathie. Je ne sais pas réellement le définir ; ça s'apparente à « ne pas vouloir déranger » ou encore ça signifie ce que ça signifie : avoir la flemme à la place de quelqu'un.\n\n\n\n\n\n## Quelques exemples ##\n\nVoici quelques mises en situation pour comprendre le principe :\n\n### La bouteille d'eau ###\n\nVotre collègue passe à côté de vous et voit votre bouteille d'eau vide. Il va à la source remplir la sienne, à l'accueil, à trois portes d'ici dans une fontaine où il faut \"plier\" sa bouteille pour la remplir plus ou moins. Il vous interpelle et vous dit « Je te remplis ta bouteille ? ».\n\nVous ne lui avez rien demandé, ça fait une heure que vous n'avez pas forcément soif mais qu'à la réflexion un peu d'eau ne serait pas de refus.\n\nMais y a ce code à faire marcher, vous y êtes presque. Remplir une bouteille d'eau nécessiterait de se lever, d'ouvrir les portes, de peut-être se faire distraire au passage, de lutter avec la fontaine... bref... « la flemme », ça attendra ; et vous répondez seulement pour je ne sais quelle raison : « Non merci, ça ira ».\n\n**En réalité... vous avez probablement été frappé par la Flemme empathique !** Ça ne dérangeait absolument pas votre collègue de remplir la bouteille, sinon il ne l'aurait pas proposé. Vous, ça ne vous aurait rien coûté, vous aviez juste à continuer ce que vous faisiez. « J'ai pas envie de le déranger ». Ouais... Flemme empathique :)\n\n\n\n\n### La question à 10 sous ###\n\nVous exposez une question à quelqu'un dont vous n'avez pas la réponse. On sait jamais des fois qu'il sache. Au delà de ça, vous savez où trouver la réponse, mais il faut se déplacer quelque part par exemple pour l'obtenir, ou sortir son portable et —avec le réseau du coin— mettre 5 minutes à trouver une réponse qui sera, vu la nature particulière de la question, incomplète. Votre interlocuteur vous dit que justement il va à cet endroit demain pour une raison X, qu'ils ont surement la réponse et vous dit : « Je leur poserai la question pour toi, si tu veux ? ». **Et là... probablement frappé par la Flemme empathique,** vous répondez : « Non, c'est pas grave ne t'embête pas ». Quoi ?! Mais c'était qu'une simple question à poser.</p>\n\n\n\n\n## Palier au problème ##\n\nEn fait on pourrait se dire que c'est dramatique... mais pas vraiment. Dans notre premier cas le collègue à juste à répondre : « Non, mais ça ne me dérange pas, sinon je n'aurai pas demandé » pour obtenir aisément un « Bon, puisque tu insistes ! » et dans notre second cas à dire « Je demanderai quand même car la réponse m'intéresse aussi ».\n\n_Si vous repérez des personnes souffrant de Flemme empathique : **il est de votre devoir d'insister** !_\n\n\n\n\n\n## Attention aux faux-positif ##\n\nIl ne faut cependant pas négliger le cas du faux-positif. Et oui, il est aussi possible que dans notre premier cas la personne ai répondu « Non merci, ça ira » seulement parce qu'elle avait presque corrigé l'erreur dans son algorithme et que son collègue vient de lui faire perdre 10 minutes en la coupant. On pourrait alors qualifier ça de « Psycopathie refoulé ». C'est vrai, il n'aura pourtant pas tué son collègue !", "dates" : { "published" : { "$date" : 1366966800000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "stylesheet" : "", "title" : "La <span>Flemme</span> empathique ou Flemme par <span>empathie</span>", "urn" : "la-flemme-empathique-ou-flemme-par-empathie" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71aa" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48c0" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "Je vous propose à travers cet article de découvrir [Node.js] pour le système d'exploitation Windows 7,  8 et 10. [Node.js] est multi-plateforme et s'exécute tout aussi bien sous Unix que sous Mac. Mais QUID de Windows ? Vous allez voir que c'est assez trivial même si certains modules dépendent de quelques logiciels externes pour compiler ([python27](https://www.python.org/download/releases/2.7/), [msvc2013](https://www.microsoft.com/fr-fr/download/details.aspx?id=40784)). Assez rapidement donc, il vous sera possible de développer des sites web et applications web très interactives et avec une grande vélocité d'exécution le tout avec JavaScript !\n\n\n\n\n\n## Télécharger Node.js pour Windows ##\n\nJe passe les [présentations qui ont déjà été faites dans cet article](./developper-en-javascript-cote-serveur-avec-nodejs/ \"Développer en JavaScript côté serveur avec Node.js\") et ajoute que même si cet article a été réalisé avec des tests parallèles sous Seven, je ne vois pas pourquoi il ne serait pas valable pour Windows 8 ou 10.\n\n\n\n### Le site officiel de Node.js ###\n\nSite du projet : [nodejs.org](http://nodejs.org/ \"Site du projet Node.js\").\n\n<div class=\"center\">\n\t<a href=\"http://nodejs.org/images/logos/nodejs-2560x1440.png\" title=\"Logo Node.js en HD\"><img src=\"http://nodejs.org/images/logos/nodejs-1024x768.png\" alt=\"Le logo Node.js\" width=\"1024\" height=\"768\" style=\"max-width: 75%;height: auto;\" /></a>\n</div>\n\nAvant de nous jeter sur la partie « Downloads », jetons un œil aux parties du site que je ne vais pas détailler plus dans cet article. Vous pourrez apprendre à l'accueil (<a href=\"http://nodejs.org/en/\" title=\"node.js\">Home</a>) que Microsoft, Google, Yahoo!, LinkedIn, Ebay... et bien d'autres utilisent d'ores et déjà Node.js, découvrir le projet dans <a href=\"http://nodejs.org/about/\" title=\"node.js\">About</a> et le suivre avec le <a href=\"http://blog.nodejs.org/\" title=\"node.js\">Node.js Blog</a> ainsi que la <a href=\"http://nodejs.org/community/\" title=\"node.js\">Community</a>. Vous pourrez même trouver du travail dans la partie <a href=\"http://jobs.nodejs.org/a/jobs/list/\" title=\"node.js\">Jobs</a>. Pour finir un jolie fond d'écran traine sur la page <a href=\"http://nodejs.org/logos/\" title=\"node.js\">Logos</a>.\n\n\n\n### Intaller node et npm ###\n\nDepuis l'accueil, vous devriez voir un bouton « Download for Windows (x64) » (si vous êtes sur Windows). Cliquez dessus pour télécharger automatiquement le zip le plus adapté à votre système. Vous pouvez également choisir vous même votre zip dans <a href=\"http://nodejs.org/en/download/\" title=\"node.js\">Download</a> pour obtenir au choix le *Windows Installer (.msi)* et/ou le *Windows Binary (.exe)* en 32/64 bit.</p>\n\n<figure>\n\t<figcaption>Liste des composants de l'installeur Node.js</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/node-install.png\" alt=\"Liste des composants de l'installeur Node.js\" width=\"495\" height=\"362\" style=\"max-width: 75.2%;height: auto;\" />\n</figure>\n\nExécutez votre fichier, acceptez la licence, déposez-le dans \"Program files\" et ce package va vous installer :\n\n- **L'exécuteur node.js** : le programme permettant d'exécuter des fichiers .js (comme php.exe le ferait avec des .php).\n- **Le module npm (Node Package Manager)** : un gestionnaire de modules qui va vous permettre simplement d'ajouter et retirer les librairies dont vous aurez besoin pour vos applications (pas de surplus, seulement le nécessaire donc).\n- **Un raccourci vers la documentation en ligne**.\n- **Des variables d'environnements** : Ainsi vous pourrez exécuter les commandes `node` et `npm` dans votre invité de commande.\n\n<figure>\n\t<figcaption>Dossier de Node.js après installation</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/node-folder.png\" alt=\"Dossier de Node.js après installation\" width=\"650\" height=\"274\" style=\"min-width: 98.7%;height: auto;\" />\n</figure>\n\nQuand l'installeur aura fini vous aurez un joli dossier d'environ 12Mo contenant entre autre node.js et npm.cmd qui seront appelables depuis n'importe quel dossier avec les commandes `node` et `npm`.\n\n\n\n\n\n## Un Hello world en Node.js ##\n\nJuste après l'installation, tentons notre premier « Hello World ». Tout d'abord, définissez vous un endroit ou installer vos projets [Node.js]. Pour ma part j'ai décidé de placer tous mes projets dans `C:\\nodejs`. Je vais donc y _**créer un fichier**_ `hello-world.js` accessible à cette adresse sur mon poste : `C:\\nodejs\\hello-world.js`. Rien ne vous empêche de placer ça dans un autre dossier, sur un autre disque dur, dans le workplace de votre IDE ou le repository de votre logiciel de gestion de code source et version.\n\n\n\n### Édition de hello-world.js ###\n\nFaisons la chose la plus simple possible, affichons un message dans une console d'exécution. Ouvrez le fichier `C:\\nodejs\\hello-world.js` que vous venez de créer avec <a href=\"http://notepad-plus-plus.org/fr/\" title=\"Site de Nodepad++\">Nodepad++</a> ou <a href=\"http://www.sublimetext.com/3\" title=\"Site de Sublime Text 3\">Sublime Text 3</a> (ou l'IDE de votre choix) et copier/coller à l'intérieur le code suivant :\n\n```js\nconsole.log(\"Hello World !\"); // Va écrire dans la console \"Hello World !\".\n\nglobal.console.log(\"Hello World !\"); // Va écrire dans la console \"Hello World !\".\n\nwindow.console.log(\"Hello World !\"); // Va faire planter le programme.\n```\n\npuis sauvegardé le.\n\n\n\n### Exécution de script avec node.exe ###\n\nIl y a plusieurs façons d'appeler du code JavaScript avec le programme node.exe.\n\nTout d'abord :\n\n- appuyez/cliquez sur la touche/bouton « Logo Windows » ce qui ouvrira votre « Menu Démarrer » ou vos tuiles,\n- écrivez directement `cmd` ici et cela se tapera dans une barre de recherche,\n- enfin, appuyez sur la touche « Entrer » pour ouvrir votre Console.\n\nEnsuite deux possibilités.\n\n#### Exécution en absolue ####\n\n- Écrivez `node C:\\nodejs\\hello-world.js` (dans la console) puis appuyez sur « Entrer » pour exécuter le script,\n- ou écrivez `node C:\\nodejs\\hello-world` (pas d'extension).\n\n#### Exécution en relatif ####\n\n- Écrivez `cd C:\\nodejs\\` puis appuyez sur « Entrer » pour vous rendre dans le dossier,\n- écrivez `node hello-world.js` puis appuyez sur « Entrer » pour exécuter le script,\n- ou `node hello-world` (pas d'extension).\n\n<figure>\n\t<figcaption>Résultat d'exécution du fichier C:\\nodejs\\hello-world.js</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/hello-world-crash.png\" alt=\"Résultat d'exécution du fichier C:\\nodejs\\hello-world.js\" width=\"658\" height=\"302\" style=\"max-width: 100%;height: auto;\" />\n</figure>\n\n\n\n### L'équivalent de window est global ###\n\nNotre code plante et c'est normal ! Revenons sur le résultat obtenu (image ci-avant) et voyons se que l'on peut en déduire.\n\n- Les commandes `global.console.log` et `console.log` sont identiques. La base global est donc implicite comme `window.document` et `document` dans les navigateurs.\n- La pile d'exécution nous indique qu'au lancement de node.exe, avant même le traitement du fichier en paramètre, il y a :\n - Lecture du fichier `node.js` et exécution de `startup`.\n - Lecture du fichier `module.js` exécutant la fonction `Function.Module.runMain` exécutant la fonction `Function.Module._load` exécutant la fonction `Module.load` exécutant la fonction `Object.Module._extensions..js` exécutant la fonction `Module._compile`.\nOr, il n'y a pas de fichier node.js ou module.js dans le dossier de node.exe. Ce traitement est donc réalisé par le cœur de Node.js, node.exe.\n\n- `window` n'est pas défini. Il est de type Undefined et renvoi \"undefined\" puisqu'il fait planter le script. `global` remplace donc `window` en Node.js.\n\n\n\n\n\n## La documentation, les modules et le principe ##\n\nEffectivement, notre exemple précédent est loin de servir à quelque chose et même loin de nous permettre de développer un site Internet (mais pas si loin que ça tout de même). Faisons quelque chose de plus conséquent.\n\nEt si nous utilisions un bout de code qui va nous permettre de parcourir l'intégralité d'une arborescence de fichier/dossier de manière asynchrone et de lever des événements à chaque fois que quelque chose est parcouru.\n\nNous allons manipuler le contenu d'un dossier avec le code ci-après. Pour le moment, nous allons nous attacher à la syntaxe du langage.\n\n```\n// Déclaration de plusieurs variables.\nvar\n\tfs = require(\"fs\"), // Instanciation du module natif \"File System\" dans la variable \"fs\".\n\twalk = require(\"walk\"), // Instanciation du module communautaire \"node-walk\" dans la variable \"walk\".\n\tfiles = [], // Instanciation d'un tableau vide dans la variable \"files\".\n\ttargetFolder = process.argv[2] || \"./\", // Instanciation d'une variable avec \"process.argv[2]\". Si process.argv[2] est de type Undefined alors il renvoi \"false\" et targetFolder vaut \"./\";.\n\t\n\t// Appel à la fonction \"walk\" du module \"walk\".\n\twalker = walk.walk(\n\t\ttargetFolder, // Passage d'une \"String\" en premier paramètre.\n\t\t{ followLinks: false } // Passage d'un \"Objet\" JSON en second paramètre.\n\t);\n\t\n\t/* Equivalant du code ci-dessus\n\tvar walk = require(\"walk\");\n\tvar files = [];\n\tvar walker = walk.wa....;\n\tmais moins performant. */\n\n// Appel à la fonction \"on\" du module \"walk\".\nwalker.on(\"file\", function(root, stat, next) { // \"String\" en premier paramètre et \"Function\" en second paramettre.\n    // Ajout d'une entrée dans le tableau \"files\".\n    files.push(root + stat.name);\n\t\n\t// Exécution du paramètre \"next\" de type \"Function\".\n    next();\n});\n\n/* En javascript, les paramètres peuvent être également des fonctions !\nLa fonction de walk \"on\" est probablement défini ainsi : \nfunction on(String, Function) {\n\tvar \n\t\troot = String,\n\t\tstat = ** infos sur le fichier **\n\t\tnext = function () { ** du code ** }\n\n\tFunction(root, stat, next);\n}\n*/\n\n// Appel à la fonction \"end\" du module \"on\".\nwalker.on(\"end\", function() {\n\t// On affiche le contenu du tableau dans la console Windows.\n    console.log(files);\n});\n\n// Affichage de \"Traitement en cours...\" dans l'invité de commande Windows (la console).\nconsole.log(\"Traitement en cours...\");\n```\n\nLe code ci-dessus permet d'afficher tous les fichiers d'un dossier. Si vous êtes familier avec JavaScript il ne vous aura pas échappé que la fonction `require` sort d'un chapeau magique. C'est une fonction spécifique à [Node.js] qui permet d'inclure des fonctions en provenance d'un autre fichier (en l’occurrence du cœur de Node.js pour « File System » et du module `node-walk` pour « walk ».\n\n\n\n### Compiler les modules qui ne sont pas en JavaScript sous Windows ###\n\nSi vous souhaiter pouvoir utiliser l'intégralité des modules de [Node.js] il va falloir être en mesure de tous les compiler. Effectivement, la majorité des modules sont écrit en JavaScript et [Node.js] sait très bien les utiliser. Mais pour ceux qui sont écrit dans un autre langage (pas en JavaScript), voici les deux logiciels qui peuvent couvrir tous les cas de figure : [installer Python et Microsoft Visual Studio](http://blog.lesieur.name/installer-tous-les-modules-npm-sous-windows/).\n\n\n### La documentation de Node.js et de ses modules ###\n\nLe cœur de [Node.js] contient les modules vitaux lui permettant d'écrire dans des fichiers. C'est au développeur, en fonction de ses besoins, de « télécharger » les modules complémentaires qu'y vont lui permettre de réaliser ses développements.</p>\n\n#### Documentation des modules natifs ####\n\nLa documentation des modules natifs de [Node.js] se trouve sur le site officiel dans la partie <a href=\"http://nodejs.org/api/\" title=\"node.js\">Documentation</a>. Vous pourrez vous renseigner sur le fonctionnement des modules incontournables comme « <a href=\"http://nodejs.org/api/fs.html\" title=\"node.js\">File System</a> » ou encore « <a href=\"http://nodejs.org/api/http.html\" title=\"node.js\">http</a> » (pour faire des serveurs web). Vous aurez également des information sur notre fameuse fonction <a href=\"http://nodejs.org/api/all.html#all_require\" title=\"node.js\">require</a></p>\n\n#### Documentation des modules tiers ####\n\nTout un chacun peut développer son propre module Node.js et le mettre à disposition des autres utilisateurs via <a href=\"https://www.github.com/\" title=\"GitHub\">GitHub</a> et à disposition en téléchargement via le NPM de Node.js en l'ajoutant au registre de la page <a href=\"https://npmjs.org/\" title=\"node.js\">NPM Registry</a>.\n\n> Par exemple, pour ma part, je développe [NodeAtlas](http://www.lesieur.name/node-atlas/) qui est un module permettant de créer rapidement de petit site web MVC2, de créer des gros sites interactif ou encore gérer des maquettes HTML.\n- J'héberge les fichiers de développement [Haeresis/NodeAtlas](https://github.com/Haeresis/NodeAtlas/) sur [GitHub](https://www.github.com/),\n- et vous pouvez [télécharger via npm le module node-atlas](https://www.npmjs.org/package/node-atlas).\n\nC'est également le cas du module `node-walk` qui ajoute la fonction walk équivalente à la fonction du même nom en Python mais pour [Node.js]. Ce module est utilisé dans le code précédent et développé par l'utilisateur *coolaj86*. La documentation de `node-walk` se trouve donc sur <a href=\"https://github.com/coolaj86/node-walk\" title=\"Page de node-walk\">la page de son projet GitHub</a> et <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">son module est référencé</a> dans le registre NPM sur <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">cette page</a>.\n\nEn se référent à sa documentation, nous sommes à même de comprendre le code précédent :\n\n```js\nvar\n\tfs = require(\"fs\"),\n\twalk = require(\"walk\"),\n\tfiles = [],\n\t// Récupération du premier paramètre derrière le nom du fichier, sinon dossier d'exécution du fichier.\n\ttargetFolder = process.argv[2] || \"./\",\n\t\n\t// La fonction walk permet de lire de manière asynchrone le contenu d'un fichier mais ne renvoi rien. \n\t// Le code du script va continué à être lu pendant que walk va faire son boulot.\n\twalker = walk.walk(targetFolder, { followLinks: false }); // L'option dit qu'on ne va pas lire les fichiers derrière les raccourcis de dossier.\n\t\n// La fonction \"on\" avec en premier paramètre \"file\" est exécuté quand la fonction assynchrone précédente \"walk\" lit un fichier.\nwalker.on(\"file\", function(root, stat, next) {\n\t//... et le paramètre \"root\" contient le chemin absolue du fichier.\n\t//... et le paramètre \"stat\" contient diverses informations comme le \"name\" du fichier.\n\t//... et le paramètre \"next\" est en réalité une function.\n    files.push(root + stat.name);\n\t\n\t// Différent traitement avec fs (suppression, copy, etc...) sont possible.\n\t\n\t// On valide les actions.\n    next();\n});\n\n// La fonction \"on\" avec en premier paramètre \"end\" est exécuté quand tout le contenu du répertoire à été lu.\nwalker.on(\"end\", function() {\n    console.log(files);\n});\n\n// Va être lu immédiatement après l'exécution de la fonction \"walk\".\n// Si votre walk lit le dossier \"C:\\\", cela preut prendre du temps de tout lire. Mais il ne sera pas bloqué car les fonctions dans \"on\" sont appelés de façon assynchrone.\nconsole.log(\"Traitement en cours...\");\n```\n\n\n\n### npm et le téléchargement de modules ###\n\n#### Téléchargement depuis le registre ####\n\nCopiez-collez le code précédent dans un fichier appelé `list-file.js` (par exemple dans `C:\\nodejs\\routine\\list-file.js`) et exécutez-le.\n\n<figure>\n\t<figcaption>Résultat d'exécution du fichier C:\\nodejs\\routine\\list-file.js</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/list-file-crash.png\" alt=\"Résultat d'exécution du fichier C:\\nodejs\\routine\\list-file.js\" width=\"658\" height=\"302\" style=\"max-width: 100%;height: auto;\" />\n</figure>\n\nNotre code plante encore et c'est encore normal ! Revenons sur le résultat obtenu (image ci-avant) et voyons ce que l'on peut en déduire.\n\n- L'exécution de ce script est identique au précédent, mais la pile ne s'affiche pas complètement (manque startup et node.js).\n- Quand la fonction `require` est rencontrée, à l'instar de `startup` c'est `require` qui prend la main exécutant la fonction `Function.Module._load` exécutant la fonction `Function.Module._resolveFilename`.\n- Si un module n'a pas été préalablement téléchargé, ça coince (logique).\n\n*Note : les scripts qui plantent arrête le programme [Node.js]. Si votre script ne plante pas, et que vous souhaitez arrêter le programme : au lieu de fermer la console, appuyez simultanément sur « CTRL + C ».*\n\nNous allons donc télécharger le module « node-walk » avec les lignes de commande suivante :\n\n- `cd C:\\nodejs\\routine\\`\n- `npm install walk`\n\n<figure>\n\t<figcaption>Téléchargement du module node-walk avec npm</figcaption>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/npm-install-walk.png\" alt=\"Téléchargement du module node-walk avec npm\" width=\"658\" height=\"302\" style=\"min-width: 100%;height: auto;\" />\n</figure>\n\nVous constaterez qu'un dossier « node_modules » est apparu. Les futurs modules que vous téléchargerez via `npm` depuis la racine `C:\\nodejs\\routine\\` seront automatiquement ajoutés dans ce dossier. Les fichiers dont le fichier appelant est exécuté dans cette racine pourront tous bénéficier des modules via la commande « require » directement avec le nom du module en paramètre. Pour utiliser le module d'un autre dossier « node_modules », il ne faudra plus passer le nom du module à `require` mais le chemin d'accès. Pour finir si vous utilisez la commande `npm install` depuis un autre dossier, les modules téléchargés se mettront dans le dossier « node_modules » de cet endroit (ou le créera s'il n'existe pas).\n\nVotre dossier « node_modules » contient le module « walk ». Vous constatez que « walk » lui-même contient un dossier « node_modules » avec le module « forEachAsync » ! C'est une dépendance du module : « walk » à besoin de « forEachAsync » pour fonctionner. Idem dans « forEachAsync » il y a encore un dossier « node_modules » contenant « sequence ».\n\n*Note : vous pouvez également passer l'option `-g` soit `npm install -g walk` qui installera `walk` dans le node_modules global. Vos projets n'auront alors pas besoin d'avoir `walk` dans leur dossier « node_modules » pour fonctionner.*\n\nVous pouvez de nouveau exécuter votre script et constater que \"Traitement en cours...\" s'écrit avant l'affichage des fichiers alors que c'est pourtant la dernière instruction du fichier. Là est le pouvoir de l'asynchrone !\n\n*Note : vous pouvez passer des paramètres à vos scripts avec `process.args[x]` x représentant le xième élément séparé par un espace dans la chaine de commande (`process.args[0]` étant donc le mot `node`). Dans notre exemple `node list-file C:\\` affichera les fichiers de tout le disque dure !</p>\n\n#### Téléchargement depuis le site du module ####\n\nDans notre exemple précédent nous aurions tout aussi bien pu créer nous-même le dossier « node_modules » et y placer le module **node-walk** à la main en <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">l'ayant téléchargé depuis le site GitHub</a>.</p>\n\nSi vous voulez essayer, effacez votre dossier « walk » de « node_modules » et c'est parti !\n\n- Une fois sur <a href=\"https://npmjs.org/package/walk\" title=\"Module node-walk\">la page du projet</a>, cliquez sur « ZIP » pour télécharger l'archive.\n- Placer le dossier « node-walk-master » dans « node_modules » et renommez-le en « walk ».\n- Dans votre nouveau dossier « walk », supprimez tout sauf le dossier « lib ».\n- Remontez le contenu du dossier « lib » dans « walk ». Vous pouvez maintenant supprimer le dossier « lib » qui est vide.\n- Exécutez de nouveau `list-file` et vous aurez l'erreur « Error: cannot find module 'forEachAsync' » (souvenez vous, « walk » dépend de « forEachAsync »).\n- Rendez-vous sur le <a href=\"https://npmjs.org/\" title=\"node.js\">NPM registry</a> et cherchez « forEachAsync » dans « Search Packages ». Cliquez dessus dans la liste et repérez la ligne « Dependencies » : vous voyez bien que ce module est dépendant de\t« sequence ». Repérez ensuite « Homepage » : cliquez sur le lien associé et nous revoilà sur Git. Cliquez de nouveau sur « ZIP » pour télécharger l'archive. Nous trouvons dedans, entre autre, les dossiers « forEachAsync » et « sequence » ! Ça tombe bien.\n- Créez dans « walk » un dossier « node_modules » pour y placer « forEachAsync », puis dans « forEachAsync » vous créez de nouveau un dossier « node_modules » pour y placer « sequence ».\n- Exécutez de nouveau `list-file` et voilà, ça marche !\n\nCette technique à vite ses limites pour les gros modules.\n\n\n\n\n\n## Node.js pour créer des routines ##\n\nPour clore cet article je résumerais en mettant en avant le fait que sans même parler de site Internet, [Node.js] est parfais pour créer des fichiers de maintenance pour effacer des fichiers temporaires, exécuter des actions, etc... comme le ferait des fichiers .php avec php.exe. Il est tout à fait possible de mettre en place des tâches planifiées pour vider les fichiers de plus de un jour dans le répertoire temporaire des fichiers uploadés de votre site par exemple !</p>\n\nBon, maintenant qu'on voit à peut-prêt l'outil pour une utilisation standard et simple, [si on faisait des sites web avec le module NodeAtlas](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/) !\n\n  [Node.js]: http://nodejs.org/", "dates" : { "published" : { "$date" : 1367053200000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "div.center {\n    text-align: center;\n}", "title" : "<span>Installer</span> et <span>utiliser</span> <span>Node.js</span> sous <span>Windows</span>", "urn" : "installer-et-utiliser-nodejs-sous-windows" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ab" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "<p>L'idée ne vous a peut-être jamais effleuré l'esprit, mais sachez qu'il est tout à fait possible de se passer d'Apache et remplacer les PHP, JAVA, C#... par du JavaScript pour faire un site web. Je vous vois faire la grimace dans le fond, mais développer votre propre serveur web en JavaScript est un jeu d'enfant. Tout ceci est réalisable grâce à l'exécuteur de script Node.js et ses modules !</p>\r\n\r\n<div class=\"correct-practice\">\r\n\t<div class=\"title highlighting\">À la découverte de Node.js sous Windows</div>\r\n\t<nav class=\"content\">\r\n\t\t<ol>\r\n\t\t\t<li><a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Qu'est-ce que Node.js ?</a></li>\r\n\t\t\t<li><a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installation de Node.js</a></li>\r\n\t\t\t<li><a class=\"highlighting\" href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">Simple application web avec Node.js</a></li>\r\n\t\t\t<li><a href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">Utiliser jQuery côté serveur avec Node.js</a></li>\r\n\t\t\t<li>Une architecture MVC2 avec Node.js</li>\r\n\t\t\t<li>Appels client asynchrones avec Node.js</li>\r\n\t\t\t<li>Un moteur de template avec Node.js</li>\r\n\t\t\t<li>Des sites multilingues avec Node.js</li>\r\n\t\t\t<li>La base de données MySQL et Node.js</li>\r\n\t\t</ol>\r\n\t</nav>\r\n</div>\r\n\r\n<h2>Développer un serveur web avec les modules HTTP et Express</h2>\r\n\r\n<p>Si vous avez lu <a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">mon précédent billet sur l'installation et l'utilisation de Node.js</a> ou que vous savez de quoi il s'agit exactement, vous pouvez poursuivre. Sinon je vous conseils de passer par la case départ (sans toucher 2000€) et de lire <a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">mon article expliquant comment développer en JavaScript côté serveur avec Node.js</a>.</p>\r\n<h3>Un échange client/serveur simple</h3>\r\n\r\n<p>Pour créer un serveur web —élément essentiel pour présenter à notre client (un navigateur) notre site web ou application web— Node.js utilise le module HTTP qui permet « le support de plusieurs fonctionnalités du protocole qui sont habituellement difficiles à utiliser » <a href=\"http://nodejs.org/api/all.html#all_http\" title=\"node.js\">d'après la documentation</a>. En d'autres termes : il permet de répondre aux demandes des navigateurs (demande d'une page Internet par exemple). Pour que cela soit encore plus trivial, nous allons utiliser un module communautaire : le <a href=\"http://expressjs.com/\" title=\"Express - node.js web application framework\">Framework Express</a> qui va nous permettre de réaliser aisément des applications web.</p>\r\n<h4>Préparation</h4>\r\n\r\n<p>Préparons notre serveur :</p>\r\n\r\n<ul>\r\n\t<li>Nous allons avoir besoin (avec l'aide de la documentation), d'<a href=\"http://nodejs.org/api/all.html#all_http\" title=\"node.js\">appeler le module HTTP</a> de <a href=\"http://expressjs.com/\" title=\"Express - node.js web application framework\">créer un objet</a> capable de comprendre le protocole http et d'écouter les demandes clientes sur le bon couple ip / port en vue de lui répondre.</li>\r\n\t<li>Nous allons nous créer un dossier d'application web ici <samp>C:\\nodejs\\website\\</samp> dans lequel nous allons placer notre premier script <samp>website.js</samp>.</li>\r\n\t<li>Nous allons également avoir besoin de télécharger le module « Express » avec la commande <samp>npm install express</samp> depuis le dossier <samp>C:\\nodejs\\website\\</samp>. Cela ajoutera donc un dossier « node_modules » dans <samp>C:\\nodejs\\website\\</samp> au même niveau que <samp>website.js</samp>.</li>\r\n</ul>\r\n\r\n<h4>Contenu du fichier website.js</h4>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\nvar\r\n// Nous stockons l'objet HTTP dans la variable globale \"http\".\r\n\thttp = require(\"http\"),\r\n\t\r\n// Nous stockons également la fonction Express dans la variable \"express\".\r\n\texpress =  require(\"express\"),\r\n\t\r\n// Nous instancions un serveur web en exécutant la variable \"express\" dont le résultat est stocké dans l'objet httpServer.\r\n\thttpServer = express();\r\n\r\n// Nous utilisons la fonction listen de httpServer en lui passant comme premier paramètre le port d'écoute de l'application.\r\n// Par défaut une page de site Internet est réclamée via le port 80. Si vous n'avez ni Apache, ni IIS ou autre qui utilise ce port, vous pouvez le mettre sur 80.\r\n// J'ai pour ma part décidé d'écouter le port 82.\r\nhttpServer.listen(82);\r\n\r\n// Nous écoutons les requêtes GET en provenance d'un navigateur client.\r\n// Si une requête est envoyé à l'adresse : http://localhost/ à votre navigateur) le code du second paramètre (une fonction de callBack) est exécuté.\r\n// Cette fonction de callBack fourni en premier paramètre de quoi manipuler la requête et en second paramètre de quoi manipuler la réponse qui va être faites au client.\r\nhttpServer.get(\"/\", function (request, response) { // \"/\" indique que nous écoutons la racine du site web.\r\n\tvar\r\n\t\t// Nous définissons l'entête de la page qui va être renvoyé au client. \r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\t\r\n\t\t// Nous définissons son contenu.\r\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\r\n\t\t\t\"&lt;html lang='fr'&gt;\" +\r\n\t\t\t\t\"&lt;head&gt;\"+\r\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\r\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\r\n\t\t\t\t\"&lt;/head&gt;\" +\r\n\t\t\t\t\"&lt;body&gt;\" +\r\n\t\t\t\t\t\"&lt;p&gt;Hello World !&lt;/p&gt;\"\r\n\t\t\t\t\"&lt;/body&gt;\" +\r\n\t\t\t\"&lt;/html&gt;\";\r\n\r\n\t// Nous écrivons l'entête en indiquant que c'est une page valide (OK : 200).\r\n\tresponse.writeHead(200, header);\r\n\r\n\t// Nous écrivons le contenu de la page que l'on va faire afficher par le navigateur client.\r\n\tresponse.write(template);\r\n\r\n\t// Nous informons le serveur qu'il peut enfin envoyer la réponse au client.\r\n\tresponse.end();\r\n});\r\n</pre>\r\n\r\n<p>Faisons quelques tests :</p>\r\n<ul>\r\n\t<li>Exécutez le fichier : <samp>cd C:\\nodejs\\webserver\\</samp> puis <samp>node webserver.js</samp> dans votre console.</li>\r\n\t<li>Réclamez l'adresse <samp>http://localhost:82/</samp> (mettez le bon port) à votre navigateur.</li>\r\n\t<li>Réclamez l'adresse <samp>http://localhost:82/article</samp> (mettez le bon port) à votre navigateur.</li>\r\n</ul>\r\n\r\n<p>L'adresse <samp>http://localhost:82/</samp> nous renvoi le contenu de notre page web tandis que <samp>http://localhost:82/article</samp> nous renvoi « Cannot GET /article ». Effectivement le premier cas fonctionne puisque nous avons défini une réponse à la demande \"/\" qui correspond à la racine du site. Cependant, n'ayant pas défini une réponse à la demande \"/article\" le module Express prend la main et prend la liberté de renvoyer un message d'erreur en <samp>text/plain</samp> (pas en html) avec un code d'erreur 404 dans l'entête http (header).</p>\r\n\r\n<h2>Création d'un petit site web</h2>\r\n\r\n<p>Repartons du code précédent et ajoutons de quoi paramétrer notre site :</p>\r\n<ul>\r\n\t<li>pour que l'on puisse le changer d'adresse et de port d'écoute facilement.</li>\r\n\t<li>pour que l'on puisse passer d'un environnement de Développement/Test/Qualité/Production facilement.</li>\r\n\t<li>Pour qu'il écoute plusieurs pages et également celles qui n'existent pas.</li>\r\n</ul>\r\n\r\n<p>Je vous livre le code final de cette partie si vous souhaitez le comprendre vous-même. Nous allons le décortiquer un peu plus loin.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/*=============================*/\r\n/*== Application web Node.js ==*/\r\n/*=============================*/\r\n\r\nvar\r\n/*== Charger les modules Node.js ==*/\r\n\thttp = require(\"http\"),\r\n\texpress =  require(\"express\"), /* npm install express */\r\n\thttpServer = express(),\r\n\r\n/*== Variables globales de l'application ==*/\r\n\tappConfig = {};\r\n\r\n/*== Paramétrage de l'application ==*/\r\n\r\nhttpServer\r\n/* == Définir un environnement d'exécution : SET NODE_ENV=dev ==*/\r\n\t.configure(function () {\r\n\t\t/* Commun à tous les environnements */\r\n\t})\r\n\t.configure(\"dev\", function () {\r\n\t\t/* Uniquement en environnement de Dev */\r\n\t\tappConfig.host = \"localhost\";\r\n\t\tappConfig.path = \"/\";\r\n\t\tappConfig.httpPort = 82;\r\n\t\tappConfig.url = appConfig.host + ((appConfig.httpPort != 80) ? \":\" + appConfig.httpPort : \"\") + appConfig.path;\r\n\t})\r\n\t.configure(\"test\", function () {\r\n\t\t/* Uniquement en environnement de Test */\r\n\t})\r\n\t.configure(\"qual\", function () {\r\n\t\t/* Uniquement en environnement de Qualité */\r\n\t})\r\n\t.configure(\"prod\", function () {\r\n\t\t/* Uniquement en environnement de Production */\r\n\t}).listen(appConfig.httpPort);\r\n\r\n/*********************************************/\r\n/*** Chemins de réponse - Réécriture d'url ***/\r\n/*********************************************/\r\n\r\n/* Accueil */\r\n// http://www.site.com/\r\nhttpServer.get(appConfig.path, function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\r\n\t\t\t\"&lt;html lang='fr'&gt;\" +\r\n\t\t\t\t\"&lt;head&gt;\" +\r\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\r\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t\"&lt;/head&gt;\" +\r\n\t\t\t\t\"&lt;body&gt;\" +\r\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\r\n\t\t\t\t\"&lt;/body&gt;\" +\r\n\t\t\t\"&lt;/html&gt;\";\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n\r\n/* Connexion */\r\n// http://www.site.com/connexion/\r\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\r\n\t\t\t\"&lt;html lang='fr'&gt;\" +\r\n\t\t\t\t\"&lt;head&gt;\" +\r\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\r\n\t\t\t\t\t\"&lt;title&gt;Page de connexion&lt;/title&gt;\" +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t\"&lt;/head&gt;\" +\r\n\t\t\t\t\"&lt;body&gt;\" +\r\n\t\t\t\t\t\"&lt;form id='login' action='./connexion/' method='POST'&gt;\" +\r\n\t\t\t\t\t\t\"&lt;div&gt;\" +\r\n\t\t\t\t\t\t\t\"&lt;label for='login-email' placeholser='Email'&gt;Email : &lt;/label&gt;\" +\r\n\t\t\t\t\t\t\t\"&lt;input id='login-email' type='text' /&gt;\" +\r\n\t\t\t\t\t\t\"&lt;/div&gt;\" +\r\n\r\n\t\t\t\t\t\t\"&lt;div&gt;\" +\r\n\t\t\t\t\t\t\t\"&lt;label for='login-password' placeholser='Mot de passe'&gt;Mot de passe : &lt;/label&gt;\" +\r\n\t\t\t\t\t\t\t\"&lt;input id='login-password' type='password' /&gt;\" +\r\n\t\t\t\t\t\t\"&lt;/div&gt;\" +\r\n\r\n\t\t\t\t\t\t\"&lt;label&gt;&lt;input type='submit' value='Ok' /&gt;&lt;/label&gt;\" +\r\n\t\t\t\t\t\"&lt;/form&gt;\" +\r\n\t\t\t\t\"&lt;/body&gt;\" +\r\n\t\t\t\"&lt;/html&gt;\";\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n\r\n/* Si aucune page ne match */\r\nhttpServer.use(httpServer.router);\r\nhttpServer.use(function(request, response, next) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = \"&lt;!DOCTYPE html&gt;\" +\r\n\t\t\t\"&lt;html lang='fr'&gt;\" +\r\n\t\t\t\t\"&lt;head&gt;\" +\r\n\t\t\t\t\t\"&lt;meta charset=\\\"utf-8\\\" /&gt;\" +\r\n\t\t\t\t\t\"&lt;title&gt;Page de connexion&lt;/title&gt;\" +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t\"&lt;/head&gt;\" +\r\n\t\t\t\t\"&lt;body&gt;\" +\r\n\t\t\t\t\t\"&lt;p&gt;Cette page n'existe pas.&lt;/p&gt;\" +\r\n\t\t\t\t\"&lt;/body&gt;\" +\r\n\t\t\t\"&lt;/html&gt;\";\r\n\r\n\tresponse.writeHead(404, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n</pre>\r\n\r\n<p>Si vous exécutez la commande <samp>node website.js</samp>, la console va vous renvoyer une erreur : c'est normal.</p>\r\n\r\n<figure>\r\n\t<figcaption>Plantage s'il n'y a pas de variable NODE_ENV</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-no-route.png\" alt=\"Plantage s'il n'y a pas de variable NODE_ENV\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\" />\r\n</figure>\r\n\r\n<h3>Définir des variables de portage</h3>\r\n\r\n<p>Tout d'abord, définissons les quelques variables qu'il va nous falloir changer en cas de déménagement du site.</p>\r\n<ul>\r\n\t<li><span class=\"highlighting\">Le nom de domaine / l'adresse ip du site</span> : pour ce site <span class=\"eye-catching\">blog.haeresis.fr</span></li>\r\n\t<li><span class=\"highlighting\">La racine d'accès aux fichiers</span> : si l'intégralité du site se trouvait derrière <span class=\"eye-catching\">http://www.haeresis.fr/blog/</span>alors ce serait <span class=\"eye-catching\">/blog</span>. Pour ce site c'est simplement <span class=\"eye-catching\">/</span>.</li>\r\n\t<li><span class=\"highlighting\">L'url</span> : elle est composée des deux précédents points et du port (si le port n'est pas 80).</li>\r\n</ul>\r\n\r\n<p>Voyons alors la première partie de <samp>website.js</samp> :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/*******************/\r\n/* Haut du fichier */\r\n/*******************/\r\nvar\r\n/*== Charger les modules Node.js ==*/\r\n\thttp = require(\"http\"), // Disponible de base.\r\n\texpress =  require(\"express\"), // Disponible avec npm.\r\n\thttpServer = express(),\r\n\r\n/*== Variables globales de l'application ==*/\r\n\tappConfig = {}; //On créer un objet vide qui contiendra les variables d'environnement de l'application.\r\n\r\n/*== Paramétrage de l'application ==*/\r\nhttpServer\r\n\t/* Ajout de la configuration du serveur - elle sera utile par la suite */\r\n\t.configure(function () {\r\n\t\tappConfig.host = \"localhost\"; // Ca c'est le host/ip du site.\r\n\t\tappConfig.path = \"/\"; // Ca c'est le dossier de base du site.\r\n\t\tappConfig.httpPort = 82; // Ca c'est le port d'écoute du site.\r\n\t\t\r\n\t\t// Ci-dessous la création automatique d'un lien absolue jusqu'aux resources.\r\n\t\tappConfig.url = appConfig.host + ((appConfig.httpPort != 80) ? \":\" + appConfig.httpPort : \"\") + appConfig.path;\r\n\t})\r\n\t.listen(appConfig.httpPort); // On écoute le port paramétré.\r\n</pre>\r\n\r\n<h3>Définir un environnement d'exécution</h3>\r\n\r\n<p>Nous alons modifier le code précédent en utilisant plusieurs fonctions <samp>configure</samp> à la suite de Express. Effectivement, en ajoutant un premier paramètre, il est possible de limiter l'exécution de la configuration aux environnements dont la variable <samp>NODE_ENV</samp> sera égale à ce paramètre.</p>\r\n\r\n<p>Modifions le code précédent de <samp>website.js</samp> :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/*******************/\r\n/* Haut du fichier */\r\n/*******************/\r\nvar\r\n/*== Charger les modules Node.js ==*/\r\n\thttp = require(\"http\"),\r\n\texpress =  require(\"express\"),\r\n\thttpServer = express(),\r\n\r\n/*== Variables globales de l'application ==*/\r\n\tappConfig = {};\r\n\r\n/*== Paramétrage de l'application ==*/\r\nhttpServer\r\n\t.configure(function () {\r\n\t\t/* Commun à tous les environnements */\r\n\t})\r\n\t.configure(\"dev\", function () { // Ne sera exécuté que si NODE_ENV vaut \"dev\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\r\n\t\t/* Uniquement en environnement de Dev */\r\n\t\tappConfig.host = \"localhost\";\r\n\t\tappConfig.path = \"/\";\r\n\t\tappConfig.httpPort = 82;\r\n\t\tappConfig.url = appConfig.host + ((appConfig.httpPort != 80) ? \":\" + appConfig.httpPort : \"\") + appConfig.path;\r\n\t})\r\n\t.configure(\"test\", function () { // Ne sera exécuté que si NODE_ENV vaut \"test\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\r\n\t\t/* Uniquement en environnement de Test */\r\n\t})\r\n\t.configure(\"qual\", function () { // Ne sera exécuté que si NODE_ENV vaut \"qual\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\r\n\t\t/* Uniquement en environnement de Qualité */\r\n\t})\r\n\t.configure(\"prod\", function () { // Ne sera exécuté que si NODE_ENV vaut \"prod\". Dans le code c'est la variable process.env.NODE_ENV qui est testé par configure.\r\n\t\t/* Uniquement en environnement de Production */\r\n\t})\r\n\t.listen(appConfig.httpPort);\r\n</pre>\r\n\r\n<p>Revenons sur l'erreur d'exécution que nous avons eu en essayant d'exécuter le script complet (<samp>Error: Router#get() requires a path</samp>). Afin de résoudre ce problème, définissez dans votre console la variable d'environnement <samp>NODE_ENV</samp> avec la commande <samp>SET NODE_ENV=dev</samp> (uniquement sous Windows) ce qui permettra à la variable <samp>process.env.NODE_ENV</samp> d'être testée à « dev » dans la fonction <samp>configure()</samp> de Express. Il est possible que cette variable disparaisse au redémarrage de la machine.</p>\r\n\r\n<h3>Créer plusieurs pages</h3>\r\n\r\n<p>Notre site web sera constitué de plusieurs pages. Il n'y a rien de plus simple. Il suffit de router d'autres requêtes GET que « / ».</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/*********************/\r\n/* Milieu du fichier */\r\n/*********************/\r\n\r\n/* Accueil */\r\n// http://localhost:82/\r\nhttpServer.get(appConfig.path, function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\r\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\r\n\t\t\t\t'&lt;head&gt;' +\r\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\r\n\t\t\t\t\t'&lt;title&gt;Ma première page&lt;/title&gt;' +\r\n\t\t\t\t\t'&lt;base href=\"//' + appConfig.url + '\" /&gt;' +\r\n\t\t\t\t'&lt;/head&gt;' +\r\n\t\t\t\t'&lt;body&gt;' +\r\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\r\n\t\t\t\t'&lt;/body&gt;' +\r\n\t\t\t'&lt;/html&gt;';\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n\r\n/* Connexion */\r\n// http://localhost:82/connexion/\r\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\r\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\r\n\t\t\t\t'&lt;head&gt;' +\r\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\r\n\t\t\t\t\t'&lt;title&gt;Page de connexion&lt;/title&gt;' +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t'&lt;/head&gt;' +\r\n\t\t\t\t'&lt;body&gt;' +\r\n\t\t\t\t\t'&lt;form id=\"login\" action=\"./connexion/\" method=\"POST\"&gt;' +\r\n\t\t\t\t\t\t'&lt;div&gt;' +\r\n\t\t\t\t\t\t\t'&lt;label for=\"login-email\" placeholser=\"Email\"&gt;Email : &lt;/label&gt;' +\r\n\t\t\t\t\t\t\t'&lt;input id=\"login-email\" type=\"text\" /&gt;' +\r\n\t\t\t\t\t\t'&lt;/div&gt;' +\r\n\r\n\t\t\t\t\t\t'&lt;div&gt;' +\r\n\t\t\t\t\t\t\t'&lt;label for=\"login-password\" placeholser=\"Mot de passe\"&gt;Mot de passe : &lt;/label&gt;' +\r\n\t\t\t\t\t\t\t'&lt;input id=\"login-password\" type=\"password\" /&gt;' +\r\n\t\t\t\t\t\t'&lt;/div&gt;' +\r\n\r\n\t\t\t\t\t\t'&lt;label&gt;&lt;input type=\"submit\" value=\"Ok\" /&gt;&lt;/label&gt;' +\r\n\t\t\t\t\t'&lt;/form&gt;' +\r\n\t\t\t\t'&lt;/body&gt;' +\r\n\t\t\t'&lt;/html&gt;';\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n</pre>\r\n\r\n<p>Vous aurez à présent également du contenu à l'adresse <samp>http://localhost:82/connexion/</samp>.</p>\r\n\r\n<p class=\"eye-catching\">Note : la balise <samp>&lt;base&gt;</samp> des lignes 14 et 39 permet de forcer le début des liens relatifs. Ainsi peut importe la profondeur du chemin de la page, la racine sera toujours celle du site et non celle de la page courante.</p>\r\n\r\n<h3>Les pages non existantes</h3>\r\n\r\n<p>Afin de changer la réponse de votre serveur quand un fichier inexistant est réclamé (aucun contenu n'est associé à la demande GET) il va falloir définir un contenu 404 par défaut.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/******************/\r\n/* Bas du fichier */\r\n/******************/\r\n\r\n/* Si aucune page ne match */\r\nhttpServer.use(httpServer.router); // On se place après la vérification de toutes les requêtes associées à un contenu.\r\n\r\n// On renvoi un contenu.\r\nhttpServer.use(function(request, response, next) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\r\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\r\n\t\t\t\t'&lt;head&gt;' +\r\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\r\n\t\t\t\t\t'&lt;title&gt;Page de connexion&lt;/title&gt;' +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t'&lt;/head&gt;' +\r\n\t\t\t\t'&lt;body&gt;' +\r\n\t\t\t\t\t'&lt;p&gt;Cette page n\\'existe pas.&lt;/p&gt;' +\r\n\t\t\t\t'&lt;/body&gt;' +\r\n\t\t\t'&lt;/html&gt;';\r\n\r\n\tresponse.writeHead(404, header); // On précise que la page n'existe pas avec le Code : 404.\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n</pre>\r\n\r\n<h2>Récupérer du contenu avec la méthode POST</h2>\r\n\r\n<p>Rendez-vous à l'adresse <samp>http://localhost:82/connexion/</samp> et cliquez sur le bouton Ok. Quel surprise ! Un joli message : « Cette page n'existe pas. » vous attend alors que pourtant vous n'avez même pas changé de page !</p>\r\n\r\n<p>En fait, quand vous rejoignez la page « http://localhost:82/connexion/ » en suivant un lien ou directement par l'url vous réclamez ce fichier en GET. Hors la fonction <samp>get()</samp> ne répond pas à une demande faites en POST ce qui est le cas de la demande du formulaire en cliquant sur « Ok ».</p>\r\n\r\n<p>Modifions l'écoute de « http://localhost:82/connexion/ » pour ajouter une écoute POST grâce à <samp>post()</samp> en plus de l'écoute GET.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* *** */ \r\n\r\n/* Connexion */\r\n// http://localhost:82/connexion/\r\n\r\n// On créer une fonction chargée de répondre à la demande.\r\n// Ceci est ni plus, ni moins le code qui était directement exécuté dans httpServer.get().\r\nfunction connectionRender(request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\r\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\r\n\t\t\t\t'&lt;head&gt;' +\r\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\r\n\t\t\t\t\t'&lt;title&gt;Page de connexion&lt;/title&gt;' +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t'&lt;/head&gt;' +\r\n\t\t\t\t'&lt;body&gt;' +\r\n\t\t\t\t\t'&lt;form id=\"login\" action=\"./connexion/\" method=\"POST\"&gt;' +\r\n\t\t\t\t\t\t'&lt;div&gt;' +\r\n\t\t\t\t\t\t\t'&lt;label for=\"login-email\" placeholser=\"Email\"&gt;Email : &lt;/label&gt;' +\r\n\t\t\t\t\t\t\t'&lt;input id=\"login-email\" type=\"text\" /&gt;' +\r\n\t\t\t\t\t\t'&lt;/div&gt;' +\r\n\r\n\t\t\t\t\t\t'&lt;div&gt;' +\r\n\t\t\t\t\t\t\t'&lt;label for=\"login-password\" placeholser=\"Mot de passe\"&gt;Mot de passe : &lt;/label&gt;' +\r\n\t\t\t\t\t\t\t'&lt;input id=\"login-password\" type=\"password\" /&gt;' +\r\n\t\t\t\t\t\t'&lt;/div&gt;' +\r\n\r\n\t\t\t\t\t\t'&lt;label&gt;&lt;input type=\"submit\" value=\"Ok\" /&gt;&lt;/label&gt;' +\r\n\t\t\t\t\t'&lt;/form&gt;' +\r\n\t\t\t\t'&lt;/body&gt;' +\r\n\t\t\t'&lt;/html&gt;';\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\t\r\n}\r\n// On répond à la demande en GET et/ou en POST.\r\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\r\n\tconnectionRender(request, response);\r\n}).post(appConfig.path + \"connexion\", function (request, response) { // Ajout d'une réponse à une demande de contenu en POST.\r\n\tconnectionRender(request, response);\r\n});\r\n\r\n/* *** */\r\n</pre>\r\n\r\n<h2>Avant la suite</h2>\r\n\r\n<h3>Réflexion sur notre script</h3>\r\n\r\n<p>Là où un développement traditionnel consiste à déposer des fichiers dans des dossiers et de les fournir depuis l'adresse physique sur le serveur, Node.js embarque nativement la réécriture d'url et propose d'associer à une demande, un contenu. Avec encore plusieurs couches d'abstractions nous verrons comment déporter les contenus de fichier dans de vrais fichiers .htm à part.\r\n<p>Cela signifie également que <span class=\"highlighting\">si vous n'avez pas décidé qu'un contenu/fichier est renvoyé par le serveur sous tel requête GET, POST ou autre, rien ne parviendra jamais au client</span>. Très bon point pour la sécurité.</p>\r\n<p>Pour finir : avez-vous essayé de modifier le contenu de votre script et rechargé une page dans votre navigateur sans voir aucunes modifications ? Etonnant non ? Les fichiers serveur peuvent être modifiés à chaud et <span class=\"highlighting\">aucunes modifications</span> ne sera effectives tant que le script n'aura pas été ré-exécuté (je parle de <samp>website.js</samp>).</p>\r\n\r\n<h3>Prochaines étapes</h3>\r\n\r\n<p>La partie précédente montre comment répondre à une demande en POST mais ne montre pas comment exploiter les paramètres envoyés. De plus ce morceau de script est très frustrant : un seul fichier pour plusieurs pages, HTML mélangé dans le code, pas d'appel de CSS et/ou de JS... Je vais vous demandez un peu de patience car nous verrons ça prochainement. En attendant, l'heure est venu pour nous d'<a href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">utiliser jQuery côté serveur sur Windows</a> !</p>\r\n\r\n<h2>Source</h2>\r\n\r\n<p>Vous pouvez <a href=\"./upload/script/website.js\" title=\"Télécharger le fichier résultat de cet article\">télécharger le fichier résultat de cet article ici</a>.</p>", "dates" : { "published" : "2013-05-02 15:30:00", "updated" : [ "2013-05-02 15:30:00" ] }, "title" : "<span>Serveur web</span> et <span>application web</span> en <span>JavaScript</span>", "urn" : "serveur-web-et-application-web-en-javascript" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ac" }, "cache" : { "comment" : { "number" : 1 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48c4" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48bf" } ], "content" : "<p>Vous est-il arrivé d'utiliser une fonction JavaScript en maudissant son concepteur parce qu'il avait oublié un détail important... vous permettre de faire quelque chose <span class=\"highlighting\">après</span> l'exécution de son code ! Ça m'arrive trop souvent ces derniers temps et ça ne serait pas non plus la fin du monde si les concepteurs n'avaient pas en plus eu la bonne idée de ne fournir que la version minifiée de leur développement ! Merci pour le partage « Dude » ;)</p>\r\n\r\n<p>Je vais vous raconter une histoire.</p>\r\n\r\n<h2>C'est l'histoire d'un gars sympa qui développe un plugin jQuery...</h2>\r\n\r\n<p>Notre développeur à un besoin. Il estime également que ce besoin est assez générique, que personne n'y a encore pensé et qu'il veut aider son prochain. Notre développeur est très altruiste. Sans plus tarder voici le plugin jQuery qui écris un paragraphe en italique après un autre élément ! Enfin, il faut le développer : alors commençons.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/*** Ce plugin est dépendant de la librairie http://www.jquery.com/ ***/\r\n\r\n// Présence du \";\" pour ne pas être influancer par les erreurs des scripts précédents.\r\n// Création d'une fonction anonyme donnant accès à la variable \"$\" via son premier paramètre. \r\n;(function ($) {\r\n\r\n\t// Ajout d'une fonction \"addItalicTextAfter\" à l'objet contenu dans \"$\" dans la liste de fonctions \"fn\".\r\n\t$.fn.addItalicTextAfter = function () {\r\n\t\r\n\t\t// Retour d'exécution de chaque élément trouvé par \"$('un sélecteur quelconque')\".\r\n\t\treturn this.each(function () {\r\n\t\t\r\n\t\t\t// Je crée, je style et je remplis une balise p.\r\n\t\t\tvar p = $(\"&lt;p&gt;\").css(\"font-style\", \"italic\").text(\"J'écris ce texte après mon exemple d'utilisation !\");\r\n\t\t\t$(this).after(p); // Et hop, on ajoute ça après la cible courante.\r\n\t\t});\r\n\t}\r\n\t\r\n// J'exécute tout de suite ma jolie fonction anonyme en lui passant comme paramètre l'objet jQuery (fourni par la librairie jQuery) pour la manipuler via \"$\" comme prévu dans la dite fonction.\r\n})(jQuery);\r\n</pre>\r\n\r\n<p>Notre gars sympa imagine déjà comment le développeur final vas utiliser son plugin sur un élément avec l'id <samp>first-example</samp>.</p>\r\n\r\n<pre id=\"first-example\" class=\"prettyprint linenums lang-javascript\">\r\n\t$(\"#first-example\").addItalicTextAfter();\r\n</pre>\r\n\r\n<h3>...qui permet de changer le texte de la fonctionnalité...</h3>\r\n\r\n<p>Mais notre développeur ne s'arrête pas là, il permet également de changer le contenu du texte à ajouter !</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\"> \r\n;(function ($) {\r\n\t// Ajout d'un paramètre d'utilisation pour changer le contenu.\r\n\t$.fn.addItalicTextAfter = function (content) {\r\n\t\r\n\t\t// Mais si on ne souhaite pas changer le contenu, il y en a toujours un par défaut.\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar p = $(\"&lt;p&gt;\").css(\"font-style\", \"italic\")\r\n\t\t\t\r\n\t\t\t\t// J'ajoute mon contenu initial ou modifié.\r\n\t\t\t\t.text(content);\r\n\t\t\t\t\r\n\t\t\t$(this).after(p);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n</pre>\r\n\r\n<p>Ce qui donne à l'utilisation sur l'id <samp>second-example</samp> :</p>\r\n\r\n<pre id=\"second-example\" class=\"prettyprint linenums lang-javascript\">\r\n\t$(\"#second-example\").addItalicTextAfter(\"Et celui-ci après mon autre exemple !\");\r\n</pre>\r\n\r\n<h3>...qui se soucie de l'aspect et des performances...</h3>\r\n\r\n<p>Il décide même de permettre la customisation de son rendu : style, classe, balise : il pense ne rien omettre.</p>\r\n\r\n<p class=\"highlighting\">Conscient qu'il ne connait pas le nombre d'éléments ciblés et donc le temps de « bloquage » imposé par son script, il va même jusqu'à rendre le traitement asynchrone ! Vraiment sympa ce gars.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\"> \r\n;(function ($) {\r\n\t$.fn.addItalicTextAfter = function (content, params) {\r\n\t\r\n\t\t// Si le développeur ne souhaite pas changer la phrase initiale et qu'il met directement les paramètres...\r\n\t\tif (typeof content === \"object\") {\r\n\t\t\t// ... \"params\" est \"content\"...\r\n\t\t\tparams = content;\r\n\t\t\t// ...et il n'y a pas de \"content\" au final.\r\n\t\t\tcontent = null;\r\n\t\t}\r\n\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\t\t\r\n\t\t// On créé un objet anonyme avec les propriétés style, class et tag dans la fonction extend.\r\n\t\t// Celle-ci va placer l'objet dans la variable \"params\" en lui ajoutant les éventuelles propriétés déjà existantes depuis \"params\" passé en paramètre.\r\n\t\t// Ça permet de définir des paramètres par défaut écrasés par ceux passés en paramètre de la fonction.\r\n\t\tparams = $.extend({\r\n\t\t\t\"style\": { \"font-style\": \"italic\" },\r\n\t\t\t\"class\": \"\",\r\n\t\t\t\"tag\": \"p\"\r\n\t\t}, params);\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\t// Création de $this pour étendre l'utilisation de $(this) dans un setTimeout.\r\n\t\t\tvar $this = $(this);\r\n\t\t\t\r\n\t\t\t// A partir d'ici, le code exécuté est asynchrone.\r\n\t\t\t// La suite des instructions sera exécuté avant, après, pendant la suite... nous n'en avons aucune idée.\r\n\t\t\t// L'avantage est que si le temps de traitement ci-dessous est long, il ne bloque pas notre script, ni même notre page.\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tvar \r\n\t\t\t\t\t// Je crée un tableau de class à ajouter (si plusieurs class sont passées).\r\n\t\t\t\t\teachClass = params.class.split(\" \"),\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tp = $(\"&lt;\" + params.tag + \"&gt;\") // Je place la balise souhaitée...\r\n\t\t\t\t\t\t.css(params.style) // ...avec le style souhaité...\r\n\t\t\t\t\t\t.text(content); // ...et le contenu souhaité.\r\n\t\t\t\t\r\n\t\t\t\t// J'ajoute chacune des classes du tableau à mon objet.\r\n\t\t\t\tfor\t(var i in eachClass) {\r\n\t\t\t\t\tp.addClass(eachClass[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Le mécanisme précédent pouvait être simplement remplacé par :\r\n\t\t\t\t// p.attr(\"class\", params.class) car il n'est pas sensé y avoir \"déjà\" des classes sur l'objet créé.\r\n\t\t\t\t// Cependant prenez l'habitude de faire ainsi pour éviter \"d'écraser\" les classes déjà présentes.\r\n\t\t\t\t\r\n\t\t\t\t// Utilisation de $this car $(this) n'existe plus dans le setTimeout.\r\n\t\t\t\t$this.after(p);\r\n\t\t\t}, 0); // Ne perdons pas une seconde à exécuter notre code donc mettons 0 milliseconde de délai.\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n</pre>\r\n\r\n<p>Ce qui donne à l'utilisation sur l'id <samp>third-example</samp> :</p>\r\n\r\n<pre id=\"third-example\" class=\"prettyprint linenums lang-javascript\">\r\n\t$(\"#third-example\").addItalicTextAfter(\r\n\t\t\"Dommage que mon nom de fonction ne veuille plus rien dire !\", {\r\n\t\t\tclass: \"warning my-example\",\r\n\t\t\tstyle: { \"font-weight\": \"bold\", \"font-size\": \"0.8em\" } \r\n\t\t}\r\n\t);\r\n</pre>\r\n\r\n<h3>...mais qui oublie de mettre une Callback !</h3>\r\n\r\n<p>C'est bien beau tout ça. Notre développeur partage donc son œuvre, sans donner le code source (non minifié), sans même mettre en place de support ou un moyen de le contacter. Il oublie même qu'il avait développé son super plugin bien utile.</p>\r\n\r\n<p>Mais ce à quoi notre développeur sympa n'a pas pensé, c'est que le développeur utilisateur du plugin veut peut-être rajouter ceci après son code :</p>\r\n\r\n<pre id=\"fourth-example\" class=\"prettyprint linenums lang-javascript\">\r\n\t$(\"#fourth-example\").addItalicTextAfter(\"Marche pas...\", { class: \"my-target like-a\" });\r\n\t\r\n\t// Souhaite permettre une alerte au clique sur l'élément.\r\n\t$(\".my-target\").click(function () {\r\n\t\talert(\"« Ah bah pas cool :/ » - Christophe L.\");\r\n\t});\r\n\t// Mais sans succès...\r\n</pre>\r\n\r\n<p class=\"highlighting\">FAIL...</p>\r\n\r\n<h2>La Callback : bonne pratique de développement asynchrone</h2>\r\n\r\n<p>C'est une énorme problème de la part de notre développeur sympa que de ne pas avoir mis de Callback ou Fonction de rappel ! Ça a rendu des tas de développeurs tristes ! Peut-être que ça a même tué des petits chats.</p>\r\n\r\n<p>Dans notre exemple précédent, l'exécution du code est asynchrone ce qui signifie qu'il n'y a aucun moyen de savoir quand le code exécuté sera fini, donc aucun moyen de savoir quand l'élément portant la classe <samp>my-target</samp> sera ajouté au DOM et donc aucun moyen de savoir si l'évènement <samp>onclick</samp> ajouté à la suite va cibler un élément ou cibler le vide. Alors on fait quoi maintenant ? On met à notre tour un <samp>setTimeout</samp> en croisant les doigts pour que nos éléments soient arrivés dans le DOM avant qu'on exécute de quoi leur associer un <samp>onclick</samp> ? On va voir ça plus loin dans les mauvaises pratiques. Pour le moment : ajoutons notre Callback.</p>\r\n\r\n<h3>La Fonction de rappel dans une fonction asynchrone</h3>\r\n\r\n<p>Voici ce qu'on aurait pu faire si nous avions au minima les sources.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\"> \r\n;(function ($) {\r\n\t$.fn.addItalicTextAfter = function (content, params, callback) {\r\n\t\r\n\t\t// Si l'utilisateur tape un \"content\", mais ne donne pas de \"params\"...\r\n\t\tif (typeof params === \"function\") {\r\n\t\t\t// ...\"params\" est \"callback\"...\r\n\t\t\tcallback = params;\r\n\t\t\t// ...et il n'y a pas de \"params\".\r\n\t\t\tparams = null;\r\n\t\t}\r\n\r\n\t\t// Si l'utilisateur ne saisit qu'une fonction en premier paramètre...\r\n\t\tif (typeof content === \"function\") {\r\n\t\t\t// ...\"content\" est \"callback\"...\r\n\t\t\tcallback = content;\r\n\t\t\t// ...il n'y a pas de \"params\"...\r\n\t\t\tparams = null;\r\n\t\t\t// ...et il n'y a pas de \"content\"...\r\n\t\t\tcontent = null;\r\n\t\t} else if (typeof content === \"object\") {\r\n\t\t\tparams = content;\r\n\t\t\tcontent = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\r\n\t\tparams = $.extend({\r\n\t\t\t\"style\": { \"font-style\": \"italic\" },\r\n\t\t\t\"class\": \"\",\r\n\t\t\t\"tag\": \"p\"\r\n\t\t}, params);\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar $this = $(this);\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tvar \r\n\t\t\t\t\teachClass = params.class.split(\" \"),\r\n\t\t\t\t\tp = $(\"&lt;\" + params.tag + \"&gt;\")\r\n\t\t\t\t\t\t.css(params.style)\r\n\t\t\t\t\t\t.text(content);\r\n\t\t\t\t\r\n\t\t\t\tfor\t(var i in eachClass) {\r\n\t\t\t\t\tp.addClass(eachClass[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this.after(p);\r\n\t\t\t\t\r\n\t\t\t\t// Dans le cas ou une Callback a été passé on l'exécute.\r\n\t\t\t\t// On ne sait pas quand elle sera exécutée, mais ce que l'on sait, c'est que l'objet créé sera déjà dans le DOM.\r\n\t\t\t\tif (typeof callback === \"function\") {\r\n\t\t\t\t\t// On exécute la Callback.\r\n\t\t\t\t\t// On a arbitrairement décidé, parce que ça semblait utile, de passer en paramètre de Callback l'objet créé.\r\n\t\t\t\t\t// Le développeur pourra même manipuler l'objet créé sans le re-cibler après traitement.\r\n\t\t\t\t\tcallback(p);\r\n\t\t\t\t}\r\n\t\t\t}, 0);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n</pre>\r\n\r\n<p>Et je fais un utilisateur/développeur heureux qui cible l'id <samp>fifth-example</samp> :</p>\r\n\r\n<pre id=\"fifth-example\" class=\"prettyprint linenums lang-javascript\">\r\n// Définition du code qui sera exécuté après \"addItalicTextAfter\".\r\nfunction whatIwantExecuteAfter(element) {\r\n\t// \"element\" contient l'objet créé par \"addItalicTextAfter\".\r\n\telement\r\n\t\t.text(\"J'écris ce que je veux avec le style que je veux !\") // On change le texte nous-mêmes au lieu de passer par la fonction \"addItalicTextAfter\".\r\n\t\t.addClass(\"like-a\") // On change la class nous-mêmes au lieu de passer par la fonction \"addItalicTextAfter\".\r\n\t\t\r\n\t\t// On ajoute un évènement au clique sur l'élément.\r\n\t\t.click(function () {\r\n\t\t\talert(\"« Merci monsieur Morpheus ! » - Keanu R.\");\r\n\t\t});\r\n}\r\n\r\n$(\"#fifth-example\").addItalicTextAfter(whatIwantExecuteAfter);\r\n</pre>\r\n\r\n<p>Il est également possible de directement passer par une fonction anonyme. Les développeurs jQuery y sont habitués !</p>\r\n\r\n<pre id=\"sixth-example\" class=\"prettyprint linenums lang-javascript\">\r\n$(\"#sixth-example\").addItalicTextAfter(function (element) {\r\n\telement\r\n\t\t.text(\"J'écris encore ce que je veux, et ouais !\")\r\n\t\t.addClass(\"like-a\")\r\n\t\t.click(function () {\r\n\t\t\talert(\"« Monde de merde ! » - Laurence F.\");\r\n\t\t});\r\n});\r\n</pre>\r\n\r\n<h3>Déléguer à la Callback est une bonne chose</h3>\r\n\r\n<p>On s'aperçoit aisément qu'au final, l'ajout de style, ou de texte, etc... peut également être fait par la Callback à condition de lui en donner les moyens. Il faut donc se limiter à ce que votre développement doit faire et <span class=\"highlighting\">toujours</span> laisser des portes de sorties dans vos traitements.</p>\r\n\r\n<h3>Plusieurs Callbacks pour un traitement</h3>\r\n\r\n<p>Il ne faut pas hésiter à parsemer son code de Callbacks aux endroits stratégiques pour changer le comportement de votre code. Dans notre exemple précédent, on pourrait avoir une Callback pour chaque élément traité et une Callback quand tous les éléments sont traités.</p>\r\n\r\n<h2>Les mauvaises pratiques pour rattraper la boulette</h2>\r\n\r\n<p>Comme toujours les solutions ne manquent pas quand un développeur sympa à « oublié » de proposer une Fonction de rappel dans son développement qu'il a eu la délicatesse de minifier.</p>\r\n\r\n<h3>La vilaine fonction jQuery live</h3>\r\n\r\n<p>La fonction <samp>jQuery(target).live(event, callback)</samp> est utilisé à la place de <samp>jQuery(target).bind(event, callback)</samp> (ou <samp>jQuery(target).on(event, callback)</samp>) par les développeurs qui ont une méconnaissance totale de l'ordre d'exécution d'un code dans plusieurs fichiers JavaScript éparpillés sur une page HTML elle-même remplit de balises <samp>&lt;script&gt;</samp> dans tous les coins...</p>\r\n\r\n<p>Mais sinon elle permet d'associer un évènement sur un élément du DOM <span class=\"highlighting\">qui n'est pas encore présent</span> dans celui-ci. Nous allons l'utiliser de la manière la « plus propre » possible pour corriger le problème précédent. Écoutons en « live » l'arrivée d'éléments après l'id <samp>seventh-example</samp>.</p>\r\n\r\n<pre id=\"seventh-example\" class=\"prettyprint linenums lang-javascript\">\r\n\t$(\"#seventh-example\").addItalicTextAfter({ class: \"my-target like-a\" });\r\n\t\r\n\t// Je décide d'écouter en boucle les nouveaux éléments \".my-target\" ajouté dans le DOM.\r\n\t// Cette action se fera à intervalle régulier et le code exécuté ci-dessous l'ai lui-même de manière asynchrone.\r\n\t$(\".my-target\").live(\"click\", function () {\r\n\t\t// Dès qu'un élément \".my-target\" est ajouté au DOM l'évènement \"onclick\" lui est ajouté.\r\n\t\talert(\"« Hey, Mais ça sent la merde ? » - Christophe L.\");\r\n\t\t// Nous allons arrêter cette écoute de nouveaux éléments ajoutés car nous savons qu'il n'y en aura pas d'autres.\r\n\t\t$(this).die(\"click\"); // Ça, \"die\", c'est ce qui rend \"assez propre\" l'utilisation de live.\r\n\t});\r\n</pre>\r\n\r\n<p class=\"eye-catching\">Note : la fonction <samp>die</samp> n'enlève pas l'évènement \"onlclick\" d'un élément. Elle se contente de faire arrêter l'écoute des nouveaux éléments ciblés dans le DOM qui sont arrivés.</p>\r\n\r\n<p>Vous pouvez cependant constater que cela a marché car il n'y a eu qu'un seul élément d'ajouté. S'il y en avait eu plusieurs, il aurait fallu exécuter <samp>die</samp> qu'avec le dernier arrivé ce qui aurait compliquer la tâche. Une simple fonction de Callback, c'est tout ce qu'il vous aurait fallu.</p>\r\n\r\n<p>L'inconvénient de <samp>live</samp> c'est qu'il ne marche qu'avec un nombre limité d'évènement. Voyons juste après la méthode universelle.</p>\r\n\r\n<h3>Le vilain setInterval passe partout</h3>\r\n\r\n<p>Avec, comme précédemment, une utilisation propre du <samp>setInterval</samp> on peut également s'en sortir. Voyez plutôt ça sur l'id <samp>eighth-example</samp>.</p>\r\n\r\n<pre id=\"eighth-example\" class=\"prettyprint linenums lang-javascript\">\r\n\t$(\"#eighth-example\").addItalicTextAfter({ class: \"my-example like-a\" });\r\n\t// On va vérifier à intervalle de 50 millisecondes le nombre d'éléments \".my-example\" sur la page.\r\n\tvar tempExampleInterval = setInterval(function () {\r\n\t\t// On s'attend au maximum à en recevoir un.\r\n\t\tif ($(\".my-example\").length == 1) {\r\n\t\t\r\n\t\t\t// Dès qu'on a un \".my-example\" dans le DOM on ajoute l'évènement à l'objet...\r\n\t\t\t$(\".my-example\").click(function () {\r\n\t\t\t\talert(\"« Nan mais c'est bon tu m'as soûlé moi, j'en veux pas de ton monde pourri moi... » - Keanu R.\");\r\n\t\t\t});\r\n\t\t\t// ...et on arrête le \"setInterval\".\r\n\t\t\tclearInterval(tempExampleInterval);\r\n\t\t}\r\n\t}, 50);\r\n</pre>\r\n\r\n<p>Comme pour l'exemple précédent, il n'y a pas de solution miracle. Il faut connaître le nombre d'élément qu'on s'attend à avoir pour mettre fin au timer. Si on ne le fait pas, notre page peut vite devenir une foire aux timers et aux codes inutilements exécutés.</p>\r\n\r\n<h2>Un petit cas concret avec le script SyntaxHighlighter</h2>\r\n\r\n<p>Le code JavaScript présenté dans cet article (à l'heure où j'ecris ces lignes) est écrit à la source sans couleurs. C'est le script JavaScript <a href=\"https://bitbucket.org/alexg/syntaxhighlighter/issue/283/highlighter-complete-callback\" title=\"SyntaxHighlighter\">SyntaxHighlighter</a> qui repasse sur tous les éléments pour les colorier, leur ajouter un nombre de ligne, etc... Cette transformation est asynchrone et il n'existe pas de Callback.</p>\r\n\r\n<h3>Utilisation d'un setInterval pour remplacer la Callback</h3>\r\n\r\n<p>Voici le code utiliser pour vous permettre \"d'agripper\" les exemples de code au clique gauche de la souris et de faire défiler le code.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\nvar \r\n\t// On compte les éléments qui vont nécessiter d'être transformé.\r\n\t// Le développeur a pensé à cette fonctionnalité.\r\n\t// Mais a oublié de mettre une Callback...\r\n\tbeforeHighlighted = SyntaxHighlighter.findElements().length,\r\n\tafterHighlighted;\r\n\r\n// Utilisation standard du script. \r\n// Voilà, à la fin de l'exécution de cette fonction asynchrone, notre code sera tout beau.\r\nSyntaxHighlighter.all();\r\n\r\n// Maintenant je veux permettre de glisser le code sur l'axe des y en maintenant ma souris enfoncée.\r\n// C'est impossible car les éléments à accrocher n'existerons qu'à la fin de l'exécution de \"SyntaxHighlighter.all();\", fin d'exécution que je ne connais pas...\r\n// Et comme déjà dit (il me semble) : pas de Callback.\r\n\r\n// On va boucler à l'intérieur de cette propre fonction jusqu'à ce que le traitement puisse commencer.\r\n(function eachElementHighlighted() {\r\n\t// Nous allons vérifier au bout de 100 milisecondes...\r\n\tsetTimeout(function () {\r\n\t\r\n\t\t// ...le nombre d'élément déjà transformé.\r\n\t\tafterHighlighted = $('.syntaxhighlighter');\r\n\t\t\r\n\t\t// S'il y a autant d'élément transformé que d'élément qu'il fallait transformer on passe dans le else.\r\n\t\t// Sinon on revérifie une nouvelle fois dans le if.\r\n\t\tif (afterHighlighted.length < beforeHighlighted) {\r\n\t\t\teachElementHighlighted();\r\n\t\t} else {\r\n\t\t\r\n\t\t\t/***************************************************************/\r\n\t\t\t/* Ici commence seulement le code utile à la fonctionnalité !! */\r\n\t\t\t/***************************************************************/\r\n\t\t\r\n\t\t\tif (!Modernizr.touch) {\r\n\t\t\t\tvar $sh = $(\".syntaxhighlighter\").css(\"overflow\",\"hidden\");\r\n\t\t\t\t$sh.mousedown(function (e) {\r\n\t\t\t\t\t$.data(this, \"draggable\", true);\r\n\t\t\t\t\t$.data(this, \"offset\", e.pageX);\r\n\t\t\t\t}).mouseup(function () {\r\n\t\t\t\t\t$.data(this, \"draggable\", false);\r\n\t\t\t\t\t$.data(this, \"offset\", 0);\r\n\t\t\t\t}).mouseleave(function () {\r\n\t\t\t\t\t$.data(this, \"draggable\", false);\r\n\t\t\t\t\t$.data(this, \"offset\", 0);\r\n\t\t\t\t}).mousemove(function (e) {\r\n\t\t\t\t\tif ($(this).data(\"draggable\")) {\r\n\t\t\t\t\t\t$(this).scrollLeft(parseInt($(this).scrollLeft() + ($(this).data(\"offset\") - e.pageX), 10));\r\n\t\t\t\t\t\t$.data(this, \"offset\", e.pageX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}).data(\"draggable\", false).data(\"offset\", 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**************************************************************/\r\n\t\t}\r\n\t}, 100); // On a mis 100 millisecondes. Il faut trouver le compromis entre nombre de vérification et perte de temps possible avant première vérification.\r\n})();\r\n</pre>\r\n\r\n<h3>Adieu setInterval, merci Fonction de rappel !</h3>\r\n\r\n<p>Voici ce que pourrait donner le code précédent avec une Callback...</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\nSyntaxHighlighter.all(function ($sh) {\r\n\tif (!Modernizr.touch) {\r\n\t\t$sh.css(\"overflow\",\"hidden\");\r\n\t\t$sh.mousedown(function (e) {\r\n\t\t\t$.data(this, \"draggable\", true);\r\n\t\t\t$.data(this, \"offset\", e.pageX);\r\n\t\t}).mouseup(function () {\r\n\t\t\t$.data(this, \"draggable\", false);\r\n\t\t\t$.data(this, \"offset\", 0);\r\n\t\t}).mouseleave(function () {\r\n\t\t\t$.data(this, \"draggable\", false);\r\n\t\t\t$.data(this, \"offset\", 0);\r\n\t\t}).mousemove(function (e) {\r\n\t\t\tif ($(this).data(\"draggable\")) {\r\n\t\t\t\t$(this).scrollLeft(parseInt($(this).scrollLeft() + ($(this).data(\"offset\") - e.pageX), 10));\r\n\t\t\t\t$.data(this, \"offset\", e.pageX);\r\n\t\t\t}\r\n\t\t}).data(\"draggable\", false).data(\"offset\", 0);\r\n\t}\r\n});\r\n</pre>\r\n\r\n<p>Ah ouais quand même...</p>", "dates" : { "published" : "2013-05-03 13:40:00", "updated" : [ "2013-05-03 13:40:00" ] }, "script" : "(function ($) {\r\n\t$.fn.addPAfter = function () {\r\n\t\treturn this.each(function () {\r\n\t\t\tvar p = $(\"<p>\").css(\"font-style\", \"italic\").text(\"J'écris ce texte après mon exemple d'utilisation !\");\r\n\t\t\t$(this).after(p); // Et op, on ajoute ça après la cible courante.\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\n$(\"#first-example\").addPAfter();\r\n\r\n(function ($) {\r\n\t$.fn.addPAfter2 = function (content) {\r\n\t\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar p = $(\"<p>\").css(\"font-style\", \"italic\").text(content);\r\n\t\t\t$(this).after(p);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\n$(\"#second-example\").addPAfter2(\"Et celui-ci après mon autre exemple !\");\r\n\r\n(function ($) {\r\n\t$.fn.addPAfter3 = function (content, params) {\r\n\t\r\n\t\tif (typeof content === \"object\") {\r\n\t\t\tparams = content;\r\n\t\t\tcontent = null;\r\n\t\t} \r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\t\t\r\n\t\tparams = $.extend({\r\n\t\t\t\"style\": { \"font-style\": \"italic\" },\r\n\t\t\t\"class\": \"\",\r\n\t\t\t\"tag\": \"p\"\r\n\t\t}, params);\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar $this = $(this);\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tvar \r\n\t\t\t\t\teachClass = params.class.split(\" \"),\r\n\t\t\t\t\tp = $(\"<\" + params.tag + \">\")\r\n\t\t\t\t\t\t.css(params.style)\r\n\t\t\t\t\t\t.text(content);\r\n\t\t\t\t\r\n\t\t\t\tfor\t(var i in eachClass) {\r\n\t\t\t\t\tp.addClass(eachClass[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this.after(p);\r\n\t\t\t}, 0);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\n$(\"#third-example\").addPAfter3(\r\n\t\"Dommage que mon nom de fonction ne veuille plus rien dire !\", {\r\n\t\tclass: \"warning\",\r\n\t\tstyle: { \"font-weight\": \"bold\", \"font-size\": \"0.8em\" } \r\n\t}\r\n);\r\n\r\n$(\"#fourth-example\").addPAfter3(\"Marche pas...\", { class: \"like-a\" });\r\n\r\n;(function ($) {\r\n\t$.fn.addPAfter4 = function (content, params, callback) {\r\n\t\r\n\t\tif (typeof params === \"function\") {\r\n\t\t\tcallback = params;\r\n\t\t\tparams = null;\r\n\t\t}\r\n\r\n\t\tif (typeof content === \"function\") {\r\n\t\t\tcallback = content;\r\n\t\t\tparams = null;\r\n\t\t\tcontent = null;\r\n\t\t} else if (typeof content === \"object\") {\r\n\t\t\tparams = content;\r\n\t\t\tcontent = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (content == null) {\r\n\t\t\tcontent = \"J'écris ce texte après mon exemple d'utilisation !\";\r\n\t\t}\r\n\r\n\t\tparams = $.extend({\r\n\t\t\t\"style\": { \"font-style\": \"italic\" },\r\n\t\t\t\"class\": \"\",\r\n\t\t\t\"tag\": \"p\"\r\n\t\t}, params);\r\n\r\n\t\treturn this.each(function () {\r\n\t\t\tvar $this = $(this);\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tvar \r\n\t\t\t\t\teachClass = params.class.split(\" \"),\r\n\t\t\t\t\tp = $(\"<\" + params.tag + \">\")\r\n\t\t\t\t\t\t.css(params.style)\r\n\t\t\t\t\t\t.text(content);\r\n\t\t\t\t\r\n\t\t\t\tfor\t(var i in eachClass) {\r\n\t\t\t\t\tp.addClass(eachClass[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t$this.after(p);\r\n\t\t\t\t\r\n\t\t\t\tif (typeof callback === \"function\") {\r\n\t\t\t\t\tcallback(p);\r\n\t\t\t\t}\r\n\t\t\t}, 0);\r\n\t\t});\r\n\t}\r\n})(jQuery);\r\n\r\nfunction whatIwantExecuteAfter(element) {\r\n\telement\r\n\t\t.text(\"J'écris ce que je veux avec le style que je veux !\")\r\n\t\t.addClass(\"like-a\")\r\n\t\t.click(function () {\r\n\t\t\talert(\"« Merci monsieur Morpheus ! » - Keanu R.\");\r\n\t\t});\r\n}\r\n\r\n$(\"#fifth-example\").addPAfter4(whatIwantExecuteAfter);\r\n\r\n$(\"#sixth-example\").addPAfter4(function (element) {\r\n\telement\r\n\t\t.text(\"J'écris encore ce que je veux, et ouais !\")\r\n\t\t.addClass(\"like-a\")\r\n\t\t.click(function () {\r\n\t\t\talert(\"« Monde de merde ! » - Laurence F.\");\r\n\t\t});\r\n});\r\n\r\n$(\"#seventh-example\").addPAfter3({ class: \"my-target like-a\" });\r\n$(\".my-target\").live(\"click\", function () {\r\n\talert(\"« Hey, Mais ça sent la merde ? » - Christophe L.\");\r\n\t$(this).die(\"click\");\r\n});\r\n\r\n$(\"#eighth-example\").addPAfter3({ class: \"my-example like-a\" });\r\nvar tempExampleInterval = setInterval(function () {\r\n\tif ($(\".my-example\").length == 1) {\r\n\t\t$(\".my-example\").click(function () {\r\n\t\t\talert(\"« Nan mais c'est bon tu m'as soulé moi, j'en veux pas de ton monde pourri moi... » - Keanu R.\");\r\n\t\t});\r\n\t\tclearInterval(tempExampleInterval);\r\n\t}\r\n}, 50);", "style" : ".like-a {\r\ncolor: #0000ff;\r\ntext-decoration: underline;\r\ncursor: pointer;\r\n}\r\n.dark .like-a {\r\ncolor: #ffff00;\r\n}\r\n.like-a:hover {\r\ncolor: #ff0000;\r\n}\r\n.dark .like-a:hover {\r\ncolor: #00ffff;\r\n}", "title" : "Une <span>Callback</span> pour vos fonctions <span>JS</span> <span>asynchrones</span>", "urn" : "une-callback-pour-vos-fonctions-js-asynchrones" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ad" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "<p>Utiliser jQuery pour du développement côté serveur serait vraiment formidable ! C'est possible avec Node.js. Nous y sommes enfin, l'une des parties très intéressante qui peut justifier l'utilisation de Node.js à la place de vos développements PHP et Cie. C'est le moment de travailler de la même façon côté client et côté serveur sur vos processus de contrôle (vos Contrôleurs en MVC) et donc de développer vos sites avec un unique langage de programmation : JavaScript. Cependant, sous Windows, il y a une petite difficulté en plus liée aux modules développés en code natif que nous allons surmonter ! C'est parti pour manipuler le DOM côté Back-end !</p>\r\n\r\n<div class=\"correct-practice\">\r\n\t<div class=\"title highlighting\">À la découverte de Node.js sous Windows</div>\r\n\t<nav class=\"content\">\r\n\t\t<ol>\r\n\t\t\t<li><a href=\"./developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Qu'est-ce que Node.js ?</a></li>\r\n\t\t\t<li><a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">Installation de Node.js</a></li>\r\n\t\t\t<li><a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">Simple application web avec Node.js</a></li>\r\n\t\t\t<li><a class=\"highlighting\" href=\"./utiliser-jquery-avec-nodejs-sous-windows/\" title=\"Utiliser jQuery avec Node.js sous Windows\">Utiliser jQuery côté serveur avec Node.js</a></li>\r\n\t\t\t<li>Appels client asynchrones avec Node.js</li>\r\n\t\t\t<li>Un moteur de template avec Node.js</li>\r\n\t\t\t<li>Des sites multilingues avec Node.js</li>\r\n\t\t\t<li>La base de données MySQL et Node.js</li>\r\n\t\t\t<li>Une architecture MVC2 avec Node.js</li>\r\n\t\t</ol>\r\n\t</nav>\r\n</div>\r\n\r\n<h2>À propos du module node-jquery</h2>\r\n\r\n<p>L'utilisation du module Node.js <samp>node-jquery</samp> permet de manipuler des objets jQuery dans du code JavaScript développé pour être interprété côté serveur par le moteur JavaScript V8 (l'interpréteur JavaScript socle de Node.js). <samp>node-jquery</samp> est lui-même le socle de base permettant cette utilisation de l'autre côté et comme son développeur le dit « n'est simplement que ça ».</p>\r\n\r\n<p>Initialement développé par <a href=\"https://github.com/coolaj86\" title=\"coolaj86 (AJ ONeal)\" class=\"highlighting\">coolaj86</a> —le développeur qui a également développé le module <samp>node-walk</samp> utilisé <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">dans mon précédent billet</a>)— <samp>node-jquery</samp> va être dès à présent maintenu par la Team jQuery elle-même, ce qui assure un suivi et une utilisabilité solide de cette approche comme méthode de développement dans le futur.</p>\r\n\r\n<p class=\"eye-catching\">Note : il est donc possible que dans un futur proche se soit un autre plugin que <samp>node-jquery</samp> qu'il faille installer pour utiliser jQuery côté serveur, car node-jquery n'est pas le seul module permettant d'utiliser jQuery côté serveur. Cependant, l'utilisation de jQuery en elle-même restera identique et équivalente à celle du côté client.</p>\r\n\r\n<h3>Ce que nous dit la documentation node-jquery...</h3>\r\n\r\n<p>Comme toujours, rendez-vous sur <a href=\"https://npmjs.org/\" title=\"node.js\">le registre des modules Node.js</a> pour chercher <samp><a href=\"https://npmjs.org/package/jQuery\" title=\"node.js\">node-jquery</a></samp> et ainsi atteindre <a href=\"https://github.com/coolaj86/node-jquery\" title=\"coolaj86/node-jquery\">la page de projet et de documentation</a>.</p>\r\n\r\n<p>On y apprend que :</p>\r\n<ul>\r\n\t<li><span class=\"highlighting\">pour installer le module jQuery</span> : on utilise <samp>npm install jquery</samp> (<span class=\"eye-catching\">et pas</span> npm install j<span class=\"highlighting\">Q</span>uery) et</li>\r\n\t<li><span class=\"highlighting\">pour manipuler l'objet jQuery</span> : on déclare <samp>var $ = require('jquery').create();</samp> et manipule donc <samp>$</samp>.</li>\r\n</ul>\r\n\r\n<p class=\"eye-catching\">Note : vous constaterez qu'il y a plusieurs projets de socle jQuery en place pour utiliser la librairie jQuery côté serveur si vous fouillez le registre NPM. Libre à-vous d'en choisir une autre. Il faut cependant prendre en compte le support du module dans le temps.</p>\r\n\r\n<h3>...mais ce qu'elle ne nous dit pas</h3>\r\n\r\n<p>Malheureusement, que vous exécutiez votre fichier avec la ligne <samp>require('jquery').create()</samp> avant ou après installation du module <samp>node-jquery</samp>, si vous êtes sous Windows, vous aurez toujours la même erreur : « Cannot find module 'jquery' ». Nous allons arranger cela plus loin (<span class=\"eye-catching\">bon, en fait la doc mentionnait le problème sous Windows, mais j'aimais bien mes titres !</span>).</p>\r\n\r\n<figure>\r\n\t<figcaption>Sous Windows, jQuery ne marche pas (même après installation)</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-not-installed-error.png\" alt=\"Sous Windows, jQuery ne marche pas (même après installation)\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n\r\n<h3>jQuery ne marche pas avec Node.js sous Windows</h3>\r\n\r\n<p>Et oui ! Nous avons mis le doigt sur un problème que rencontre tous les débutants Node.js qui commence à jouer avec les modules NPM sous Windows. Effectivement, dans <a href=\"./installer-et-utiliser-nodejs-sous-windows/\" title=\"Installer et utiliser Node.js sous Windows\">mon deuxième billet</a>, j'ai passé sous silence les pré-requis qui nous auraient éviter ce souci pour entrer dans le vif du sujet. Maintenant, il est l'heure d'installer un environnement de développement Node.js plus complet pour résoudre ce problème.</p>\r\n\r\n<p>Si vous ne possédez pas sur votre machine Python, Microsoft Visual Studio et quelques autres dépendances, en tapant <samp>npm install jquery</samp> dans votre console vous allez obtenir une erreur :</p>\r\n\r\n<figure>\r\n\t<figcaption>Sans Python et Microsoft Visual Studio : jQuery ne marche pas</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-not-python-error.png\" alt=\"Sans Python et Microsoft Visual Studio : jQuery ne marche pas\" width=\"658\" height=\"302\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n\r\n<p>En fouillant dans le répertoire <samp>node_modules</samp> le dossier jquery est pourtant bien là ! Alors pourquoi ça ne marche pas ! La réponse se trouve dans les logs des erreurs disponibles dans votre console ou, comme indiqué, dans le fichier npm.debug.log :</p>\r\n\r\n<p class=\"warning eye-catching\">\r\nError: Can't find Python executable \"python\", you can set the PYTHON env variable.\r\n</p>\r\n\r\n<p>et</p>\r\n\r\n<p class=\"warning eye-catching\">\r\ncontextify@0.1.5 install: `node-gyp rebuild`<br />\r\nerror `cmd \"/c\" \"node-gyp rebuild\"` failed with 1<br />\r\nerror Failed at the contextify@0.1.5 install script.<br />\r\nerror This is most likely a problem with the contextify package,<br />\r\nerror not with npm itself.<br />\r\nerror Tell the author that this fails on your system:<br />\r\nerror     node-gyp rebuild<br />\r\nerror You can get their info via:<br />\r\nerror     npm owner ls contextify<br />\r\nerror There is likely additional logging output above.\r\n</p>\r\n\r\n<p id=\"prerequis\">Résolevons ce problème !</p>\r\n\r\n<h2>Python et Microsoft Visual Studio comme pré-requis Node.js sous Windows</h2>\r\n\r\n<p>En réalité si jQuery ne fonctionne pas, c'est parce que l'un des modules Node.js dont il est dépendant n'est pas un module écrits en JavaScript mais un module écrits en code natif, le module <span class=\"highlighting\">contextify</span>, qui requiert donc d'être compilé sur la machine où il est utilisé pour fonctionner.</p>\r\n\r\n<p>C'est le module <span class=\"highlighting\">node-gyp</span> qui s'occupe de compiler les modules Node.js développés en language natif (autre qu'en JavaScript) et pour faire son travail il a besoin des logiciels Windows <span class=\"highlighting\">Python</span> ainsi que <span class=\"highlighting\">Microsoft Visual Studio</span> (ou Microsoft Visual C++).</p>\r\n\r\n<p class=\"eye-catching\">Nous ne le verrons pas dans ce billet, mais sachez qu'il est également possible de se procurer les sources compilés de contextify pour votre machine et ne pas avoir à installer Python et Microsoft Visual Studio. Cependant, puisque le cas de figure se représentera assez souvent (avec d'autres modules natifs), je vous conseille de le faire.</p>\r\n\r\n<h3>Installation de Python 2.7.x pour Windows</h3>\r\n\r\n<p>Pour commencer nous allons installer le logiciel <span class=\"highlighting\">Python</span> sur votre machine Windows. Bien que celui-ci existe en version 3.x.x il faut installer une version 2.7.x pour que cela fonctionne.</p>\r\n\r\n<ul>\r\n\t<li>Rendez-vous donc sur <a href=\"http://www.python.org/download/releases/\" title=\"Python Releases\">la page des « Releases » Windows</a> et téléchargez <a href=\"http://www.python.org/download/releases/2.7.4/\" title=\"Python 2.7.4 Release\">la dernière version 2.7.x</a> (dans mon cas c'est <a href=\"http://www.python.org/download/releases/2.7.4/\" title=\"Python 2.7.4 Release\">Python 2.7.4 du 6 avril 2013</a>)</li>\r\n\t<li>Téléchargez le <a href=\"http://www.python.org/ftp/python/2.7.4/python-2.7.4.amd64.msi\" title=\"Windows X86-64 MSI Installer\">Windows X86-64 MSI Installer (2.7.4)</a> et installez-le.</li>\r\n</ul>\r\n\r\n<p>A ce stade, en ré-essayant la commande <samp>npm install jquery</samp> l'erreur précédente est passée et la nouvelle erreur est :</p>\r\n\r\n<p class=\"eye-catching warning\">MSBUILD : error MSB3428: Impossible de charger le composant Visual C++ \"VCBuild.exe\" (MSBUILD : error MSB3428: Could not load the Visual C++ component \"VCBuild.exe\").</p>\r\n\r\n<h3>Installation de Microsoft Visual C++ pour Node.js</h3>\r\n\r\n<p>Pour vous procurer le « VCBuild.exe » dont il est question : installez le logiciel Microsoft Visual Studio 2010 (ou 2012). Vous pouvez vous contenter uniquement de la branche C++ du logiciel (Microsoft Visual C++) et vous contenter même de sa version Express (gratuite et moins lourde).</p>\r\n\r\n<ul>\r\n\t<li>Rendez-vous donc sur le site de Microsoft et téléchargez <a href=\"http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express\" title=\"Download | Microsoft Visual Studio 2012\">Microsoft Visual C++ 2010 Express</a> par exemple.</li>\r\n\t<li>Ouvrez l'installeur « vc_web.exe » et suivez les « Next ». Vous n'êtes pas obligé de sélectionner les produits optionnels. Cliquez enfin sur « Install » et les fichiers sont téléchargés pour installation et installés.</li>\r\n</ul>\r\n\r\n<p>En ré-essayant de nouveau la commande <samp>npm install jquery</samp> vous obtenez à présent l'erreur :</p>\r\n<p class=\"eye-catching warning\">error MSB8007: The Plateform for project 'contextify.vcxproj' is invalid.</p>\r\n\r\n<h4>Microsoft Windows SDK for Windows 7 and .NET Framework 4</h4>\r\n\r\n<p>Pour corriger l'erreur précédente :</p>\r\n\r\n<ul>\r\n\t<li>Rendez-vous à la page de téléchargement de <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8279\" title=\"Microsoft Windows SDK for Windows 7 and .NET Framework 4\">Microsoft Windows SDK for Windows 7 and .NET Framework 4</a>, téléchargez « winsdk_web.exe » et installez-le.</li>\r\n</ul>\r\n\r\n<p>En cas de problème :</p>\r\n\r\n<figure>\r\n\t<figcaption>En cas de problème avec Microsoft Windows SDK for Windows 7 and .NET Framework 4</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-sdk71-error.png\" alt=\"En cas de problème avec Microsoft Windows SDK for Windows 7 and .NET Framework 4\" width=\"658\" height=\"440\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n<ul>\r\n\t<li>Désinstallez les Microsoft Visual C++ 2010 Redistributable x86 et x64 déjà installées (<samp>Menu Windows</samp> puis <samp>Panneau de congiguration</samp> puis <samp>Désinstaller un programmes</samp>). Ré-essayez.</li>\r\n\t<li>Vous pouvez en plus <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8442\" title=\"Microsoft Windows SDK for Windows 7 and .NET Framework 4 (ISO)\">télécharger directement l'ISO du SDK</a> (« GRMSDK_EN_DVD.iso » pour x86 et « GRMSDKX_EN_DVD.iso » pour x64), gravez ou dézippez l'ISO et exécutez « setup.exe ».</li>\r\n</ul>\r\n\r\n<p>En ré-essayant de nouveau la commande <samp>npm install jquery</samp> vous obtenez à présent le message d'avertissement (en jaune) :</p>\r\n<p class=\"eye-catching\">warning C4530: C++ exception handler used, but unwind semantics are not enabled.</p>\r\n\r\n<p>Si c'est le cas c'est que tout s'est bien passé.</p>\r\n\r\n<h4>Visual C++ 2010 SP1 Redistributable Package</h4>\r\n\r\n<p>Pour (re)mettre les versions Microsoft Visual C++ 2010 Redistributable :</p>\r\n\r\n<ul>\r\n\t<li>Rendez-vous à la page de téléchargement de <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=13523\" title=\"Microsoft Visual C++ 2010 SP1 Redistributable Package\">Microsoft Visual C++ 2010 SP1 Redistributable Package</a>, téléchargez-le (en x86 ou x64 selon votre OS) et installez-le.</li>\r\n</ul>\r\n\r\n<h4>Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1</h4>\r\n\r\n<p>Pour vous assurer de posséder tout ce qu'il faut pour ne rencontrer aucun problème à l'avenir :</p>\r\n\r\n<ul>\r\n\t<li>Rendez-vous à la page de téléchargement de <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=4422\" title=\"Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1\">Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1</a>, téléchargez « VC-Compiler-KB2519277.exe » et installez-le.</li>\r\n\t<li>Redémarrez votre ordinateur... (grrr)</li>\r\n</ul>\r\n\r\n<h2>Développer côté serveur avec jQuery</h2>\r\n\r\n<p>Maintenant que les pré-requis sont en place vous ne devriez plus avoir de problème pour compiler les modules Node.js en langage natif. À présent :</p>\r\n\r\n<ul>\r\n\t<li>si ce n'est pas déjà fait : installez le module <span class=\"highlighting\">jQuery</span> (node-jquery) avec la commande <samp>npm install jquery</samp> depuis le répertoire de votre projet (pour moi C:\\nodejs\\website\\),</li>\r\n\t<li>et installez <span class=\"highlighting\">jsdom</span> depuis le même répertoire avec la commande <samp>npm install jsdom</samp>.</li>\r\n</ul>\r\n\r\n<p>En reprenant le fichier <a href=\"./upload/script/website.js\" title=\"Télécharger le fichier résultat de cet article\">website.js</a> de <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">mon billet précédent</a> ; voici comment inclure jsdom et jQuery :</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var\r\n/*== Charger les modules Node.js ==*/\r\n\thttp = require(\"http\"),\r\n\texpress =  require(\"express\"),\r\n\thttpServer = express(),\r\n\t\r\n\tjsdom = require(\"jsdom\").jsdom, // Utilisation d'un créateur de DOM.\r\n\tjquery = require('jquery'), // Utilisation de jQuery côté serveur.\r\n\t\r\n/* ... */</code></pre>\r\n\r\n<h3>Créer le DOM côté serveur avec jsdom</h3>\r\n\r\n<p>Reprenons l'exemple de la page d'accueil du site qui se présentait ainsi dans mon <a href=\"./serveur-web-et-application-web-en-javascript/\" title=\"Serveur web et application web en JavaScript\">mon billet précédent</a> :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n/* Accueil */\r\nhttpServer.get(appConfig.path, function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\ttemplate = '&lt;!DOCTYPE html&gt;' +\r\n\t\t\t'&lt;html lang=\"fr\"&gt;' +\r\n\t\t\t\t'&lt;head&gt;' +\r\n\t\t\t\t\t'&lt;meta charset=\"utf-8\" /&gt;' +\r\n\t\t\t\t\t'&lt;title&gt;Ma première page&lt;/title&gt;' +\r\n\t\t\t\t\t'&lt;base href=\"//' + appConfig.url + '\" /&gt;' +\r\n\t\t\t\t'&lt;/head&gt;' +\r\n\t\t\t\t'&lt;body&gt;' +\r\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\r\n\t\t\t\t'&lt;/body&gt;' +\r\n\t\t\t'&lt;/html&gt;';\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(template);\r\n\tresponse.end();\r\n});\r\n\r\n/* ... */\r\n</pre>\r\n\r\n<p>Effectuons plusieurs changements pour nous amuser avec jQuery.</p>\r\n\r\n<ul>\r\n\t<li>Tout d'abord, ligne 8, nous avions créé une variable <samp>template</samp> représentant le contenu de la page qui allait être fourni au client (le navigateur du visiteur réclamant la page).</li>\r\n\t<li>Nous allons dans un premier temps transformer cette variable de type String en un véritable <samp>document</samp> DOM côté serveur avec <span class=\"highlighting\">jsdom</span>,</li>\r\n\t<li>et ensuite l'englober dans une <samp>window</samp> (fenêtre) émulée de 1024px par défaut.</li>\r\n\t<li>Pour finir nous allons restituer ce DOM sous forme de string pour l'envoyer au client comme précédemment à la ligne 21.</li>\r\n</ul>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n/* Accueil */\r\nhttpServer.get(appConfig.path, function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\t\r\n\t\t// L'ancienne variable \"template\" de type String est remplacée\r\n\t\t// par la variable \"document\" de type Object représentant le DOM de la page.\r\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html&gt;\" +\r\n\t\t\t\"&lt;html lang='fr'&gt;\" +\r\n\t\t\t\t\"&lt;head&gt;\" +\r\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\r\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t\"&lt;/head&gt;\" +\r\n\t\t\t\t\"&lt;body&gt;\" +\r\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\r\n\t\t\t\t\"&lt;/body&gt;\" +\r\n\t\t\t\"&lt;/html&gt;\"),\r\n\t\t\t\r\n\t\t// Un objet \"window\" est créé. \r\n\t\t// C'est l'émulation d'une fenêtre côté serveur qui a pour taille 1024px de large.\t\t\r\n\t\twindow = document.createWindow();\r\n\r\n\t\t// console.log(typeof document); // renvoi \"object\".\r\n\t\t// console.log(window.innerWidth); // renvoi \"1024\"\r\n\t\t\r\n\tresponse.writeHead(200, header);\r\n\t\r\n\t// On change la variable template par le rendu sous forme de string document (ou window.document).\r\n\tresponse.write(window.document.innerHTML);\r\n\tresponse.end();\r\n});\r\n\r\n/* ... */\r\n</pre>\r\n\r\n<h3>Manipuler le DOM côté serveur avec jQuery</h3>\r\n\r\n<p>Nous allons dans un exemple tout simple ajouter une balise <samp>h1</samp> à notre DOM après la création de celui-ci avec jQuery. Nous allons même effectuer un test pour démontrer comment le DOM peut être variable en fonction de conditions précises.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n/* Accueil */\r\nhttpServer.get(appConfig.path, function (request, response) {\r\n\tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\r\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html&gt;\" +\r\n\t\t\t\"&lt;html lang='fr'&gt;\" +\r\n\t\t\t\t\"&lt;head&gt;\" +\r\n\t\t\t\t\t\"&lt;meta charset='utf-8' /&gt;\" +\r\n\t\t\t\t\t\"&lt;title&gt;Ma première page&lt;/title&gt;\" +\r\n\t\t\t\t\t\"&lt;base href='//\" + appConfig.url + \"' /&gt;\" +\r\n\t\t\t\t\"&lt;/head&gt;\" +\r\n\t\t\t\t\"&lt;body&gt;\" +\r\n\t\t\t\t\t\"&lt;p&gt;&lt;a href='./connexion/' title='Page de connexion'&gt;Page de connexion&lt;/a&gt;&lt;/p&gt;\"\r\n\t\t\t\t\"&lt;/body&gt;\" +\r\n\t\t\t\"&lt;/html&gt;\"),\t\r\n\t\twindow = document.createWindow(),\r\n\t\t\r\n\t\t// Permettre à jQuery de manipuler le DOM...\r\n\t\tjQuery = jquery.create(window), // ...et au développeur de le manipuler via jQuery(\"selecteur\")...\r\n\t\t$ = jQuery, // ...ou via $(\"selecteur\").\r\n\t\t\r\n\t// On crée un nœud \"h1\" contenant le texte \"Ceci est le titre d'origine !\".\r\n\th1Title = $(\"&lt;h1&gt;\").text(\"Ceci est le titre d'origine !\");\r\n\t// On l'ajoute au DOM serveur.\r\n\t$(\"body\").prepend(h1Title);\r\n\t\r\n\t// Si la condition est réalisée...\r\n\tif (1 == 1) { // ...ce qui est le cas ; renvoi \"true\"...\r\n\t\th1Title = $(\"h1\").text(\"Ceci est le titre changé !\"); // ... alors on cible le nœud h1 et on modifie le texte avec \"Ceci est le titre changé !\".\r\n\t}\r\n\t\t\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(window.document.innerHTML);\r\n\tresponse.end();\r\n});\r\n\r\n/* ... */\r\n</pre>\r\n\r\n<figure>\r\n\t<figcaption>Résultat de notre page d'accueil côté client</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-first-example.png\" alt=\"Résultat de notre page d'accueil côté client\" width=\"658\" height=\"100\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n\r\n<h3>Exemple de rendu conditionnel après un POST avec jQuery</h3>\r\n\r\n<p>Tournons nous à présent vers la seconde page de mon fichier <a href=\"./upload/script/website.js\" title=\"Télécharger le fichier résultat de cet article\">website.js</a> précédent : la page de connexion. Ajoutons lui quelques styles et prévoyons son rendu en cas d'erreur de connexion ou de réussite de l'utilisateur.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n/* Connexion */\r\nfunction connectionRender(request, response) {\r\n \tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\t// LE CONTENU COMPLET DE \"document\" SE TROUVE PLUS BAS.\r\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html &gt;&lt;html&gt;...\"),\r\n\t\twindow = document.createWindow(),\r\n\t\tjQuery = jquery.create(window),\r\n\t\t$ = jQuery;\r\n\t\t\r\n\t\t// Par défaut, on retire l'affichage après connexion puisqu'on vient d'arriver.\r\n\t\t// On modifiera cette partie de code plus loin.\r\n\t\t$(\"#logged\").remove();\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(window.document.innerHTML);\r\n\tresponse.end();\t\r\n}\r\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\r\n    connectionRender(request, response);\r\n}).post(appConfig.path + \"connexion\", function (request, response) {\r\n    connectionRender(request, response);\r\n});\r\n\r\n/* ... */\r\n</pre>\r\n\r\n<p class=\"highlighting\">Contenu complet de <samp>document = jsdom(\"&lt;!DOCTYPE html&gt;&lt;html&gt;...\")</samp> :</p>\r\n\r\n<pre class=\"prettyprint linenums lang-html\">\r\n&lt;!DOCTYPE html&gt; \r\n\t&lt;html&gt; \r\n\t\t&lt;head&gt; \r\n\t\t\t&lt;meta charset=\"utf-8\" /&gt; \r\n\t\t\t&lt;title&gt;Page de connexion&lt;/title&gt; \r\n\t\t\t\"&lt;base href=//\"  appConfig.url  \" /&gt;\" \r\n\r\n\t\t\t<!-- Prévoyons de cacher les messages d'erreur s'il n'y a pas d'erreur. -->\r\n\t\t\t&lt;style text=\"text/css\"&gt; \r\n\t\t\t\t.error { \r\n\t\t\t\t\tdisplay: none;\r\n\t\t\t\t} \r\n\t\t\t\t.error.show {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t}\r\n\t\t\t\t.error span { \r\n\t\t\t\t\tdisplay: none;\r\n\t\t\t\t\tcolor: #ff0000;\r\n\t\t\t\t} \r\n\t\t\t\t.error span.show {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t}\r\n\t\t\t&lt;/style&gt; \r\n\r\n\t\t&lt;/head&gt; \r\n\t\t&lt;body&gt; \r\n\t\t\t&lt;form id=\"login\" action=\"./connexion/\" method=\"POST\"&gt; \r\n\t\t\t\t&lt;div class=\"field-login-email\"&gt; \r\n\t\t\t\t\t&lt;label for=\"login-email\" placeholser=\"Email\"&gt;Email : &lt;/label&gt;\r\n\t\t\t\t\t<!-- On ajoute un attribut name pour récupération côté serveur. -->\r\n\t\t\t\t\t&lt;input id=\"login-email\" type=\"text\" name=\"login[email]\" /&gt; \r\n\r\n\t\t\t\t\t<!-- Créons nous des messages d'erreur pour l'email en cas d'erreur. -->\r\n\t\t\t\t\t<!-- Par défaut ils ne sont pas visibles. -->\r\n\t\t\t\t\t&lt;div class=\"error\"&gt; \r\n\t\t\t\t\t\t&lt;span class=\"empty\"&gt;Le champ email est vide.&lt;/span&gt; \r\n\t\t\t\t\t\t&lt;span class=\"invalide\"&gt;Le champ email est invalide.&lt;/span&gt; \r\n\t\t\t\t\t&lt;/div&gt; \r\n\r\n\t\t\t\t&lt;/div&gt; \r\n\r\n\t\t\t\t&lt;div class=\"field-login-password\"&gt; \r\n\t\t\t\t\t&lt;label for=\"login-password\" placeholser=\"Mot de passe\"&gt;Mot de passe : &lt;/label&gt;\r\n\t\t\t\t\t<!-- On ajoute un attribut name pour récupération côté serveur. -->\r\n\t\t\t\t\t&lt;input id=\"login-password\" type=\"password\" name=\"login[password]\" /&gt; \r\n\r\n\t\t\t\t\t<!-- Créons nous des messages d'erreur pour le mot de passe en cas d'erreur. -->\r\n\t\t\t\t\t<!-- Par défaut ils ne sont pas visibles. -->\r\n\t\t\t\t\t&lt;div class=\"error\"&gt; \r\n\t\t\t\t\t\t&lt;span class=\"empty\"&gt;Le champ mot de passe est vide.&lt;/span&gt; \r\n\t\t\t\t\t\t&lt;span class=\"invalide\"&gt;Le couple Email/Mot de passe est incorrecte !&lt;/span&gt; \r\n\t\t\t\t\t&lt;/div&gt; \r\n\r\n\t\t\t\t&lt;/div&gt; \r\n\r\n\t\t\t\t&lt;label&gt;&lt;input type=\"submit\" value=\"Ok\" /&gt;&lt;/label&gt; \r\n\t\t\t&lt;/form&gt; \r\n\r\n\t\t\t<!-- Prévoyons un affichage en cas de connexion réussie. -->\r\n\t\t\t&lt;div id=\"logged\"&gt;Vous êtes passé !&lt;/div&gt; \r\n\t\t&lt;/body&gt; \r\n\t&lt;/html&gt;\r\n</pre>\r\n\r\n<p>Ce qui donne comme rendu :</p>\r\n\r\n<figure>\r\n\t<figcaption>Résultat de notre page identique, car ajout masqué en CSS ou retiré côté serveur</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-second-example.png\" alt=\"Résultat de notre page identique, car ajout masqué en CSS ou retiré côté serveur\" width=\"658\" height=\"100\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n\r\n<h4>Gérer les erreurs</h4>\r\n\r\n<p>Quand la page de connexion est demandée suite au clique sur le bouton « Ok » c'est une requête POST qui est envoyée et le résultat est traité par le code ligne 27 de notre exemple JavaScript plus haut. À cette ligne, la fonction <samp>connectionRender</samp> est appelée tout comme en GET à la différence prêt que des variables POST existent dans le cas de figure POST (ce qui n'est pas le cas en GET).</p>\r\n\r\n<p class=\"highlighting\">Nous allons donc tester l'existence et le contenu des variables POST du formulaire pour décider de la réponse adaptée à notre visiteur.</p>\r\n\r\n<p>Tout d'abord, permettons à Express de récupérer les valeurs des champs de formulaire via l'attribut <samp>name</samp>. Pour cela il faut lui « demander » d'utiliser l'intergiciel <span class=\"highlighting\">bodyParser</span>.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\nhttpServer\r\n/* == Définir un environnement d'exécution : SET NODE_ENV=dev ==*/\r\n\t.configure(function () {\r\n\t\t/* Commun à tous les environnements */\r\n\t\t\r\n\t\t// Ajout du middleware \"bodyParser\" pour parser les attributs name\r\n\t\t// et les récupérer via request.body.\r\n\t\thttpServer.use(express.bodyParser());\r\n\t})\r\n/* ... */\r\n</pre>\r\n\r\n<p>Ensuite mettons en place le mécanisme de réception uniquement en POST.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n/* Connexion */\r\nfunction connectionRender(request, response) {\r\n \tvar\r\n\t\theader = {\r\n\t\t\t\"Content-Type\": \"text/html\",\r\n\t\t\t\"Charset\": \"utf-8\"\r\n\t\t},\r\n\t\tdocument = jsdom(\"&lt;!DOCTYPE html &gt;&lt;html&gt;...\"),\r\n\t\twindow = document.createWindow(),\r\n\t\tjQuery = jquery.create(window),\r\n\t\t$ = jQuery;\r\n\r\n\t\t// Si on passe par ici après une réclamation en POST, on entre.\r\n\t\tif (request.method == 'POST') {\r\n\t\t\tvar\r\n\t\t\t\t// Par défaut, on estime que la validation du formulaire est bonne.\r\n\t\t\t\tisValid = true,\r\n\t\t\t\t// Normalement, cet info se récupère dans une base de donnée. C'est un des utilisateurs valide.\r\n\t\t\t\tpassEmail = \"tout@est.ok\",\r\n\t\t\t\t// Et ça c'est le mot de passe associé à l'utilisateur.\r\n\t\t\t\tpassPassword = \"azerty\",\r\n\t\t\t\t// Une regex pour vérifier la validité des emails.\r\n\t\t\t\tcheckEmail = /^[-._a-z0-9]+@[-._a-z0-9]+\\.[.a-z]{2,4}$/i;\r\n\r\n\t\t\t// Quoi qu'il arrive on réinjecte la valeur email (mais pas mot de passe).\r\n\t\t\t$(\"#login-email\").val(request.body.login.email.trim());\r\n\t\r\n\t\t\t// Le champ email est-il remplit ?\r\n\t\t\tif (request.body.login.email.trim() == \"\") {\r\n\t\t\t\t// S'il est vide, on le signale.\r\n\t\t\t\t$(\".field-login-email .error\").addClass(\"show\");\r\n\t\t\t\t$(\".field-login-email .error .empty\").addClass(\"show\");\r\n\t\t\t\t// Et on ne valide pas le formulaire.\r\n\t\t\t\tisValid = false;\r\n\r\n\t\t\t// Le champ email est-il valide ?\r\n\t\t\t} else if (!checkEmail.test(request.body.login.email.trim())) {\r\n\t\t\t\t// S'il est anormal, on le signale.\r\n\t\t\t\t$(\".field-login-email .error\").addClass(\"show\");\r\n\t\t\t\t$(\".field-login-email .error .invalide\").addClass(\"show\");\r\n\r\n\t\t\t\t// Et on ne valide pas le formulaire.\r\n\t\t\t\tisValid = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Le champ mot de passe est-il remplit ?\r\n\t\t\tif (request.body.login.password.trim() == \"\") {\r\n\t\t\t\t// S'il est vide, on le signale.\r\n\t\t\t\t$(\".field-login-password .error\").addClass(\"show\");\r\n\t\t\t\t$(\".field-login-password .error .empty\").addClass(\"show\");\r\n\t\t\t\t// Et on ne valide pas le formulaire.\r\n\t\t\t\tisValid = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (isValid) {\r\n\t\t\t\t// Y a-t-il une concordance email / mot de passe.\r\n\t\t\t\tif (\r\n\t\t\t\t\trequest.body.login.email.trim() == passEmail &&\r\n\t\t\t\t\trequest.body.login.password.trim() == passPassword\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\t/////////////////\r\n\t\t\t\t\t// C'est ici qu'on va mettre en place un mécanisme de remplissage de session.\r\n\t\t\t\t\t/////////////////\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// S'il y a une erreur, on le signale.\r\n\t\t\t\t\t$(\".field-login-password .error\").addClass(\"show\");\r\n\t\t\t\t\t$(\".field-login-password .error .invalide\").addClass(\"show\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Nous modifierons cette partie dans la partie suivante.\r\n\t\t$(\"#logged\").remove();\t\t\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(window.document.innerHTML);\r\n\tresponse.end();\t\r\n}\r\nhttpServer.get(appConfig.path + \"connexion\", function (request, response) {\r\n    connectionRender(request, response);\r\n}).post(appConfig.path + \"connexion\", function (request, response) {\r\n    connectionRender(request, response);\r\n});\r\n\r\n/* ... */\r\n</pre>\r\n\r\n<p>Tout manquement au formulaire sera à présent signalé.</p>\r\n\r\n<figure>\r\n\t<figcaption>En cas d'erreur du formulaire on affiche les messages cachés</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-third-example.png\" alt=\"En cas d'erreur du formulaire on affiche les messages cachés\" width=\"658\" height=\"130\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n\r\n<h4>Gérer la réussite</h4>\r\n\r\n<p>Permettons également de conserver dans une variable de session des informations qui suivront l'utilisateur de page en page (un équivalent de $_SESSION en PHP par exemple) avec les intergiciels <span class=\"highlighting\">cookieParser</span> et <span class=\"highlighting\">session</span> de Express. Pour cela il va falloir allouer de la mémoire au cookie pour l'entregistrement avec <samp>express.session.MemoryStore</samp>.</p>\r\n\r\n<p>On récupère l'objet MemoryStore</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n\thttp = require(\"http\"),\r\n\texpress =  require(\"express\"),\r\n\thttpServer = express(),\r\n\r\n\t// Ajout de l'objet MemoryStore pour donner du volume au cookie de session.\r\n\tMemoryStore = express.session.MemoryStore,\r\n\r\n\tjsdom = require(\"jsdom\").jsdom, \r\n\tjquery = require('jquery'),\r\n\t\r\n/* ... */\r\n</pre>\r\n\r\n<p>On permet les sessions avec <span class=\"highlighting\">cookieParser</span> et <span class=\"highlighting\">session</span></p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\nhttpServer\r\n/* == Définir un environnement d'exécution : SET NODE_ENV=dev ==*/\r\n\t.configure(function () {\r\n\t\t/* Commun à tous les environnements */\r\n\t\thttpServer.use(express.bodyParser());\r\n\t\t\r\n\t\t/* Permettre de manipuler les sessions */\r\n\t    httpServer.use(express.cookieParser());\r\n\t\t/* Paramétrage des sessions */\r\n\t    httpServer.use(express.session({\r\n        \tstore: new MemoryStore(), // Allocation de place.\r\n        \tsecret: 'secret', // Secret connu du serveur rendant le cookie illisible pour le client.\r\n        \tkey: 'website.sid' // Nom du cookie.\r\n\t    }));\r\n\t})\r\n/* ... */\r\n</pre>\r\n\r\n<p>Ensuite terminons de mettre en place le mécanisme de réception.</p>\r\n\r\n<pre class=\"prettyprint linenums lang-javascript\">\r\n/* ... */\r\n\r\n\t\t\tif (isValid) {\r\n\t\t\t\tif (\r\n\t\t\t\t\trequest.body.login.email.trim() == passEmail &&\r\n\t\t\t\t\trequest.body.login.password.trim() == passPassword\r\n\t\t\t\t) {\r\n\t\t\t\t\r\n\t\t\t\t\t// En passant ici on initialise l'état d'utilisateur identifié.\r\n\t\t\t\t\trequest.session.user = request.session.user || {}; // Création ou conservation de l'objet arbitrairement nommé \"user\" s'il n'existe pas.\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Passage à true de la propriété arbitrairement nommé \"isLogged\".\r\n\t\t\t\t\trequest.session.user.isLogged = true;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$(\".field-login-password .error\").addClass(\"show\");\r\n\t\t\t\t\t$(\".field-login-password .error .invalide\").addClass(\"show\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Changement de la partie du rendu affiché en fonction d'un état connecté ou non connecté.\r\n\t\t// S'il y a un objet user avec la propriété isLogged à true.\r\n\t\tif (request.session.user && request.session.user.isLogged) {\r\n\t\t\t// On retire la partie hors-connexion.\r\n\t\t\t$(\"#login\").remove();\r\n\t\t} else {\r\n\t\t\t// On retire la partie connexion.\r\n\t\t\t$(\"#logged\").remove();\r\n\t\t}\t\r\n\r\n\tresponse.writeHead(200, header);\r\n\tresponse.write(window.document.innerHTML);\r\n\tresponse.end();\r\n\t\r\n/* ... */\r\n</pre>\r\n\r\n<p>À présent en tapant respectivement dans les champs « Email » et « Mot de passe » : \"tout@est.ok\" et \"azerty\" la page s'affichera en \"mode connecté\", même après rechargement de la page. Seul la fermeture du navigateur détruira le lien entre le client et la session car le cookie est par défaut paramétré pour expirer à la fin de la sesion. On affichera donc alors la partie \"non connecté\".</p>\r\n\r\n<figure>\r\n\t<figcaption>Si tout est okay, on est loggué.</figcaption>\r\n\t<img class=\"openable\" src=\"./upload/image/node-jquery-fourth-example.png\" alt=\"Si tout est okay, on est loggué.\" width=\"658\" height=\"100\" style=\"width: 100%;height: auto;\">\r\n</figure>\r\n\r\n<h2>Réflexion sur l'utilisation de jQuery côté serveur</h2>\r\n\r\n<h3>Séparation de la vue et du contrôleur</h3>\r\n\r\n<p>C'est probablement le plus gros avantage d'utiliser jQuery côté serveur. Il permet ainsi d'avoir un template à plat dont on n'a pas à se soucier et un intégrateur ne connaissant rien en programmation (ça existe ?) pourrait créer des designs sans problèmes.</p>\r\n\r\n<h3>Ne pas faire du Responsive Web Design côté serveur</h3>\r\n\r\n<p>Même si l'on simule une fenêtre côté serveur, il ne sert à rien de gérer de la responsivité en essayant d'obtenir la taille de la fenêtre puisque celle qui nous intéresse est celle du client et non celle du serveur émulée. D'ailleurs les fonctions se rapportant à l'affichage ne fonctionnent pas toutes, car côté serveur, le navigateur n'est pas là pour vous répondre (ainsi <samp>show()</samp> et <samp>hide()</samp> ne marcheront pas par exemple).</p>\r\n\r\n<h3>Performance ?</h3>\r\n\r\n<p>La question. Il est sûr que passer par jQuery est plus lent à l'exécution que de simplement scinder le template en dix parties et de le remplir de conditions. Cependant, à la maintenance c'est un gain de temps complètement multiplié ! Entre payer des ressources qui développeront, débogueront et maintiendront en plus de temps et payer un serveur plus puissant : voyez où sont vos économies ! De plus, nous verrons plus loin que nous pourrons limiter jQuery à des cas précis et se servir d'un moteur de template (ce qui séparera « presque » la vue du contrôleur mais qui sera bien plus lisible que la méthode « v'l'a que je te fou tout au même endroit »).</p>\r\n\r\n<p class=\"eye-catching\">Je n'ai pas assez de retour d'expérience sur la rapidité en production avec énormément d'utilisateur simultané. Si vous en avez, n'hésitez pas à la partager.</p>\r\n\r\n<h2>Source</h2>\r\n\r\n<p>Notre fichier commence à être bien remplis. Dans un prochain billet Node.js nous allons voir comment scinder notre code qui commence à être bien long dans plusieurs fichiers.</p>\r\n\r\n<p>En attendant, vous pouvez <a href=\"./upload/script/website-jquery.zip\" title=\"Télécharger le fichier résultat de cet article\">télécharger le fichier résultat de cet article ici</a>.</p>", "dates" : { "published" : "2013-05-11 10:43:00", "updated" : [ "2013-05-11 10:43:00" ] }, "title" : "<span>Utiliser</span> <span>jQuery</span> avec <span>Node.js</span> sous <span>Windows</span>", "urn" : "utiliser-jquery-avec-nodejs-sous-windows" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71ae" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "5310456355dfd5f7698d48cc" } ], "content" : "Mais le JavaScript n'est pas typé ? Mais si, il y en a 13 ! Ah non, il y en 7... bah il me semble qu'il y a `Object`, `Function`, `Array`, `Math`, `String`, `Number`, `Boolean`. Et tu fais quoi de `RegExp` ? Attends, `Function` c'est pas un type, c'est un sous type mais `Null` c'est un type. Ho là là...\n\nSi vous faites du jQuery à vos heures ou même pas mal de JavaScript sur vos sites web, il est temps d'apprendre tout ce qu'il y a à savoir sur le typage implicite de JavaScript, car oui : contrairement à ce que certain vous ont dit, JavaScript manipule des éléments typés. Les fonctions (et les instances) `Object`, `Function`, `Array`, `Date`, `String`, `Number`, `Boolean`, `RegExp`, `Error` ou encore les objets globaux, `Date` ou `JSON` : tous sont d'un seul et même type, le type `Object`. Pourtant `String`, `Number` et `Boolean` sont eux-mêmes un type à par entière en plus des deux petits spéciaux les type `Null` et `Undefined`.\n\n\nSi vous deviez retenir quelques trucs rapidement à propos du JavaScript et des types ça serait que :\n\n- Le JavaScript n'a que 6 types : **`Object`, `Number`, `String`, `Boolean`, `Null` et `Undefined`**.\n- À part le type `Object` : les **5 autres types** sont dit **des types primitifs**.\n- Les types **`Null` et `Undefined`** sont **des types spéciaux**.\n- La **`Function`** n'est qu'un type `Object` **qui peut être exécuté et instancié** avec « new ».\n- **`Array`, `Date` et `RegExp`** sont des **types Object instanciables** (Function) tandis que **`Math`** est simplement un type Object.\n- Bien que **`Number`, `String` et `Boolean`** soient des types primitifs, il existe un **équivalent de type Object** instanciable (Function) **pour chacun d'eux** (à ne pas confondre).\n\n<figure>\n\t<img class=\"openable\" src=\"http://blog.haeresis.fr/upload/image/6-types-javascript-objet-primitif.png\" alt=\"Les 6 types en JavaScript\" width=\"658\" height=\"500\" style=\"width: 100%;height: auto;\">\n\t<figcaption>Les 6 types en JavaScript</figcaption>\n</figure>\n\nJe vais dans un premier temps vous proposer la traduction d'un article de Dmitry Baranovskiy —développeur JavaScript expérimenté— qui explique très bien les types en JavaScript. Je lèverai le doute sur le fameux sixième type (Null ou Function). Et je vous fournirai des lignes de code test pour mettre en évidence ce qui a été expliqué.\n\nDans cet article les propos entre [ ... ] sont les miens ainsi que ceux qui ne sont pas entre « ... ».\n\nPour finir, bien que l'auteur vous encourage à lire les [spécifications officielles](http://www.ecma-international.org/publications/standards/Ecma-262.htm) (pour les initiés), je vous encourage pour ma part à lire [JavaScript Eloquent](http://eloquentjavascript.net/) ([disponible en français ici](http://fr.eloquentjavascript.net/)).\n\n\n\n\n\n## Témoignage de Dmitry Baranovskiy, développeur JavaScript ##\n\n[Le billet original en anglais est sur le blogs d'Adobe (editeur de Flash)](http://blogs.adobe.com/webplatform/2012/08/27/javascript-types/)\n\n« J'aime le JavaScript. C'est un langage alliant puissance et flexibilité, mais à condition de bien savoir l'utiliser. Une fois que vous maîtrisez le langage JavaScript, vous pouvez construire pratiquement n'importe quoi, et cela vraiment rapidement et de manière interactive. »\n\n« Si vous pensez que le JavaScript est simple ou primitif, alors vous êtes tombé dans un piège. Vous constaterez qu'il y a pas mal de monde dans ce piège. Les soi-disant développeurs JavaScript du dimanche vous diront qu'un autre langage “X” est supérieur. Ils peuvent même vous dire que vous seriez mieux avec un système qui traduit la langue “X” en JavaScript. Pour sortir du piège et maîtriser JavaScript cela exige un effort et du dévouement. Je le sais parce que, en 1997, j'en étais là. »\n\n« Depuis, j'ai appris en long, en large et en travers le JavaScript moi-même en étudiant les [spécifications officielles](http://www.ecma-international.org/publications/standards/Ecma-262.htm). Vous pouvez apprendre l'intégralité du langage de cette manière. En tout cas, si votre intitulé de poste comprend les mots “développeur JavaScript”, vous devriez. »</p>\n\n\n\n\n### Trouverez vous la réponse ? ###\n\n« Dans ce billet je vais tenter de présenter un petit extrait de programme JavaScript et vous demander de prédire ce qu'il va renvoyer. Si vous êtes un développeur JavaScript, cela sera un jeu d'enfant pour vous. Si vous êtes toujours en train d'apprendre le langage, vous allez avoir quelques soucis et j'espère que vous lirez les explications suivantes. »\n\n« Le code JavaScript suivant va afficher une fenêtre d'alerte. Que va contenir cette fenêtre ? »\n\n```js\nvar five = 5;\nfive.three = 3;\nalert(five + five.three);\n```\n\n« Allez à la fin de cet article pour trouver la réponse. » _[En fait allez plutôt à la fin de cette partie](./les-types-en-javascript-pour-tout-savoir/#demo)._ « Et ci-dessous, je vais laisser une explication pour vous démontrer comment JavaScript arrive à ce résultat. »\n\n\n\n\n### Les six types qui existent en JavaScript ###\n\n« Il n'y a que 6 [types en JavaScript](http://ecma-international.org/ecma-262/5.1/#sec-8) : \n[Object](http://ecma-international.org/ecma-262/5.1/#sec-8.6), \n[Number](http://ecma-international.org/ecma-262/5.1/#sec-8.5), \n[String](http://ecma-international.org/ecma-262/5.1/#sec-8.4), \n[Boolean](http://ecma-international.org/ecma-262/5.1/#sec-8.3), \n[Null](http://ecma-international.org/ecma-262/5.1/#sec-8.2), et \n[Undefined](http://ecma-international.org/ecma-262/5.1/#sec-8.1). »</p>\n\n- « **Object** inclue les tableaux [_Array_], les fonctions [_Function_] et des objets ordinaires [_Object_, _Date_, _RegExp_, _Math_...]. »\n- « **Number** peut être un entier ou un nombre à virgule ou même les valeurs spécifiques _NaN_ et _Infinity_. »\n- « **String** inclue la chaîne vide _\"\"_. » _Ainsi que toute chaîne de caractère._\n- « **Booleans** n'a que deux uniques valeurs : _true_ et _false_. »\n\n« Les deux derniers types primitifs sont un peu déroutants : »\n\n- « La seule valeur du type **Null** est _null_. »\n- « La seule valeur du type **Undefined** est _undefined_. »\n\n_Note : il est important de garder à l'esprit que les types primitifs Number _(0, -10, NaN...)_, String _(\"\", \"coucou\"...)_ et Bool _(true, false)_ ont chacun leur équivalent en Object. Je parle d'équivalence car `(new String(\"\"))` n'est pas la même chose que `\"\"`, le premier est de type `Object` alors que le second de type `String`. Cela s'éclairera peut-être plus loin. Pour finir il est bon de rappeler que les valeurs _0, -10, NaN, \"\", \"coucou\", function() { return; }, { bla: \"\", blu,\"\" }_... sont appelés des expressions ou (opérandes) et _+, -, /, ==, !==_... sont appelés des opérateurs.\n\n« Tous les types à l'exception de Object sont également appelés “primitif”. Le type d'une variable JavaScript n'est pas déclaré explicitement, il est défini par le moteur d'exécution JavaScript. Dans notre exemple, le type de la variable “five” est Number parce que nous lui avons assigné un nombre entier. »\n\n« Exactement comme d'autres langages de programmation, JavaScript va implicitement convertir le type d'une valeur en fonction de l'opérateur qui est appliquée à la valeur. Et à la différence d'autres langages de programmation, JavaScript [insiste lourdement là dessus](http://ecma-international.org/ecma-262/5.1/#sec-9). Par exemple le résultat de `\"5\"` - `\"3\"` est le nombre `2` parce que l'opérateur moins demande la conversion des expressions [\"5\" et \"3\"] en Number. Si un opérateur n'arrive pas à convertir [(trouver une équivalence en Number)] l'un des membres, c'est `NaN` ([Not a Number](http://ecma-international.org/ecma-262/5.1/#sec-4.3.23)) qui est utilisé à la place. Par exemple `\"5\"` - `\"Fred\"` est implicitement converti en `5` - `Nan` ce qui donne `NaN`. »\n\n« L'ensemble complet des règles pour les conversions de types implicites n'est pas compliqué tant que vous savez quel type chaque opérateur exige pour les expressions qu'ils manipulent. »\n\n\n\n\n### Connaître et comprendre les règles de conversion implicite ###\n\n« Les Object et String suivent la règle suivante : [toute valeur doit être convertie en type primitif](http://ecma-international.org/ecma-262/5.1/#sec-9.1) ». »\n\n- Si le type d'une expression doit être [converti en] Number [par l'opérateur], cela signifie que le moteur JavaScript va appeler la méthode `valueOf()` [si l'expression n'est pas de type primitif, donc un type Object] et si le résultat [de la conversion] n'est pas un type primitif, il est converti en type String par la méthode `toString()`. »\n- Si le type de l'opérande doit être String, cela signifie que le moteur JavaScript commence d'abord par appeler la méthode `toString()` et si le résultat n'est pas un type primitif, il est converti avec la méthode `valueOf()`.\n\n« Dans chacun des cas, si le résultat obtenu au final n'est pas un type primitif. une exception est levée. »\n\nVoyons plutôt les conversions :\n\nChaque opérateur demandera la conversion de l'expression en un type primitif bien précis pour fonctionner (\"if (condition)\" demandera la conversion en un type Boolean de \"condition\", \"nombre * 3\" demandera la conversion en un type Number de \"nombre\", etc.).\n\n_Note : L'opérateur `+` est « spécial ». La majorité des opérateurs imposent un type primitif à leur expression pour effectuer leur opération mais pas `+` qui lui, peut imposer soit des types String (concaténation), soit des types Number (addition). La condition est que si au moins une des expressions est de type String initialement, l'opérateur va demander des types String, s'il n'y a pas un seul type String initialement, l'opérateur va réclamer des types Number. Ce n'est pas le seul opérateur « spécial », par exemple l'opérateur `==` est très complexe dans sa réclamation de conversion d'expression.\n\n\n\n#### L'expression doit être transformée en type Number ####\n\n« Si le type de l'expression doit être `Number`, et que son type actuel est : »\n\n- un **Number** : aucune conversion.\n- « un **Object** : la valeur est convertie en un type primitif et si le résultat n'est pas un Number alors l'une des conversions suivantes [les 4 suivantes de cette liste] est appliquée. »\n- « un _String_ : la chaîne est convertie en un nombre conformément aux règles habituelles en JavaScript. » NaN dans la majorité des cas.\n- « un **Boolean** : 1 si la valeur est true, sinon 0. »\n- « un **Null** : 0. »\n- « un **Undefined** : NaN »\n\n\n\n#### L'expression doit être transformée en type String ####\n\n« Si le type de l'expression doit être `String`, et que son type actuel est : »\n\n- un **String** : aucune conversion.\n- « un **Object** : la valeur est convertie en un type primitif et si le résultat n'est pas une chaîne de caractères alors l'une des conversions suivantes est appliquée. »\n- « un **Number** : le nombre sous forme de chaîne, par exemple \"123\" ou \"12.34\". » ou \"NaN\".\n- « un **Boolean** : \"true\" or \"false\". »\n- « un **Null** : \"null\". »\n- « un **Undefined** : \"undefined\". »\n\n\n\n#### L'expression doit être transformée en type Boolean ###\n\n« Si le type de l'expression doit être `Boolean`, et que son type actuel est : »\n\n- un **Boolean** : aucune conversion.\n- « un **Object** : true. »\n- « un **Number** : false si la valeur est zéro [ou NaN], sinon true [même pour Infinity]. »\n- « un **String** : false si la valeur est une chaîne vide, sinon true. »\n- « un **Null** : false. »\n- « un **Undefined** : false. »\n\n_Note : méfier vous ! Regardez l'exemple ci-dessous._\n\n```js\n// A première vue, si on ne cerne pas la différence entre \n// le type String (type primitif) et l'objet String (type Object),\n// et bien on peut penser que ces deux lignes sont équivalentes.\nvar primiveString = \"\";\nvar objectString = new String(\"\");\n\n// Mais la première est un type String.\nif (primiveString) {\n    console.log(\"true\");\n} else {\n    console.log(\"false\"); // On passe ici !\n}\n// Et la conversion en Bool d'un String vide renvoi \"false\".\n\n// Quant à la deuxième, elle est de type Object.\nif (objectString) {\n    console.log(\"true\"); // On passe ici !\n} else {\n    console.log(\"false\");\n}\n// Et la conversion en Bool d'un Object renvoi \"true\" quoi qu'il arrive !\n\n// Mais par contre...\nif (objectString.toString()) {\n    console.log(\"true\");\n} else {\n    console.log(\"false\"); // On passe ici\n}\n//...avec toString(), on renvoi bien \"false\".\n\n// car \"\" et (new String(\"\")).toString() sont eux bien égaux.\n```\n\n\n\n### L'expression doit être transformée en type Object ###\n\n« Si le type de l'expression doit être `Object`, et que son type actuel est : »\n\n- un **Object** : aucune conversion.\n- « un **Number** : la valeur est injecté dans l'objet équivalent à Number : (new Number(value)). »\n- « un **String** : la valeur est injecté dans l'objet équivalent à String : (new String(value)). »\n- « un **Boolean** : la valeur est injecté dans l'objet équivalent à Boolean : (new Boolean(value)). »\n- « un **Null** : Une exception est levé. »\n- « un **Undefined** : Une exception est levé. »\n\n\n\n\n### Et la réponse est ! ###\n\n« Maintenant que les règles de conversions sont claires, retournons à notre exemple du début. »\n\n```js\nvar five = 5;\nfive.three = 3;\nalert(five + five.three);\n```\n\n« Comme expliqué avant, la première ligne crée une variable nommée `five` dont le type est `Number`. »</p>\n\n« Quand l'[assesseur de propriété](http://ecma-international.org/ecma-262/5.1/#sec-11.2.1) lit `five`, il est converti en type `Object`. L'équivalent du type `Number` est le constructeur `Number` [(le type Object)] qui produit un objet [(puisque c'est une fonction)], et pas le type primitif `Number`. La seconde ligne de notre exemple est donc un équivalent [pour le moteur d'exécution dans ce cas précis] de : »\n\n```js\n(new Number(five)).three = 3;\n```\n\n« Comme vous pouvez le constater, aucune référence à une variable n'a été faite pour l'objet `new Number`. Après que cette expression ai été évaluée, la propriété `three` de l'objet `Number` est abandonnée. »\n\n« Le `five.three` de la troisième ligne créée un nouvel objet Number. Comme le nouvel objet n'a pas de propriété `three`, le type spéciale `undefined` (est [affectée et] retournée [et `five.three` est de type `Undefined`]. Le résultat est équivalent à : »\n\n```js\nalert(5 + undefined);\n```\n\n« L'opérateur d'addition converti chacune des deux expressions en type Number. Dans ce cas `undefined` est converti en `NaN` [et 5 reste de type Number] ce qui donne : »\n\n```js\n« alert(5 + NaN); »\n```\n\n<p id=\"demo\">« Ce qui explique pourquoi la fenêtre d'erreur dans notre exemple affiche `NaN`. »</p>\n\n\n\n\n### Pour aller plus loin dans la compréhension ###\n\nQue ce passerai t-il si le constructeur Number (le type Object (qui affiche 'function' testé par typeof)) possédait bel et bien une propriété nommée « three » ?</p>\n\n```js\n// Ajoutons au constructeur de la fonction Number (le type Object) la propriété « three ».\nNumber.prototype.three = 0; // Initialisation la arbitrairement à 0.\n\nvar five = 5;\nfive.three = 3;\nalert(five + five.three);\n```\n\nCette fois la sortie va t-elle être `NaN` ou `8` ?\n\nEt bien en vérité elle sera `5` (défini dans le prototype). Pourquoi ? La réponse est que `five.three` devient bien `(new Number(five)).three` et qu'une propriété three existant bien : à ce moment précis de l'exécution, `(new Number(five)).three` ne vaut plus `0` (prototype) mais bien `3` (assignation). Cependant, une fois l'instruction terminée : le `(new Number(five))` disparait et la valeur `3` de la propriété disparaît avec lui. Passé à l'instruction suivante, `five` est lu en tant que type Number et à `five.three` le moteur JavaScript recommence le processus précédent pour aboutir à `0` (pas d'assignation ici).</p>\n\n\n**Obtenir 8 en forçant la valeur du prototype**\n\nPour obtenir en sortie `8` **sans toucher au code**, la seule solution est de définir le `Number.prototype.three` à `3`\n\n```js\nNumber.prototype.three = 3;\nvar five = 5;\nfive.three = 3;\nalert(five + five.three);\n```\n\n**Obtenir 8 par avec une variable intermédiaire**\n\nPour obtenir en sortie `8` on peut également utiliser une variable intermédiaire pour « conserver » l'état de transformation `(new Number(five)).three.`\n\n```\nNumber.prototype.three = 0;\nvar \n   five = 5,\n   temp = five.three = 3;\nalert(five + temp);\n```\n\n**Obtenir 8 par déclaration Object au lieu de Number**\n\nPour obtenir en sortie `8` on peut également initialiser directement un type Number à partir du constructeur Number.\n\n```js\nNumber.prototype.three = 0;\n\nvar five = new Number(5);\nfive.three = 3;\nalert(five + five.three);\n```\n\n**Obtenir 8 en Bonus**\n\nPour obtenir en sortie `8` on pouvait aussi faire....\n\n```js\nalert(8);\n```\n\n... okay je m'arrête là :) C'était juste, pour finir en vous disant que bien que les tests ci-avant sont « inutiles » : ils sont là uniquement pour vous montrer les différents mécanismes possibles et la richesse de ceux-ci comparés à d'autres langages plus strictes. Après « c'est bien » ou « c'est mal » ; c'est une autre histoire.\n\n\n\n\n\n## Function et Null sont dans un bâteau ##\n\nD'un côté, Dmitry Baranovskiy et moi-même affirmons que les 6 types en JavaScript sont :\n\n- Object, Number, String, Boolean, **Null** et **Undefined**.\n\nEt pourtant, vous pourrez lire, comme dans [JavaScript Eloquent](http://eloquentjavascript.net/) ([ici, ligne 4](http://eloquentjavascript.net/chapter2.html)) que les 6 types de JavaScript sont :\n\n- Object, Number, String, Boolean, **Function** et **Undefined**.\n\nMais alors qui a raison ? S'il y a bien quelqu'un qui a raison ce sont les [spécifications officielles](http://www.ecma-international.org/publications/standards/Ecma-262.htm\" title=\"Standard ECMA-262) qui liste bien que les 6 types sont [Object, Number, String, Boolean, Null et Undefined](http://ecma-international.org/ecma-262/5.1/#sec-8).\n\nMais alors comment des ouvrages professionnels peuvent se tromper ? En réalité il ne se trompe pas réellement, mais ne font pas référence aux types JavaScipt mais [aux valeurs que peut retourner la fonction `typeof`](http://ecma-international.org/ecma-262/5.1/#sec-11.4.3) censé retourner le type d'une expression. En effet la spécification demande explicitement aux moteurs JavaScript de retourner 'function' et non pas 'object' pour une fonction (type Object) et de retourner 'object' plutôt que 'null' pour la valeur null (le type Null). Et bah franchement...\n\n\n\n\n\n## Mémo : les 6 types JavaScript ##\n\nAfin de tester ce qui a été évoqué par **Dmitry Baranovskiy**, voici plusieurs tests.\n\n\n\n\n### Le type Object (et déclinaisons) ###\n\n#### Object ####\n\n```js\n/********************/\n/* Le type Object */\n/********************/\n\n// Objet en JavaScript\nvar objectJS = new Object();\nconsole.log(typeof objectJS); // retourne \"object\"\nconsole.log(typeof Object); // retourne \"function\"\nconsole.log(objectJS instanceof Object); // retourne \"true\"\nconsole.log(objectJS instanceof Array); // retourne \"false\"\nconsole.log(objectJS instanceof Function); // retourne \"false\"\n\n// Objet en JSON\nvar objectJSON = {};\nconsole.log(typeof objectJSON); // retourne \"object\"\nconsole.log(typeof {}); // retourne \"object\" (la même chose que \"new Object()\")\nconsole.log(objectJSON instanceof Object); // retourne \"true\"\nconsole.log(objectJS instanceof Array); // retourne \"false\"\nconsole.log(objectJS instanceof Function); // retourne \"false\"\n```\n\n#### Array ####\n\n```js\n/**************************/\n/* Le type Object : Array */\n/**************************/\n// Tableau en JavaScript\nvar arrayJS = new Array();\nconsole.log(typeof arrayJS); // retourne \"object\"\nconsole.log(typeof Array); // retourne \"function\"\nconsole.log(arrayJS instanceof Object); // retourne \"true\"\nconsole.log(arrayJS instanceof Array); // retourne \"true\"\nconsole.log(arrayJS instanceof Function); // retourne \"false\"\n\n// Tableau en JSON\nvar arrayJSON = [];\nconsole.log(typeof arrayJSON); // retourne \"object\"\nconsole.log(typeof []); // retourne \"object\" (la même chose que \"new Array()\")\nconsole.log(arrayJSON instanceof Object); // retourne \"true\"\nconsole.log(arrayJSON instanceof Array); // retourne \"true\"\nconsole.log(arrayJSON instanceof Function); // retourne \"false\"\n```\n\n\n\n#### Function ####\n\n```js\n/*****************************/\n/* Le type Object : Function */\n/*****************************/\n\n// Fonction en JavaScript\nvar functionJS = function() {};\nconsole.log(typeof functionJS); // retourne \"function\"\nconsole.log(typeof Function); // retourne \"function\"\nconsole.log(functionJS instanceof Object); // retourne \"true\"\nconsole.log(functionJS instanceof Array); // retourne \"false\"\nconsole.log(functionJS instanceof Function); // retourne \"true\"\n```\n\n#### Date, RegExp, Error ####\n\n```js\n/****************************************/\n/* Les autres types Object instanciable */\n/****************************************/\n\n// L'objet Date\nvar date = new Date();\nconsole.log(typeof date); // retourne \"object\"\nconsole.log(typeof Date); // retourne \"function\"\nconsole.log(date instanceof Object); // retourne \"true\"\nconsole.log(date instanceof Date); // retourne \"true\"\nconsole.log(date instanceof Function); // retourne \"false\"\n\n// L'objet RegExp\nvar regex = new RegExp(\" \");\nconsole.log(typeof regex); // retourne \"object\"\nconsole.log(typeof RegExp); // retourne \"function\"\nconsole.log(regex instanceof Object); // retourne \"true\"\nconsole.log(regex instanceof RegExp); // retourne \"true\"\nconsole.log(regex instanceof Function); // retourne \"false\"\n\n// L'objet RegExp court\nvar sRegex = / /;\nconsole.log(typeof sRegex); // retourne \"object\"\nconsole.log(typeof / /); // retourne \"object\" (la même chose que \"new RegExp()\")\nconsole.log(sRegex instanceof Object); // retourne \"true\"\nconsole.log(sRegex instanceof RegExp); // retourne \"true\"\nconsole.log(sRegex instanceof Function); // retourne \"false\"\n\n// L'objet Error\nvar error = new Error();\nconsole.log(typeof error); // retourne \"object\"\nconsole.log(typeof Error); // retourne \"function\"\nconsole.log(error instanceof Object); // retourne \"true\"\nconsole.log(error instanceof Error); // retourne \"true\"\nconsole.log(error instanceof Function); // retourne \"true\"\n```\n\n#### JSON, Math, Global (Window) ####\n\n```js\n/**********************************/\n/* Les autres types Object simple */\n/**********************************/\n\n// L'objet JSON\n//var json = new JSON(); // error\nconsole.log(typeof json); // retourne \"undefined\" (n'existe pas du coup)\nconsole.log(typeof JSON); // retourne \"object\"\n//console.log(json instanceof Object); // error\n//console.log(json instanceof JSON); // error\n//console.log(json instanceof Function); // error\n\n// L'objet Math\n//var math = new Math(); // error\nconsole.log(typeof math); // retourne \"undefined\" (n'existe pas du coup)\nconsole.log(typeof Math); // retourne \"object\"\n//console.log(math instanceof Object); // error\n//console.log(math instanceof Math); // error\n//console.log(math instanceof Function); // error\n\n// L'objet Global (Window dans les navigateurs)\n//var globalVar = new global(); // error\nconsole.log(typeof globalVar); // retourne \"undefined\" (n'existe pas du coup)\nconsole.log(typeof global); // retourne \"object\"\n//console.log(globalVar instanceof Object); // error\n//console.log(globalVar instanceof global); // error\n//console.log(globalVar instanceof Function); // error\n```\n\n\n\n\n### Les types primitifs (et Objets associés) ###\n\n#### Number ####\n\n```js\n/******************/\n/* Le type Number */\n/******************/\n\n// Number primitif\nvar pNumber = 104.56;\nconsole.log(typeof pNumber); // retourne \"number\"\nconsole.log(typeof 104.56); // retourne \"number\"\nconsole.log(pNumber instanceof Object); // retourne \"false\"\nconsole.log(pNumber instanceof Number); // retourne \"false\"\n\n// L'Objet Number\nvar number = new Number(104.56);\nconsole.log(typeof number); // retourne \"object\"\nconsole.log(typeof Number); // retourne \"function\"\nconsole.log(number instanceof Object); // retourne \"true\"\nconsole.log(number instanceof Number); // retourne \"true\"\n\n// Number primitif à 0\nvar pNumber0 = 0;\nconsole.log(typeof pNumber0); // retourne \"number\"\nconsole.log(pNumber0 instanceof Object); // retourne \"false\"\nconsole.log(pNumber0 instanceof Number); // retourne \"false\"\n\n// L'Objet Number à 0\nvar number0 = new Number(0);\nconsole.log(typeof number0); // retourne \"object\"\nconsole.log(number0 instanceof Object); // retourne \"true\"\nconsole.log(number0 instanceof Number); // retourne \"true\"\n\n// Number primitif invalide\nvar pNumberN = NaN;\nconsole.log(typeof pNumberN); // retourne \"number\"\nconsole.log(pNumberN instanceof Object); // retourne \"false\"\nconsole.log(pNumberN instanceof Number); // retourne \"false\"\n\n// L'Objet Number invalide\nvar numberN = new Number(NaN);\nconsole.log(typeof numberN); // retourne \"object\"\nconsole.log(numberN instanceof Object); // retourne \"true\"\nconsole.log(numberN instanceof Number); // retourne \"true\"\n\n// Number primitif infinie\nvar pNumberI = Infinity;\nconsole.log(typeof pNumberI); // retourne \"number\"\nconsole.log(pNumberI instanceof Object); // retourne \"false\"\nconsole.log(pNumberI instanceof Number); // retourne \"false\"\n\n// L'Objet Number infinie\nvar numberI = new Number(Infinity);\nconsole.log(typeof numberI); // retourne \"object\"\nconsole.log(numberI instanceof Object); // retourne \"true\"\nconsole.log(numberI instanceof Number); // retourne \"true\"\n```\n\n#### String ####\n\n```js\n/******************/\n/* Le type String */\n/******************/\n\n// String primitif\nvar pString = \"test\";\nconsole.log(typeof pString); // retourne \"string\"\nconsole.log(typeof \"test\"); // retourne \"string\"\nconsole.log(pString instanceof Object); // retourne \"false\"\nconsole.log(pString instanceof String); // retourne \"false\"\n\n// L'Objet String\nvar string = new String(\"test\");\nconsole.log(typeof string); // retourne \"object\"\nconsole.log(typeof String); // retourne \"function\"\nconsole.log(string instanceof Object); // retourne \"true\"\nconsole.log(string instanceof String); // retourne \"true\"\n\n// String vide primitif\nvar pStringE = \"\";\nconsole.log(typeof pStringE); // retourne \"string\"\nconsole.log(pStringE instanceof Object); // retourne \"false\"\nconsole.log(pStringE instanceof String); // retourne \"false\"\n\n// L'Objet vide String\nvar stringE = new String(\"\");\nconsole.log(typeof stringE); // retourne \"object\"\nconsole.log(stringE instanceof Object); // retourne \"true\"\nconsole.log(stringE instanceof String); // retourne \"true\"\n```\n\n\n\n#### Boolean ####\n\n```js\n/*******************/\n/* Le type Boolean */\n/*******************/\n\n// Boolean primitif à true\nvar pBoolTrue = true;\nconsole.log(typeof pBoolTrue); // retourne \"boolean\"\nconsole.log(typeof true); // retourne \"boolean\"\nconsole.log(pBoolTrue instanceof Object); // retourne \"false\"\nconsole.log(pBoolTrue instanceof Boolean); // retourne \"false\"\n\n// L'Objet Boolean à true\nvar boolTrue = new Boolean(true);\nconsole.log(typeof boolTrue); // retourne \"object\"\nconsole.log(typeof Boolean); // retourne \"function\"\nconsole.log(boolTrue instanceof Object); // retourne \"true\"\nconsole.log(boolTrue instanceof Boolean); // retourne \"true\"\n\n// Boolean primitif à false\nvar pBoolTrue = false;\nconsole.log(typeof pBoolTrue); // retourne \"boolean\"\nconsole.log(pBoolTrue instanceof Object); // retourne \"false\"\nconsole.log(pBoolTrue instanceof Boolean); // retourne \"false\"\n\n// L'Objet Boolean à false\nvar boolTrue = new Boolean(false);\nconsole.log(typeof boolTrue); // retourne \"object\"\nconsole.log(boolTrue instanceof Object); // retourne \"true\"\nconsole.log(boolTrue instanceof Boolean); // retourne \"true\"\n```\n\n\n\n#### Null ####\n\n```js\n/*******************/\n/* Le type Null */\n/*******************/\n\n// Null primitif\nvar pNull = null;\nconsole.log(typeof pNull); // retourne \"object\"\nconsole.log(typeof null); // retourne \"object\"\nconsole.log(typeof Null); // retourne \"undefined\"\nconsole.log(pNull instanceof Object); // retourne \"false\"\n//console.log(pNull instanceof Null); //error\n```\n\n\n\n#### Undefined ####\n\n```js\n/*********************/\n/* Le type Undefined */\n/*********************/\n\n// Undefined primitif\nconsole.log(typeof thisVarDoesntExist); // retourne \"undefined\"\nconsole.log(typeof undefined); // retourne \"undefined\"\nconsole.log(typeof Undefined); // retourne \"undefined\"\n//console.log(thisVarDoesntExist instanceof Object); //error\n//console.log(pNull instanceof Undefined); //error\n```", "dates" : { "published" : { "$date" : 1368793200000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "$(\".openable\").click(function () {\n    window.open($(this).attr(\"src\"));\n});", "stylesheet" : "", "title" : "Les <span>types</span> en <span>JavaScript</span> : pour tout savoir !", "urn" : "les-types-en-javascript-pour-tout-savoir" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71af" }, "cache" : { "comment" : { "number" : 2 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c4" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "<p>Posons le décors, le JavaScript ne possède nativement : ni classe, ni héritage, ni encapsulation... et alors ? C'est probablement le langage le plus incompris, car je vous assure que JavaScript est un puissant langage orienté objet et qu'il permet :</p>\r\n\r\n<ul>\r\n\t<li>la création de nouveaux contextes d'exécution autonomes instanciés (new) avec un constructeur, des propriétés et des méthodes personnelles internes (this...) à partir d'un gabarit de construction (classe),</li>\r\n\t<li>de dupliquer les propriétés/méthodes dans un autre gabarit (héritage) pour ajouter ou modifier des comportements (polymorphisme) le tout depuis différents endroits dans le code (partielle et virtuelle),</li>\r\n\t<li>de limiter l'accès aux propriétés/méthodes au contexte d'exécution (encapsulation privée) ou les promouvoirs (encapsulation publique)...</li>\r\n</ul>\r\n\r\n<p>avec effectivement d'autres mots clés et mécanismes que ceux dont vous avez l'habitude, et nottament grâce au <span class=\"highlighting\">Prototypage</span>.</p>\r\n\r\n<p>En ce qui concerne ceux qui ont déjà un bon pied dans le JavaScript, même si jusqu'à présent vous n'avez jamais réellement vu l'intérêt de créer des structures avancées (l'équivalent de classes) pour un développement côté client, il est indéniable que côté serveur (en <a href=\"http://blog.haeresis.fr/developper-en-javascript-cote-serveur-avec-nodejs/\" title=\"Développer en JavaScript côté serveur avec Node.js\">Node.js</a> par exemple) cela est nécessaire. Et si vous êtes plus d'un développeur Front-end sur vos sites : ça s'avère nécessaire également. Bien qu'en utilisant des bibliothèques JavaScript comme Prototype ou Mootools vous puissiez assez facilement créer des classes, je vais vous apprendre ici à comprendre la roue, vous en créer une sans l'utilisation du prototypage très simplement et cerise sur le gâteau : de jouer avec vos classes en les remplissant/appelant de la même manière qu'en jQuery !</p>\r\n\r\n<p>Pour finir nous verrons en quoi le prototypage peut vous simplifier la vie et en quoi donc JavaScript n'a finalement besoin d'aucune classe, d'aucun héritage et d'aucune encapsulation.</p>\r\n\r\n<h2>Du JavaScript, JSON, jQuery à La RACHE</h2>\r\n\r\n<p>Étant pratiquant à vos heures de la <a href=\"http://www.la-rache.com/\" title=\"Le site of the International Institute of La RACHE\">méthodologie de La RACHE</a> (Rapid Application Conception and Heuristic Extreme-programming) votre utilisation de JavaScript se limite principalement à trois cas d'utilisation, et cela vous suffit :</p>\r\n<ul>\r\n\t<li><span class=\"highlighting\">JavaScript</span> : Vous donnez un objet à manger à une fonction et celle-ci vous le ressort avec les modifications demandées.</li>\r\n\t<li><span class=\"highlighting\">JSON</span> : Vous créez des objets à la volée avec « {} » et vous les remplissez en fonction de vos besoins.</li>\r\n\t<li><span class=\"highlighting\">jQuery</span> : vous jonglez dans un DOM et faites des déplacements et duplication vraiment aisément.</li>\r\n</ul>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Créer des fonctions pour faire quelque chose à mes informations.\r\nfunction checkAuth(account) {\r\n\tif (account.email /* ... */ account.password) {\r\n\t\taccount.valid = true\r\n\t}\r\n\treturn account;\r\n}\r\n\r\n// Regrouper mes informations.\r\nvar account = {\r\n\temail: $(\"...\").val(\"...\"),\r\n\tpassword: $(\"...\").val(\"...\"),\r\n\tvalid: false\r\n}\r\n\r\n// Réaliser les choses.\r\naccount = checkAuth(account);\r\n\r\n/* ... */</code></pre>\r\n\r\n<p>L'avantage est que ça va vite à écrire : vous décidez sur le moment comment organiser votre objet et comment réaliser la fonctionnalité.</p> \r\n\r\n<p>Les problèmes arrivent quand un script cumule plusieurs centaines de lignes (et plusieurs appels de fichier différents avec plusieurs centaines de lignes) basées sur une création de l'instant et qu'il doit être amélioré / débogué 6 mois plus tard par quelqu'un d'autre (et les yeux bandés !).</p>\r\n\r\n<p>Vous ne disposez pas non plus de documentation car sincèrement, même-vous, vous vous demandez comment documenter ça...</p>\r\n\r\n<p>Il est temps d'organiser votre code JavaScript avec un développement moins procédurale et plus orienté objet. Oui, mais  s'organiser autour d'objet clairement défini sur lesquels : fautes de documentations, tout le monde pourra se référer au moins dans des fichiers par structure.</p>\r\n\r\n<h2>Héritage basé sur les classes (sans prototype)</h2>\r\n\r\n<p>Les classes en JavaScript : ça n'existe pas. À la place JavaScript a un mécanisme de prototypage qui est différent de celui des classes et donc des mécanismes que vous avez l'habitude de côtoyer dans vos langages objets. Laissons le prototypage un instant dans cette partie et revenons à nos classes. Une classe est un modèle qui, en l'instanciant (attacher « this » à un contexte d'exécution dédié), donne naissance à des objets formés selon la nomenclature de ladite classe. Mais puisque le JavaScript lui-même est déjà composé d'objet, à première vu on en a pas besoin. Oui mais l'avantage apporté par une classe est de générer facilement des objets complexes et tous formés de la même manière, de les étendres, etc. Si les classes n'existent pas nativement, rien ne nous empêche de simuler leur comportement.</p>\r\n\r\n<h3>Même objet, mais syntaxe et structure différente</h3>\r\n\r\n<p>L'élément clé <span class=\"highlighting\">new</span> existe également en JavaScript. Mais comment va-t-il nous aider à <span class=\"highlighting\">instancier des classes</span> pour <span class=\"highlighting\">créer des objets</span> en JavaScript ?</p>\r\n\r\n<p>Revenons aux sources un moment. Si je désire créer deux autres objets « <samp>account</samp> »  en continuant mon exemple précédent, il est vrai que je n'ai pas besoin de passer par une classe après tout. Je peux écrire à la suite :</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/* ... */\r\n\r\n// SYNTAXE JSON : Création d'un Object littérale avec la syntaxe JSON (JavaScript Object Notation).\r\n\r\nvar bruno = { // Instanciation d'une variable \"bruno\" avec un nouvel élément de type Object selon la syntaxe JSON.\r\n\temail: \"bruno@email.ici\", // Ajout, en tant que membre, de la propriété \"email\" (en même temps) avec un nouveau type primitif String.\r\n\tpassword: \"bépoB\" // Ajout, en tant que membre, de la propriété \"password\" (en même temps) avec un nouveau type primitif String.\r\n};\r\n\r\n/* ... */</code></pre>\r\n\r\n<p>Ensuite, quelque part plus loin... peut-être dans un autre fichier... je peux également écrire de cette autre façon :</p>\r\n   \r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/* ... */\r\n\r\n// SYNTAXE STANDARD : Création et assemblage d'Objets avec la syntaxe JavaScript standard.\r\n\r\nvar magalie = new Object(); // Instanciation d'une variable \"magalie\" avec un nouvel élément de type Object.\r\nmagalie.mail = new String(\"magalie@email.ici\").toString(); // Ajout, en tant que membre, de la propriété \"mail\" avec un nouveau type Object converti en type primitif String.\r\nmagalie.pwd = new String(\"azertyM\").toString(); // Ajout, en tant que membre, de la propriété \"pwd\" avec un nouveau type Object converti en type primitif String.\r\n\r\n/* ... */</code></pre>\r\n\r\n<p>Et, arrivé au moment de vérifier mes « account »,...</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/* ... */\r\n\r\nbruno = checkAuth(bruno);\r\nmagalie = checkAuth(magalie);\r\n\r\n/* ... */</code></pre>\r\n\r\n<p>... les problèmes commencent. Que c'est-il passé ? En fait j'ai bien créé deux « account » et mes deux syntaxes sont bonnes. Sauf que la fonction <samp>checkUser()</samp> s'attendait à pouvoir toucher à une propriété nommée <samp>valid</samp> qu'on a oublié de déclarer pour notre premier objet et qui était sensé faire un test sur les propriétés <samp>email</samp> et <samp>password</samp> qui n'existent pas dans notre second objet (en plus de <samp>valid</samp>) car on ne les a pas nommés ainsi...</p>\r\n\r\n<p>Pour résoudre cela il nous faudrait :</p>\r\n<ul>\r\n\t<li>Être sûr que quoi qu'il arrive en créant un « user » les propriétés <samp>username</samp>, <samp>password</samp> et <samp>valid</samp> existent.</li>\r\n\t<li>Être sur que la fonction <samp>checkUser</samp> soit liée d'une manière ou d'une autre à l'objet « user » puis qu'elle fasse un traitement sur lui.</li>\r\n</ul>\r\n<p class=\"highlighting\">Bref : pour résoudre cela il nous faudrait une classe.</p>\r\n\r\n<h3>Des brouillons de classe</h3>\r\n\r\n<p>Ce qu'il nous faut, c'est un générateur d'objet déjà formé pour être sûr que, si j'utilise ce générateur pour créer mes objets : ils auront tous une structure identique. Ne sautons pas des étapes et faisons des tests de compréhension.</p>\r\n\r\n<div class=\"worst-practice\">\r\n\t<div class=\"title\">Première <del>idée</del> <ins>erreur</ins> : un objet modèle pour nos structures</div>\r\n\t<div class=\"content\">\r\n\t\r\n\t<p>Afin d'éviter de se retrouver avec des objets tous formés différemments ; on décide de se référer à un modèle :</p>\r\n\t\r\n<p class=\"highlighting\">Code</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Création d'un brouillon de classe \"Account\" : un gabarit.\r\nvar account = {\r\n\temail: \"\", // Ajout de la propriétés \"email\" à \"account\".\r\n\tpassword: \"\" // Ajout de la propriétés \"password\" à \"account\".\r\n};</code></pre>\r\n\r\n<p class=\"highlighting\">Tests</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno, magalie;\r\n\r\n// J'associe ma structure à la variable \"bruno\" et la remplie.\r\nbruno = account;\r\nbruno.email = \"bruno@email.ici\";\r\nbruno.password = \"bépoB\";\r\nconsole.log(bruno.email); // renvoi \"bruno@email.ici\".\r\nconsole.log(bruno.password); // renvoi \"bépoB\".\r\n\r\n// J'associe ma structure à la variable \"magalie\" et la remplie.\r\nmagalie = account;\r\nmagalie.email = \"magalie@email.ici\";\r\nmagalie.pwd = \"azertyM\"; // Bien que \"pwd\" n'existe pas dans mon gabarit, je peux quand même l'associer et oublier \"password\".\r\nconsole.log(magalie.email); // renvoi \"magalie@email.ici\".\r\nconsole.log(magalie.pwd); // renvoi \"azertyM\".\r\n\r\nconsole.log(bruno.email); // renvoi \"magalie@email.ici\".\r\n\r\n// Je constate que la ré-association à \"magalie\" (ligne 9, 10 et 11) a remplacée celle de \"bruno\" (ligne 2, 3 et 4).</code></pre>\r\n\r\n\t\t<p>On constate rapidement plusieurs problèmes :</p>\r\n\t\t\r\n\t\t<ul>\r\n\t\t\t<li>Même si j'ai créé mon gabarit : qui m'empêche de remplir par erreur une valeur inexistante ? C'est le cas ligne 11 des tests avec \"pwd\" et ça marche comme le prouve la ligne 13 des tests qui ne renvoi pas d'erreur.</li>\r\n\t\t\t<li>Le contexte d'exécution généré en créant un « Account » à la ligne 6 du code ne ce duplique pas lors de l'association à d'autre variable (ligne 2 et 9 des tests) ce qui a pour résultat de fournir les informations de \"magalie\" via \"bruno\" (ligne 16 des tests).</li>\r\n\t\t</ul>\r\n\t\t\r\n\t\t<p>Bref, il va falloir faire mieux que ça !</p>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"correct-practice\">\r\n\t<div class=\"title\">Deuxième <del>idée</del> <ins>piste</ins> : création de contextes d'exécution autonomes différents</div>\t\r\n\t<div class=\"content\">\r\n\t\r\n\t<p>Pour résoudre nos problèmes majeurs précédents, nous allons utiliser le mot clé <samp>function</samp> et créer une fonction ce qui va créer des contexte d'exécution différent pour nos deux « account » :</p>\r\n\t\r\n\t<p class=\"highlighting\">Code</p>\r\n\t\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Création d'un brouillon de classe « Account » avec comme paramètres : \"email\" et \"password\".\r\nvar account = function (email, password) {\r\n\t// Création d'un objet à l'intérieur de Account, sa portée est donc limitée à \"Account\".\r\n\tvar newAccount = {};\r\n\t\r\n\tnewAccount.email = email; // Ajout de la propriétés \"email\" à \"newAccount\" avec comme valeur le paramètre \"email\".\r\n\tnewAccount.password = password; // Ajout de la propriétés \"password\" à \"account\" avec comme valeur le paramètre \"password\".\r\n\t\r\n\t// Notre fonction retourne un objet de nomenclature \"Account\".\r\n\treturn newAccount;\r\n};</code></pre>\r\n\r\n<p class=\"highlighting\">Tests</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno, magalie;\r\n\r\nbruno = account(\"bruno@email.ici\", \"bépoB\");\r\nconsole.log(bruno.email); // renvoi \"bruno@email.ici\".\r\nconsole.log(bruno.password); // renvoi \"bépoB\".\r\n\r\nmagalie = account(\"magalie@email.ici\", \"azertyM\");\r\nmagalie.pwd = \"azertyM\";\r\nconsole.log(magalie.email); // renvoi \"magalie@email.ici\".\r\nconsole.log(magalie.pwd); // renvoi \"azertyM\".\r\n\r\nconsole.log(bruno.email); // renvoi toujours \"bruno@email.ici\".</code></pre>\r\n\r\n\t\t<p>Bon, cette fois au moins, c'est fonctionnel :</p>\r\n\t\t\r\n\t\t<ul>\r\n\t\t\t<li>Même si l'on peut toujours inventer des propriétés (ligne 6 des tests), dans notre cas ce n'est plus génant car grâce aux paramètres imposées par la fonction (ligne 6 du code) on a au moins une certitude : les propriétés <samp>email</samp> et <samp>password</samp> sont remplies.</li>\r\n\t\t\t<li>On constate bien à la ligne 10 des tests que <samp>bruno.email</samp> n'a pas été écrasé par <samp>magalie.email</samp> (deux contextes distincts).</li>\r\n\t\t</ul>\r\n\t\r\n\t</div>\r\n</div>\r\n\r\n<h3>Une Classe en JavaScript</h3>\r\n\r\n<p>Effectivement, tout cela marche. Mais si on veut se rapprocher du comportement des classes dans les langages objets il va falloir faire mieux que ça. Pourquoi ? Par exemple : de quel type est notre objet dans le cas précédent ?</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var \r\n\tbruno,\r\n\taccount = function (email, password) {\r\n\t\tvar newAccount = {};\r\n\t\tnewAccount.email = email; \r\n\t\tnewAccount.password = password;\r\n\t\treturn newAccount;\r\n\t};\r\n\t\r\nbruno = account(\"bruno@email.ici\", \"bépoB\");\r\n\r\nconsole.log(bruno instanceof Object); // renvoi \"true\".\r\nconsole.log(bruno instanceof account); // renvoi \"false\".</code></pre>\r\n\r\n<p>On s'aperçoit à la ligne 13 qu'il va être difficile de faire des objets distincts de cette façon, et je ne vous parle même pas d'héritage !</p>\r\n\r\n<h4>Instance, Constructeur, propriétés d'instance et propriétés d'objet</h4>\r\n\r\n<p>Voilà ce que l'on va permettre :</p>\r\n<ul>\r\n\t<li>Instanciation d'un contexte d'exécution avec une fonction grâce au mot-clé <samp class=\"highlighting\">new</samp>. Une telle fonction en JavaScript est appelée « Constructeur ». Dans ce cas, la pratique veut que l'on commence le nom de la variable par une majuscule.</li>\r\n\t<li>Attribut d'instance attaché grâce au mot-clé <samp class=\"highlighting\">this</samp>.</li>\r\n\t<li>Propriétés d'instances et propriétés statiques (utilisables sans instanciation).</li>\r\n</ul>\r\n\r\n<p class=\"highlighting\">Classe</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Création d'une classe \"Account\" avec comme paramètres : \"email\" et \"password\".\r\nvar Account = function (email, password) {\r\n\r\n\t// Cette fois on attache les variables au contexte d'exécution avec comme base \"this\".\r\n\t// En appelant cette fonction avec <samp>new</samp>, \r\n\t// <samp>this</samp> correspond alors au contexte d'exécution d'une nouvelle instance d'Account.\r\n\tthis.email = email;\r\n\tthis.password = password;\r\n\r\n\t// On attache une propriété à la variable \"Account\" (qui sera un objet, une fois la fonction instanciée).\r\n\t// Si \"Account.nbrOfAccount\" n'existe pas, (premier passage), il vaut 1. \r\n\t// Sinon il vaut lui-même plus 1.\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\t\r\n\t// Il n'est pas nécessaire d'inclure de \"return\". Une fonction retourne son instance quand elle est appelée avec new.\r\n};</code></pre>\r\n\r\n<p class=\"eye-catching\">Note : vous pouvez constater que la variable « Account » prend maintenant une majuscule. C'est une convention pour indiquer que cette fonction devra être instanciée avec le mot-clé « new ».</p>\r\n\r\n<p class=\"highlighting\">Tests</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno, magalie, badUseCase;\r\n\t\r\n// Lecture de \"Account.nbrOfAccount\" sans instanciation.\r\nconsole.log(Account.nbrOfAccount); // renvoi \"undefined\".\r\n\r\n// Instanciation d'un premier \"Account\".\r\nbruno = new Account(\"bruno@email.ici\", \"bépoB\");\r\n\r\n// Tentative de lecture d'une propriété d'instance depuis :\r\n/* Une instance */ console.log(bruno.email); // renvoi \"bruno@email.ici\".\r\n/* Un objet (classe) */ console.log(Account.email); // renvoi \"undefined\".\r\n\r\n// Tentative de lecture d'une propriété d'objet (de classe) depuis :\r\n/* Une instance */ console.log(bruno.nbrOfAccount); // renvoi \"undefined\".\r\n/* Un objet (classe) */ console.log(Account.nbrOfAccount); // renvoi \"1\".\r\n\r\n// Instanciation d'un deuxième \"Account\".\r\nmagalie = new Account(\"magalie@email.ici\", \"azertyB\");\r\n\r\n// Lecture de \"Account.nbrOfAccount\" après deux instanciations.\r\nconsole.log(Account.nbrOfAccount);\t// renvoi 2.\r\n\r\n// Création d'une variable dans le contexte d'exécution global.\r\nglobal.email = \"Rien ici\"; // window.email est un équivalent dans les navigateurs.\r\nconsole.log(global.email); // renvoi \"Rien ici\".\r\n\r\nbadUseCase = Account(\"badusecase@email.ici\", \"azertyB\"); // On n'utilise pas le mot clé \"new\" pour instancier la classe.\r\n// console.log(badUseCase.email); // error.\r\nconsole.log(global.email); // renvoi \"badusecase@email.ici\".</code></pre>\r\n\t\r\n<p>Il y a deux problèmes à relever ici :</p>\r\n<ul>\r\n\t<li>On s'aperçoit à la ligne 4 des « Tests » que si aucune instance n'a été créée, la propriété <samp>nbrOfAccount</samp> de <samp>Account</samp> n'est jamais remplie. Elle est donc de type Undefined (au lieu de par exemple renvoyer 0).</li>\r\n\t<li>Le second problème vient de l'utilité de <span class=\"highlighting\">this</span>. Si vous utilisez <samp>new</samp> lors de l'appel de <samp>Account</samp> (ligne 7 et 18 des « Tests »), cela permet à <samp>this</samp> d'être associé au <span class=\"eye-catching\">contexte d'exécution de la fonction</span> (nouvelle instance). Cependant, sans le mot-clé <samp>new</samp>, <samp>this</samp> reste associé <span class=\"eye-catching\">au contexte d'exécution global</span> à savoir la variable <samp>global</samp> (par exemple avec Node.js) et la variable <samp>window</samp> dans vos navigateurs (par exemple sous IE, Chrome, Firefox...).</li>\r\n</ul>\r\n<p>Réglons ces problèmes avec le code ci-dessous :</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\t// On vérifie bien que this est attaché au contexte d'exécution d'une nouvelle instance.\r\n\tif (this instanceof Account) {\r\n\t\tthis.email = email;\r\n\t\tthis.password = password;\r\n\t\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\t} else {\r\n\t\t// On crache à la figure (mais gentiment) du développeur qui a fait une bétise :)\r\n\t\t// L'erreur suivante s'affichera dans votre console (\"La fonction 'Account' doit être instanciée avec le mot-clé 'this'.\").\r\n\t\tthrow Error(\"'Account' function must be instantiated with the keyword 'this'.\");\r\n\t}\r\n};\r\n// On initialise la variable statique en dehors de la fonction pour qu'elle soit sur 0 initialement.\r\nAccount.nbrOfAccount = 0;</code></pre>\r\n\r\n<p>Malheureusement, l'utilisation de <samp>if (this instanceof Account) {</samp> empêche également à la fonction d'être utilisée par les fonctions « call(this) » ou apply(this) ». Et peut-être même que parfois il est intentionnel d'attacher le contexte à l'objet global. Dans la suite de cet article, nous n'allons pas utiliser ce contrôle (mais sachez qu'il existe).</p>\r\n\r\n<p class=\"eye-catching\">Note : comment <samp>Account</samp> peut-être une fonction (ligne 1) et posséder une propriété <samp>nbrOfAccount</samp> (ligne 14). Et bien c'est tout simplement parce qu'une fonction est également un objet. Le type fonction (bien que renvoyé par <samp>typeof</samp>) n'existe pas. Une fonction n'est qu'un objet que l'on peut invoquer. Vous trouverez <a href=\"./les-types-en-javascript-pour-tout-savoir/\" title=\"Les types en JavaScript : pour tout savoir !\">plus d'informations sur les 6 types en JavaScript dans mon billet précédent</a>.</p>\r\n\r\n<h4>Accesseurs, encapsulation publique, encapsulation privée</h4>\r\n\r\n<p>Cela est fonctionnel, mais minimal. Comment pouvons-nous par exemple contrôller la façon dont une valeur doit être assignée ou renvoyée ? Dans notre exemple, nous aimerions pouvoir assigner un type String (et non un Object String) en valeur de l'attribut <samp>email</samp> et la renvoyer uniquement en minuscule par exemple. Nous allons utiliser pour cela des fonctions. Quand une fonction est une propriété d'un objet instancié par un constructeur, on l'appelle alors « Méthode », même en JavaScript.</p>\r\n\r\n<p class=\"highlighting\">Classe</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\t/*** Variables conteneurs. ***/\r\n\tthis.email = email;\r\n\tthis.password = password;\r\n\t\r\n\t/*** Variables statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\r\n\t/*****************************************************/\r\n\t/*** Méthodes d'accession de retour - Getters. ***/\r\n\r\n\t// J'associe à la propriété \"getEmail\" d'une instance d'\"Account\" une fonction.\r\n\t// La différence entre le \"this.email\" et \"this.getEmail()\" est que\r\n\t// \"this.getEmail()\" va renvoyer l'email en minuscule même si il a été passé avec des majuscules.\r\n\tthis.getEmail = function () {\r\n\t\treturn this.email.toLowerCase();\r\n\t}\r\n\r\n\t// J'associe à la propriété \"getPassword\" d'une instance d'\"Account\" une fonction.\r\n\t// La différence entre le \"this.password\" et \"this.getPassword()\" est que\r\n\t// \"this.getPassword()\" me permet de hasher le résultat avant de l'affficher.\r\n\tthis.getPassword = function (hashFunction) {\r\n\t\tif (typeof hashFunction != 'function') { // Si le premier paramètre n'est pas une fonction.\r\n\t\t\treturn this.password; // On affiche le mot de passe normalement.\r\n\t\t} else {\r\n\t\t\treturn hashFunction(this.password); // Sinon on l'affiche en fonction de ce qu'aura fait la fonction 'hashFunction'.\r\n\t\t}\r\n\t}\r\n\r\n\t// Les Getters nous permettent donc d'afficher différemment la valeur stockée dans l'instance de l'objet.\r\n\t// Mais la valeur reste conservée sans les modifications renvoyées.\r\n\r\n\r\n\t/*****************************************************/\r\n\t/*** Méthodes d'accession d'attribution - Setters. ***/\r\n\r\n\t// J'associe à la propriété \"setEmail\" d'une instance d'\"Account\" une fonction.\r\n\t// La différence entre le \"this.email\" et \"this.setEmail()\" est qu'avant d'attribuer la valeur à mon instance,\r\n\t// \"this.setEmail()\" me permet de vérifier si c'est bien un email.\r\n\tthis.setEmail = function (value, isAnEmailFunction) {\r\n\t\tvalue = (new String(value)).toString(); // On s'assure de travailler avec un type String.\r\n\t\tif (typeof isAnEmailFunction != 'function') {\r\n\t\t\tthis.email = value;\r\n\t\t} else {\r\n\t\t\tthis.email = isAnEmailFunction(value); // La valeur attribuée passe d'abord un test : est-elle un email valide ?\r\n\t\t}\r\n\t}\r\n\r\n\t// J'associe à la propriété \"setPassword\" d'une instance d'\"Account\" une fonction.\r\n\t// La différence entre le \"this.password\" et \"this.setPassword()\" est qu'avant d'attribuer la valeur à mon instance,\r\n\t// \"this.setPassword()\" me permet de hasher la valeur.\r\n\tthis.setPassword = function (value, hashFunction) {\r\n\t\tvalue = (new String(value)).toString();\r\n\t\tif (typeof hashFunction != 'function') {\r\n\t\t\tthis.password = value;\r\n\t\t} else {\r\n\t\t\tthis.password = hashFunction(value); // La valeur attribuée sera hashée comme 'hashFunction' l'aura décidée.\r\n\t\t}\r\n\t}\r\n\r\n\t// Les Setters nous permettent donc avant stockage d'exercer un certain nombre de contrôles ou transformations à la valeur passée.\r\n\t// La valeur reste alors conservée telle qu'elle a été modifiée et non telle qu'elle a été envoyée.\r\n};\r\nAccount.nbrOfAccount = 0;</code></pre>\r\n\r\n<p class=\"eye-catching\">Note : <samp>this</samp>, à l'intérieur des méthodes, fait bien référence à une instance de « Account » car il fait référence au contexte d'exécution de l'instance. Comme expliqué plus tôt, il faudrait l'appeler avec le mot clé <samp>new</samp> pour que this fasse référence à la méthode en elle-même (ce qui ne sert à rien).</p>\r\n\r\n<p class=\"highlighting\">Petit scénario de test</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Ayons un peu d'imagination !\r\n\r\n// \"md5(value)\" est une fonction de hash qui existe plus haut dans mon code. \r\n// Elle hash la chaîne \"value\" en md5 pour empêcher de connaître le mot de passe tout en sachant vérifier si il est bon.\r\n\r\n// \"isEmail(value)\" est une fonction qui existe plus haut. \r\n// Elle vérifie que \"value\" soit un email valide. Si ce n'est pas le cas elle renvoi une erreur.\r\n\r\n/* ... */\r\n\r\nvar bruno = new Account(); // Si les paramètres ne sont pas passés, \"this.email\" et \"this.password\" sont de type Undefined.\r\nbruno.setEmail(\"COUCOU\");\r\nbruno.setPassword(\"bépoB\");\r\nconsole.log(bruno.email); // renvoi \"COUCOU\".\r\nconsole.log(bruno.password); // renvoi \"bépoB\" (le mot de passe a été passé en clair).\r\nconsole.log(bruno.getEmail()); // renvoi \"coucou\" (getEmail renvoi en minuscule).\r\nconsole.log(bruno.getPassword(md5)); // renvoi \"88255bfff0707a085e2f3faa5aa0d8cc\".\r\n\r\nvar magalie = new Account();\r\n// magalie.setEmail(\"COUCOU\", isEmail); // error, car ce n'est pas un email.\r\nmagalie.setPassword(\"AzertyM\", md5);\r\nconsole.log( magalie.password ); // renvoi \"237e4d6319a517c12bfbc8dc4c9c4fa4\" (la valeur est transformée avant stockage).\r\nconsole.log( magalie.getPassword() ); // renvoi \"237e4d6319a517c12bfbc8dc4c9c4fa4\".\r\nconsole.log( magalie.getPassword(md5) ); // renvoi \"eb20d719c7709e19a31936e36753244a\" (le md5 de 237e4d6319a517c12bfbc8dc4c9c4fa4).\r\n\r\nmagalie.email = 17;\r\n// console.log( magalie.getEmail() ); // error, on nous dit que \"toLowerCase()\" n'existe pas sur 17.</code></pre>\r\n\r\n<p>Les Getters et Setters vont nous être d'une grande utilité comme vous avez pu le constater cependant, tout ce travail est mis en l'air puisque l'on peut (les développeurs) passer directement par <samp>this.email</samp> par exemple (ligne 26 du scénario) et attribuer des valeurs sans vérification.</p>\r\n\r\n<p>On va donc privatiser les propriétés comme suit :</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\tvar \r\n\t\tpublics = this, // On attache this à publique pour utiliser un mot avec du sens qu'en on associe les variables au contexte d'exécution.\r\n\t\tprivates = {}; // On créé un objet conteneur uniquement visible dans la fonction et ses sous fonctions. Pour rester cohérent, on l'appel privates.\r\n\t\r\n\t/*** Variables privées. ***/\r\n\tprivates.email = email; // Cette propriété est attachée à privates, elle n'est donc pas accessible de l'extérieur.\r\n\tprivates.password = password;\r\n\t\r\n\t/*** Variables statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\r\n\t/*** Méthodes publiques. ***/\r\n\tpublics.getEmail = function () { // Cette méthode est attachéé à publics, elle est donc accessible de l'extérieur.\r\n\t\treturn privates.email.toLowerCase(); // \"privates.email\" est accessible car une méthode fait partie du contexte d'exécution de son constructeur.\r\n\t}\r\n\tpublics.setEmail = function (value, isAnEmailFunction) {\r\n\t\tvalue = (new String(value)).toString();\r\n\t\tif (typeof isAnEmailFunction != 'function') {\r\n\t\t\tprivates.email = value;\r\n\t\t} else {\r\n\t\t\tprivates.email = isAnEmailFunction(value);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublics.getPassword = function (hashFunction) {\r\n\t\tif (typeof hashFunction != 'function') {\r\n\t\t\treturn privates.password;\r\n\t\t} else {\r\n\t\t\treturn hashFunction(privates.password);\r\n\t\t}\r\n\t}\r\n\tpublics.setPassword = function (value, hashFunction) {\r\n\t\tvalue = (new String(value)).toString();\r\n\t\tif (typeof hashFunction != 'function') {\r\n\t\t\tprivates.password = value;\r\n\t\t} else {\r\n\t\t\tprivates.password = hashFunction(value);\r\n\t\t}\r\n\t}\r\n};\r\nAccount.nbrOfAccount = 0;</code></pre>\r\n\r\n<p>En n'associant plus les propriétés <samp>email</samp> et <samp>password</samp> à <samp>this</samp> mais seulement à une simple variable interne (ligne 5), elles ne sont plus accessibles de l'extérieur.</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno = new Account();\r\nbruno.setEmail(\"bruno.lesieur@gmail.com\");\r\nconsole.log(bruno.email); // renvoi \"undefined\".\r\nconsole.log(bruno.getEmail()); // renvoi \"bruno.lesieur@gmail.com\".\r\n\r\nbruno.email = 17;\r\nconsole.log(bruno.getEmail()); // renvoi \"bruno.lesieur@gmail.com\".\r\n\r\nconsole.log(Account.nbrOfAccount); // renvoi 1.</code></pre>\r\n\r\n<p class=\"eye-catching\">Note : le fait d'utiliser <samp>publics</samp> au lieu de <samp>this</samp> ou même d'attacher des variables en propriété à <samp>privates</samp> n'est absoluement pas obligatoire. Cela sert dans notre exemple à bien différencier ce qui est publique de ce qui est privé.</p>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Une classe acceptable</div>\r\n\t<div class=\"content\">\r\n\t\r\n\t<p>Un dernier problème reste à régler. Si je passe non pas par <samp>setEmail</samp> ou <samp>setPassword</samp> mais directement par mon constructeur, je ne pourrais pas par exemple vérifier que l'email est bon. Il suffit alors de ne plus associer les propriétés aux variables privées directement mais en passant par les Setters eux-mêmes dans le constructeur.</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\tvar \r\n\t\tpublics = this,\r\n\t\tprivates = {};\r\n\t\r\n\t// Je n'assigne plus directement les propriétés sous peine de devoir réécrire les contrôles, ou ne pas en avoir du tout.\r\n\t\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\r\n\t/*** Méthodes publiques. ***/\r\n\tpublics.getEmail = function () {\r\n\t\treturn privates.email.toLowerCase();\r\n\t}\r\n\tpublics.setEmail = function (value, isAnEmailFunction) {\r\n\t\tvalue = (new String(value)).toString();\r\n\t\tif (typeof isAnEmailFunction != 'function') {\r\n\t\t\tprivates.email = value;\r\n\t\t} else {\r\n\t\t\tprivates.email = isAnEmailFunction(value);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublics.getPassword = function (hashFunction) {\r\n\t\tif (typeof hashFunction != 'function') {\r\n\t\t\treturn privates.password;\r\n\t\t} else {\r\n\t\t\treturn hashFunction(privates.password);\r\n\t\t}\r\n\t}\r\n\tpublics.setPassword = function (value, hashFunction) {\r\n\t\tvalue = (new String(value)).toString();\r\n\t\tif (typeof hashFunction != 'function') {\r\n\t\t\tprivates.password = value;\r\n\t\t} else {\r\n\t\t\tprivates.password = hashFunction(value);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*** Constructeur ***/\r\n\t\r\n\t// À la place je fais appel directement aux Setters dans ma classe.\r\n\t// Je fais appel à eux après qu'ils aient été définis pour éviter les erreurs.\r\n\t// Je m'aperçois que je ne peux pas passer de fonction md5 à \"setPassword\" de cette manière.\r\n\t// Rien ne m'empêche de modifier les paramètres du constructeur pour permettre de le faire passer par là.\r\n\t\r\n\tif (email) {\r\n\t\tpublics.setEmail(email); // Je vérifie que la construction est bonne pour le paramètre \"email\".\r\n\t}\r\n\tif (password) {\r\n\t\tpublics.setPassword(password); // Je vérifie que la construction est bonne pour le paramètre \"password\".\r\n\t}\r\n};\r\nAccount.nbrOfAccount = 0;</code></pre>\r\n\t</div>\r\n</div>\r\n\r\n<h4>Getters et Setters rassemblés et chaînage à la jQuery</h4>\r\n\r\n<p>Utiliser un Getter et un Setter distinct est peut-être ce que vous avez toujours fait, mais pourquoi ne pas utiliser la même fonction pour attribuer une valeur ou la retourner ? Pure folie me dites-vous ? Avez-vous entendu parler d'une librairie se nommant jQuery ? Peut-être Prototype ou Mootools ? Bon, ça vous dit peut-être rien, mais c'est exactement ce qu'elles font.</p>\r\n<p>Voici le principe des Getters et Setters tout en un, ce qui permet le chaînage.</p>\r\n<ul>\r\n\t<li>Si je dois manipuler la propriété privée \"email\", je le fais via la fonction publique \"email()\".</li>\r\n\t<li>Si je veux retourner la propriété \"email\", j'appel \"email()\" sans arguments.</li>\r\n\t<li>Si je veux attribuer une valeur à \"email\", j'appel \"email(value)\" avec pour \"value\" la valeur que je veux assigner.</li>\r\n\t<li>Quand j'attribue une valeur, au lieu que ma fonction ne retourne rien, elle retourne l'objet qui contient \"email\". Cela permet le chaînage.</li>\r\n</ul>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\tvar \r\n\t\tpublics = this,\r\n\t\tprivates = {};\r\n\t\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\r\n\t/*** Méthodes publiques. ***/\r\n\t\r\n\t// \"getEmail\" et \"setEmail\" deviennent une seule et même fonction, \"email\".\r\n\t// Nous pouvons nous permettre de l'appeler comme cela, car \"email\" n'existe pas.\r\n\t// Effectivement, maintenant que \"email\" est associée à \"privates\", ce nom est libre.\r\n\t\r\n\tpublics.email = function (value, isAnEmailFunction) {\r\n\t\r\n\t\t// On vérifie que la fonction est utilisée comme un Getter.\r\n\t\t// Pour en être sûr, il suffit de vérifier si la fonction n'a aucun paramètre.\r\n\t\t// On vérifie donc que \"value\" a comme type Undefined.\r\n\t\r\n\t\tif (typeof value == 'undefined') {\r\n\t\t\treturn privates.email.toLowerCase();\r\n\t\t\t\r\n\t\t// Cependant, si une valeur est passée, c'est qu'on utilise la fonction comme un Setter.\r\n\t\t// Dans ces cas-là, on y met la partie Setter.\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tvalue = (new String(value)).toString();\r\n\t\t\tif (typeof isAnEmailFunction != 'function') {\r\n\t\t\t\tprivates.email = value;\r\n\t\t\t} else {\r\n\t\t\t\tprivates.email = isAnEmailFunction(value);\r\n\t\t\t}\r\n\t\t\treturn publics;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Idem par ici.\r\n\t\r\n\tpublics.password = function (value, hashFunction) {\r\n\t\r\n\t\t// Cependant, comme notre Getter peut prendre en premier paramètre une fonction,\r\n\t\t// on vérifie que \"value\" ne soit pas de type Function (Object donc), car si c'est le cas,\r\n\t\t// nous réclamons tout de même le Getter.\r\n\t\r\n\t\tif (typeof value == 'undefined' || typeof value == 'function') {\r\n\t\t\t\r\n\t\t\t// Nous passons donc \"value\" à \"hashFunction\" puisqu'en réalité lui n'a pas été demandé en mode \"Getter\". \r\n\t\t\thashFunction = value;\r\n\t\t\r\n\t\t\tif (typeof hashFunction != 'function') {\r\n\t\t\t\treturn privates.password;\r\n\t\t\t} else {\r\n\t\t\t\treturn hashFunction(privates.password);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = (new String(value)).toString();\r\n\t\t\tif (typeof hashFunction != 'function') {\r\n\t\t\t\tprivates.password = value;\r\n\t\t\t} else {\r\n\t\t\t\tprivates.password = hashFunction(value);\r\n\t\t\t}\r\n\t\t\treturn publics;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*** Constructeur ***/\r\n\tif (email) {\r\n\t\tpublics.email(email);\r\n\t}\r\n\tif (password) {\r\n\t\tpublics.password(password);\r\n\t}\r\n};\r\nAccount.nbrOfAccount = 0;</code></pre>\r\n\r\n<p>Avec un exemple d'utilisation du chainage :</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">console.log((new Account()).email(\"BRUNO@EMAIL.ICI\").password(\"bépoB\").email()); // renvoi \"bruno@email.ici\".</code></pre>\r\n\r\n<p class=\"eye-catching\">Note : pour faciliter la compréhension de la suite de notre article, nous allons retirer le support de \"isAnEmailFunction\" et de \"hashFunction\" dans nos exemples.</p>\r\n\r\n<h3>L'héritage de classe en JavaScript</h3>\r\n\r\n<p>On ne peut pas parler de classe sans parler d'héritage. Il n'existe pas plus que de réelle classe de quoi les faire hériter. Pourtant, le mécanisme de polymorphisme existe bien en JavaScript et nous allons reproduire ce que l'on peut appeler de l'héritage. L'idée c'est qu'une classe fille possède l'intégralité des méthodes publiques de sa classe mère en plus de ses propres méthodes. Voyons ensemble un moyen de faire de l'héritage de classe à partir du pattern de la partie précédente (et toujours sans prototypage).</p>\r\n\r\n<p>Nous allons créer une classe « User ». Un user est un « Account » amélioré qui possède son propre nom et pourquoi pas diverses informations relatives à son état d'utilisateur (nom, prénom, date de naissance...). Nous allons juste ajouter une nouvelle propriété : le <span class=\"highlighting\">username</span>.</p>\r\n\r\n<p class=\"highlighting\">Classe héritée</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Créons un objet \"User\" prennant en paramètre la même chose que \"Account\".\r\n// Cependant, \"username\" est un paramètre en plus spécifique à \"User\". \r\nvar User = function (username, password, email /* , firstname, lastname, birthdate */) {\r\n\tvar \r\n\t\tpublics = this,\r\n\t\tprivates = {};\r\n\t\r\n\t/****************/\r\n\t/*** Héritage ***/\r\n\t\r\n\t// Voici ce qui nous permet de faire de l'héritage, la méthode \"call\" (ou \"apply\") de tous les objets Function.\r\n\t// Normalement, seul \"Account\" peut créer un \"Account\", c'est-à-dire un contexte d'exécution qu'il s'auto-associe.\r\n\t// Cela lui permet de disposer de toutes les méthodes publiques qu'on lui a assigné.\r\n\t\r\n\t// Mais la méthode \"call\" permet de lier le contexte d'exécution instancié de la fonction appelante (ici celui de \"Account\")\r\n\t// au contexte d'exécution d'une autre fonction (ici \"this\", c'est-à-dire celui de \"User\").\r\n\t// Le premier paramètre est donc \"this\" et les autres sont ceux qu'aurait normalement reçu le constructeur de \"Account\".\r\n\tAccount.call(this, email, password);\r\n\t\r\n\t// L'héritage multiple est donc ici permis, nous pourrions associer et une classe \"Account\", \r\n\t// et un classe \"Person\" pour former le contexte d'exécution rempli de la toute nouvelle classe \"User\".\r\n\t// Ainsi User = Account + Person.\r\n\t\r\n\t// Person.call(this, firstname, lastname, birthdate);\r\n\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tUser.nbrOfUser = (typeof User.nbrOfUser != 'undefined') ? User.nbrOfUser + 1 : 1;\r\n\r\n\t/*** Méthodes publiques. ***/\r\n\tpublics.username = function (value) {\r\n\t\tif (typeof value == 'undefined') {\r\n\t\t\treturn privates.username;\r\n\t\t} else {\r\n\t\t\tprivates.username = value;\r\n\t\t\treturn publics;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*** Constructeur ***/\t\t\r\n\tif (username) {\r\n\t\tpublics.username(username);\r\n\t}\r\n};\r\nUser.nbrOfUser = 0;</code></pre>\r\n\r\n<p class=\"highlighting\">Tests</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var bruno = (new Account())\r\n\t.email(\"bruno@email.ici\")\r\n\t.password(\"bépoB\");\r\n\r\nvar magalie = (new User())\r\n\t.username(\"Magalie\")\r\n\t.password(\"AzertyM\")\r\n\t.email(\"magalie@email.ici\");\r\n\r\nconsole.log(bruno.email()); // renvoi \"bruno@email.ici\".\r\nconsole.log(magalie.email()); // renvoi \"magalie@email.ici\".\r\n// console.log(bruno.username()); // error\r\nconsole.log(magalie.username());  // renvoi \"Magalie\".\r\nconsole.log(Account.nbrOfAccount); // renvoi 2 (puisqu'un \"User\" est également un \"Account\").\r\nconsole.log(User.nbrOfUser); // renvoi 1.</code></pre>\r\n\r\n<p>Vous pouvez trouver gênant que <samp>nbrOfAccount</samp> s'incrémente quand même lors de la création d'un nouveau « User ». Est-ce que vous vous rappelez de <samp>(this instanceof Account)</samp> sensé n'exécuter le code que si <samp>this</samp> s'attache à un contexte d'exécution émanent d'une fonction « Account » uniquement ? Et bien sachez que son défaut (ou son avanbtage, c'est au choix) est qu'il interdit l'exécution de code dans le contexte d'exécution global mais également dans les classes héritées.</p>\r\n\r\n<p>Nous pouvons dès lors ajouter une variable statique à « Account » :</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\t/* ... */\r\n\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\t\r\n\t// Ajout d'une fonction pour ne compter que les objets non hérités.\r\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\r\n\t\r\n\t/* ... */\r\n};\r\nAccount.nbrOfAccount = 0;\r\nAccount.nbrOfRealAccount = 0;</code></pre>\r\n\r\n<h2>Héritage par délégation ou prototypal</h2>\r\n\r\n<p>La partie précédente, bien que fonctionnelle, ne va pas nous permettre d'aller plus loin dans notre exercice de simuler le comportement de classe en JavaScript. La réelle question c'est : est-ce réellement important ? Et si plutôt que de nous focaliser sur la façon de faire ressembler le système à celui des autres langages nous tirions plutôt partie des mécanismes en place pour faire mieux que ça ? Je vais vous présenter le prototypage en JavaScript.</p>\r\n\r\n<h3>Variable privées ou prototypes, il faut choisir</h3>\r\n\r\n<p>Actuellement, nous créons nos méthodes au sein du constructeur (faisant office de classe). Cela est possible mais il existe le mécanisme de prototypage qui nous permet de réaliser cela de manière plus performante. Cependant, il va y avoir des changements à opérer, notamment celui de perdre le bénéfice d'une vrai encapsulation privée.</p>\r\n\r\n<div class=\"worst-practice\">\r\n\t<div class=\"title\">L'encapsulation privée n'est pas possibe avec le prototypage</div>\r\n\t<div class=\"content\">\r\n\t\r\n\t<p>Utilisons le prototypage avec notre <span class=\"useless\">classe</span> constructeur « Account »</p>\r\n\t\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\tvar \r\n\t\tpublics = this,\r\n\t\tprivates = {};\r\n\t\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\r\n\t\r\n\t// Nous sortons les méthodes publiques du corps du constructeur.\r\n\t// Cela afin de les associer par la voix du prototype.\r\n\t// Nous verrons plus loin en quoi cela est différent.\r\n\t\r\n\t/*** Constructeur ***/\r\n\tif (email) {\r\n\t\tpublics.email(email);\r\n\t}\r\n\tif (password) {\r\n\t\tpublics.password(password);\r\n\t}\r\n};\r\nAccount.nbrOfAccount = 0;\r\nAccount.nbrOfRealAccount = 0;\r\n\r\n/*** Méthodes publiques. ***/\r\n\r\n// Nous accrochons les méthodes au prototype de \"Account\".\r\n// Et le premier constat est que la variable \"privates\" n'existe plus dans notre prototype.\r\n// Nous pourrions la redéfinir dans la fonction elle-même...\r\n\r\nAccount.prototype.email = function (value) {\r\n\r\n\t// Vérifions si \"privates\" est conservée dans un contexte d'exécution.\r\n\tconsole.log(privates);\r\n\r\n\t// Si \"privates\" n'existe pas on le créé, sinon on l'utilise.\r\n\tvar privates = privates || {};\r\n\r\n\tif (typeof value == 'undefined') {\r\n\r\n\t\t// Que nous renvoi \"privates.email\" ?\r\n\t\tconsole.log(privates.email);\t\t\r\n\t\t\r\n\t\treturn privates.email.toLowerCase();\r\n\t} else {\r\n\t\tprivates.email = (new String(value)).toString();\r\n\r\n\t\t// Que nous renvoi \"privates.email\" ?\r\n\t\tconsole.log(privates.email);\r\n\r\n\t\t// Transformation de \"publics\" en \"this\" car publics n'existe plus.\r\n\t\treturn this;\r\n\t}\r\n}\r\nAccount.prototype.password = function (value) {\r\n\tvar privates = privates || {};\r\n\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.password;\r\n\t} else {\r\n\t\tprivates.password = (new String(value)).toString();\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nvar bruno = (new Account())\r\n\t.email(\"bruno@email.ici\")\r\n\t.password(\"bépoB\");\r\n\r\nconsole.log(bruno.email()); // error</code></pre>\r\n\t\t<p>En exécutant la ligne 66 tout ce passe bien. Quand la fonction <samp>email()</samp> est appelée avec un paramètre ligne 67, on passe dans le code ligne 34. La variable <samp>privates</samp> est alors undefinded ce qui est normal. Puis on passe par la ligne 37 qui nous créé notre variable <samp>privates</samp> et par la ligne 49 qui nous affiche bien notre valeur. Tout baigne ! Le problème viens quand on réclame cette valeur à la ligne 70. On pourrait s'attendre à ce que cette fois-ci la ligne 34 nous renvoi « { email: \"bruno@email.ici\" } » mais non, elle retourne de nouveau « undefined ». Ce qui fait qu'à la ligne 37 on recréé de nouveau la variable « privates », que la ligne 42 nous affiche « undefined » et qu'on nous crache à la figure ligne 44 car <samp>toLowerCase()</samp> n'est pas une méthode du type Undefined.</p>\r\n\t\r\n\t</div>\r\n</div>\r\n\r\n<p>Une méthode attachée à un Objet par son prototype n'a :</p>\r\n<ul>\r\n\t<li>pas accès aux variables définis dans le constructeur,</li>\r\n\t<li>et n'a pas de contexte d'exécution personnel auquel se référer lui permettant de conserver des valeurs après la fin de l'exécution de la fonction.</li>\r\n</ul>\r\n<p>Cette limitation est dû au fonctionnement même du prototypage. En réalité les méthodes attachées au prototype d'un objet n'appartiennent pas à l'instance de l'objet une fois celui-ci appelé avec <samp>new</samp> mais peuvent tout de même manipuler les propriétés et méthodes de l'instance qui sont attachées à <samp>this</samp> et sont elles-mêmes disponible via <samp>this</samp>. Cela signifie que les méthodes ne sont pas « dupliquées » à chaque instance mais seulement appelées par elle et référencées une unique fois dans le prototype.</p>\r\n\r\n<ul>\r\n\t<li>C'est un gain indéniable de performance et de place mémoire occupée par les objets.</li>\r\n\t<li>Cela permet de définir ou redéfinir des méthodes dans des fichiers séparés.</li>\r\n\t<li class=\"warning\">Mais cela limite l'utilisation des variables privées.</li>\r\n</ul>\r\n\r\n<h3>De fausses variables privées</h3>\r\n\r\n<p>Une solution simple est donc d'attacher les variables anciennement privées à <samp>this</samp> de manière à les rendre disponibles à l'utilisation par les prototypes. Le problème est bien évidemment qu'elles pourront être lues ou assignées sans passer par leurs méthodes respectives. C'est un problème que nous allons limiter en indiquant qu'elles sont privées (bien qu'elles ne le soient pas). Il sera convenu avec vos développeurs qu'il ne faut jamais toucher à ces variables en dehors du constructeur et des prototypes.</p>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Objet : constructeur + prototypes</div>\r\n\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var Account = function (email, password) {\r\n\t\r\n\t// Voici notre fausse variable privée.\r\n\t// Elle est bien accessible en passant par \r\n\t// l'objet __private qui est accessible par une instance.\r\n\t// Mais vous vous l'interdirez.\r\n\t// Pour prévenir l'écrasement de this.__privates, on test d'abords son existence.\r\n\t \r\n\tthis.__privates = this.__privates || {};\r\n\t\r\n\t/*** Constructeur ***/\r\n\tif (email) {\r\n\t\tthis.email(email);\r\n\t}\r\n\tif (password) {\r\n\t\tthis.password(password);\r\n\t}\r\n\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\r\n\t\t\r\n};\r\nAccount.nbrOfAccount = 0;\r\nAccount.nbrOfRealAccount = 0;\r\n\r\n/*** Méthodes publiques. ***/\r\nAccount.prototype.email = function (value) {\r\n\tvar privates = this.__privates; // On crée un raccourci aux variables privées.\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.email.toLowerCase();\r\n\t} else {\r\n\t\tprivates.email = (new String(value)).toString();\r\n\t\treturn this;\r\n\t}\r\n}\r\nAccount.prototype.password = function (value) {\r\n\tvar privates = this.__privates; // On crée un raccourci aux variables privées.\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.password;\r\n\t} else {\r\n\t\tprivates.password = (new String(value)).toString();\r\n\t\treturn this;\r\n\t}\r\n}</code></pre>\r\n\t</div>\r\n</div>\r\n\r\n<h3>Héritage de prototype</h3>\r\n\r\n<p>Occupons nous à présent du cas de « User ». Les constructeurs sont bien hérités avec notre appel à <samp>call</samp> mais quand est-il des prototypes ? Et bien pour simuler un héritage il va falloir « recopier » l'intégralité des prototypes de « Account » dans « User » en prenant soin de ne jamais écraser un prototype portant le même nom dans la classe héritière.</p>\r\n\r\n<div class=\"best-practice\">\r\n\t<div class=\"title\">Héritage : constructeurs + prototypes</div>\r\n\t<div class=\"content\">\r\n\t\r\n\t<p class=\"highlighting\">Héritage (multiple)</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var User = function (username, password, email /* , firstname, lastname, birthdate */) {\r\n\tthis.__privates = this.__privates || {};\r\n\r\n\t/*** Héritage ***/\r\n\r\n\t// Ici on recopie l'intégralité des prototypes de \"Account\" dans \"User\".\r\n\t// Il faut le faire avant l'appel de \"Account.call()\" sinon arrivé à \"this.email()\"\r\n\t// dans le constructeur \"Account\" ça plantera car \"User\" n'aura pas encore le prototype de \"email()\".\r\n\t\r\n\t// On parcourt tous les prototypes de \"Account\".\r\n\tfor (var p in Account.prototype) {\r\n\t\t// On empèche d'écraser un prototype qu'on aurait volontairement surchargé pour le constructeur fils.\r\n\t\tif (typeof User.prototype[p] != 'function') {\r\n\t\t\tUser.prototype[p] = Account.prototype[p];\t\t\t\t\r\n\t\t}\r\n\t}\r\n\tAccount.call(this, email, password);\r\n\t\r\n\t/*********************/\r\n\t/* Héritage multiple */\r\n\t\r\n\t// Nous pourrions également hériter d'un constructeur \"Person\" ici et obtenir un objet contenant les prototypes des deux constructeurs \"Account\" et \"Person\".\r\n\t/*\r\n\t\tfor (var p in Person.prototype) {\r\n\t\t\tif (typeof User.prototype[p] != 'function') {\r\n\t\t\t\tUser.prototype[p] = Person.prototype[p];\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tPerson.call(this, firstname, lastname, birthdate);\r\n\t*/\r\n\t\t\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tUser.nbrOfUser = (typeof User.nbrOfUser != 'undefined') ? User.nbrOfUser + 1 : 1;\r\n\t\r\n\t/*** Constructeur ***/\t\t\r\n\tif (username) {\r\n\t\tthis.username(username);\r\n\t}\r\n};\r\nUser.nbrOfUser = 0;\r\n\r\n/*** Méthodes publiques. ***/\r\nUser.prototype.username = function (value) {\r\n\tvar privates = this.__privates;\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.username;\r\n\t} else {\r\n\t\tprivates.username = value;\r\n\t\treturn this;\r\n\t}\r\n}</code></pre>\r\n\t<p class=\"highlighting\">Tests globaux</p>\r\n\t\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">console.log(\r\n\t(new Account()).email(\"bruno@email.ici\").password(\"bépoB\").email() // renvoi \"bruno@email.ici\".\r\n);\r\nvar magalie = new User(\"Magalie\", \"AzertyM\", \"magalie@email.ici\");\r\nconsole.log(magalie.email()); // renvoi \"magalie@email.ici\".\r\n\r\nconsole.log(magalie instanceof Account); // renvoi true.\r\nconsole.log(magalie instanceof User); // renvoi true.\r\n\r\nconsole.log(Account.nbrOfAccount); // renvoi 2.\r\nconsole.log(Account.nbrOfRealAccount); // renvoi 1.\r\nconsole.log(User.nbrOfUser); // renvoi 1.</code></pre>\r\n\t</div>\r\n</div>\r\n\r\n<p>Pour finir, je vous offre un moyen de complètement prototyper votre classe mais qui vous interdira de l'héritage multiple.</p>\r\n\r\n<div class=\"correct-practice\">\r\n\t<div class=\"title\">Création complète par prototype</div>\r\n\t<div class=\"content\">\r\n\t\r\n\t<p class=\"highlighting\">Code</p>\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/********************/\r\n/** Account Object **/\r\n/********************/\r\nvar Account = function (email, password) {\r\n\tthis.init(email, password);\r\n\r\n\t/*** Variables/Méthodes statiques. ***/\r\n\tAccount.nbrOfAccount = (typeof Account.nbrOfAccount != 'undefined') ? Account.nbrOfAccount + 1 : 1;\r\n\tAccount.nbrOfRealAccount = (typeof Account.nbrOfRealAccount != 'undefined') ? ((this instanceof Account) ? Account.nbrOfRealAccount + 1 : Account.nbrOfRealAccount) : 1;\r\n}\r\nAccount.nbrOfAccount = 0;\r\nAccount.nbrOfRealAccount = 0;\r\n\r\n/*** Constructeur ***/\r\nAccount.prototype.init = function (email, password) {\r\n\tthis.__privates = this.__privates || {};\r\n\t\r\n\tif (email) {\r\n\t\tthis.email(email);\r\n\t}\r\n\tif (password) {\r\n\t\tthis.password(password);\r\n\t}\r\n};\r\n\r\n/*** Méthodes ***/\r\nAccount.prototype.email = function (value) {\r\n\tvar privates = this.__privates;\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.email.toLowerCase();\r\n\t} else {\r\n\t\tprivates.email = (new String(value)).toString();\r\n\t\treturn this;\r\n\t}\r\n}\r\nAccount.prototype.password = function (value) {\r\n\tvar privates = this.__privates;\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.password;\r\n\t} else {\r\n\t\tprivates.password = (new String(value)).toString();\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\n/*****************/\r\n/** User Object **/\r\n/*****************/\r\nvar User = function (username, password, email) {\r\n\tthis.init(username, password, email);\r\n\t\r\n\t// Variables/Méthodes statiques. //\r\n\tUser.nbrOfUser = (typeof User.nbrOfUser != 'undefined') ? User.nbrOfUser + 1 : 1;\r\n};\r\nUser.nbrOfUser = 0;\r\n\r\n/*** Passage de prototype ***/\r\nUser.prototype = new Account();\r\nUser.prototype.super = User.prototype.init;\r\n\r\n/*** Constructeur ***/\r\nUser.prototype.init = function (username, password, email) {\r\n\tthis.super(email, password);\r\n\tthis.__privates = this.__privates || {};\r\n\t\t\r\n\tif (username) {\r\n\t\tthis.username(username);\r\n\t}\r\n};\r\n\r\n/*** Méthodes ***/\r\nUser.prototype.username = function (value) {\r\n\tvar privates = this.__privates;\r\n\tif (typeof value == 'undefined') {\r\n\t\treturn privates.username;\r\n\t} else {\r\n\t\tprivates.username = value;\r\n\t\treturn this;\r\n\t}\r\n}</code></pre>\r\n\r\n<p class=\"highlighting\">Tests</p>\r\n\t\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">console.log(\r\n\t(new Account()).email(\"bruno@email.ici\").password(\"bépoB\").email() // renvoi \"bruno@email.ici\".\r\n);\r\nvar magalie = new User(\"Magalie\", \"AzertyM\", \"magalie@email.ici\");\r\nconsole.log(magalie.email()); // renvoi \"magalie@email.ici\".\r\n\r\nconsole.log(magalie instanceof Account); // renvoi true.\r\nconsole.log(magalie instanceof User); // renvoi true.\r\n\r\nconsole.log(Account.nbrOfAccount); // renvoi 2.\r\nconsole.log(Account.nbrOfRealAccount); // renvoi 1.\r\nconsole.log(User.nbrOfUser); // renvoi 1.</code></pre>\r\n\t</div>\r\n</div>\r\n\r\n<h2>Pour aller plus loin</h2>\r\n\r\n<p>Je suis certain que ces patterns sont non exhaustifs et qu'il existe encore bien d'autres variantes pour structurer ses données dans sa partie modèle en JavaScript. Si cela vous a inspiré, que vous-même vous connaissez des astuces pour contourner certaines limitations que j'ai mentionnées ou pour tout autre remarque n'hésitez pas.</p>\r\n\r\n<p>Pour finir, si des points vous ont semblé un peu vagues ou que vous voulez en savoir plus sur les Prototypes ainsi que tous les mécanismes qui ont permis de réaliser ces pseudo-classes, je vous invite à lire <a href=\"http://fgribreau.com/articles/voyage-au-coeur-de-javascript.html\" title=\"Voyage au coeur de JavaScript\">Voyage au coeur de JavaScript</a> qui est un long article résumant de manière détaillée et concise les mécanismes mis en jeu dans JavaScript.</p>", "dates" : { "published" : "2013-06-01 10:00:00", "updated" : [ "2013-06-01 10:00:00" ] }, "title" : "<span>Classes</span>, <span>héritage</span>, <span>encapsulation</span> <span>vs</span> <span>Prototype</span> en <span>JS</span>", "urn" : "classes-heritage-encapsulation-vs-prototype-en-js" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b0" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "Je rencontre souvent des personnes se plaignant de problèmes de `z-index` et qui les évitent ou se contente de dire que les `z-index` ça pose problème. Bien souvent le problème vient du fait que le développeur ne s'attend pas à ce que la priorité d'affichage des `z-index` fonctionnent en cascade dans le DOM. Voyez plutôt l'exemple suivant :\n\n\n\n\n\n## Un exemple d'utilisation du z-index problématique ##\n\n<div id=\"ex-global\">\n\t<div id=\"ex-content\">\n\t\tCoucou je suis le contenu principale !<br />\n\t\tz-index: 1;\n\t\t<div id=\"ex-test\">\n\t\t\tCoucou je suis un problème !<br />\n\t\t\tz-index: 7777;\n\t\t</div>\n\t</div>\n\t<div id=\"ex-footer\">\n\t\t<div>\n\t\t\tCoucou je suis le pied de page !<br />\n\t\t\tz-index: 2;\n\t\t</div>\n\t</div>\n</div>\n\nNous observons que la zone avec un z-index de 7777 passe en dessous de la zone avec un z-index de 2. Comment cela est-il possible ? « J'ai des problèmes de z-index ».\n\nRegardons de plus prêt le code :\n\n\n\n### HTML ###\n\n```html\n<div id=\"content\">\n\tCoucou je suis le contenu principale !<br />\n\tz-index: 1;\n\t<div id=\"test\">\n\t\tCoucou je suis un problème !<br />\n\t\tz-index: 7777;\n\t</div>\n</div>\n<div id=\"footer\">\n\t<div>\n\t\tCoucou je suis le pied de page !<br />\n\t\tz-index: 2;\n\t</div>\n</div>\n```\n\n### CSS ###\n\n```css\n#content {\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 1; /* Le contenu doit s'afficher en arrière plan */\n}\n#footer  {\n\tpadding-top: 100px;\n\tmargin: 0 auto;\n\twidth: 50%;\n}\n#footer > div {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 2; /* Le contenu s'affiche au-dessus de #content */\n}\n#test {\n\tposition: absolute;\n\twidth: 80%;\n\theight: 200px;\n\tz-index: 7777; /* Le contenu ne s'affiche pas au-dessus de #footer comme attendu... */\n\tleft: 10%;\n}\n```\n\n## z-index et priorité d'affichage en cascade dans le DOM ##\n\nTous les éléments dont nous allons parler sont des éléments en `position: relative`, `position: absolute` ou `position: fixed`.\n\n\n\n### Priorité aux éléments frères bas ###\n\nOn part des éléments les plus hauts dans le DOM et de même niveau (frères). C'est l'élément situé en dessous d'un autre dans le code source qui s'affiche par dessus l'autre.\n\n\n\n### Changer les priorités ###\n<p>Pour modifier ce comportement on applique un z-index plus grand aux éléments plus haut pour les forcer à passer par dessus.</p>\n\n### Priorité aux éléments parents ###\n\nQuoi qu'il arrive, et peut importe le `z-index` utilisé, un élément fils d'un élément avec un `z-index` plus faible qu'un de ses frères ne passera jamais au-dessus de ce frère. Il faut se faire une raison...\n\n\n\n\n\n## Mon conseil ##\n\n**Le mieux est de ne pas mélanger l'affichage relatif/absolue/fixe d'éléments fils venant de différent pères eux-mêmes relatifs.**", "dates" : { "published" : { "$date" : 1372435860000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "style" : "#ex-content {\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n\tpadding: 8px;\r\n\tcolor: #ffffff;\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: #800000;\r\n\tz-index: 1;\r\n}\r\n#ex-footer  {\r\n\tpadding-top: 100px;\r\n\tmargin: 0 auto;\r\n\twidth: 50%;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n}\r\n#ex-footer > div {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: #008000;\r\n\tz-index: 2;\r\n\tpadding: 8px;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n\tcolor: #ffffff;\r\n}\r\n#ex-test {\r\n\tposition: absolute;\r\n\twidth: 80%;\r\n\theight: 200px;\r\n\tbackground-color: #000080;\r\n\tz-index: 7777;\r\n\tleft: 10%;\r\n\tpadding: 8px;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n\tcolor: #ffffff;\r\n}\r\n#ex-global {\r\n\theight: 300px;\r\n\tposition: relative;\r\n\tmargin: 16px;\r\n\t-moz-box-sizing: border-box;\r\n\tbox-sizing: border-box;\r\n}", "stylesheet" : "#ex-content {\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tpadding: 8px;\n\tcolor: #ffffff;\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n\tbackground-color: #800000;\n\tz-index: 1;\n}\n#ex-footer  {\n\tpadding-top: 100px;\n\tmargin: 0 auto;\n\twidth: 50%;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n#ex-footer > div {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tbackground-color: #008000;\n\tz-index: 2;\n\tpadding: 8px;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tcolor: #ffffff;\n}\n#ex-test {\n\tposition: absolute;\n\twidth: 80%;\n\theight: 200px;\n\tbackground-color: #000080;\n\tz-index: 7777;\n\tleft: 10%;\n\tpadding: 8px;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tcolor: #ffffff;\n}\n#ex-global {\n\theight: 300px;\n\tposition: relative;\n\tmargin: 16px;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}", "title" : "<span>Problème</span> de <span>z-index</span> et <span>priorité</span> d'<span>affichage</span>", "urn" : "probleme-de-z-index-et-priorite-d-affichage" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b2" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "5310456355dfd5f7698d48ce" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "C'est suite à plusieurs conversations m'invitant à ne pas utiliser de multiples balises `h1` dans mes intégrations HTML (et plus récemment une demande « insistante » sur le fait de ne pas le faire) que je me vois forcé de marcher sur les pas de <a href=\"http://www.goetter.fr/\" title=\"Site Raphaël Goetter\">Raphaël Goetter</a> -qui avait <a href=\"http://blog.goetter.fr/articles/mythe-h1-unique-html/\" title=\"Le mythe de l’élément H1 unique en HTML\">déjà abordé le sujet</a>- pour expliquer pourquoi : en plus d'être tout à fait valide, cette pratique est bénéfique.\n\nTout document HTML5 dispose de cloison de contenu ([Sectionneur de contenu](http://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#sectioning-content)) que sont `article`, `aside`, `nav` et `section`. Ces zones de contenu peuvent chacune contenir une balise `header` et `footer` (ne cloisonnant pas elles-mêmes le contenu) et de multiple éléments de titrage ([Titre en HTML](http://www.w3.org/TR/html-markup/h1.html)) allant de `h1` à `h6`.\n\nBien que l'utilisation de plus d'une balise `h1` ai pu rationnellement laisser à débattre (même si techniquement les standards ne l'interdise pas), les recommandations et même l'interdiction d'une telle pratique ne sont plus pertinentes et rationnelles à l'heure du HTML5.\n\n\n\n\n\n## La balise h1 et les balises entêtes h2-h6 ##\n\n\n\n### Que dit la référence HTML ###\n\nLe [W3C], sans parler de HTML5, nous explique [ici](http://www.w3.org/TR/html-markup/h1.html) que : « Les éléments h1 à h6 servent de titre pour les sections auxquelles ils sont rattachés. ». Dans les contraintes additionnelles (là où logiquement nous devrions donc trouver notre interdiction de multiple `h1`) il est seulement mentionné que :\n\n- « L'élément h1 ne doit pas être contenu comme élément enfant d'un élément address. »\n- « L'attribut align sur l'élément h1 est obsolète. Utilisez CSS à la place. »\n\nAucune interdiction n'est donc mentionnée dans cette partie. Ces balises sont autorisés dans [les éléments listés ici](http://www.w3.org/TR/html-markup/common-models.html#common.elem.flow).\n\n [W3C]: http://www.w3.org/TR/html-markup/h1.html\n\n\n\n### Que dit la référence HTML5 ###\n\nLe [W3C] nous explique ([ici](http://www.w3.org/TR/2011/WD-html5-20110525/sections.html#the-section-element)) : « L'élément section représente une zone ou une application générique à un document. Une section, dans ce contexte, est un regroupement de contenu avec une même thématique, et de fait avec des balises d'entêtes. ».\n\nLe [W3C] nous explique également [ici](http://www.w3.org/TR/2011/WD-html5-20110525/sections.html#headings-and-sections) que : « Les éléments `h1–h6` et l'élément `hgroup` sont des éléments d'entêtes. ».\n\n## Exemple donné par le W3C ##\n\nAvant de présenter des exemples tous valide, soulignons que le [W3C] explique : « Les sections peuvent contenir des balises d'entête de n'importe quel niveau. Mais l'auteur insiste lourdement sur le fait de n'utiliser que des éléments `h1`, ou d'utiliser les éléments de rang appropriés pour les sections imbriquées à différents niveaux. »\n\n### Exemple valide ###\n\n> ```html\n<body>\n    <h1>Foo</h1>\n    <h2>Bar</h2>\n    <blockquote>\n        <h3>Bla</h3>\n    </blockquote>\n    <p>Baz</p>\n    <h2>Quux</h2>\n    <section>\n        <h3>Thud</h3>\n    </section>\n    <p>Grunt</p>\n</body>\n```\n\n\n\n### Deux exemples valides, mais avec une différence de clarté ###\n\n\n> **Peu lisible** *`ici`*\n```html\n<body>\n    <h4>Apples</h4>\n    <p>Apples are fruit.</p>\n    <section>\n        <h2>Taste</h2>\n        <p>They taste lovely.</p>\n        <h6>Sweet</h6>\n        <p>Red apples are sweeter than green ones.</p>\n        <h1>Color</h1>\n        <p>Apples come in various colors.</p>\n    </section>\n</body>\n```\n\npar contre\n\n> **Plus lisible**\n```html\n<body>\n    <h1>Apples</h1>\n    <p>Apples are fruit.</p>\n    <section>\n        <h2>Taste</h2>\n        <p>They taste lovely.</p>\n        <section>\n            <h3>Sweet</h3>\n            <p>Red apples are sweeter than green ones.</p>\n        </section>\n    </section>\n    <section>\n        <h2>Color</h2>\n        <p>Apples come in various colors.</p>\n    </section>\n</body>\n```\n\n\n\n### Le plus facile à maintenir (les sections peuvent bouger) ###\n\n> **Maintenable** **`ici`** \n```html\n<body>\n    <h1>Apples</h1>\n    <p>Apples are fruit.</p>\n    <section>\n        <h1>Taste</h1>\n        <p>They taste lovely.</p>\n        <section>\n            <h1>Sweet</h1>\n            <p>Red apples are sweeter than green ones.</p>\n        </section>\n    </section>\n    <section>\n        <h1>Color</h1>\n        <p>Apples come in various colors.</p>\n    </section>\n</body>\n```\n\n[Explication approfondie sur une architecture HTML orientée composants](http://blog.lesieur.name/conventions-html-et-css-orientes-composants/).\n\n\n\n\n\n## Les multiples h1 et le SEO ##\n\nEt qu'en dise les moteurs ? Cela est tout à fait pris en compte par les moteurs et heureusement. En se posant deux minutes : on s'aperçoit aisément qu'une architecture sectionné avec plusieurs `h1` est plus facilement maintenable qu'une architecture à plat parsemée de `h1` à `h6`. Un exemple en est fait dans [Conventions HTML et CSS orientés composants](http://blog.lesieur.name/conventions-html-et-css-orientes-composants/).\n\nMais je laisse la parole à [Matt Cutts](http://www.mattcutts.com/blog/), ingénieur chez Google depuis 2000 communiquant énormément via son blog du SEO chez Google :\n\n<div class=\"video\">\n\t<iframe width=\"500\" height=\"330\" src=\"//www.youtube.com/embed/GIn5qJKU8VM\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n\nLe monsieur nous explique que s'il y a une raison logique à avoir plusieurs sections et plusieurs balises `h1` dans une page, ce n'est pas mauvais de les mettre en place. Il insiste sur le fait qu'une page intégralement remplis de `h1` est problématique en ce qui concerne par exemple un rendu sans CSS (si celle-ci ne se charge pas par exemple) et qu'il est toujours bon d'utiliser les autres balises de niveau. L'important est que les balises h1 restent réservées si possible à la partie entête de chaque section. Mais si elles sont utilisées de manière logique et avec parcimonie il n'y a aucun inconvénient SEO.\n\n## Il est autorisé d'avoir plusieurs h1 dans une page HTML5 ##\n\nEn conclusion utilisés plusieurs balises `h1` dans un document HTML5 est non seulement valide, mais recommandé par le W3C pour respecter une logique de hiérarchie. De plus si deux éléments de premier niveau se valent en importance, il n'y a pas de problème à utiliser deux balises `h1`, le `title` étant l'unique élément pouvant représenter un titre unique pour une page donnée.", "dates" : { "published" : { "$date" : 1375876320000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "style" : ".video {\r\n\tmargin: 8px 0;\r\n}\r\n.video iframe {\r\n\twidth: 100%;\r\n\tmargin: 0 auto;\r\n}\r\n", "stylesheet" : ".video {\n\tmargin: 8px 0;\n}\n.video iframe {\n\twidth: 100%;\n\tmargin: 0 auto;\n}\n", "title" : "Les <span>balises</span> <span>h1</span> multiples autorisées en <span>HTML5</span>", "urn" : "les-balises-h1-multiples-autorisees-en-html5" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b3" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "Le « Responsive Web Design » comme son nom l’indique est le concept de « Responsive Design » adapté au Web. Il est parfois raccourci par le terme  « RWD » ou simplement par « Responsive ».\n\n<figure>\n<img src=\"http://blog.haeresis.fr/upload/image/responsive-web-design.jpg\" alt=\"Responsive Web Design\">\n<figcaption>Source : www.tridentdesign.com</figcaption>\n</figure>\n\nDans la majorité des cas d’utilisations, il est utilisé comme raccourci pour désigner la version Mobile d’un site web originalement conçu pour un écran d’ordinateur.\n\nLa vérité est que le Responsive Web Design n’est qu’un des nombreux concepts appliqués à un site web pour le rendre « utilisable agréablement » sur mobile tout en sachant qu’il ne se limite pas qu’aux mobiles et qu’il vaut tout aussi bien pour :\n\n- une tablette,\n- une phablette (terminal intermédiaire se situant entre le smartphone et la tablette),\n- un ordinateur et tous ses types d’écrans (HD, 3D, tactile),\n- une télévision numérique,\n- un tableau de bord de voiture,\n- une console de jeu portable,\n- …et tout appareil capable d’afficher un site web par l’intermédiaire d’un navigateur web.\n\nEn plus du fait que Responsive Web Design ne signifie donc pas obligatoirement « version mobile », il est le porte étendard d’une liste de concept comme l’« Adaptative Web Design ». Difficile de comprendre ce dont on parle réellement quand il est question de Responsive Web Design.\n\n\n\n\n\n## Les concepts permettant (entre autre) de faire du web mobile ##\n\nFaisons un petit tour des termes et concepts autour de la réalisation mobile d’une interface web.\n\n\n\n### Adaptatif Web Design ###\n\nL’idée derrière ce terme est que la partie fonctionnelle d’un site web est différente en fonction du périphérique qui réclame la page web. Si je demande une page sur un téléphone, il est probable que je ne fournisse pas la vidéo HD que j’aurais fourni si elle avait été demandée sur un ordinateur. Il est également probable que je ne fournisse pas de carte Google Maps sur mobile mais plutôt un lien ouvrant l’application Google Maps sur le téléphone alors que sur ordinateur, une grande carte interactive aurait été proposée.\n\nCe concept repose donc sur un design fonctionnel (et donc visuel) adapté au périphérique de l’utilisateur. Le cas le plus extrême de ce concept pourrait être de ne pas proposer seulement des fonctionnalités adaptées mais un site dédié complet (un site version ordinateur à une adresse, un site version mobile à une autre).\n\n*__Technique__ : Cela demande d’utiliser du JavaScript côté client et également de communiquer des informations clientes au serveur pour qu’il décide quelles sont les fonctionnalités nécessaires au périphérique. Le serveur peut donc décider de renvoyer certaines fonctionnalités. Dans un cas de site mobile dédié, de renvoyer l’utilisateur sur le site mobile en question.*\n\n\n\n### Responsive Web Design ###\n\nNotre fameux Responsive Web Design, expression fourre-tout dont l’idée originale associée au terme est qu'en fonction de la taille et des interactions utilisateurs possibles (souris ou doigts) le design n’est pas présenté de la même manière.\n\nAussi un affichage sur 3 grandes colonnes côte à côte sur grand écran se résumera à 3 éléments l’un en dessous de l’autre sur mobile. Un menu large vertical se permettant de prendre de la place sur grand écran se résumera à un menu vertical masqué par défaut pour garder de la place visible sur mobile, etc… Il est donc tout à fait possible qu’avec le même périphérique, en fonction qu’il affiche la page en mode portrait ou en mode paysage, le rendu soit différent.</p>\n\nLe Responsive Design adapté au web utilise principalement la technique de « Responsive Layout » (ou Fluid Layout) qui est la fusion de deux concepts sous-jacents. Voici donc (Responsive Layout inclus) les 3 principes responsives.\n\n#### Basic Layout ####\n\nChaque partie du design bouge de manière fluide en fonction de la largeur du périphérique qui l’affiche. On obtient donc des titres sur 1 ligne qui peuvent passer sur 3 et tous les éléments ne font que s’étirer et passer les un sous les autres. Il n’y a aucune disposition spéciale ou changement notable de design entre une basse et une haute résolution, seulement un étirement infini : c’est le concept de « fluidité ». Il est dit basique dans le sens ou le rendu « sans CSS » d’une page web possède ces caractéristiques.\n\nCe concept est utilisé majoritairement pour les sites mobiles dédiés (un autre site web uniquement réservé à l’affichage mobile) permettant éventuellement un affichage sur grand mobile et tablette).\n\n*__Technique__ : La feuille CSS est simple et ne fait pas intervenir de Media Queries. Les tailles sont fournies en % et non en pixel et beaucoup de valeur sont en auto. Les éléments ne prennent qu’une ligne et s’empile les un sous les autres.*\n\n#### Adaptative Layout ####\n\nÀ ne pas confondre avec l’Adaptative Web Design, ce concept défini le fait qu’un même site web revêt une apparence différente en fonction de résolution d’écran défini à l’avance. Il peut donc en résulter un affichage pour bureau et un affichage pour mobile (et même un affichage pour tablette) sur la même application (page web). Cependant le design est donc adapté uniquement pour 2 ou 3 résolution faisant office de « gap ».\n\nIl en découle donc qu’un périphérique dont l’affichage se situe entre deux gaps prendra l’apparence du gap le plus petit et laissera des blancs de part et d’autre de la page. Ce blanc peut être masqué en forçant alors le zoom de l’écran pour qu’ils n’apparaissent plus.\n\n*__Technique__ : La feuille CSS utilise des Media Queries. L’approche « if … else if  …  else » est envisageable dans le sens ou entre les gaps il n’y a aucune modification CSS. Il y a donc un pend mobile, un pend tablette et un pend ordinateur par exemple. L’approche en cascade (on commence par le desktop, puis on écrase les propriétés différentes au fur et à mesure qu’on descend) est tout aussi valide et permet à terme d’évoluer vers du (Limited) Responsive Layout.*\n\n#### Responsive Layout ####\n\nCe concept est un mélange des deux précédentes approches. Il y a toujours des gaps visuels définis à des résolutions précises mais ces gaps, tout en présentant une disposition différente, garde une cohérence en terme de placement permettant « entre les gaps » de faire intervenir le concept de fluidité. Ainsi quel que soit la résolution du périphérique, le design est toujours adapté à l’écran en rendant fluide le gap précédent ou suivant.\n\n\n> #### Limited Responsive Layout ####\n\n> C’est le concept le plus répandu et le plus associé au « Responsive Web Design ». Il est identique au concept du dessus cependant :\n> - en-dessous du plus petit gap le site n’est plus Responsive mais scrollable et/ou\n> - au-dessus du plus grand gap le site n’est plus Responsive mais des zones vides s’étendent de part et d’autre de l’écran.\n\n\n\n### Desktop First ###\n\nCe concept ne portait pas de nom avant l’arrivée du concept de « Mobile First » mais il désigne tout simplement un site qui a été créé pour s’afficher sur un ordinateur en premier lieu. Ce n’est qu’ensuite, avec le concept de « Progressive Enhancement » (Amélioration Progressive) que vient se greffer des gaps visuels pour les versions tablette et mobile (avec éventuellement de la fluidité).\n\nCette approche donne lieu en générale à des sites finaux « Limited Responsive Layout » ou le site original est le gap final du rendu visuel. En générale ce type d’approche permet de supporter des vieux navigateurs comme IE7 et IE8 tout en permettant du « Responsive Web Design » sur les autres. Cette approche à le défaut d’alourdir en poids les fichiers au fur et à mesure qu’on habille des périphériques aux écrans plus petits.\n\n*__En bref__ : Desktop First supporte les vieux navigateurs facilement mais impose un travail spécifique pour les tablettes et mobiles.*\n\n\n\n### Mobile First ###\n\nC’est l’approche se rapprochant le plus de l’idée première du « Responsive Web Design » permettant un affichage Responsive du petit écran vers les écrans très grand. Cette approche consiste à d’abord pensé le site et le design sur petit périphérique comme des mobiles (d’où le nom) puis ensuite d’augmenter le design vers des périphériques plus gros.\n\nCette approche, en plus de permettre une responsivité infinie permet également de s’assurer que ce sont les plus petits périphériques qui chargent le moins de ressources. Cette approche impose cependant le concept de « Fallback Mechanism » (Dégradation élégante) pour ajouter le support de IE8 et/ou IE7 n’étant pas supporté de base dans cette approche (ou ayant alors l’apparence mobile).\n\n*__En bref__ : Supporte les tablettes et mobiles facilement mais également les écrans HD, etc..., impose un travail spécifique pour IE8 et/ou IE7.*\n\n<figure>\n<img src=\"http://bradfrostweb.com/wp-content/uploads/2012/03/43-650x487.png\" alt=\"Responsive Web Design\">\n<figcaption>Source : www.bradfrostweb.com</figcaption>\n</figure>\n\n\n\n### Progressive Enhancement ###\n\nL’amélioration progressive est un concept visant à développer une application (dans notre cas un site web) en partant de standard volontairement âgé et encore supporté par les navigateurs les plus récents pour couvrir une compatibilité maximale avec les anciens périphériques, navigateurs, etc... Elle permet notamment un support sans JavaScript ou un support IE7 ou IE8 plus facile à mettre en place mais bride l’accès aux technologies récentes dans le sens ou les mettre en place devient excessivement complexe et couteux puisqu’il faut continuer le support des navigateurs ne permettant pas nativement de tel chose.\n\nS’ajoute comme une nouvelle brique le passage en Responsive Web Design, très chronophage, et demandant bien souvent une refonte profonde du code initiale de manière à l’améliorer. Bien qu’ils conviennent aux sites existant il est parfois bien plus judicieux dans le cas du passage en Responsive d’un site de le refaire avec l’approche qui va suivre.\n\n\n\n### Fallback Mechanism ###\n\nÀ contre-pied de l’amélioration progressive, la dégradation élégante consiste à utiliser des standards à la pointe de la technologie et en phase avec les périphériques de nos temps de manière à offrir une expérience utilisateur la plus agréable possible compte tenu des outils que leur appareil leur offre.\n\nCela permet facilement d’adapter les designs et les fonctionnalités au monde actuel du web. Il va ensuite être question d’ajouter une surcouche pour gérer les anciens périphériques ne disposant pas de quoi utiliser les nouvelles fonctionnalités (comme IE8 ou IE7). Il convient alors de les rendre utilisable sans nécessairement reproduire à l’identique la fonctionnalité ou le visuel. La structure initiale est souvent légère et adaptée pour une approche Responsive et donc pour faire des versions mobiles (même avec une approche Desktop First).\n\n\n\n\n\n## Maintenant que tout le monde se comprend... ##\n\n...Peut-être pourrez-vous plus aisément bien border le périmètre d'action quand vous réalisez un site Responsive Web Design ou plus vulgairement une « Version Mobile ».", "dates" : { "published" : { "$date" : 1378480500000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "style" : "p.eye-catching,\r\n.variation {\r\nmargin-left: 32px;\r\nfont-size: 0.9em;\r\n}", "stylesheet" : "", "title" : "Les <span>concepts</span> autour du <span>Responsive Web Design</span>", "urn" : "les-concepts-autour-du-responsive-web-design" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b4" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48cc" } ], "content" : "On parle souvent de la grande vélocité de Node.js et de son brillant avenir. Mais il n'est pas toujours judicieux de l'utiliser. Pour certains cas d'utilisations, c'est le meilleur choix à faire (application web temps réel). Pour d'autres cas, ça le deviendra mais c'est encore un peu tôt (CMS web). Et pour d'autre il ne sera jamais réellement adapté (intelligence artificielle). Voici [l'adaptation française] d'un article de [Felix Geisendörfer], contributeur Node.js. Il nous explique de manière pragmatique comment raisonnablement et rationnellement il est possible d'utiliser Node.js pour son business.\n\n [l'adaptation française]: http://nodeguide.com/convincing_the_boss.html (Felix's Node.js Convincing the boss guide)\n [Felix Geisendörfer]: http://felixge.de/ (Felix Geisendörfer) \n\n« Maintenant que vous êtes au point sur l'utilisation de Node.js, il est temps de convaincre votre boss. Enfin peut-être. J'ai eu l'occasion de conseiller différente entreprise sur la question : Node.js est la bonne technologie ? Et parfois, la réponse est tout simplement non.\n\nCe guide est ma collection opiniâtre des conseils pour ceux d'entre vous qui veulent savoir si Node.js fait sens pour leur entreprise, et si oui, comment convaincre la direction.\n\n\n\n\n\n## Les mauvais cas d'utilisation ##\n\n### Des applications à forte charge CPU ###\n\nMême si j'adore Node.js, il y a plusieurs cas d'utilisation où ça n'a pas de sens de l'utiliser. Les cas les plus évidents sont ceux des applications avec une importante utilisation du CPU avec peu de communication Entrée/Sortie. Donc, si vous avez l'intention d'écrire un logiciel d'encodage vidéo, d'intelligence artificielle ou un logiciel similaire gourmand en processeur, s'il vous plaît n'utiliser pas Node.js. Alors qu'en Node.js vous allez un peu galérer, vous aurez probablement de meilleurs résultats avec C ou C++.\n\nCela étant dit, Node.js vous permet d'écrire facilement des addons C++, de sorte que vous pourriez l'utiliser comme un moteur de script utilisant lui-même vos algorithmes ultra-secrets.\n\n\n\n\n### Des applications HTML simple (Créer, Lire, Mettre à jour et Effacer) ###\n\nAlors que Node.js devient un outil amusant pour écrire toutes sortes d'applications web, ne vous attendez pas à ce qu'il vous fournisse plus que PHP, Ruby ou Python sur ces points. Oui, votre application sera probablement plus évolutive, mais cependant votre application ne vous permettra pas, magiquement, d'obtenir plus de trafic tout simplement parce que vous l'écrivez en Node.js.\n\nLa vérité est que si nous commençons à regarder du côté de bons frameworks Node.js, il n'y a rien de plus puissant que Rails, CakePHP ou Django sur la scène à l'heure actuelle. Si la plupart de vos applications se contente d'un simple rendu HTML basé sur une base de données précise, s'aider de Node.js ne vous fournira pas beaucoup d'avantages commerciaux tangibles.\n\n\n\n\n### NoSQL + Node.js + Truc qui fait classe mais c'est tout ###\n\nSi l'architecture pour vos prochaines applications contient du NoSQL, arrêtez vous un instant, et lisez ceci :\n\nOui, Redis, CouchDB, MongoDB, Riak, Casandra, etc... ont tous l'air vraiment tentant, mais c'est peut-être la pomme rouge à laquelle Eve n'a pas pu résister. Si vous prenez déjà un risque technologique avec Node.js, vous ne devriez pas les multiplier avec plus de technologie que vous ne comprenez probablement pas encore complètement.\n\nBien sûr, il y a des cas d'utilisation légitimes pour choisir une base de données orientée document. Mais si vous essayez de créer une entreprise basée sur votre logiciel, s'en tenir à la technologie des bonnes vieilles base de données relationnelles (comme postgres ou mysql) pourrait bien être plus pertinent que satisfaire votre esprit de nerd et d'impressionner vos amis.\n\n\n\n\n\n## Les bons cas d'utilisation ##\n\n### Les APIs JSONP ###\n\nConstruire des APIs légère REST / JSON est quelque chose pour laquelle Node.js brille vraiment. Son modèle non-bloquant Entrée/Sortie combiné à JavaScript en font un excellent choix pour emballer d'autres sources de données telles que des bases de données ou des services Web et de les exposer via une interface JSON.\n\n\n\n\n### Applications simple d'une seule page ###\n\nSi vous envisagez d'écrire une application avec une page lourde unique avec AJAX (pensez à Gmail), Node.js répond parfaitement au besoin. La capacité de traiter de nombreuses demandes à la secondes avec un temps de réponse faible, ainsi que le partage des tâches comme la validation d'informations entre le client et le serveur en font un excellent choix pour les applications web modernes qui font beaucoup de traitement sur ​​le client.\n\n\n\n\n### Les lignes de commande des OS ###\n\nAvec Node.js qui est encore jeune, c'est tentant de re-inventer toutes sorte de software pour lui. Cependant, une meilleure approche est de taper dans le vaste univers des lignes de commandes de vos OS. Les capacités de Node permettent de créer des milliers de processus fils et de traiter leurs retours comme un flux permettant de tirer partie des développements existants.\n\n\n\n\n### Flux de données ###\n\nGénéralement les traitements web se limitent aux requêtes et réponses http et aux évènements piochés dans une pile. La vérité est que ces informations font partie d'un flux et les applications Node.js peuvent tirer partie de cela. Le plus gros exemple est celui des uploads en temps réel et également des ponts entre les différentes couches de données.\n\n\n\n\n### Les applications en temps réel ###\n\nUn autre grand aspect de Node.js est la facilité avec laquelle vous pouvez développer des systèmes temps réel souples. Par cela j'entends des trucs comme Twitter, des logiciels de chat, de paris sportifs ou des interfaces avec les réseaux de messageries instantanées.\n\nMais soyez prudent, bien que JavaScript soit un langage dynamique avec garbage collector, votre temps de réponse peut dépendre du temps que mets le garbage collector à faire son ménage (à ce moment votre programme est arrêté). Donc n'essayez pas de créer un system temps réel ultra-précis en Node, cela nécessite des temps de réponses cohérents. Erlang est probablement un meilleurs choix pour ce type d'application.\n\n\n\n\n\n## Convaincre le Boss ##\n\nUne fois que vous avez déterminé que votre cas d'utilisation est parfait pour Node.js, il est temps pour convaincre votre patron ou votre hiérarchie qu'il faut l'utiliser.\n\n\n\n\n### Construction d'un prototype ###\n\nLa meilleure façon de mettre le pied dans la porte, est de suggérer de prendre une semaine pour construire un prototype simple d'une certaine partie de l'application que vous avez à l'esprit. Il est généralement facile d'obtenir le feu vert pour cela, car cela n'implique pas encore un engagement à long terme.\n\n\n\n\n### Trouver des développeurs ###\n\nPensez ce que vous voulez du JavaScript, mais il devient le langage commun à tout les appareils de programmation. Quasiment tous les ordinateurs personnels à un ou plusieurs interpréteurs JavaScript (navigateurs) installés, ce qui signifie qu'il est presque impossible à la plupart des développeurs web de ne pas l'apprendre à un moment donné dans leur carrière.\n\nCela signifie que vous avez un grand pannel de compétences dans vos rangs, et vous avez probablement déjà beaucoup de talent dans votre propre entreprise. Donc, si vous travaillez pour une entreprise en pleine croissance, c'est un solide argument favorisant Node.js.\n\n\n\n\n### Communauté dynamique ###\n\nA ce stade, la communauté Node.js se développe à un rythme fou, attirant certains des développeurs les plus brillants de l'industrie. Cela signifie aussi que l'écosystème de Node augmente chaque jour, et il est également facile d'obtenir un support gratuit et commercial auprès de diverses sources.\n\n\n\n\n### Performance ###\n\nCet argument doit être soigneusement avancé, mais si la performance est un aspect essentiel de votre demande, Node.js a beaucoup à offrir. Avec cinq entreprises (Mozilla, Google, Apple, Microsoft, Opera) en compétition sur la meilleure mise en œuvre JavaScript, l'interprèteur sous-jacente de Node (V8 de Google) est devenu incroyablement rapide, et cela s'améliore de jour en jour.\n\nEn combinant cela avec le modèle non-bloquant de Node en Entrée/Sortie, vous pouvez toujours vous accrocher pour avoir un programme moux. La plupart des applications Node sont facilement capable de gérer des milliers de connexions simultanées, ce qui peut-être considéré comme un standard pour lui.\n\n\n\n\n### Risque pour l'entreprise ###\n\nL'un des risques avec un jeune projet open source est le manque d'engagement à long terme par ses auteurs. Ce n'est pas le cas avec Node.js. Node est actuellement sponsorisé par Joyent, qui a embauché Ryan Dahl et plusieurs autres contributeurs de base, il y a donc une véritable force économique soutenant le développement futur du projet.\n\nEntre autres choses, cela a déjà tenté des sociétés comme Yahoo! et HP (anciennement Palm) qui ont assez de confiance en Node.js pour construire leurs produits de prochaine génération dessus. Votre Boss peut certainement se détendre en lisant leurs témoignages rassurants.\n\n\n\n\n\n## Convaincre un client ##\n\nSi vous êtes une société autonome ou un freelance, convaincre un client d'utiliser Node.js peut-être une autre histoire. Après tout, ils sont généralement très dépendant de votre avis, tout autant que du support continu que vous appportez à leur logiciels.\n\nMon conseil est d'être un peu plus conservateur, et vérifier tout de même si Node est un bon ajustement. Si c'est le cas, assurez-vous que vous avez les ressources et le temps pour soutenir la demande sur le long terme. L'équipe Node.js publie de nouvelles versions à un rythme rapide, et donc vous ne devez jamais attendre plus de 3 à 6 mois pour le mettre à jour vers la dernière version. »", "dates" : { "published" : { "$date" : 1378717860000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Node.js : le <span>guide</span> pour convaincre son Boss", "urn" : "node-js-le-guide-pour-convaincre-son-boss" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b6" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48cc" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "Cet article est une adaptation du **[Google JavaScript Style Guide]** en **français**. Je n'applique pas nécessairement moi-même toutes les bonnes pratiques listées ci-dessous mais si vous ne vous êtes jamais posé la question : « Comment maintenir un code gardant l'équilibre entre lisibilité et performance avec mon équipe ou les personnes susceptibles de relire mon code » cet article peut s'avérer intéressant. Si vous avez déjà vos pratiques : c'est peut-être l'occasion (comme pour moi) d'en revoir certaines.\n\n> **Google JavaScript Style Guide en français**\n- **[Les bonnes pratiques JavaScript selon Google](./les-bonnes-pratiques-javascript-selon-google/)**\n- Convention de nommage et commentaires JavaScript selon Google\n\n[Google JavaScript Style Guide]: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\n\n\n\n\n\n## Google JavaScript Style Guide en français ##\n\nVous pourrez trouver l'article original [Google JavaScript Style Guide] derrière [ce lien][Google JavaScript Style Guide]. Au moment où je réalise cette traduction, le document est en _version 2.93_. À partir de maintenant, tout ce qui suit provient de l'article de Google.\n\n\n\n\n\n## Avant-propos ##\n\nJavaScript est le principal langage de programmation de la partie cliente d'un navigateur web utilisé par beaucoup de projets Google open-source. Ce guide de style représente la liste _des bonnes_ et _des mauvaises_ pratiques lors d'un développement JavaScript.</p>\n\n\n\n\n\n## Règles du langage JavaScript ##\n\n### var ###\n\nDéclarations des variables avec `var` : Toujours - <a class=\"toggle-more\" href=\"javascript:;\">En savoir plus</a>\n\n> **_En savoir plus_** Quand vous ne spécifiez pas `var`, la variable est attachée au contexte global de l'application, entrant en conflit avec des valeurs de variables potentiellement existantes. De la même manière, sans cette déclaration, il est difficile de définir à quelle portée lexicale la variable est rattachée (ex : La variable pourrait tout aussi bien être attachée à `document`, à `window` ou à la fonction courante). Donc n'oubliez jamais de déclarer avec `var`.\n\n\n\n### Constante ###\n\n- Utiliser des `NAMES_LIKE_THIS` comme nom de variable pour les _valeurs_ constantes.\n- Utiliser `@const` (en commentaire) pour indiquer la non ré-affectabilité d'une variable (une variable ou une propriété).\n- Ne jamais utiliser le mot clé `const` car il n'est pas supporté par Internet Explorer.\n\n<a class=\"toggle-more\" href=\"javascript:;\">En savoir plus</a>\n\n> #### Valeurs constantes ####\n\n> **_En savoir plus_** Si la valeur d'une variable doit restée constante et inchangeable tout au long de l'exécution du programme, on peut lui donner un nom tel que `CONSTANT_VALUE_CASE` Les variable nommées en `ALL_CAPS` impliquent donc le commentaire `@const` (car la valeur n'est pas ré-affectable).\n\n> Les [types primitifs](http://blog.haeresis.fr/les-types-en-javascript-pour-tout-savoir/ \"Les types en JavaScript : pour tout savoir !\") (`Number`, `String` et `Boolean`) peuvent être des valeurs constantes.\n\n> La constance d'un type `Object` est plus subjective — Les objets peuvent être considérés comme constant uniquement s'ils ne montrent aucun signe de changement d'état. Cela n'est pas nécésairement triviale à appréhender pour un compilateur.\n\n> #### Pointeurs constants (variables et propriétés) ####\n\n> La notation `@const` (en commentaire) d'une variable ou d'une propriété implique qu'elle ne sera pas ré-affectable. Ceci est géré par un compilateur lors de la compilation. Cette convention est cohérente avec le mot-clé `const` (que nous n'utilisons pas en raison du manque de support dans Internet Explorer).\n\n> La notation `@const` sur une méthode implique que cette fonction ne sera pas surchargeable sur des sous classes lors d'un héritage.\n\n> La notation `@const` sur un constructeur implique que cette classe ne pourra pas être héritée (comme le `final` de Java).\n\n> #### Exemples ####\n\n> À noter que `@const` n'implique pas nécéssairement une écriture de variable comme celle-ci : `CONSTANT_VALUES_CASE<`. Cependant, écrire une variable comme cela `CONSTANT_VALUES_CASE` implique `@const`.\n\n> > **`Bon`** Code\n\n> > ```js\n/**\n * Temps maximal pour la Demande en millisecondes.\n * @type {number}\n */\ngoog.example.TIMEOUT_IN_MILLISECONDS = 60 * 1000;\n```\n\n> Le nombre de secondes dans une minute ne change jamais. C'est une valeur constante. L'écriture `ALL_CAPS` requière le commentaire `@const`, et donc la constante ne peut pas être ré-affectée.\n\n> Centains compilateurs open-source permettront à une variable d'être ré-affectée si elle **n'est pas** marquée comme `@const`.</p>\n\n> > **`Bon`** Code\n\n> > ```js\n/**\n * URL associée à la Carte en tant que chaine de caractères.\n * @const\n */\nMyClass.fetchedUrlCache_ = new goog.structs.Map();\n```\n\n> > ```js\n/**\n * La Classe ne peut pas être héritée.\n * @const\n * @constructor\n */\nsloth.MyFinalClass = function() {};\n```\n\n> Dans ce cas, le pointeur ne sera jamais ré-affectée, cependant il peut changer d'un appel à l'autre (C'est pourquoi il est écrit en `camelCase`, et non en `ALL_CAPS`).\n\n\n\n### Point-virgule ###\n\nToujours utiliser les point-virgules - <a class=\"toggle-more\" href=\"javascript:;\">En savoir plus</a>\n\n> **_En savoir plus_** Une utilisation implicite des point-virgules (ne pas les mettre) pose problème, des problèmes difficiles à debboguer. Ne le faites pas. Ça vaudra mieux pour vous.\n\n> Il y a quelques endroits ou l'oubli de point-virgule est particulièrement dangereux :\n\n> > *`Mauvais`* Code\n\n> > ```js  \nMyClass.prototype.myMethod = function() {\n    return 42;\n}  // Pas de point-virgule ici.\n> > \n(function() {\n    // Du code à exécuter ici et isolé dans un champ lexical localisé.\n})();\n```\n\n\n> **Quel est le problème ?**\n\n> Erreur JavaScript - Tout d'abord la première fonction retourne 42 puis est appelé en tant que paramètre par la seconde fonction, quand 42 est appelé cela cause une erreur.", "dates" : { "published" : { "$date" : 1385765580000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "var $toggleMore = $(\".toggle-more\");\n\n$toggleMore.addClass(\"visible\");\n\n$toggleMore.each(function () {\n    $(this).parents(\"p\").next(\"blockquote\").hide();\n}).click(function () {\n\t$(this).parents(\"p\").next(\"blockquote\").toggle('fast');\n});", "style" : ".toggle-content {\r\n\tdisplay: none;\r\n}", "stylesheet" : ".toggle-more {\n    display: none;\n}\n.toggle-more.visible {\n    display: inline;\n}", "title" : "Les <span>bonnes pratiques</span> <span>JavaScript</span> selon <span>Google</span>", "urn" : "les-bonnes-pratiques-javascript-selon-google" }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b7" }, "title" : "<span>Conventions</span> et <span>commentaires</span> <span>JavaScript</span> selon <span>Google</span>", "urn" : "conventions-et-commentaires-javascript-selon-google", "dates" : { "published" : "2013-11-30 11:53:00", "updated" : [ "2013-11-30 11:53:00" ] }, "content" : "<p>Cet article est une adaptation du Google JavaScript Style Guide en FR. La partie ci dessous est spécifique à la manière de travailler de Google et ne constitue pas en soit une manière de procéder absolue, cependant cela peut vous servir de base de travail en groupe. Plusieurs conseils sont d'ailleurs très bon à suivre comme le fait d'attacher explicitement ses contextes d'exécution à une variable faisant office de « namespace » et d'autres discutable comme le nombre d'espace nécéssaire à l'indentation. J'espère que tout ceci pourra vous aiguiller du mieux possible.</p>\r\n\r\n<div class=\"correct-practice\">\r\n\t<div class=\"title highlighting\">Google JavaScript Style Guide en français</div>\r\n\t<nav class=\"content\">\r\n\t\t<ol>\r\n\t\t\t<li><a class=\"highlighting\" href=\"./les-bonnes-pratiques-javascript-selon-google/\" title=\"Les bonnes pratiques JavaScript selon Google\">Les bonnes pratiques JavaScript selon Google</a></li>\r\n\t\t\t<li><a class=\"highlighting\" href=\"./conventions-et-commentaires-javascript-selon-google/\" title=\"Conventions et commentaires JavaScript selon Google\">Conventions et commentaires JavaScript selon Google</a></li>\r\n\t\t</ol>\r\n\t</nav>\r\n</div>\r\n\r\n<h2>Google JavaScript Style Guide en français</h2>\r\n\r\n<p>Vous pourrez trouver l'article original <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" title=\"Google JavaScript Style Guide\">Google JavaScript Style Guide</a> derrière <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\" title=\"Google JavaScript Style Guide\">ce lien</a>. Au moment où je réalise cette traduction, le document est en <span class=\"eye-catching\">version 2.93</span>.</p>\r\n\r\n<h2>Avant-propos</h2>\r\n\r\n<p>JavaScript est le principal langage de programmation de la partie cliente d'un navigateur web utilisé par beaucoup de projets Google open-source. Ce guide de style représente la liste des bonnes et des mauvaises pratiques lors d'un développement JavaScript.</p>\r\n\r\n<h2>Règles du langage JavaScript</h2>\r\n\r\n<p>Lire mon précédent article : <a class=\"highlighting\" href=\"./les-bonnes-pratiques-javascript-selon-google/\" title=\"Les bonnes pratiques JavaScript selon Google\">Les bonnes pratiques JavaScript selon Google</a>.</p>\r\n\r\n<h2>Conventions pour le JavaScript</h2>\r\n\r\n<h3>Nommage</h3>\r\n\r\n<p>\r\n\tEn générale, nommé \r\n\tles fonctions <samp>functionNamesLikeThis</samp>, \r\n\tles variables <samp>variableNamesLikeThis</samp>,\r\n\tles classes (constructeur) <samp>ClassNamesLikeThis</samp>,\r\n\tles énumérations <samp>EnumNamesLikeThis</samp>,\r\n\tles méthodes <samp>methodNamesLikeThis</samp>,\r\n\tles constantes <samp>CONSTANT_VALUES_LIKE_THIS</samp>,\r\n\tles propriétés <samp>foo.namespaceNamesLikeThis.bar</samp> et\r\n\tles noms de fichier <samp>filenameslikethis.js</samp>.\r\n\t- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\r\n\t<h4>Propriétés et méthodes</h4>\r\n\r\n\t<ul>\r\n\t\t<li>Les propriétés et méthodes privées (Private) doivent commencé par un underscore.</li>\r\n\t\t<li>Les propriétés et méthodes protégées (Protected) doivent être nommée sans commencé par un underscore (comme les publiques).</li>\r\n\t</ul>\r\n\r\n\t<p>\r\n\t\tPour plus d'informations sur <samp>private</samp> et <samp>protected</samp>, rendez-vous à la section ««««««««««««««visibilité»»»»»»»»»»»».\r\n\t</p>\r\n\r\n\t<h4>Paramètres de fonctions et de méthodes</h4>\r\n\r\n\t<p>\r\n\t\tLes arguments de fonction optionnelle doivent commencé par <samp>opt_</samp>.\r\n\t</p>\r\n\r\n\t<p>\r\n\t\tLes fonctions pouvant prendre un nombre variable d'arguments en entrée doivent avoir un dernier argument nommé <samp>var_args</samp>. Vous ne devez, dans votre code, non plus faire référence à <samp>var_args</samp> ; utilisez un tableau d'arguments.\r\n\t</p>\r\n\r\n\t<p>\r\n\t\tLes arguments optionnelles peuvent également prendre l'annotation <samp>@param</samp> en commentaire. Comme les deux conventions sont accepté par les compilateurs, utiliser les deux est préférable.\r\n\t</p>\r\n\r\n\t<h4>Accesseurs Get et Set</h4>\r\n\r\n\t<p>\r\n\t\tNous vous décourageons d'utiliser les accesseurs EcmaScript 5 pour rendre accessible les propriétés. Cependant, s'ils douvent être utilisés, les getteurs ne montre aucan signe d'utilité.\r\n\t</p>\r\n\r\n\t<div class=\"worst-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**\r\n * MAUVAIS -- Ne faites PAS ça.\r\n */\r\nvar foo = { get next() { return this.nextId++; } };</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<h4>Des fonctions comme accesseurs</h4>\r\n\r\n\t<p>\r\n\t\tLes méthodes de Get ou de Set pour les propriétés ne sont pas requis. Cependant s'ils doivent être utilisés, les Getters doivent être nommés <samp>getFoo()</samp> et les Setters doivent être nommés <samp>setFoo(value)</samp> (Pour les booléen, <samp>isFoo()</samp> est également possible, et souvent cela sonne mieux).\r\n\t</p>\r\n\r\n\t<h4>Les espaces de nom (Namespaces)</h4>\r\n\r\n\t<p>\r\n\t\tJavaScript n'a pas de base de système de package et d'espace de nom.\r\n\t</p>\r\n\r\n\t<p>\r\n\t\tLes conflits de nom de Variables Globales sont difficile à débogguer, et cause des problèmes insolubles quand deux projets essaient d'être intégrés ensemble. Dans l'optique de rendre du code JavaScript commun partageable, nous avons adopté une convention pour prévenir les conflits. \r\n\t</p>\r\n\r\n\t<p><span class=\"highlighting\">Utilisation de namespaces pour le code global</span></p>\r\n\r\n\t<p>\r\n\t\tTOUJOURS préfixer une variable dans le champ lexical global avec un espace de nom relatif au projet ou à la librairie. Si vous travaillez sur « Project Sloth », un nom possible serait le namespace <samp>sloth.*</samp>\r\n\t</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var sloth = {};\r\n\r\nsloth.sleep = function() {\r\n  ...\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>\r\n\t\tBeaucoup de librairie JavaScript, tout comme <a href=\"http://code.google.com/closure/library/\" title=\"the Closure Library\">the Closure Library</a> et <a href=\"http://www.dojotoolkit.org/\" title=\"Dojo toolkit\">Dojo toolkit</a> vous fournissent des fonctions de hauts niveaux pour déclarer vos espaces de nom.\r\n\t</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">goog.provide('sloth');\r\n\r\nsloth.sleep = function() {\r\n  ...\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p><span class=\"highlighting\">Respecter la paternité d'espace de nom</span></p>\r\n\r\n\t<p>Quand vous choisissez de créer un espace de nom enfant, assurez-vous que les propriétaire de l'espace de nom parent en sont informés. Si vous démarrez un projet qui créé des « hats » pour les « sloths », soyez sure que l'équipe en charge de <samp>sloth</samp> sait que vous utilisez <samp>sloth.hats</samp>.</p>\r\n\r\n\t<p><span class=\"highlighting\">Utiliser des espaces de nom différent pour le code externe et le code interne</span></p>\r\n\r\n\t<p>« Un code externe » est un code qui vient de l'extérieur de la base de code, et il est compilé indépendemment. Les espaces de nom externe et interne doivent être strictement séparé. Si vous utilisez une librairie externe vous donnant accès à <samp>foo.hats.*</samp>, votre code interne ne doit pas être défini dans <samp>foo.hats.*</samp>, car cela pourrait poser problème à d'autre équipe voulant ajouter des espaces de nom au votre (qui ne vous appartient pas).</p>\r\n\r\n\t<div class=\"worst-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">foo.require('foo.hats');\r\n\r\n/**\r\n * MAUVAIS -- Ne faites PAS ça.\r\n * @constructor\r\n * @extends {foo.hats.RoundHat}\r\n */\r\nfoo.hats.BowlerHat = function() {\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>\r\n\t\tSi vous avez besoin de définir de nouvelles APIs dans un espace de nom externe, vous allez devoir exporter explicitement ces fonctions. Votre code appelera des APIs internes par leurs espaces de nom internes, ceci pour la robustesse et une optimisation du code par le compileur.\r\n\t</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">foo.provide('googleyhats.BowlerHat');\r\n\r\nfoo.require('foo.hats');\r\n\r\n/**\r\n * @constructor\r\n * @extends {foo.hats.RoundHat}\r\n */\r\ngoogleyhats.BowlerHat = function() {\r\n  ...\r\n};\r\n\r\ngoog.exportSymbol('foo.hats.BowlerHat', googleyhats.BowlerHat);</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p><span class=\"highlighting\">Créer des alias pour les longs espace de nom facilite la lecture</span></p>\r\n\r\n\t<p>Utilisez des alias locals sur les variables pour augmenter la lisibilité de votre code. Le nom pourra concorder avec le dernier nom de variable de la chaine d'espace de nom.</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/**\r\n * @constructor\r\n */\r\nsome.long.namespace.MyClass = function() {\r\n};\r\n\r\n/**\r\n * @param {some.long.namespace.MyClass} a\r\n */\r\nsome.long.namespace.MyClass.staticHelper = function(a) {\r\n  ...\r\n};\r\n\r\nmyapp.main = function() {\r\n  var MyClass = some.long.namespace.MyClass;\r\n  var staticHelper = some.long.namespace.MyClass.staticHelper;\r\n  staticHelper(new MyClass());\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Ne créer pas d'alias sur les espaces de nom. Les alias d'espace de nom doivent uniquement être créé en utilisant «««««««««««««««««««««««««goog.scope »»»»»»»»»»»»»»»»»»»»»»»»».</p>\r\n\r\n\t<div class=\"worst-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">myapp.main = function() {\r\n  var namespace = some.long.namespace;\r\n  namespace.MyClass.staticHelper(new namespace.MyClass());\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>\r\n\t\tIl est donc interdit d'accéder à une propriété d'un alias, sauf si c'est un enumérateur.\r\n\t</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">/** @enum {string} */\r\nsome.long.namespace.Fruit = {\r\n  APPLE: 'a',\r\n  BANANA: 'b'\r\n};\r\n\r\nmyapp.main = function() {\r\n  var Fruit = some.long.namespace.Fruit;\r\n  switch (fruit) {\r\n    case Fruit.APPLE:\r\n      ...\r\n    case Fruit.BANANA:\r\n      ...\r\n  }\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"worst-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">myapp.main = function() {\r\n  var MyClass = some.long.namespace.MyClass;\r\n  MyClass.staticHelper(null);\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Ne jamais créer d'alias dans le champ lexical global. Utilisez-les uniquement dans des contextes d'exécution interne.</p>\r\n\r\n\t<h4>Nom de fichier</h4>\r\n\r\n\t<p>Les noms de fichier doivent être écris uniquement avec des minuscules en vu d'enrayer la confusion sur les plateformes sensibles à la casse. Les nom de fichier doivent finir par <samp>.js</samp>, et ne doivent contenir aucune ponctuation excepté pour - ou _ (préferrez - à _).</p>\r\n</div>\r\n\r\n<h3>Méthodes toString() personnalisées</h3>\r\n\r\n<p>\r\nDoit toujours marcher sans effets de bord.\r\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\t<p>\r\n\t\tVous pouvez contrôler la manière dont un objet ce retourne sous forme de chaine de caractère en définissant une méthode <samp>toString()</samp> personnalisée. Cela est bien, mais vous devez vous assurer que votre méthode (1) fontionne dans tous les cas et (2) qu'elle n'a pas d'effets de bord. Si votre méthode ne possède pas ces critères, vous irez droit à la catastrophe. Par exemple, si <samp>toString()</samp> appelle une méthode qui doit faire une assertion, l'assertion peut se solder par le retour du nom de l'objet qui l'a fait rater, ce qui bien sur requier d'appeler <samp>toString()</samp>.\r\n\t</p>\r\n</div>\r\n\r\n<h3>Initialisation différée</h3>\r\n\r\n<p>\r\nOK.\r\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\t<p>\r\n\t\tIl n'est pas toujours possible d'initialiser une variable au moment ou elle est déclarée, en ce sens l'initialisation différée est une bonne chose.\r\n\t</p>\r\n</div>\r\n\r\n<h3>Champ lexical explicite (contexte d'execution / scope)</h3>\r\n\r\n<p>\r\nToujours.\r\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\t<p>\r\n\t\tUtilisez toujours un champ lexical explicite - cela améliore la portabilité et la clarté. Par exemple, n'attaché pas implicitement un ensemble de variable à l'objet <samp>window</samp>. Il est possible ainsi d'utiliser votre code dans un autre programme ou l'objet <samp>window</samp> n'existerrait pas.\r\n\t</p>\r\n</div>\r\n\r\n<h3>Formattage de code</h3>\r\n\r\n<p>\r\nDéplier pour plus d'informations.\r\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\t<p>\r\n\t\tNous suivons (chez Google) <a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Formatting\" title=\"Règle de formatage C++\">les règles de formatage C++</a> dans l'idée, avec des clarifications additionnelles.\r\n\t</p>\r\n\r\n\t<h4>Accolades</h4>\r\n\r\n\t<p>À cause des insertions de points virgules, toujours ouvrir ceux-ci sur la même ligne que ce qui demande l'ouverture d'une accolade. Par example :</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">if (something) {\r\n\t// ...\r\n} else {\r\n\t// ...\r\n}</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<h4>Initialisation d'objet et de tableau</h4>\r\n\r\n\t<p>L'initialisation ce fait sur une seule ligne autant que possible.</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var arr = [1, 2, 3]; // Pas d'espace aprés [ ni avant ].\r\nvar obj = {a: 1, b: 2, c: 3}; // Pas d'espace aprés { ni avant }.</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Les tableaux et objets initialisés sur plusieurs lignes sont indentés de deux espaces, avec l'accolade ouvrante sur la même ligne :</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Initialisation d'objet.\r\nvar inset = {\r\n  top: 10,\r\n  right: 20,\r\n  bottom: 15,\r\n  left: 12\r\n};\r\n\r\n// Initialisation de tableau.\r\nthis.rows_ = [\r\n  '\"Slartibartfast\" &lt;fjordmaster@magrathea.com&gt;',\r\n  '\"Zaphod Beeblebrox\" &lt;theprez@universe.gov&gt;',\r\n  '\"Ford Prefect\" &lt;ford@theguide.com&gt;',\r\n  '\"Arthur Dent\" &lt;has.no.tea@gmail.com&gt;',\r\n  '\"Marvin the Paranoid Android\" &lt;marv@googlemail.com&gt;',\r\n  'the.mice@magrathea.com'\r\n];\r\n\r\n// Utilisé en paramètre de méthode.\r\ngoog.dom.createDom(goog.dom.TagName.DIV, {\r\n  id: 'foo',\r\n  className: 'some-css-class',\r\n  style: 'display:none'\r\n}, 'Hello, world!');</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Les longs attributs ou valeurs presentent des problèmes dans une liste d'initialisation, aussi préférrez toujours une initialisation non alignée. Par exemple :</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">CORRECT_Object.prototype = {\r\n  a: 0,\r\n  b: 1,\r\n  lengthyName: 2\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Mais pas comme ça :</p>\r\n\r\n\t<div class=\"worst-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">WRONG_Object.prototype = {\r\n  a          : 0,\r\n  b          : 1,\r\n  lengthyName: 2\r\n};</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<h4>Paramètres de fonctions</h4>\r\n\r\n\t<p>Quand cela est possible, touts les paramètres de fonctions doivent être écrits sur la même ligne. S'il dépasse 80 caractères, les paramètres doivent être renvoyé à la ligne de manière lisible. Pour gagner de la place, vous pouvez les aligner par groupe de 80 caractères ou le cas échéant em mettre un par ligne pour augmenter la lisibilité. L'indentation doit être faites de 4 espaces, ou être alignée avec la paranthèse ouvrante. Ci-dessous vous trouverrez les exemples les plus commun de mise en groupe et retour à la ligne des arguments :</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">// Quatre espace, par groupe de 80. Marche avec les longs nom de fonctions.\r\n// Par groupe de 80, prend peu de place.\r\ngoog.foo.bar.doThingThatIsVeryDifficultToExplain = function(\r\n    veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,\r\n    tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {\r\n  // ...\r\n};\r\n\r\n// Quatre espace, un paramètre par ligne. Marche avec les longs nom de fonctions,\r\n// Gardez le nom, et mettez en avant chaque paramètres.\r\ngoog.foo.bar.doThingThatIsVeryDifficultToExplain = function(\r\n    veryDescriptiveArgumentNumberOne,\r\n    veryDescriptiveArgumentTwo,\r\n    tableModelEventHandlerProxy,\r\n    artichokeDescriptorAdapterIterator) {\r\n  // ...\r\n};\r\n\r\n// Indentation alignée à la paranthèse, par groupe de 80.\r\n// Prend peu de place.\r\nfunction foo(veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,\r\n             tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {\r\n  // ...\r\n}\r\n\r\n// Indentation alignée à la paranthèse, un paramètre par ligne.\r\n// Gardez le nom, et mettez en avant chaque paramètres.\r\nfunction bar(veryDescriptiveArgumentNumberOne,\r\n             veryDescriptiveArgumentTwo,\r\n             tableModelEventHandlerProxy,\r\n             artichokeDescriptorAdapterIterator) {\r\n  // ...\r\n}</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Quand une fonction appelée est elle même indenté vis à vis de son parent, vous êtes libre d'indenter les paramètres par rapport à l'indentation du parent. Ceux qui suit est un exemple d'indentation acceptable.</p>\r\n\t\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">if (veryLongFunctionNameA(\r\n        veryLongArgumentName) ||\r\n    veryLongFunctionNameB(\r\n        veryLongArgumentName)) {\r\n  veryLongFunctionNameC(veryLongFunctionNameD(\r\n      veryLongFunctioNameE(\r\n          veryLongFunctionNameF)));\r\n}</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<h4>Passage de fonction anonymes</h4>\r\n\r\n\t<p>Quand vous déclarez une fonction anonyme dans une liste de paramètre d'appel d'une fonction, le corps de la fonction doit être indenté de deux espaces vis à vis de la ligne d'ouverture de la fonction, ou de deux espace par rapport au mot-clé <samp>function</samp>. Ceci dans le but de rendre le corps de la fonction anonyme plus facile à lire (c'est-à-dire pas écrasé à droite de votre éditeur).</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">prefix.something.reallyLongFunctionName('whatever', function(a1, a2) {\r\n  if (a1.equals(a2)) {\r\n    someOtherLongFunctionName(a1);\r\n  } else {\r\n    andNowForSomethingCompletelyDifferent(a2.parrot);\r\n  }\r\n});\r\n\r\nvar names = prefix.something.myExcellentMapFunction(\r\n    verboselyNamedCollectionOfItems,\r\n    function(item) {\r\n      return item.name;\r\n    });</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n \t<h4>Créer des alias avec goog.scope</h4>\r\n\r\n \t<p><samp><a href=\"https://docs.google.com/document/pub?id=1ETFAuh2kaXMVL-vafUYhaWlhl6b5D9TOvboVg7Zl68Y\" title=\"Créer des alias avec goog.scope\">goog.scope</a></samp> peut être utilisé pour racourcir les références à un espace de nom (namespace) dans les programmes en utilisant la librairie <a href=\"http://code.google.com/closure/library/\" title=\"the Closure Library\">the Closure Library</a>.</p>\r\n\r\n\t<p>Seulement un <samp>goog.scope</samp> peut être invoqué par fichier. Toujours placé dans le contexte d'exécution global.</p>\r\n\r\n\t<p>L'ouverture <samp>goog.scope (function () {</samp> doit être exactement précédée par un saut de ligne et être à la suite de l'utilisation des <samp>goog.provide</samp>, des <samp>goog.require</samp>, ou des commentaires de haut de fichiers. La fermeture doit se faire à la dernière ligne du fichier. Ajoutez <samp>// goog.scope</samp> à la suite de la ferneture. Séparrez le commentaire du point-virgule de deux espaces.</p>\r\n\r\n\t<p>De la même manière qu'avec les espaces de nom en C++, n'indentez pas après l'utilisation de <samp>goog.scope</samp>. À la place, continuez au caractère 0 de la ligne.</p>\r\n\r\n\t<p>Les alias de nom ne pourront pas être ré-assignés à d'autres objets (ex : la plupard des constructeurs, les enumérateurs ou même les espaces de nom). Ne faites pas ça (voir plus loin comment réassigné un alias à un constructeur) :</p>\r\n\r\n\t<div class=\"worst-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">goog.scope(function() {\r\nvar Button = goog.ui.Button;\r\n\r\nButton = function() { ... };\r\n...</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Les noms doivent être les mêmes que la dernière propriété du contexte global qui en faisait un alias.</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">goog.provide('my.module.SomeType');\r\n\r\ngoog.require('goog.dom');\r\ngoog.require('goog.ui.Button');\r\n\r\ngoog.scope(function() {\r\nvar Button = goog.ui.Button;\r\nvar dom = goog.dom;\r\n\r\n// Faire un nouvel alias juste après la déclaration d'un constructeur.\r\nmy.module.SomeType = function() { ... };\r\nvar SomeType = my.module.SomeType;\r\n\r\n// Déclarer une méthode sur le prototype comme à l'accoutumé.\r\nSomeType.prototype.findButton = function() {\r\n  // Button as été défini comme alias plus haut.\r\n  this.button = new Button(dom.getElement('my-button'));\r\n};\r\n...\r\n});  // goog.scope</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n \t<h4>Indentation des retours à la ligne</h4>\r\n\r\n \t<p>À l'exception de l'?????????????écriture litéral des tableaux ou objets????????????</a>, ainsi que les fonctions anonymes, tous les retours à la ligne doivent être indenté alignée à côté de l'expression du dessus, de quatre espaces (pas de deux) de manière plus marquée que l'expression parente (Ici « à côté de l'expression du dessus » et « expression parente » font référence aux parenthèses du niveau courant).</p>\r\n\r\n\t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">someWonderfulHtml = '' +\r\n                    getEvenMoreHtml(someReallyInterestingValues, moreValues,\r\n                                    evenMoreParams, 'a duck', true, 72,\r\n                                    slightlyMoreMonkeys(0xfff)) +\r\n                    '';\r\n\r\nthisIsAVeryLongVariableName =\r\n    hereIsAnEvenLongerOtherFunctionNameThatWillNotFitOnPrevLine();\r\n\r\nthisIsAVeryLongVariableName = siblingOne + siblingTwo + siblingThree +\r\n    siblingFour + siblingFive + siblingSix + siblingSeven +\r\n    moreSiblingExpressions + allAtTheSameIndentationLevel;\r\n\r\nthisIsAVeryLongVariableName = operandOne + operandTwo + operandThree +\r\n    operandFour + operandFive * (\r\n        aNestedChildExpression + shouldBeIndentedMore);\r\n\r\nsomeValue = this.foo(\r\n    shortArg,\r\n    'Some really long string arg - this is a pretty common case, actually.',\r\n    shorty2,\r\n    this.bar());\r\n\r\nif (searchableCollection(allYourStuff).contains(theStuffYouWant) &&\r\n    !ambientNotification.isActive() && (client.isAmbientSupported() ||\r\n                                        client.alwaysTryAmbientAnyways())) {\r\n  ambientNotification.activate();\r\n}</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n \t<h4>Saut de ligne</h4>\r\n\r\n \t<p>Utilisez les sauts de ligne pour grouper de façon logique les portions de code. Par example :</p>\r\n\r\n \t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">doSomethingTo(x);\r\ndoSomethingElseTo(x);\r\nandThen(x);\r\n\r\nnowDoSomethingWith(y);\r\n\r\nandNowWith(z);</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n \t<h4>Opérateurs binaires et ternaires</h4>\r\n\r\n \t<p>Toujours mettre l'opérateur sur la ligne précédente. Sinon, les sauts de ligne et l'indentation suivent les mêmes règles que dans d'autres guides de style Google. Ce placement de l'opérateur a été initialement convenu rapport à l'insertion de point-virgule automatique. En fait, l'insertion de point-virgule ne peut pas se produire avant un opérateur binaire, tout nouveau code devrait s'en tenir à ce style pour être parfait.</p>\r\n\r\n  \t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = a ? b : c;  // Tout sur la même ligne est correcte.\r\n\r\n// Indentation +4 est OK.\r\nvar y = a ?\r\n    longButSimpleOperandB : longButSimpleOperandC;\r\n\r\n// indenté avec le premier opérateur est également OK.\r\nvar z = a ?\r\n        moreComplicatedB :\r\n        moreComplicatedC;</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<p>Ceci inclut également l'opérateur « point ».</p>\r\n\r\n  \t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var x = foo.bar().\r\n    doSomething().\r\n    doSomethingElse();</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<h3>Parenthèses</h3>\r\n\r\n<p>\r\nSeulement si elles sont nécéssaire.\r\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\t<p>À utiliser avec parciemonie et uniquement quand la sémantique ou la syntaxe les réclames.</p>\r\n\t<p>Ne jamais utiliser de parenthèse pour les opérateurs unaires comme <samp>delete</samp>, <samp>typeof</samp> et <samp>void</samp> ou tout autre mot-clé comme <samp>return</samp>, <samp>throw</samp> ou tout autres (<samp>case</samp>, <samp>in</samp> ou <samp>new</samp>).</p>\r\n</div>\r\n\r\n<h3>Chaînes de caractères</h3>\r\n\r\n<p>\r\nPréférrez ' plutôt que \".\r\n- <span class=\"eye-catching a-like toggle-more\">En savoir plus</span>\r\n</p>\r\n\r\n<div class=\"toggle-content\">\r\n\t<p>Pour une meilleurs lisibilités l'apostrophe (') est préférée aux guillemets (\"). Cela est d'autant plus pratique quand on créer une chaine avec du HTML :</p>\r\n\r\n  \t<div class=\"best-practice\">\r\n\t\t<div class=\"content\">\r\n\r\n<pre class=\"prettyprint linenums\"><code class=\"language-js\">var msg = 'This is some HTML';</code></pre>\r\n\r\n\t\t</div>\r\n\t</div>\r\n</div>", "style" : ".toggle-content {\r\n\tdisplay: none;\r\n}", "script" : "$(\".toggle-more\").click(function () {\r\n\t$(this).parents(\"p\").next(\"div\").toggle('fast');\r\n});", "cache" : { "comment" : { "number" : 0 } } }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b8" }, "title" : "Gérer un affichage desktop sur mobile avec du Responsive", "urn" : "gerer-un-affichage-desktop-sur-mobile-avec-du-responsive", "dates" : { "published" : "2013-11-08 17:00:00", "updated" : [ "2013-11-08 17:00:00" ] }, "content" : "<p>Quelque chose de bien pratique disparait tous les jours depuis l'arrivée du Responsive Web Design. C'est la fonctionalité d'un affichage Desktop non responsive sur mobile ou tablette. Mais Si ! Celle que l'on trouve en pied de page de site et qui dit « Afficher ce site dans sa version pour Ordinateur ». Comme certain le savent, le fait de gérer un affichage mobile et desktop sur le même site à rendu caduc la nécésité d'un site dédiée mobile dans beaucoup de cas et de ce fait, le lien vers la version desktop qui se trouvait en bas de la version mobile n'existe plus.</p>\r\n\r\n<p>Cela est bien dommage étant donné que de plus en plus de tablette (et même mobile) sont parfaitement capable d'afficher un site Desktop dans de bonne condition. De plus, même si dans certain cas l'ergonomie est bancale, on va pouvoir tout de même consulter cette fichue image que l'on souhaitait montrer à un ami sur mobile et qui malheureusement est <samp>display: none;</samp> « Ha merde, faudra que tu regardes sur un PC ».</p>\r\n\r\n<p>Je vous propose avec le même site de permettre à tout périphérique d'afficher le site dans sa version Desktop avec le même code source bien entendu. C'est partie !</p>\r\n\r\n<h2>Sans plus attendre voici ce que cela permettrait</h2>\r\n\r\n<a href=\"javascript:;\" class=\"super-test\">Test</a>", "cache" : { "comment" : { "number" : 0 } } }
{ "_id" : { "$oid" : "530f5f63620731fe86cb71b9" }, "title" : "<span>Composant</span> <span>JavaScript</span> <span>responsive</span> sans !<span>important</span> en <span>CSS</span>", "urn" : "composant-javascript-responsive-sans-important-en-css", "dates" : { "published" : "2013-10-24 21:25:00", "updated" : [ "2013-10-24 21:25:00" ] }, "content" : "<p>Je remplirai cette partie à la fin de l'article.</p>\r\n\r\n\r\n\r\n", "cache" : { "comment" : { "number" : 0 } } }
{ "__v" : 0, "_id" : { "$oid" : "537236809c8e1b22535cb6b6" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "J'ai évoqué [pourquoi je n'utilisais pas Bootstrap](http://blog.lesieur.name/bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite/). Cependant, l'un des pré-requis pour un nouveau projet est de l'utilisé aussi j'ai retroussé mes manches pour approfondir la philosophie et j'ai déjà commencé à me casser les dents !\n\nAligner un texte à gauche sur _version mobile_ puis à droite sur  _version desktop_ est chose aisé en CSS avec les [Media Queries](http://www.alsacreations.com/article/lire/930-css3-media-queries.html). [Gérer le fait que deux colonnes côte à côte sur _version desktop_ passe l'une sous l'autre sur _version mobile_ l'est également avec Bootstrap](http://getbootstrap.com/css/). Pourtant aligner un texte à gauche sur _version mobile_ puis à droite sur _version desktop_ aussi facilement que la gestion des colonnes n'est pas possible...\n\nJe vais vous présenter un petit pan de code remédiant à cela.\n\n\n\n\n\n## Comment gérer des alignements différents en fonction de la taille ? ##\n\n### Philosophie des grilles ###\n\nLa philosophie utilisé pour gérer différemment les colonnes d'une grille avec Bootstrap en fonction de la taille du périphérique est de jouer avec les 4 préfixes suivant :\n\n- **xs** : défini un comportement à partir de la taille minimal d'un mobile jusqu'à l'infini en grande taille.\n- **sm** : défini un comportement à partir d'une taille type tablette jusqu'à l'infini en grande taille.\n- **md** : défini un comportement à partir d'une taille type desktop jusqu'à l'infini en grande taille.\n- **lg** : défini un comportement à partir d'une taille type grand desktop jusqu'à l'infini en grande taille.\n\nAinsi dans l'exemple ci-dessous notre élément va prendre 12 colonne sur _version mobile_ puis 8 sur _version tablette_ puis 6 sur _version desktop_ et enfin 4 sur _version grand desktop_ sur une base de 12 colonnes.\n\n```html\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-lg-4\">Contenu</div>\n    </div>\n</div>\n```\n\n\n\n\n### Étendre la philosophie aux alignements de texte ###\n\nAlors quel ne fut pas ma déception quand j'ai essayé de faire ceci en espérant aligner une image à gauche sur mobile et à droite sur plus grand écran :\n\n```html\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"text-left-xs text-right-md\">Contenu</div>\n    </div>\n</div>\n```\n\n**Le code ci-dessus ne marche pas**. Afin de le rendre fonctionnel, il va falloir ajouter à votre Bootstrap ceci :\n\n```css\n/* Comportement par défaut */,\n.text-left-sm,\n.text-left-md,\n.text-left-lg,\n.text-center-sm,\n.text-center-md,\n.text-center-lg,\n.text-right-sm,\n.text-right-md,\n.text-right-lg,\n.text-justify-sm,\n.text-justify-md,\n.text-justify-lg { \n\ttext-align: inherit; \n}\n\n/* Style par défaut */\n.text-left-xs { \n\ttext-align: left; \n}\n.text-center-xs { \n\ttext-align: center; \n}\n.text-right-xs { \n\ttext-align: right;\n}\n.text-justify-xs { \n\ttext-align: justify; \n}\n\n/* Style pour tablette */\n@media (min-width: 768px) {\n\t.text-left-sm, \n\t.text-left-xs { \n\t\ttext-align: left; \n\t}\n\t.text-center-sm, \n\t.text-center-xs { \n\t\ttext-align: center; \n\t}\n\t.text-right-sm, \n\t.text-right-xs { \n\t\ttext-align: right; \n\t}\n\t.text-justify-sm, \n\t.text-justify-xs { \n\t\ttext-align: justify; \n\t}\n}\n\n/* Style pour desktop */\n@media (min-width: 992px) {\n  \t.text-left-md, \n  \t.text-left-sm, \n  \t.text-left-xs { \n  \t\ttext-align: left; \n  \t}\n  \t.text-center-md, \n  \t.text-center-sm, \n  \t.text-center-xs { \n  \t\ttext-align: center; \n  \t}\n\t.text-right-md, \n\t.text-right-sm, \n\t.text-right-xs { \n\t\ttext-align: right;\n\t}\n\t.text-justify-md, \n\t.text-justify-sm, \n\t.text-justify-xs { \n\t\ttext-align: justify;\n\t}\n}\n\n/* Style pour grand desktop */\n@media (min-width: 1200px) {\n\t.text-left-lg, \n\t.text-left-md, \n\t.text-left-sm, \n\t.text-left-xs {\n\t\ttext-align: left;\n\t}\n\t.text-center-lg, \n\t.text-center-md, \n\t.text-center-sm, \n\t.text-center-xs {\n\t\ttext-align: center;\n\t}\n\t.text-right-lg, \n\t.text-right-md, \n\t.text-right-sm, \n\t.text-right-xs {\n\t\ttext-align: right;\n\t}\n\t.text-justify-lg, \n\t.text-justify-md, \n\t.text-justify-sm, \n\t.text-justify-xs {\n\t\ttext-align: justify;\n\t}\n}\n```\n\net le tour est joué.\n\n\n\n\n## Et pour le reste ? ##\n\nJ'imagine que ce n'est pas le seul cas de figure ou j'aurai besoin d'ajouter ce type de comportement. Donc si cela arrive avec d'autres propriétés existantes sans préfixe, suivez juste le même schéma.\n\nEt vous ? Quelles sont vos surcharges utiles ? ", "dates" : { "published" : { "$date" : 1400062680000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Alignement de texte Responsive avec Bootstrap", "urn" : "alignement-de-texte-responsive-avec-bootstrap" }
{ "__v" : 0, "_id" : { "$oid" : "5374aba4a48cab530ff13478" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "La balise HTML script permet de définir quand le code JavaScript dans votre page est exécuté. Les attributs HTML5 async et defer sont à présent supportés par Firefox, Chrome, Safari et Internet Explorer 10+ (sinon ils sont ignorés) et permettent de modifier le comportement de chargement des scripts. Voici de courtes explications sur les différences de chaque appel.\n\n\n\n\n\n## Tableau Explicatif ##\n\n<table class=\"parsing-html-demo\">\n    <tbody><tr>\n        <th class=\"type\" rowspan=\"3\"><samp>&lt;script&gt;</samp></th>\n        <td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td>\n    </tr>\n    <tr>\n        <td class=\"parse\">Analyse HTML</td>\n        <td class=\"load\">Chargement...</td>\n        <td class=\"exec\">Exécution JS</td>\n        <td colspan=\"2\" class=\"parse\">Analyse HTML</td>\n    </tr>\n    <tr class=\"hidden separator\"><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n\n    <tr>\n        <th class=\"type\" rowspan=\"3\"><samp>&lt;script defer&gt;</samp></th>\n        <td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td>\n    </tr>\n    <tr>\n        <td class=\"parse\">Analyse HTML</td>\n        <td class=\"parse load\"><span>Analyse</span> + Chargement...</td>\n        <td colspan=\"2\" class=\"parse\">Analyse HTML</td>\n        <td class=\"exec\">Exécution JS</td>\n    </tr>\n    <tr class=\"hidden separator\"><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n\n    <tr>\n        <th class=\"type\" rowspan=\"3\"><samp>&lt;script async&gt;</samp></th>\n        <td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td><td class=\"hidden\">-</td>\n    </tr>\n    <tr>\n        <td class=\"parse\">Analyse HTML</td>\n        <td class=\"parse load\"><span>Analyse</span> + Chargement...</td>\n        <td class=\"exec\">Exécution JS</td>\n        <td colspan=\"2\" class=\"parse\">Analyse HTML</td>\n    </tr>\n    <tr class=\"hidden\"><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr>\n</tbody></table>\n\n\n<div class=\"parsing-html-demo\">\n    Legend :\n    <ul>\n         <li class=\"load\">Chargement...</li>\n         <li class=\"exec\">Exécution JS</li>\n         <li class=\"parse\">Analyse HTML</li>\n    </ul>\n</div>\n\n\n\n\n\n## Pour les scripts externes ##\n\n### L'exécution normal ###\n\n`<script src=\"\"></script>`\n\nC'est le comportement standard de l'élément script. L'analyse du code HTML est mise en pause le temps que le script soit exécuté. Pour les serveurs lents et les scripts lourds (en temps d'exécution et poids) cela signifie que l'affichage de la page va mettre du temps.\n\n\n\n\n### L'exécution différée ###\n\n`<script defer src=\"\"></script>`\n\nCela revient à exécuter vos scripts dans l'ordre où ils ont été rencontrés mais seulement à la fin de l'analyse HTML. Cela est la même chose que de mettre vos scripts en pied de page juste avant la fermeture du body mais de tout de même les placer physiquement dans le DOM dans le `header`. En réalité defer existe depuis _IE6_ mais ne garantie pas l'ordre d'exécution avant _IE10_.\n\n\n\n\n### L'exécution asynchrone ###\n\n`<script async src=\"\"></script>`\n\nAucune importance de savoir quand le script sera disponible ? L'asynchrone est votre ami. Le code JavaScript sera exécuté aussitôt qu'il sera disponible. Parfait pour des scripts comme les boutons sociaux ou **Modernizr** (si vous gérez élégamment les phénomènes de [FOUC](http://fr.wikipedia.org/wiki/FOUC)).\n\n\n\n\n\n## Pour les scripts inline ##\n\nLà, async et defer ne servent à rien, ils sont simplement ignorés. Sous Chrome et Safari tous les scripts inline bloque le rendu quelque soit le mot-clé employé et sous Firefox et IE de l'[analyse spéculative](http://web.developpez.com/tutoriels/web/how-browsers-work/#L3-4-2) est faites.\n\n\n\n\n\n## Fallback ##\n\nPour les navigateurs ne supportant pas defer et async comme il se doit vous pouvez utiliser la fallback [async_defer_script.js](https://gist.github.com/fearphage/881274) comme ceci :\n\n```html\n<head>\n     ...\n     <!--[if lt IE 10]><script src=\"async_defer_script.js\"></script><![endif]-->\n     ...\n</head>\n```", "dates" : { "published" : { "$date" : 1398335400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "div.parsing-html-demo {\n\tdisplay: none;\n}table.parsing-html-demo {\n    border-collapse:collapse;\n    width: 100%;\n    text-align: center;\n    border-top: dashed 1px #000;  \n    border-bottom: dashed 1px #000;    \n}.parsing-html-demo .separator {\n    border-bottom: dashed 1px #000;    \n}.parsing-html-demo .parse {\n    border-bottom: solid 2px #080;\n    color: #080;\n}.parsing-html-demo span {\n    color: #080;\n}.parsing-html-demo .load {\n    border-top: solid 2px #008;\n    color: #008;\n}.parsing-html-demo .exec {\n    border-top: solid 2px #800;\n    color: #800;\n}.parsing-html-demo .type {\n    vertical-align: middle;\n    width: 20%;\n    font-weight: bold;\n}.parsing-html-demo .hidden {\n    text-indent: -7777px;\n}\n@media (max-width: 460px) {\n\t.parsing-html-demo td {\n\t\ttext-indent: -7777px;\n\t\tletter-spacing: -10px;\n\t}\n\tdiv.parsing-html-demo {\n\t\tdisplay: block;\n\t}\n}", "title" : "<span>Différences</span> entre <span>async</span> et <span>defer</span> en <span>HTML5</span>", "urn" : "differences-entre-async-et-defer-en-html5" }
{ "__v" : 0, "_id" : { "$oid" : "5374d4054e21003a10eaa99f" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c0" } ], "content" : "Récemment, pour travailler avec mes collègues du Back-end C#, j'ai du « abandonner » Sublim Text 3, mes plugins tel que [Hayaku](https://github.com/hayaku/hayaku) ou [Emmet](https://github.com/sergeche/emmet-sublime) et tout un tas de raccourcis me privant d'une productivité non négligeable.\n\nJ'ai bien cru que cela était fini quand je devais travailler sur leurs projets dans leurs environnements mais heureusement il n'en n'est rien ! Suivez-le guide, je vais vous expliquer.\n\n\n\n\n\n## Étape 1 ##\n\nOuvrez Visual Studio, rendez-vous dans « **Tools** » et sélectionnez « **External Tools**... » :\n\n<div class=\"img\"><img class=\"step-1\" src=\"http://i.stack.imgur.com/XapFz.png\" alt=\"Tools > External Tools...\"></div>\n\n\n\n\n\n## Étape 2 ##\n\nCliquez sur « *Add* ». Affectez dans _Title:_ « _Open in Sublim Text_ », rendez-vous dans le dossier d'installation de _Sublim Text_ et affectez dans _Command:_ « `<chemin_installation>/sublim_text.exe` ». Pour la partie _Arguments:_ affectez la valeur « **$(ItemPath):$(CurLine):$(CurCol)** » : Cela dit à Sublim de s'ouvrir dans le bon fichier, à la bonne ligne. Appliquez à _Initial directory:_ la valeur « **$(ItemDir)** ».\n\n<div class=\"img\"><img class=\"step-2\" src=\"http://i.stack.imgur.com/7EO1r.png\" alt=\"Paramètres...\"></div>\n\n\n\n\n\n## Étape 3 ##\n\nMaintenant si vous allez dans « **Menu > Tools** » vous trouverez votre nouvelle commande « _Open in Sublim Text_ ». Et si on lançait maintenant Sublim Text via un raccourci clavier !\n\n\n\n\n\n## Étape 4 ##\n\nRendez-vous dans « **Menu > Tools > Options** », dans « **Environment** » sélectionnez « **Keyboard** ». Dans le champ _Show command containing:_, cherchez « **externalCommand** » et sélectionnez le numéro correspondant à votre item dans la liste des « Externa tools... ». Positionnez-vous ensuite dans _Press shortcut keys:_ et tapez votre combinaison de touche. Cliquez ensuite sur « **Assign** ».\n\nÉvitez les combinaisons déjà existantes.\n\n<div class=\"img\"><img class=\"step-4\" src=\"http://i.stack.imgur.com/Mo2dB.png\" alt=\"Keybord Shortcut\"></div>\n\n\n\n\n\n## Et c'est fait ! ##\n\nSublim Text est maintenant utilisable rapidement ! Une fois vos modifications faites, fermez ou switchez d'application et Visual Studio mettra à jour vos modifications.\n\n\n\n\n\nSource images : [StackOverflow](http://stackoverflow.com/questions/18450402/moving-from-visual-studio-to-sublime-text)", "dates" : { "published" : { "$date" : 1400168520000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".article .img {\n    text-align: center;\n}\n\n@media (max-width: 378px) {\n    .article img.step-1 {\n        width: 100%;\n        height: auto;\n    }\n}\n\n@media (max-width: 495px) {\n    .article img.step-2 {\n        width: 100%;\n        height: auto;\n    }\n}\n\n@media (min-width: 780px) and (max-width: 860px) {\n    .article img.step-2 {\n        width: 100%;\n        height: auto;\n    }\n}\n\n.article img.step-4 {\n    width: 100%;\n    height: auto;\n}\n", "title" : "<span>Utiliser</span> <span>Sublim Text</span> avec <span>Visual Studio</span>", "urn" : "utiliser-sublim-text-avec-visual-studio" }
{ "__v" : 0, "_id" : { "$oid" : "53772e8525b3faa72aba6590" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "Pourquoi je n'utilise pas [Bootstrap] ? Cela peut sembler une « évolution » de nos méthodes de travail Front-end, mais gare au loup et attention de ne pas tomber dans un travers que le W3C tente d'enrayer au fur et à mesure des évolutions HTML et CSS.\n\nCommençons par le commencement. Qu'est-ce que [Bootstrap] ? Comme pleins d'autres « Librairie » ou « Framework » CSS dans la même veine, [Bootstrap] est un outil permettant d'augmenter la productivité des développeurs Front-end le maîtrisant, dans le but de fournir le plus rapidement possible un rendu visuel ergonomique et si possible responsive.\n\nMon problème ne vient pas tant de sa finalité qui est louable, mais belle et bien de la mise en œuvre technique qui permet d'atteindre cette finalité. Pour être concis avant de développer : **l'utilisation faites de [Bootstrap] est une régression pour un travail Front-end de qualité**.\n\nJe ne compte persuader personne, et à défaut de convaincre, je vais au moins vous expliquer mon point de vue.\n\n\n\n\n\n## Les deux approches possibles pour de l'intégration Front-end ##\n\n### L'approche Sémantique/Visuelle (ou celle du [W3C](http://www.w3.org/)) ###\n\nCette approche considère que dans un fichier HTML, les balises doivent avoir du sens et être complétées (que ce soit par leurs genres, leurs noms, leurs ids ou leurs classes) de manière sémantique de façon à donner du sens au document.\n\n> #### Exemple ####\n> Si j'ai deux éléments qui se suivent : le premier pourrait porter l'attribut `class=\"main\"` et le second l'attribut `class=\"aside\"`.\n\n**L'attribut `class` est donc dans cette approche une extension de l'attribut `id` (mais en version multiple) et le HTML garde un unique rôle : le rôle de structure sémantique (que ce soit pour les moteurs de recherche mais également pour les développeurs ; qu'ils s'y connaissent ou non en design).**\n\n\n\n\n### L'approche « Tout en un » (ou celle de [Bootstrap] &amp; cie) ###\n\nCette approche considère que dans un fichier HTML, les balises doivent représenter un visuel et être complétées de manière à laisser transparaître rapidement le résultat visuel.\n\n> #### Exemple #### \n> Si j'ai deux éléments qui se suivent : le premier pourrait porter l'attribut `class=\"column-sm-4 text-left\"` et le second l'attribut `class=\"column-sm-8 text-right\"`.\n\n**L'attribut `class` est donc dans cette approche une extension de l'attribut `style` (mais une sorte de raccourci) où il n'est pas nécessaire de lister les directives CSS en inline mais dans un fichier CSS séparé.**\n\n*Note: Quoi qu'il arrive, le texte sera toujours à gauche pour la première partie et toujours à droite pour la seconde quelque soit le contexte dans lequel ces portions de HTML se retrouverons.*\n\n\n\n\n\n## Comparaison de code des deux approches ##\n\nPour les plus curieux, voici techniquement la différence entres les codes :\n\n\n\n\n### Sémantique et visuel séparé ###\n\n**HTML :**\n\n```html\n<header>\n    <h1>Le titre</h1>\n    <nav>\n        <ul>\n            <li>menu</li>\n            <li>menu</li>\n            <li>menu</li>\n            <li>menu</li>\n        </ul>\n    </nav>\n</header>\n<section>\n    <article>\n        <p>Le contenu<br>\n        Le contenu<br>\n        Le contenu</p>\n    </article>\n    <aside>Les à cotés</aside>\n</section>\n```\n\n**CSS :**\n\n```css\n/* Entrer le padding dans le calcul interne */\nh1,\nnav,\narticle,\naside {\n    box-sizing: border-box;\n}\n\n/* Mettre le titre en gras */\nh1 {\n    font-weight: bold;   \n}\n\n/* Centrer les textes du menu */\nnav {\n    text-align: center;\n}\n\n/* Retrait du comportement de liste standard */\nnav ul {\n    padding-left: 0;\n}\nnav li {\n    list-style-type: none;\n}\n\n/* À partir d'une tablette */\n@media (min-width: 768px) {\n\n    /* Empêcher les écoulements de flottants */\n    header:after,\n    section:after {\n        content: \"\";\n        display: block;\n        clear: both;\n    }\n\n    /* Flotter à gauche en 50% */\n    h1,\n    aside {\n        float: left;\n        width: 50%;\n    }\n\n    /* Flotter à droite en 50% */\n    h1,\n    article {\n        float: right;\n        width: 50%;\n    }\n\n    /* Remettre les menus en alignement standard */\n    nav {\n        text-align: left;\n    }\n\n    /* Mettre le menu en ligne */\n    nav li {\n        display: inline-block;\n    }\n\n    /* Placer le titre à droite */\n    h1 {\n        text-align: right;\n    }\n    \n}\n```\n\n**Rendu**\n\n> \n<div class=\"example-header\">\n    <div class=\"example-logo\"><p>Le logo</p></div>\n    <div class=\"example-menu\">\n        <ul>\n            <li>menu</li>\n            <li>menu</li>\n            <li>menu</li>\n            <li>menu</li>\n        </ul>   \n    </div>\n</div>\n<div class=\"example-content\">\n    <div class=\"example-main\">\n        <p>Le contenu<br>\n        Le contenu<br>\n        Le contenu</p>\n    </div>\n    <div class=\"example-aside\"><p>Les à coté</p></div>\n</div>\n\n_Note : vous pouvez rétrécir votre fenêtre sur périphérique desktop pour voir le résultat mobile._\n\n\n\n\n### Framework CSS comme Bootstrap ###\n\n**HTML :**\n\n```html\n<header class=\"container\">\n    <div class=\"row\">\n        <h1 class=\"col-sm-6 col-sm-push-6 text-right-sm\">\n            <strong>Le titre</strong>\n        </h1>\n        <nav class=\"col-sm-6 col-sm-pull-6 text-center-xs text-left-sm\">\n            <div class=\"navbar-collapse collapse in\">\n                <ul class=\"nav navbar-nav\">\n                    <li>Menu</li>\n                    <li>Menu</li>\n                    <li>Menu</li>\n                    <li>Menu</li>\n                </ul>\n            </div>\n        </nav>\n    </div>\n</header>\n\n<section class=\"container\">\n    <div class=\"row\">\n        <article class=\"col-sm-6 col-sm-push-6\">\n            <p>Le contenu<br>\n               Le contenu<br>\n               Le contenu</p>\n        </article>\n        <aside class=\"col-sm-6 col-sm-pull-6\">Les à coté</aside>\n    </div>\n</section>\n```\n\n**CSS :**\n\n```html\n<!-- État de boite noire, ça marche tel que la doc l'explique -->\n<link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\">\n```\n\n```css\n/* Parce que Bootstrap ne réalise pas tout ce que \nl'on souhaite faire, on surcharge ensuite avec sa \npropre CSS en essayant de conserver \nla philosophie Bootstrap (pas simple) */\n\n/* Comportement par défaut */,\n\n.text-center-sm,\n.text-center-md,\n.text-center-lg,\n.text-right-sm,\n.text-right-md,\n.text-right-lg { \n    text-align: inherit; \n}\n\n/* Style par défaut */\n.text-center-xs { \n    text-align: center; \n}\n.text-right-xs { \n    text-align: right;\n}\n\n/* Style pour tablette */\n@media (min-width: 768px) {\n    .text-center-sm, \n    .text-center-xs { \n        text-align: center; \n    }\n    .text-right-sm, \n    .text-right-xs { \n        text-align: right; \n    }\n}\n\n/* Style pour desktop */\n@media (min-width: 992px) {\n    .text-center-md, \n    .text-center-sm, \n    .text-center-xs { \n        text-align: center; \n    }\n    .text-right-md, \n    .text-right-sm, \n    .text-right-xs { \n        text-align: right;\n    }\n}\n\n/* Style pour grand desktop */\n@media (min-width: 1200px) {\n    .text-center-lg, \n    .text-center-md, \n    .text-center-sm, \n    .text-center-xs {\n        text-align: center;\n    }\n    .text-right-lg, \n    .text-right-md, \n    .text-right-sm, \n    .text-right-xs {\n        text-align: right;\n    }\n}\n```\n\n_Note : une autre approche est de dupliquer un objet que [Bootstrap] ne saurait pas facilement afficher dans des états différents en fonction de la taille du périphérique afin de n'en afficher qu'un des deux à la fois. Ce qui créé du contenu dupliqué, ce qui, en plus d'être un problème SEO pose un problème de maintenance._\n\n**Rendu**\n\n> \n<div class=\"example-header\">\n    <div class=\"example-logo\"><p>Le logo</p></div>\n    <div class=\"example-menu\"><p>menu menu menu menu</p></div>\n</div>\n<div class=\"example-content\">\n    <div class=\"example-main\">\n        <p>Le contenu<br>\n        Le contenu<br>\n        Le contenu</p>\n    </div>\n    <div class=\"example-aside\"><p>Les à coté</p></div>\n</div>\n\n_Note : vous pouvez rétrécir votre fenêtre sur périphérique desktop pour voir le résultat mobile._\n\n\n\n\n\n## Pourquoi l'approche sémantique est la meilleure (selon moi) ##\n\n### La raison historique de la séparation du fond et de la forme ###\n\nLe W3C améliore les normes de structures HTML dans un but de séparation de la structure et du rendu. Voyons ça plus en détail :\n\n#### D'abord HTML ####\n\nLe HTML dans ses débuts embarquait des balises permettant de créer du fond (ou de structurer) tel que `<div>`, `<span>`, `<table>`, etc. et des balises permettant de créer de la forme (ou du rendu) tel que `<font>`, `<i>`, `<b>`, `<center>`, etc. Les deux étaient mélangés et c'est bien dans le fichier HTML, au travers de sa structure que l'on décidait qu'un texte devrait être rouge, centré et avoir une taille de 20 pixel.\n\n#### Puis le xHTML ####\n\nUne évolution logique a donc été de supprimer (ou déprécier) les balises porteuses d'un rendu visuel et de leur préférer un sens sémantique (tout en accordant une grande importance au CSS pour l'habillage). Ainsi un texte centré ou rouge se créé via une feuille CSS et on ne considère plus un texte important comme `<b>` (bold) mais plutôt ayant un sens `<strong>` (fort). C'est au développeur de choisir si finalement `<strong>` n'a pas plutôt un rendu italique et souligné via CSS ([à noter que `<i>` et `<b>` n'ont pas été remplacées comme on le pense trop souvent](http://blog.lesieur.name/icon-ou-la-balise-html-semantique-qui-n-existait-pas/)).\n\nIl y a donc une volonté du Web de séparer la structure et le rendu. Ce que je trouve assez logique.\n\n#### On continue avec le HTML5 ####\n\nToujours dans ce soucis de structure sémantique, les balises en elles-mêmes se voit rajoutée du sens et c'est pour cela que `<header>`, `<footer>`, `<section>`, `<article>`, `<aside>`, `<figure>`... font leur apparition.\n\nCela signifie que l'approche de [Bootstrap] prend le contre-pied de cette idée de séparation et instaure selon moi une approche plus liée qui n'est pas en accord avec la philosophie que je partage avec le W3C.\n\n\n\n\n\n## Les raisons techniques ##\n\n### La taille du fichier HTML généré ###\n\nAjouter des classes à outrance pour habiller visuellement sa structure HTML surcharge anormalement le DOM d'au moins trois manières :\n\n- Obligation d'imbriquer des éléments pour qu'ils fonctionnent tels que [Bootstrap] l'a prévu.\n- Multiplication du nombre de classes dans l'attribut `class`.\n- Duplication de contenu pour afficher/masquer simplement en fonction de la taille du périphérique.\n\nCela défère le poids de la CSS vers le HTML. Or, autant les fichiers CSS peuvent être mis en cache, autant la structure HTML peut difficilement l'être étant donné sa nature changeante en fonction du contrôleur qui la génère. Heureusement le transfert gzip allège ce soucis, encore faut t-il qu'il y ai un maximum de redondance en terme de naming dans les classes utilisée par [Bootstrap] ([ce qui est le cas dans un habillage orienté composant](http://blog.lesieur.name/conventions-html-et-css-orientes-composants/)).\n\n\n\n### La surcharge CSS ###\n\n[Bootstrap] n'est pas négligeable en taille. Cela impose un pré-chargement plus lourds au premier chargement de page (en supposant qu'ensuite le fichier soit mis en cache). De manière assez amusante, plus Bootstrap \"supporte\" des périphériques petits avec de faibles débits à l'utilisation (ajout de fichiers CSS et JS), plus il est lourd en poids... (idem pour le support « Right to Left »).\n\n\n\n### La maîtrise de l'outil ###\n\nL'avantage offert par [Bootstrap] est perdu dès l'instant ou l'outil est utilisé par des personnes ne le connaissant pas (rapidité d'intégration). Pire encore, cela expose l'intégration par de multiples personnes à mélanger l'approche [Bootstrap] à une approche sémantique sans distinguer l'un de l'autre. Vous me direz que l'outil est simple d'utilisation tel qu'il est abordé dans la documentation, mais [une utilisation propre de celui ci est un peu plus compliquée](http://blog.lesieur.name/bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible/).\n\n\n\n### Maintenance de code et changement de design ###\n\nLa structure étant intimement liée au Framework [Bootstrap] et au visuel soumis, le code HTML est bon à revoir dans son architecture pour un changement de design. La structure étant liée aux contrôleurs, car créée par eux, c'est le Back-end qui se retrouve impacté par un changement de design là ou seulement les CSS et les JS auraient du bouger (sans que le Back soit touché par du changement de design).\n\n\n\n### Ne pas rendre service au Front-end apprenant ###\n\nL'approche « tout en un » masque le plus important : les mécanismes de fonctionnement des classes en elles-mêmes. Pourquoi —pour réaliser telles rendus— elles utilisent ces attributs précisément ? Si cet état de boîte noire peut s'avérer intéressant pour des débutants et un gain de temps pour les experts : cela maintient l'écart entre les deux. Et, les seuls apprenant réellement à utiliser les nouveautés du CSS en comprenant les mécanismes sous-jacent sont ceux qui maintiennent [Bootstrap] (ou équivalent) ou ceux qui ne l'utilisent pas.\n\n\n\n### Un problème de SEO ou de performance ? ###\n\nDupliquer du contenu de manière identique dans le DOM dans le seul but de l'afficher à deux endroits différents de la grille [Bootstrap] créer du contenu dupliqué au sein d'une même page. Bien entendu, on peut éviter cela en laissant dans le DOM source le code destiné au mobile et en dupliquant en JavaScript celui-ci pour l'afficher sur Desktop en sacrifiant un peu de ressource JavaScript, en ajoutant une complexité à la maintenance et en masquant tant bien que mal le phénomène de [FOUC](http://fr.wikipedia.org/wiki/FOUC).\n\n\n\n\n## Pourquoi utiliser Bootstrap alors ? ##\n\n### À utiliser pour : ###\n\n- Développer des « Proof of Concept » ou remplacer la création PSD par une création temps réel de façon rapide. C'est donc un outil formidable pour remplacer Photoshop dans [l'ère Post PSD](http://davidl.fr/blog/fin-psd.html).\n- Faire des sites à la pelle et avec de très petits budgets où le résultat en performance et en qualité reste un problème, mais où l'argent fournit pour la réalisation manque (discutable tout de même).\n- Habiller un Back-office personnalisé (ou une application web) qui n'a pas fait l'objet d'une création et que l'on espère « user friendly » rapidement et simplement (une création purement fonctionnelle sans problèmes de performances à grande échelle ou de soucis de SEO).\n- Créer des tutos autours de Framework dont l'habillage HTML/CSS n'est pas le centre du sujet pour obtenir un résultat descend visuellement.\n- Permettre aux rédacteurs de contenu web de faire de la mise en forme en exploitant quelques Pattern fort utile qui n'ont donc ici pas vocation à faire partie de la structure même de la page. Au préalable il serait intéressant de vider toutes balises inutile de [Bootstrap], ou de ce [créer ses propres Patterns](http://blog.lesieur.name/bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible/). \n\n\n\n### À ne pas utiliser pour : ###\n\n- Des petits sites, car cela augmente bien souvent de 90% le poids du site, il vaut donc mieux ne pas le faire et perdre un peu de temps pour un gain en performance maintenance et sémantique.\n- De grosses structures, car cela leurs font perdre la flexibilité du changement d'UI sans impacter le Back-end, impose la formation de toutes les ressources Front-end travaillant sur le projet à Bootstrap et il résulte de la construction même des pages un impact SEO non négligeable due au poids du HTML, sa sémantique limitée et plus globalement au temps de chargement des pages. D'un point de vu conception et maintenance, cela empêche toute [possibilité d'architecture orienté composant](http://blog.lesieur.name/conventions-html-et-css-orientes-composants/) que ce soit dans le HTML ou dans la CSS.\n\n\n\n\n\n## Mélanger les deux approches pour en garder les avantages ? ##\n\nSi l'on extrait les problèmes majeurs en considérant que nos ressources seront formées à utiliser [Bootstrap] nous nous retrouvons avec les deux points suivants.\n\n\n\n\n### La lourdeur de la librairie ###\n\nQue ce soit pour [Bootstrap] ou pour une autre librairie, le premier chargement sera laborieux (avant que le fichier n'ai été téléchargé une fois et mis en cache). On peut palier à ce problème en utilisant une version du script hébergé sur des serveurs comme c'est le cas pour jQuery par exemple. Ainsi pour Bootstrap, on peut se faire servir par <a href=\"http://www.bootstrapcdn.com/\" title=\"CDN for Bootstrap\">http://www.bootstrapcdn.com/</a>. L'avantage est que tous les sites utilisant le chargement par CDN Bootsrap participe à mettre en cache pour vous le fichier. Cela signifie que ce n'est plus nécessairement votre première page ouverte qui ralentira le chargement du visiteur mais peut-être celle d'un autre site.\n\n\n\n\n### Remettre les classes « tout en un » de nouveau dans la CSS ###\n\nFinalement, ce qu'il nous faudrait pour résoudre notre soucis et remettre la sémantique à l'ordre du jour, c'est d'adresser dans la feuille CSS (et non dans la page HTML elle-même) notre suite de classe. Si nous pouvions par exemple transformer ceci :\n\n```html\n<header class=\"clr\">\n    <nav class=\"left hidden boxsizing w50\">\n        Le menu\n    </nav>\n</nav>\n```\n\nen ceci\n\n```html\n<header class=\"header\">\n    <nav class=\"header--nav\">\n        Le menu\n    </nav>\n</header>\n```\n\n```css\n/* Fichier partiel type Bootstrap uniquement avec ce dont on à besoin. */\n.header {\n\t.clr;\n}\n.header--nav {\n\t.left; \n\t.hidden; \n\t.boxsizing; \n\t.w50;\n}\n```\n\nle tour serait joué.\n\nC'est exactement ce que permettent des approches comme <a href=\"http://sass-lang.com/\" title=\"Sass - Syntactically Awesome Stylesheets\">SASS</a> ou <a href=\"http://lesscss.org/\" title=\"LESS &laquo; The Dynamic Stylesheet language\">LESS</a>. Elles permettent d'écrire de manière intuitive et non redondante des suites de sélecteurs CSS pour au final générer le fichier CSS qui va bien. Vous pouvez lire l'article « [Utilisation optimisée de Framework CSS comme Bootstrap avec Less](http://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/) » pour comprendre comment cela fonctionne et de cette manière vous pourrez remplir vos classes HTML de manière sémantique tout en conservant vos habitudes d'intégration avec [Bootstrap] par exemple.\n\n> ### Bonne utilisation de Bootstrap and Cie.###\n> **`Best Practice` Vous devriez parvenir à une utilisation de [Bootstrap] vidé de tous les problèmes précédemment cités en vu de maintenir un site orienté composant en lisant les article « [Bootstrap, lisibilité, propreté, performance, optimisation ; c'est possible !](http://blog.lesieur.name/bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible/) » et « [Conventions HTML et CSS orientés composants](http://blog.lesieur.name/conventions-html-et-css-orientes-composants/) ».**\n\n\n\n\n\n## Mon retour rapide sur l'utilisation Bootstrap ##\n\nJe trouve que les types de sites réalisés avec Bootstrap se ressemble tous et qu'il devient difficile de faire quelque chose s'en éloignant sans finalement perdre du temps. Bootstrap devient ici plus contraignant pour la patte créative également et on en vient parfois même à blâmer les agences de création digital car leurs créations ne sont pas « compliant » Bootstrap.\n\nPour exemple voici des variations de design pour un HTML identique en CSS-driven :\n\n**[Exemple rapide sur CodePen](http://codepen.io/Haeresis/pen/bdXymY)**\n\n*[Site de Nicolas Hoffmann](http://www.nicolas-hoffmann.net/)*\n\n- [ND Mobi First](http://www.nicolas-hoffmann.net/source/changer_skin.php?theme=ND_mobfirst)\n- [ND New Green](http://www.nicolas-hoffmann.net/source/changer_skin.php?theme=ND_new_green)\n- [ND](http://www.nicolas-hoffmann.net/source/changer_skin.php?theme=ND)\n- [Firefox](http://www.nicolas-hoffmann.net/source/changer_skin.php?theme=firefox)\n\net la même chose pour un HTML identique avec Bootstrap\n\n*[Template pour documentation JSDoc](https://github.com/terryweiss/docstrap)*\n\n- [Amelia](http://terryweiss.github.io/docstrap/themes/amelia/)\n- [Cyborg](http://terryweiss.github.io/docstrap/themes/cyborg/)\n- [Readable](http://terryweiss.github.io/docstrap/themes/readable/)\n- [DocStrap](http://terryweiss.github.io/docstrap/themes/superhero/)\n\nC. Q. F. D.\n\n [Bootstrap]: http://getbootstrap.com/ (Le framework de développement Front-end responsive et mobile first le plus populaire du web)", "dates" : { "published" : { "$date" : 1400348400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : " /* Entrer le padding dans le calcul interne */\n.example-logo,\n.example-menu,\n.example-main,\n.example-aside {\n    box-sizing: border-box;\n}\n\n/* Mettre le titre en gras */\n.example-logo {\n    font-weight: bold;   \n}\n\n/* Centrer les textes du menu */\n.example-menu {\n    text-align: center;\n}\n\n/* Retrait du comportement de liste standard */\n.example-menu ul {\n    padding-left: 0;\n}\n.example-menu li {\n    list-style-type: none;\n}\n\n/* A partir d'une tablette. */\n@media (min-width: 768px) {\n     /* Empècher les écoulements de flottants */\n    .example-header:after,\n    .example-content:after {\n        content: \"\";\n        display: block;\n        clear: both;\n    }   \n\n    /* Flotter à gauche en 50% */\n    .example-menu,\n    .example-aside {\n        float: left;\n        width: 50%;\n    }\n\n    /* Flotter à droite en 50% */\n    .example-logo,\n    .example-main {\n        float: right;\n        width: 50%;\n    }\n\n    /* Remettre les menus en alignement standard */\n    .example-menu {\n        text-align: left;\n    }\n\n    /* Mettre le menu en ligne */\n    .example-menu li {\n        display: inline-block;\n    }\n\n    /* Placer le titre à droite */\n    .example-logo {\n        text-align: right;\n    }\n}", "title" : "<span>Bootstrap</span> est une régression pour un <span>développement</span> <span>Front-end</span> de <span>qualité</span>", "urn" : "bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite" }
{ "__v" : 0, "_id" : { "$oid" : "537b2d0406b95d3a0a73cb01" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "On me demande souvent quelle est la structure JavaScript que j'utilise pour développer mes sites web. C'est une question à laquelle je ne sais jamais si un simple « [jQuery] » suffit ou si l'on s'attend à m'entendre répondre « [MooTools] », « [jQuery UI] », « [Backbone] », « [Knockout] », « [AngularJs] » ou je ne sais quelle autre composant/librairie/framework JavaScript Front-end extraordinaire !\n\n [jQuery]: http://jquery.com/ (jQuery JavaScript Library)\n [MooTools]: http://mootools.net/ (MooTools JavaScript Framework)\n [jQuery UI]: https://jqueryui.com/ (jQuery UI JavaScript Components)\n [Backbone]: http://backbonejs.org/ (Backbone JavaScript Framework)\n [Knockout]: http://knockoutjs.com/ (Knockout JavaScript Framework)\n [AngularJs]: http://angularjs.org/ (AngularJs JavaScript Framework)\n\nAu delà du fait que l'utilisation de ses ressources précédemment citées dépend du fait que l'on souhaite réaliser un site web ou un outil web ou une application web etc. je finis toujours par expliquer que j'utilise ma propre architecture JavaScript à travers toutes les différentes pages d'un site web et qu'au cas par cas, je charge les javascript dont j'ai besoin (parfois il est plus judicieux de charger de manière asynchrone un [ckeditor] sur l'unique page ou il est utile que de ce le trimbaler partout sur le site !).\n\n [ckeditor]: http://ckeditor.com/ (The best web text editor for everyone)\n\nJe vais donc vous livrer à travers cet article l'architecture JavaScript que j'ai adopté. Afin de la comprendre pas à pas, j'utiliserai comme fil conducteur la réalisation d'un site vitrine. Ma façon de structurer le JavaScript client n'est pas absolue mais elle vous permettra de comprendre la logique derrière mes différents sites dont vous trouverez les sources sur GitHub ([comme pour ce blog](https://github.com/Haeresis/BlogAtlas/blob/master/assets/javascript/common.js)) ou même la logique du moteur de site [node.js] : [NodeAtlas].\n\n [Node.js]: http://nodejs.org/ (Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications)\n [NodeAtlas]: http://haeresis.github.io/NodeAtlas/ (NodeAtlas vous permet de créer et maintenir des Assets HTML ou sites multilingues simplement en Node.js)\n\n\n\n\n\n## Architecture JavaScript d'un site web ##\n\nPour commencer, j'estime qu'il y a quatre zones de JavaScript par page que je nomme **Boot**, **Framework**, **Common** et **Specific**. Aucune ligne JavaScript ne doit se trouver en dehors de ces quatre zones. Ces quatre zones, dans un site en production sont matérialisées par quatre (au maximum) fichiers.\n\nEn voici l'exemple sur une page d'accueil :\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'accueil</title>\n        <!-- Meta / Feuilles de style -->\n        <script type=\"text/javascript\" src=\"javascript/boot.min.js\"></script>\n    </head>\n    <body class=\"home\">\n        <!-- Contenu de la page -->\n        <script type=\"text/javascript\" src=\"javascript/framework.min.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/home.min.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/common.min.js\"></script>\n    </body>\n</html>\n```\n\n\n\n\n### La zone de Boot ###\n\nCette zone est facultative. Elle est la seule à ralentir le chargement de la page car les fichiers JavaScript de cette zone sont chargés et exécutés avant le rendu visuel final de la page, avant même que la balise `body` ne soit chargée. C'est pour cela que les bonnes pratiques demandent au maximum de charger les fichiers en pied de page et que ce qui sera chargé dans le `head` fasse un poids minimal en taille de fichier et en temps d'exécution JavaScript. Le type de script qui se trouve ici est celui qui va modifier la structure HTML au dessus du body à savoir sur l'élément `html` ou dans le `head`. Cela en vu d'éviter le phénomène de [FOUC](http://fr.wikipedia.org/wiki/FOUC).\n\nOn retrouve donc ici, avant minification et rassemblement des JavaScript, des scripts comme « [Modernizr] » ou « [HTMLShiv] » qui vont impacter le rendu des balises avec les feuilles CSS. C'est ici qu'on laissera une ligne de code pour injecter par exemple une classe `js` dans la balise `html` afin d'avertir les futurs scripts ou les sélecteurs CSS que JavaScript est activé. Si aucun de ces scripts ne vous intéressent pour votre site, la zone de Boot peut donc être ignorée.\n\n [Modernizr]: \"http://modernizr.com/\" (An indispensable tool)\n [HTMLShiv]: \"https://code.google.com/p/html5shiv/\" (HTML5 IE enabling script)\n\n\n\n\n### La zone de Framework ###\n\nC'est ici que vont se trouver le chargement de toutes vos librairies/frameworks JavaScript utile à l'intégralité du site. Vous chargerez également des plugins pour vos librairies ou même vos propres fonctions JavaScript. Bref, ici c'est tout ce que vous utilisez Cross-site.\n\nCela peut ressembler à ça dans un environnement de développement :\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <!-- Titre / Meta / Feuilles de style -->\n    </head>\n    <body class=\"home\">\n        <!-- Contenu de la page -->\n        <script type=\"text/javascript\" src=\"javascript/jquery/date.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/jquery/string.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/jquery/jquery-2.1.0.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/jquery/jquery.ba-hashchange.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/jquery-ui/jquery-ui-1.10.4.js\"></script>\n        \n        <script type=\"text/javascript\" src=\"javascript/ckeditor/ckeditor.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/ckeditor/config.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/ckeditor/lang/fr.js\"></script>\n        <!-- Autres JavaScript -->\n    </body>\n</html>\n```\n\n\n\n\n### La zone Common ###\n\nC'est la première des deux zones que nous allons décortiquer plus bas dans cette article (les zones précédentes étant dans 95% des cas du code générique). Ici, tout va être dédié à l'interaction des scripts de la zone Framework avec le DOM du site. Cependant, ce fichier unique en version de développement (dans la majorité des cas) comme en version de production sera chargé sur toutes les pages du site comme les deux premières zones. Ne sera donc déclarées ici que les fonctions qui seront appelées sur plus d'une page.\n\n\n\n\n### La zone Specific ###\n\nCette dernière zone est facultative et _spécifique_ à chaque page. Elle se matérialise par un fichier portant le nom du template de page associé à lui. Sur la page d'accueil ce fichier est donc `home.js` tandis que sur la page de contact il s'appelle `contact-us.js`. Il ne doit contenir **que** du code unique à la page courante.\n\nSi le code de cette zone pour un template spécifique donne un fichier bien trop petit en poids pour qu'il soit négligeable à côté du `common.js`, il peut être intéressant de mettre quelques lignes normalement spécifique dans la partie commune. Nous verrons cela plus loin.\n\n\n\n\n\n## Site web de fil rouge ##\n\nPour commencer, nous allons imaginer un petit site web embarquant diverses zones HTML (des composants) qui auront chacune des fonctions JavaScript propres à travers différentes pages. Voici sans plus attendre les différents types de pages embarquant nos divers composants :\n\n### Liste des templates de page ###\n\n#### La page d'accueil ####\n\n- Le composant _Menu principal_\n- Le composant _Aperçu des pages_\n- Le composant _Aperçu des produits_\n- Le composant _Formulaire d'inscription à la newsletter_\n- Le composant _Retour en haut de page_\n\n_Contenu de **home.htm**_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'accueil</title>\n    </head>\n    <body class=\"home\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"page-overview\"><!-- Zone Aperçu des pages --></nav>\n        <nav class=\"product-overview\"><!-- Zone Aperçu des produits --></nav>\n        <form class=\"newsletter-form\"><!-- Zone Formulaire d'inscription à la newsletter --></form>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n    </body>\n</html>\n```\n\n\n\n#### Les pages de produits ####\n\n- Le composant _Menu principal_\n- Le composant _Aperçu des produits_\n- Le composant _Description d'un produit_\n\n_Contenu de **products/`<name-of-product>`.htm**_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page de produit</title>\n    </head>\n    <body class=\"product\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"product-overview\"><!-- Zone Aperçu des produits --></nav>\n        <article class=\"product-content\"><!-- Zone Description d'un produit --></article>\n    </body>\n</html>\n```\n\n\n\n#### Les page d'articles ####\n\n- Le composant _Menu principal_\n- Le composant _Aperçu des articles_\n- Le composant _Contenu d'un article_\n- Le composant _Retour en haut de page_\n\n_Contenu de **articles/`<title-of-article>`.htm**_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'article</title>\n    </head>\n    <body class=\"article\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"article-overview\"><!-- Zone Aperçu des articles --></nav>\n        <article class=\"article-content\"><!-- Zone Contenu d'un article --></article>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n    </body>\n</html>\n```\n\n\n\n#### La page F.A.Q. ####\n\n- Le composant _Menu principal_\n- Le composant _Liste de Question/Réponse_\n- Le composant _Retour en haut de page_\n\n_Contenu de **faq**.htm_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>La page de la faq</title>\n\t</head>\n\t<body class=\"faq\">\n\t\t<nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n\t\t<section class=\"questions-answers-list\"><!-- Zone Liste de Question/Réponse --></section>\n\t\t<nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n\t</body>\n</html>\n```\n#### La page de contact ####\n\n- Le composant _Menu principal_\n- Le composant _Formulaire d'envoi d'un email_\n\n_Contenu de **contact-us.htm**_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page de contact</title>\n    </head>\n    <body class=\"contact-us\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <form class=\"contact-us-form\"><!-- Zone Formulaire d'envoi d'un email --></form>\n    </body>\n</html>\n```\n\n\n\n\n\n### Liste des composants ###\n\nOn peut donc repérer un certain nombre de composant sur lesquels nous allons appliquer des interactions JavaScript.\n\n#### Le composant _Menu principal_ ####\n\n- Celui-ci à des sous-menus qui ne s'affichent qu'avec des interactions par clique qui vont nécessiter du JavaScript. Il dispose également d'une barre de recherche pour trouver une page dans le site qui nécessitera également du JavaScript.\n\n#### Le composant _Aperçu des pages_ ####\n\nCelui-ci sera un slider complet (flèches, swipe tactile, barre de progression) avec effets de transition qui va nécésiter du JavaScript.\n\n#### Le composant _Aperçu des produits_ ####\n\n- Celui-ci sera un slider affichant une liste d'éléments en ligne qui partent en overflow horizontal. Ceci va nécessiter du JavaScript.\n\n#### Le composant _Formulaire d'inscription à la newsletter_ ####\n\n- Celui-ci collectera les informations du formulaire pour ensuite les envoyer en AJAX si il passe les tests de validation. Ceci va nécessiter du JavaScript.\n\n#### Le composant _Retour en haut de page_ ####\n\n- Celui-ci renverra en haut de page avec un effet de défilement doux qui nécessitera du JavaScript.\n\n#### Le composant _Description d'un produit_ ####\n\n- Celui-ci sera découpé en trois parties, chacune cachées derrière des onglets. Passer d'une partie à l'autre nécessitera du JavaScript.\n\n#### Le composant _Aperçu des articles_ ####\n\n- Même comportement que pour Aperçu des produits.\n\n#### Le composant _Contenu d'un article_ ####\n\n- Pas de JavaScript prévu pour ce composant.\n\n#### Le composant _Liste de Question/Réponse_ ####\n\n- Celui-ci comportera une liste de question/réponse dont la réponse sera initialement cachée. Afficher les réponses nécessitera du JavaScript.\n\n#### Le composant _Formulaire d'envoi d'un email_ ####\n\n- Celui-ci collectera les informations du formulaire pour ensuite les envoyer en AJAX s'il passe les tests de validation. Ceci va nécessiter du JavaScript.\n\n\n\n\n\n## Aménager le fichier Common et les fichiers Specific ##\n\nLe plus simple en terme de structure serait de faire un fichier à plat contenant l'intégralité de notre JavaScript. Il nous faudra de quoi parcourir le DOM aisément aussi j'utiliserai [jQuery] (ce qui pour la structure final n'est pas obligatoire, mais aidera à la compréhension tout au long de l'article).\n\nCette structure ne tiendra pas la route si le site doit grandir, mais c'est une base que je vais vous exposer pour vous expliquer la suite (qui elle tiendra la route !).\n\n_Contenu de **javascript/common.js**_\n\n```js\nvar temp;\nvar timer;\n\nfunction openMenu() { /* Code... */ }\n\nfunction launchSearch() { /* Code... */ }\n\n$(\".main-nav\" /* handler */).bind(/* event */, function () {\n    openMenu();\n    /* ... */\n});\n\n$(\".main-nav\" /* handler */).bind(/* event */, function () { \n    launchSearch();\n    /* ... */\n});\n\n/* ... */\n\n\n/* Aperçu des page */\n\nfunction createSlider() { /* ... */ }\nfunction changeStepSlider() { /* ... */ }\nfunction startAutoSlider() { /* ... */ }\n\ncreateSlider();\nchangeStepSlider();\nstartAutoSlider();\n\n/* ... */\n```\n\nLa plupart des variables se retrouvent dans le contexte d'exécution global ce qui peut faire des conflits. Si vous souhaitez enlever des fonctionnalités, il faut mettre sous commentaire. Segmenter votre code revient à lire entre les lignes etc. Bref ça manque d'une structure.\n\n\n\n\n### Un namespace commun et par page ###\n\nPour commencer, il faut absolument isoler les parties de code pour éviter les conflits, pouvoir utiliser du JavaScript en _Strict Mode_ là où ça nous chante et pouvoir rapidement repérer du code en fonction de sur quelle page il doit intervenir.\n\n\n\n#### Isolation et exécution ####\n\nPour isoler du code en JavaScript, il faut le faire tourner dans des contextes d'exécution différents. Les contextes d'exécution sont créer uniquement à l'intérieur des fonctions. Il va donc falloir créer des fonctions d'isolation mais tout de même organisées à travers un système de namespace de manière à ce que n'importe quelle fonction soit accessible n'importe où dans le code, et sans conflit.\n\n_Contenu de **javascript/common.js** (changement 1)_\n\n```js\n// Création d'un objet unique accessible de partout.\nvar website = website || {}; // Si « website » a déjà été crée dans un précédent fichier on le reprend. Sinon on le créer.\n\n// Création d'un context d'execution isolant.\n// Ce contexte d'exécution représente le code exécuté sur toutes les pages du site.\n(function (publics) { // Tout ce qui devra être accessible en dehors de ce contexte d'execution sera accroché à « publics » et accessible via « website ».\n    \"use strict\"; // Mode Strict pour ce contexte d'execution.\n\n    var privates = {}; // Tout ce qui ne devra pas quitter le contexte d'execution sera accroché à « privates » et accessible uniquement via « privates ».\n\n    /* Attributs / Fonctions privées */\n\n    /* Attributs / Fonctions publiques */\n    \n    publics.init = function () {\n        // Le code ici sera exécutable via « website.init() ».\n    };\n}(website));\n\n// On exécute le code commun sur la page courante.\nwebsite.init();\n```\n\nÀ partir de notre site exemple, créons les fonctionnalités qui seront appelées sur le template home.\n\n\n\n#### Structure publique / privée ####\n\nVoici par exemple ce que pourrait contenir le fichier `common.js` pour notre site s'il n'était composé que de la page au template _home_ et de rien d'autre.\n\n_Contenu de **javascript/common.js** (changement 2)_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* Menu principal */\n    publics.openMenu = function () {\n        // Permet d'ouvrir les sous menus.\n        // ...\n    };\n    publics.search = function () {\n        // Permet de lancer une recherche.\n        // ...\n    };\n    \n    /* Aperçu des pages */\n    privates.initSlider = function () {\n        // Transforme le DOM pour convenir au mécanirme.\n        // Création de barre de progression, de flèches, etc...\n        // ...\n    };\n    privates.changeSlider = function () {\n        // Permet de changer de slide.\n        // ...\n    };\n    privates.manageSliderArrows = function () {\n        // Permet de gérer les flèches.\n        // ...\n    };\n    privates.manageSliderProgressDot = function () {\n        // Permet de gérer la barre d'état.\n        // ...\n    };\n    privates.startSlider = function () {\n        // Permet de faire tourner le slider.\n        // ...\n        privates.timerSlider = setInterval(/* fonction */, 5000);\n        // ...\n    };\n    privates.stopSlider = function () {\n        // Permet d'arrêter le slider.\n        // ...\n        clearInterval(privates.timerSlider);\n        // ...\n    };\n    publics.slider = function () {\n        // Permet de générer le slider.\n        privates.initSlider();\n        privates.manageSliderArrows();\n        privates.manageSliderProgressDot();\n        privates.startSlider();\n    };\n    \n    /* Aperçu des produits */\n    privates.initOverview = function ($component) {\n        // Transforme le DOM pour convenir au mécanirme.\n        // Création de flèches.\n        // ...\n    };\n    privates.defilOverview = function ($component) {\n        // Permet de faire défiler les items.\n        // ...\n    };\n    privates.manageOverviewArrows = function ($component) {\n        // Permet de gérer les flèches.\n        // ...\n    };\n\n    // Ici on spécifie un paramètre « component » car la fonction « overview » est destinée \n    // à fonctionner avec plusieurs composants à savoir les composants « Aperçu des produits » \n    // et « Aperçu des articles » qui ont le même comportement. C'est à l'appel de la fonction\n    // que l'on passera la bonne structure.\n\n    publics.overview = function ($component) {\n        // Permet de générer le slider.\n        privates.initOverview($component);\n        privates.defilOverview($component);\n        privates.manageOverviewArrows($component);\n    };\n\n    /* Formulaire d'inscription à la newsletter */\n    private.validateForm = function (/* formulaire */, callback) {\n        // Permet de vérifier les erreurs du formulaire.\n        // ...\n        callback();\n    };\n    publics.newsletterRegistration = function () {\n        // Enregistre une nouvelle personne à la newsletter.\n        private.validateForm(/* formulaire */, function () {\n            // ...\n        });\n    };\n\n    /* Retour en haut de page */\n    publics.backToTop = function () {\n        // Retour en haut de page.\n        // ...\n    };\n\n    // On initialise les fonction que l'on souhaite utiliser.\n    publics.init = function () {\n        website.openMenu();\n        website.search();\n        website.slider();\n        website.overview();\n        publics.newsletterRegistration();\n        website.backToTop();\n    };\n}(website));\n\n// On execute le code commun sur la page courante.\nwebsite.init();\n```\n\n\n\n\n#### Segmentation ####\n\nSi votre partie common est trop grande, rien ne vous empêche de la scinder en plusieurs parties. Vous pouvez également décrocher une grosse partie de fonction commune à un mécanisme pour en faire un fichier volant plus facilement réutilisable tel quel dans un autre site.\n\n_Contenu de **javascript/common.js** (changement 3)_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    var privates = {};\n\n    /* Menu principal */\n    publics.openMenu = function () { /* ... */ };\n    publics.search = function () { /* ... */ };\n\n    /* Aperçu des produits */\n    privates.initOverview = function ($component) { /* ... */ };\n    privates.defilOverview = function ($component) { /* ... */ };\n    privates.manageOverviewArrows = function ($component) { /* ... */ };\n    publics.overview = function ($component) { /* ... */ };\n    \n    /* Formulaire d'inscription à la newsletter */\n    private.validateForm = function (/* formulaire */, callback) { /* ... */ };\n    publics.newsletterRegistration = function () { /* ... */ };\n\n    /* Retour en haut de page */\n    publics.backToTop = function () { /* ... */ };\n}(website));\n```\n\n_Contenu de **javascript/slider.js**_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    var privates = {};\n\n    /* Aperçu des pages */\n    privates.initSlider = function () { /* ... */ };\n    privates.changeSlider = function () { /* ... */ };\n    privates.manageSliderArrows = function () { /* ... */ };\n    privates.manageSliderProgressDot = function () { /* ... */ };\n    privates.startSlider = function () { /* ... */ };\n    privates.stopSlider = function () { /* ... */ };\n    publics.slider = function () { /* ... */ };\n}(website));\n```\n\n_Contenu de **javascript/run.js**_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    // On initialise les fonction que l'on souhaite utiliser.\n    publics.init = function () {\n        website.openMenu();\n        website.search();\n        website.slider();\n        website.overview();\n        publics.newsletterRegistration();\n        website.backToTop();\n    }\n}(website));\n\n// On execute le code commun sur la page courante.\nwebsite.init();\n```\n\nVous remarquerez par la même occasion que slider.js ressemble étrangement à une sorte de « plugin ». Effectivement il serait possible d'utiliser un plugin [jQuery] à la place de notre propre slider. Bien entendu dans ce cas il serrait rattaché à `$` et non plus à `website`.\n\n\n\n\n### Common vs Specific ###\n\n#### Dans des fichiers séparés ####\n\nNous allons continuer avec un **common** unique et mettre en place le fichier _spécifique_ du template de page `home`.\n\n_Contenu de **javascript/common.js** (changement 4)_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* Menu principal */\n    publics.openMenu = function () { /* ... */ };\n    publics.search = function () { /* ... */ };\n    \n\n    // Aperçu des pages étant uniquement sur la home, il part dans le fichier spécifique home.js.\n\n\n    /* Aperçu des produits */\n    privates.initOverview = function ($component) { /* ... */ };\n    privates.defilOverview = function ($component) { /* ... */ };\n    privates.manageOverviewArrows = function ($component) { /* ... */ };\n    publics.overview = function ($component) { /* ... */ };\n    \n\n    // Le validateur de formulaire va nous resservir pour la page de contact. Il est donc commun à tout le site.\n    // Cependant le JavaScript spécifique à la newsletter est déporté dans « home.js ».\n    // Pour que « validateForm » soit accessible maintenant en dehors de la zone commune, il passe publique.\n    \n    /* Validateur de formulaire */\n    publics.validateForm = function (/* formulaire */, callback) { /* ... */ };\n\n\n    /* Retour en haut de page */\n    publics.backToTop = function () { /* ... */ };\n\n    // On initialise les fonction que l'on souhaite utiliser.\n    publics.init = function () { \n        website.openMenu();\n        website.search();\n    };\n}(website));\n\n// On execute le code commun sur la page courante.\nwebsite.init();\n```\n\nPour le JavaScript spécifique de **home**, on va déporter l'ensemble des fonction dans `website.home`.\n\n_Contenu de **javascript/home.js**_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* Aperçu des pages */\n    privates.initSlider = function () { /* ... */ };\n    privates.changeSlider = function () { /* ... */ };\n    privates.manageSliderArrows = function () { /* ... */ };\n    privates.manageSliderProgressDot = function () { /* ... */ };\n    privates.startSlider = function () { /* ... */ };\n    privates.stopSlider = function () { /* ... */ };\n    publics.slider = function () { /* ... */ };\n\n    /* Formulaire d'inscription à la newsletter */\n    publics.newsletterRegistration = function () {\n        // Enregistre une nouvelle personne à la newsletter.\n        website.validateForm(/* formulaire */, function () {\n            // ...\n        });\n    };\n\n    // On initialise les fonction que l'on souhaite utiliser.\n    publics.init = function () {\n        website.overview($(\".product-overview\"));\n        website.backToTop();\n        website.home.slider();\n        website.home.newsletterRegistration();\n    };\n\n}(website.home = {})); // On accroche le JavaScript de la home dans un namespace (attribut) spécifique.\n\n// On execute le code destiné à la page home.\nwebsite.home.init();\n```\n\nEt la page du template **home** serait alors :\n\n_Contenu de **home.htm** (Changement 1)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'accueil</title>\n\n        <!-- Script de Boot -->\n    </head>\n    <body class=\"home\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"page-overview\"><!-- Zone Aperçu des pages --></nav>\n        <nav class=\"product-overview\"><!-- Zone Aperçu des produits --></nav>\n        <form class=\"newsletter-form\"><!-- Zone Formulaire d'inscription à la newsletter --></form>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n\n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/home.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```\n\nImaginons à présent que nous nous penchions sur le JavaScript spécifique du template des pages article dans le namespace de `website.article`. Nous remarquons vite qu'à part de l'initialisation, cette page ne possède pas de code spécifique pour sa page contrairement à **home**. Voyez plutôt :\n\n_Contenu de **javascript/article.js**_\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    \"use strict\";\n\n    // On initialise les fonctions que l'on souhaite utiliser.\n    publics.init = function () {\n        website.overview($(\".article-overview\"));\n        website.backToTop();\n    };\n\n}(website.article = {})); // On accroche le JavaScript de article dans un namespace (attribut) spécifique.\n\n// On execute le code destiné à la page article.\nwebsite.article.init();\n```\n\nCe template ressemblerait alors à ceci :\n\n_Contenu de **articles/`<title-of-article>`.htm** (Changement 1)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'article</title>\n        ><!-- Script de Boot --></nav>\n    </head>\n    <body class=\"article\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"article-overview\"><!-- Zone Aperçu des articles --></nav>\n        <article class=\"article-content\"><!-- Zone Contenu d'un article --></article>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/article.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```\n\n\n\n#### Dans le fichier common ####\n\nComme vu avec le template **article**, le code est tellement pauvre qu'il peut être placé dans `common.js`, ce qui donnerait quelque chose comme :\n\n_Contenu de **javascript/common.js** (changement 5)_\n\n```js\nvar website = website || {};\n\n// Partie Commune\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* ... */\n\n    /* ... */\n\n    publics.init = function () { /* ... */ };\n}(website));\n\n// Partie article tellement petite qu'il vaut mieux l'inclure dans common.\n(function (publics) {\n    \"use strict\";\n\n    publics.init = function () { /* ... */ };\n}(website.article = {}));\n\n// Lancement des deux parties.\nwebsite.init();\nwebsite.article.init();\n```\n\n**Cependant cela signifirait que le code `website.article.init()` serait exécuté sur toutes les pages alors qu'il n'aurait besoin que d'être exécuté sur article. C'est là que nous allons créer un lanceur de init() conditionnel au template de page qui appel les scripts !**\n\n\n\n\n### Exécution conditionnelle au template ###\n\nQuand le contenu des fichiers spécifiques est séparé et appelé uniquement sur le template de page auquel il est destiné, on est sur que l'exécution de code dans ce fichier ne se ferra pas sur d'autres pages (puisqu'il ne seront pas inclus). Hors ce n'est pas le cas, comme vous pouvez le constater, avec le code spécifique de la page article qui a été inclus dans le fichier de code commun (pour des questions de performance). Il suffit simplement de conditionner l'exécution de tous les `init()` des fichiers spécifiques avec la présence ou non d'une classe associée au template sur lequel il sont sensé s'exécuter. `common.js` deviendrait donc :\n\n_Contenu de **javascript/common.js** (changement 6)_\n\n```js\nvar website = website || {};\n\n// Partie Commune\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* ... */\n\n    /* ... */\n\n    publics.init = function () { /* ... */ };\n}(website));\n\n\n// Partie article tellement petite qu'il vaut mieux l'inclure dans common.\n(function (publics) {\n    \"use strict\";\n\n    publics.init = function () { /* ... */ };\n}(website.article = {}));\n\n\n// On permet de placer les fichiers dans n'importe qu'elle ordre.\n// Cette zone est l'unique zone ou l'on exécutera l'intégralité du JavaScript de tout le site.\n$(function () {\n    \"use strict\";\n\n    // On vérifie quel est le template courant\n    // en vérifiant le nom de la première classe du body.\n    // Effectivement chaque body de chaque template de page à\n    // sa classe qui lui est propre.\n\n    var specific = $(\"body\") // On réclame le body.\n        .attr(\"class\") // On lit ses classes.\n        .split(\" \")[0] // On récupère la première.\n        .replace(/-/g, \"\"); // On la formate en une chaine identique au namespace !\n\n    // Pour la page home, « var specific = \"home\" » et le namespace est « website.home ».\n    // Pour la page article, « var specific = \"article\" » et le namespace est « website.article ».\n    // Pour la page contact-us, « var specific = \"contactus\" » et le namespace est « website.contactus ».\n    \n    // On lance le code commun quoi qu'il arrive.\n    website.init();\n\n    // Ici on lance le code spécifique si un namespace correspondant existe.\n    if (website[specific] !== undefined) {\n        website[specific].init();\n    }\n});\n```\n\nTous les autres `init()` disparaissent des autres fichiers et seul `common.js` est alors habilité à exécuter du code spécifique en fonction du template ou il est appelé.\n\n\n\n\n\n## Structure JavaScript du fil rouge ##\n\nNous y sommes : voici la structure JavaScript utilisée pour le site fil rouge de la partie **Site web de fil rouge** avec les spécificités évoquées dans la partie **Amennager le fichier Common et les fichiers Specific**. Voici ce que nous imaginons ; tous les scripts sont assez petits pour être dans `common.js` sauf `home.js` et `contact-us.js` qui seront des fichiers séparés.\n\nGardez à l'esprit que vous pouvez toujours très bien garder vos JavaScript dans des fichiers séparés peu importe leurs taille et de les associer dans les mêmes fichiers au besoin uniquement pour les versions minifiées.\n\n\n\n\n### common, product, faq, article, run ###\n\n_Contenu de **javascript/common.js** (changement final)_\n\n```js\nvar website = website || {};\n\n/***********/\n/* website */\n/***********/\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* Menu principal */\n    publics.openMenu = function () { /* ... */ };\n    publics.search = function () { /* ... */ };\n    \n    /* Aperçu des produits */\n    privates.initOverview = function ($component) { /* ... */ };\n    privates.defilOverview = function ($component) { /* ... */ };\n    privates.manageOverviewArrows = function ($component) { /* ... */ };\n    publics.overview = function ($component) { /* ... */ };\n\n    /* Validateur de formulaire */\n    publics.validateForm = function (/* formulaire */, callback) { /* ... */ };\n\n    /* Retour en haut de page */\n    publics.backToTop = function () { /* ... */ };\n\n    publics.init = function () { \n        website.openMenu();\n        website.search();\n    };\n}(website));\n\n\n\n/*******************/\n/* website.product */\n/*******************/\n(function (publics) {\n    \"use strict\";\n\n    /* Description d'un produit */\n    publics.switchTab = function () { /* ... */ };\n\n    publics.init = function () {\n        website.overview($(\".product-overview\"));\n        website.product.switchTab();\n    };\n}(website.product = {}));\n\n\n\n/***************/\n/* website.faq */\n/***************/\n(function (publics) {\n    \"use strict\";\n\n    /* Liste de Question/Réponse */\n    publics.slideDown = function () { /* ... */ };\n\n    publics.init = function () {\n        website.faq.slideDown();\n        website.backToTop();\n    };\n}(website.faq = {}));\n\n\n\n/*******************/\n/* website.article */\n/*******************/\n(function (publics) {\n    \"use strict\";\n\n    publics.init = function () {\n        website.overview($(\".article-overview\"));\n        website.backToTop();\n    };\n}(website.article = {}));\n\n\n\n/*******/\n/* Run */\n/*******/\n$(function () {\n    \"use strict\";\n\n    var specific = $(\"body\").attr(\"class\").split(\" \")[0].replace(/-/g, \"\");\n\n    website.init();\n\n    if (website[specific] !== undefined) {\n        website[specific].init();\n    }\n});\n```\n\n_Contenu de **products/`<name-of-product>`.htm** (Changement final)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page de produit</title>\n\n        <!-- Script de Boot -->\n    </head>\n    <body class=\"product\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"product-overview\"><!-- Zone Aperçu des produits --></nav>\n        <article class=\"product-content\"><!-- Zone Description d'un produit --></article>\n\n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```\n\n_Contenu de **articles/`<title-of-article>`.htm** (Changement final)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'article</title>\n\n        <!-- Script de Boot -->\n    </head>\n    <body class=\"article\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"article-overview\"><!-- Zone Aperçu des articles --></nav>\n        <article class=\"article-content\"><!-- Zone Contenu d'un article --></article>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n\n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```\n\n_Contenu de **faq.htm** (Changement final)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page de la faq</title>\n\n        <!-- Script de Boot -->\n    </head>\n    <body class=\"faq\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <section class=\"questions-answers-list\"><!-- Zone Liste de Question/Réponse --></section>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n\n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```\n\n\n\n\n### Home ###\n\n_Contenu de **javascript/home.js**_\n\n```js\nvar website = website || {};\n\n/****************/\n/* website.home */\n/****************/\n(function (publics) {\n    \"use strict\";\n\n    var privates = {};\n\n    /* Aperçu des pages */\n    privates.initSlider = function () { /* ... */ };\n    privates.changeSlider = function () { /* ... */ };\n    privates.manageSliderArrows = function () { /* ... */ };\n    privates.manageSliderProgressDot = function () { /* ... */ };\n    privates.startSlider = function () { /* ... */ };\n    privates.stopSlider = function () { /* ... */ };\n    publics.slider = function () { /* ... */ };\n\n    /* Formulaire d'inscription à la newsletter */\n    publics.newsletterRegistration = function () {\n        website.validateForm(/* formulaire */, function () { /* ... */ });\n    };\n    \n    publics.init = function () {\n        website.overview($(\".product-overview\"));\n        website.backToTop();\n        website.home.slider();\n        website.home.newsletterRegistration();\n    };\n}(website.home = {}));\n```\n\n_Contenu de **home.htm** (Changement final)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page d'accueil</title>\n\n        <!-- Script de Boot -->\n    </head>\n    <body class=\"home\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <nav class=\"page-overview\"><!-- Zone Aperçu des pages --></nav>\n        <nav class=\"product-overview\"><!-- Zone Aperçu des produits --></nav>\n        <form class=\"newsletter-form\"><!-- Zone Formulaire d'inscription à la newsletter --></form>\n        <nav class=\"back-to-top\"><!-- Zone Retour en haut de page --></nav>\n        \n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/home.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```\n\n\n\n\n### contact-us ###\n\n_Contenu de **javascript/contact-us.js**_\n\n```js\nvar website = website || {};\n\n/*********************/\n/* website.contactus */\n/*********************/\n(function (publics) {\n    \"use strict\";\n\n    /* Formulaire d'inscription à la newsletter */\n    publics.sendAMessage = function () {\n        website.validateForm(/* formulaire */, function () { /* ... */ });\n    };\n    \n    publics.init = function () {\n        website.backToTop();\n        website.contactus.sendAMessage();\n    };\n}(website.contactus = {}));\n```\n\n_Contenu de **contact-us.htm** (Changement final)_\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>La page de contact</title>\n        \n        ><!-- Script de Boot --></nav>\n    </head>\n    <body class=\"contact-us\">\n        <nav class=\"main-nav\"><!-- Zone Menu principal --></nav>\n        <form class=\"contact-us-form\"><!-- Zone Formulaire d'envoi d'un email --></form>\n\n        <!-- Scripts de Framework -->\n        <script type=\"text/javascript\" src=\"javascript/contact-us.js\"></script>\n        <script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n    </body>\n</html>\n```", "dates" : { "published" : { "$date" : 1397661780000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "<span>Structurer</span> le <span>JavaScript</span> de son <span>site</span> avec ou sans <span>Framework</span>", "urn" : "structurer-le-javascript-de-son-site-avec-ou-sans-framework" }
{ "__v" : 0, "_id" : { "$oid" : "537dc9a011b6ff1424354acd" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48cf" }, { "$oid" : "5310456355dfd5f7698d48b7" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "5310456355dfd5f7698d48b6" } ], "content" : "Il y a des solutions simples pour gérer avec une feuille CSS l'affichage de différentes langues. Vous vous êtes peut-être déjà confronté à un problème similaire : votre super menu s'affichant en ligne est parfait dans la langue des Vulcains avec une taille de caractère mais malheureusement ne l'ai plus avec la langue des Na'vis. \n\nQuand votre site sera déployé pour des localisations différentes, les feuilles CSS ne pourront alors pas être les mêmes et vous allez maintenir autant de fichiers différents que de localisation ? C'est ce que vous ferriez en faisant un très mauvais choix. Arrêtons-nous 5 minutes pour explorer une piste bien pratique pour assurer la maintenance d'une feuille CSS et de ces différentes localisations.\n\n\n\n\n\n## Oubliez les multiples variantes d'une même feuille CSS ##\n\nUne idée rapide serait de créer une feuille CSS initiale basée sur le rendu de texte « Lorem Ipsum » et de vérifier que son affichage se passe sans accroche. Il conviendrait ensuite de dupliquer cette CSS de base une fois finie et de modifier toutes les propriétés CSS qui divergent pour une autre langue de manière à ce que tout se passe bien également.\n\nMais QUID de la maintenance ? Si maintenant je dois modifier la feuille CSS de base à partir de laquelle mes 30 variantes par localisations ont été crées : je vais devoir réinjecter localisation par localisation toutes les nouvelles modifications en prenant soin de ne pas écraser dans chacune les lignes qui varies en fonction de la langue. Je ne vous parle même pas des conflits.\n\nIl y a également de fortes chances pour qu'au final, prise par groupe, les variantes pour 30 localisations ne soient qu'au nombre de 3 (petits mots, mots moyens et grands mots). Ça fait beaucoup de fichiers inutiles, car redondant, tout ça.\n\n\n\n\n\n## Une feuille CSS unique pour toutes les localisations ##\n\nEt si plutôt que d'éparpiller le code de manière redondante dans autant de fichier qu'il y a de localisation, nous gérions la localisation dans un seul et unique fichier ? Vous allez me dire que chaque localisation aurait alors des lignes qui ne la concerne pas et souffrirait d'un poids de page inutilement élevé ? Vous avez raison, mais faisons abstraction de ce point pour le moment.\n\n\n\n\n### Création avec comme base l'anglais ###\n\nTout commence de la même manière : on crée sa feuille CSS en se basant sur la langue anglaise qui a été fournie comme référence pour la création. Après plusieurs lignes, notre design est fini et les textes s'affichent comme suit :\n\n**HTML5 en anglais**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-us\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Localisation example</title>\n    </head>\n    <body>\n        <div class=\"logo\">\n            <h1><a href=\"javascript:;\" title=\"Return to Home\">Title</a></h1>\n        </div>\n        <nav class=\"main-nav\">\n            <ul>\n                <li><a href=\"javascript:;\" title=\"Home\">Home</a></li>\n                <li><a href=\"javascript:;\" title=\"Products\">Products</a></li>\n                <li><a href=\"javascript:;\" title=\"Care and Advice\">Care and Advice</a></li>\n                <li><a href=\"javascript:;\" title=\"Fun and Games\">Fun and Games</a></li>\n                <li><a href=\"javascript:;\" title=\"News\">News</a></li>\n            </ul>\n        </nav>\n    </body>\n</html>\n```\n\n**CSS3 sans localisation**\n\n```css\n/* Séparateurs haut et bas de l'exemple */\nbody {\n     border-bottom: 1px solid #aaa;\n     border-top: 1px solid #aaa;\n     padding: 8px 0;\n}\n\n/* Maintenir le titre à gauche */\n.logo {\n    position: absolute;\n    font-size: 1.7em;\n    font-weight: bold;\n    padding: 0 16px;\n}\n\n/* Placer la zone menu à droite */\n.main-nav {\n    float: right;\n}\n\n/* Rendre le ul « transparent » */\n.main-nav ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n/* Permettre aux items d'êtres en ligne */\n.main-nav li {\n    display: inline-block;\n    padding-left: 0;\n}\n\n/* Inclure de l'espace à gauche de tous les items sauf le premier */\n.main-nav li + li {\n    padding: 8px 0 8px 11px;\n}\n\n/* Créer un séparateur entre chaque item */\n.main-nav li + li:before {\n    margin-right: 13px;\n    content: \"|\";\n}\n```\n\n**Rendu**\n\n<div class=\"example\">\n\t<div class=\"elogo\">\n\t\t<div class=\"h1\"><a href=\"javascript:;\" title=\"Return to Home\">Title</a></div>\n\t</div>\n\t<div class=\"emain-nav\">\n\t\t<ul>\n\t\t\t<li><a href=\"javascript:;\" title=\"Home\">Home</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Products\">Products</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Care and Advice\">Care and Advice</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Fun and Games\">Fun and Games</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"News\">News</a></li>\n\t\t</ul>\n\t</div>\n</div>\n\n\n\n\n### Localisation en français et problèmes ###\n\nLe marché français souhaite une version du site dans sa langue et fournit donc les traductions pour la localisation. Après injection, notre code HTML ressemble à ça :\n\n**HTML5 en français**\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr-fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>Exemple de localisation</title>\n    </head>\n    <body>\n        <div class=\"logo\">\n            <h1><a href=\"javascript:;\" title=\"Retour à l'accueil\">Titre</a></h1>\n        </div>\n        <nav class=\"main-nav\">\n            <ul>\n                <li><a href=\"javascript:;\" title=\"Accueil\">Accueil</a></li>\n                <li><a href=\"javascript:;\" title=\"Produits\">Produits</a></li>\n                <li><a href=\"javascript:;\" title=\"Soins et Conseils\">Soins et Conseils</a></li>\n                <li><a href=\"javascript:;\" title=\"Divertissements et Jeux\">Divertissements et Jeux</a></li>\n                <li><a href=\"javascript:;\" title=\"Actualités\">Actualités</a></li>\n            </ul>\n        </nav>\n    </body>\n</html>\n```\n\n**et CSS3 identique à la précédente feuille**\n\n**Rendu**\n\n<div class=\"example\">\n\t<div class=\"elogo\">\n\t\t<div class=\"h1\"><a href=\"javascript:;\" title=\"Retour à l'accueil\">Titre</a></div>\n\t</div>\n\t<div class=\"emain-nav\">\n\t\t<ul>\n\t\t\t<li><a href=\"javascript:;\" title=\"Accueil\">Accueil</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Produits\">Produits</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Soins et Conseils\">Soins et Conseils</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Divertissements et Jeux\">Divertissements et Jeux</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Actualités\">Actualités</a></li>\n\t\t</ul>\n\t</div>\n</div>\n\nEt là votre mise en page est mise à mal. Une première solution serait de forcer la traduction à ne pas avoir de caractères en plus que la version anglaise. Parfois c'est envisageable... et parfois pour certaine langue c'est impossible.\n\n> _Note : j'ai volontairement forcé la largeur du composant à 560px (désactivation de la responsivité) pour que vous puissiez constater le problème quelque soit votre périphérique d'affichage._\n\n\n\n\n### Localisation de la feuille CSS ###\n\nC'est là que vous vous demandez s'il ne va pas falloir maintenir une feuille différente qui sera chargée ou non sur la page en fonction de la localisation. Le problème est que vous allez par exemple faire une feuille différente pour la localisation française et espagnole alors que pour un peu les ajustements seront identiques pour ces deux localisations. Puis, par la suite, le texte va changer et vous ferez la chasse aux ajustements à travers tous vos fichiers.\n\nPour ma part, je vous propose de gérer toutes les localisations dans les CSS initiales ; par exemple tout en bas. Effectivement, quand le site sera affiché dans telle ou telle langue il y aura des instructions chargées inutilement. Mais dans la masse de propriétés « non localisée » la taille devient négligeable.\n\nModifions donc notre feuille CSS initiale :\n\n```css\n/*-------------------*\\\n    $SOMMAIRE\n\\*-------------------*/\n\n/**\n * SOMMAIRE..........c'est moi !\n * STANDARD..........les propriétés CSS de la page.\n * LOCALISATION......les propriétés variants en fonction de la langue.\n */\n\n\n\n\n\n/*-------------------*\\\n    $STANDARD\n\\*-------------------*/\n\n/* Séparateurs haut et bas de l'exemple */\nbody {\n     border-bottom: 1px solid #aaa;\n     border-top: 1px solid #aaa;\n     padding: 8px 0;\n}\n\n/* Maintenir le titre à gauche */\n.logo {\n    position: absolute;\n    font-size: 1.7em;\n    font-weight: bold;\n    padding: 0 16px;\n}\n\n/* Placer la zone menu à droite */\n.main-nav {\n    float: right;\n}\n\n/* Rendre le ul « transparent » */\n.main-nav ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n/* Permettre aux items d'êtres en ligne */\n.main-nav li {\n    display: inline-block;\n    padding-left: 0;\n}\n\n/* Inclure de l'espace à gauche de tous les items sauf le premier */\n.main-nav li + li { /*** localisé ***/\n    padding: 8px 0 8px;\n    padding-left: 11px; /* Propriété sortie pour être surchargée seule plus loin */\n}\n\n/* Créer un séparateur entre chaque item */\n.main-nav li + li:before {\n    margin-right: 13px;\n    content: \"|\";\n}\n\n\n\n\n/*-------------------*\\\n    $LOCALISATION\n\\*-------------------*/\n.main-nav li + li:lang(fr) {\n    padding-left: 4px;\n}\n.main-nav li + li:before:lang(fr) {\n    margin-right: 6px;\n}\n```\n\n**Rendu**\n\n<div class=\"example fr\">\n\t<div class=\"elogo\">\n\t\t<div class=\"h1\"><a href=\"javascript:;\" title=\"Retour à l'accueil\">Titre</a></div>\n\t</div>\n\t<div class=\"emain-nav\">\n\t\t<ul>\n\t\t\t<li><a href=\"javascript:;\" title=\"Accueil\">Accueil</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Produits\">Produits</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Soins et Conseils\">Soins et Conseils</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Divertissements et Jeux\">Divertissements et Jeux</a></li>\n\t\t\t<li><a href=\"javascript:;\" title=\"Actualités\">Actualités</a></li>\n\t\t</ul>\n\t</div>\n</div>\n\n\n\n\n\n### Le pseudo-sélecteur `:lang()` et l'attribut `lang` ###\n\nGrâce au pseudo-sélecteur `:lang()` vous pouvez conditionnellement appliquer du style à un élément HTML en HTML5 en fonction du contenu de l'attribut `lang` de la balise `<html>`.\n\nDans le cas de figure ci-dessous :\n\n```html\n<html lang=\"fr-fr\">\n    ...\n    <div class=\"content\">Texte</div>\n    ...\n</html>\n```\n\nles sélecteurs 1 et 2 ci-après seront appliqués, mais pas le 3 :\n\n```css\n.content:lang(fr-fr) {\n    color: #ccc;\n}\n\n.content:lang(fr) {\n    font-weight: bold;\n}\n\n.content:lang(en-us) {\n    color: #f00;\n}\n```\n\n\n\n## Support xHTML/HTML4 ou CSS 2.1 ##\n\nCette technique peut également être utilisée sans le pseudo-sélecteur `:lang()` qui a l'avantage de matcher avec « fr-fr » si on spécifie simplement « fr » mais de ne pas fonctionner tout cours avec les navigateurs les plus ~~inutiles~~ vieux.\n\n### Seulement avec du CSS 2.1 ###\n\nIl convient de remplacer `:lang(fr-fr)` en fin d'instruction par `[lang=fr-fr]` en début. Ainsi le code précédent devient :\n\n```css\n[lang=fr-fr] .content {\n    color: #ccc;\n}\n\n[lang=fr-fr] .content {\n    font-weight: bold;\n}\n\n[lang=en-us] .content {\n    color: #f00;\n}\n```\n\n\n\n### Sans HTML5 ###\n\nL'idée est ici de remplacer `<html lang=\"fr-fr\">` qui n'est pas valide xHTML/HTML4 par `<html class=\"fr-fr\">` et de manager côté Back-end la présence ou non de cette classe en fonction de la langue. Le code CSS devient alors :\n\n```css\n.fr-fr .content {\n    color: #ccc;\n}\n\n.fr-fr .content {\n    font-weight: bold;\n}\n\n.en-us .content {\n    color: #f00;\n}\n```\n\n> _Note : n'hésitez pas, même en HTML5, à ajouter cette classe pour améliorer les performances de vos sélecteurs._\n\n\n\n\n\n## Le mot de la fin ##\n\nAu final vous maintiendrez beaucoup moins de fichier et pourrez gérer les différentes tailles de contenu par groupe de pays !\n\n```css\n.header:lang(es),\n.header:lang(de),\n.header:lang(fr) {\n    /* Propriété communes */\n}\n.header:lang(us) {\n    /* Propriété communes */\n}\n.content:lang(de),\n.content:lang(fr) {\n    /* Propriété communes */\n}\n.content:lang(es),\n.content:lang(us) {\n    /* Propriété communes */\n}\n.footer:lang(fr) {\n    /* Propriété communes */\n}\n.footer:lang(de),\n.footer:lang(es),\n.footer:lang(us) {\n    /* Propriété communes */\n}\n```", "dates" : { "published" : { "$date" : 1383230820000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".example {\npadding: 8px 0;\nborder-top: 1px solid #aaa;\nborder-bottom: 1px solid #aaa;\nbackground-color: #fff;\n}\n.example .h1 {\nfont-size: 28px;\nfont-size: 2.8rem;\nmargin-top: 8px;\nfont-family: Lato,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n}\n.dark .example {\nbackground-color: #000;\n}\n.example:after {\nclear: both;\ncontent: \"\";\ndisplay: block;\n}\n.example .elogo {\nposition: absolute;\nfont-size: 1.7em;\nfont-weight: bold;\npadding: 0 16px;\n}\n.example .emain-nav {\nfloat: right;\n}\n.example .emain-nav ul {\nlist-style: none;\nmargin: 0;\npadding: 0;\n}\n.example .emain-nav li {\ndisplay: inline-block;\npadding-left: 0;\n}\n.example .emain-nav li + li {\npadding: 8px 0 8px;\npadding-left: 11px;\n}\n.example .emain-nav li + li:before {\nmargin-right: 13px;\ncontent: \"|\";\n}\n.fr.example .emain-nav li + li:before {\nmargin-right: 6px;\n}\n.fr.example .emain-nav li + li {\npadding-left: 4px;\n}\n\n/*@media (max-width: 950px) {\n\t.example .emain-nav li:nth-child(6),\n\t.example .emain-nav li:nth-child(5),\n\t.example .emain-nav li:nth-child(3) {\n\t\tdisplay:none;\n\t}\n\t.example {\n\t\twidth: 360px;\n\t}\n}*/\n\n.example {\n\twidth: 560px;\n}", "title" : "Bien <span>gérer</span> la <span>localisation</span> des sites en <span>CSS3</span> et <span>HTML5</span>", "urn" : "bien-gerer-la-localisation-des-sites-en-css3-et-html5" }
{ "__v" : 0, "_id" : { "$oid" : "537f05c76012d1b53d2bdba9" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c1" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48cd" } ], "content" : "Quand une page web est chargée, les éléments externes à celle-ci sont appelés tout au long de son chargement pour permettre au navigateur d'afficher le résultat visuel final. Cela prend du temps, et certains chargements bloquent le rendu alors que d'autres non. D'autres encore sont ignorés tant qu'une action de la part de l'utilisateur n'a pas été effectuée.\n\nPour bien comprendre et manager ses chargements de page, je vous propose de comprendre une liste de comportement au chargement des ressources pour Chrome, Safari, Firefox, IE et Opera.\n\n\n\n\n\n## Les images ##\n\n> Est-ce qu'une image dans la balise `<img>` qui ne doit pas apparaître au rendu déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<div style=\"display: none\">\n    <img src=\"image.png\" alt\"Image\">\n</div>\n```\n\n> **`Oui.`** Les navigateurs téléchargent les images indépendamment des styles CSS appliqués, [cela fait parti de la spécification HTML](http://www.whatwg.org/specs/web-apps/current-work/multipage/edits.html#the-img-element).\n\n> Ce comportement est la bête noire de pas mal d'implémentation JavaScript pour adapter les images, car l'image est demandée avant même que le JavaScript n'est le temps d'en appeler une autre via la propriété `src` ou même d'en obtenir sa taille.\n\n\n-----\n\n\n## Les backgrounds ##\n\n### Inclues dans un élément non affiché ###\n\n> Est-ce qu'un élément possédant une image de background et inclus dans un élément invisible déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Non    | Non     | Non | Non    | Non   |\n\n**Exemple :**\n\n```html\n<div style=\"display: none\">\n    <div style=\"background: url('image.png')\"></div>\n</div>\n```\n\n> *`Non.`* Les images de background en CSS diffèrent des balises `img`, elles ne sont pas réclamées au moment ou le code HTML est analysé.\n\n> Si un élément est en `display: none`, calculer les styles des éléments enfant est une perte de temps car il n'y aura aucun impact sur le rendu du document, ainsi les images de background pour les éléments enfants cachés ne sont jamais calculées, ni même téléchargées.\n\n\n\n### Sur un élément non affiché ###\n\n> Est-ce qu'un élément possédant une image de background et non visible déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | **Non** | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<div style=\"background: url('image.png'); display: none\"></div>\n```\n\n> **`Pas tout le temps.`** Les navigateurs font parfois des choses différentes les un des autres !\n\n> Donc ici la `<div>` n'est pas rendu, mais il est nécessaire que le style soit analysé pour s'en apercevoir. IE, Safari, Opera et Chrome lance la demande en file d'attente aussitôt qu'ils ont analysé les styles CSS.\n\n\n\n### Sur un élément transparent ###\n\n> Est-ce qu'un élément possédant une image de background et transparent déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<div style=\"background: url('image.png'); visibility: hidden\"></div>\n```\n\n> **`Oui.`** Les éléments avec un `visibility: hidden` prennent toujours de la place sur la page, pour que cela soit possible, cette place à besoin d'être calculée. Et ce mécanisme lance une requête de chargement.\n\n\n\n### Inclus dans un élément transparent ###\n\n> Est-ce qu'un élément possédant une image de background et inclus dans un élément transparent déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<div style=\"visibility: hidden\">\n    <div style=\"background: url('image.png')\"></div>\n</div>\n```\n\n> **`Oui.`** Même punition que l'élément du dessus.\n\n\n-----\n\n\n## Les images via JavaScript ##\n\n> Créer une balise image et lui affecter une valeur dans sa source déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```javascript\nvar img = document.createElement('img');\nimg.src = 'image.png';\n```\n\n> **`Oui.`** L'élément `img` n'attend tout simplement pas pour faire ses requêtes.\n\n> La source d'une `img` est [téléchargée aussitôt que l'attribut `src` est (re)défini](http://www.whatwg.org/specs/web-apps/current-work/multipage/edits.html#the-img-element). Il n'y a pas besoin pour cela que l'image soit insérée dans le document.\n\n> Si vous avez besoin de déclencher rapidement une requête http et que vous vous moquez de la réponse le plus rapide est de faire `new Image().src = <url>;`.\n\n\n-----\n\n\n## Les backgrounds via JavaScript ##\n\n### Création simple ###\n\n> Créer une balise et lui affecter une valeur de background dans son style déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Non    | Non     | Non | Non    | Non   |\n\n**Exemple :**\n\n```javascript\nvar div = document.createElement('div');\ndiv.style.background = \"url('image.png')\";\n```\n\n> *`Non.`* De la même manière que dans le document HTML, les images de background ne sont pas téléchargées tant que leurs styles ne sont pas résolu. Cela n'arrive pas tant que l'image n'est pas insérée dans le document.\n\n\n\n### Injection puis retrait ###\n\n> Créer une balise et lui affecter une valeur de background dans son style, puis l'ajouter au DOM et le retirer, déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Non    | Non     | Non | Non    | Non   |\n\n**Exemple :**\n\n```javascript\nvar div = document.createElement('div');\ndiv.style.background = \"url('image.png')\";\ndocument.body.appendChild(div);\n/* ... du code ... */\ndocument.body.removeChild(div);\n```\n\n> *`Non.`* En effet, la nature mono-thread de JavaScript et du DOM signifie qu'un élément est ajouté et retiré avant même que le navigateur n'ai besoin de se soucier d'en faire le rendu.\n\n> *Note : Le code ci-dessous déclenche quand même une requête HTTP sous IE à cause de* `div.innerHTML`*.*\n\n> ```js\nvar div = document.createElement('div');\ndiv.style.background = \"url('image.png')\";\ndocument.body.appendChild(div);\n/* ... du code ... */\ndiv.innerHTML;\n/* ... du code ... */\ndocument.body.removeChild(div);\n```\n\n\n\n### Injection puis retrait avec certaines fonctions ###\n\n> Créer une balise et lui affecter une valeur de background dans son style, puis l'ajouter au DOM et le retirer tout en demandant entre les deux une information sur la balise, déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```js\nvar div = document.createElement('div');\ndiv.style.background = \"url('image.png')\";\ndocument.body.appendChild(div);\n/* ... du code ... */\ndiv.offsetWidth;\n/* ... du code ... */\ndocument.body.removeChild(div);\n```\n\n> **`Oui.`** Pour récupérer la taille d'un élément dans le navigateur, il faut résoudre ses styles et calculer leurs affichages. Comme vu précédemment, cela induit une requête.\n\n\n-----\n\n\n## Les scripts ##\n\n### Avec un type inconnu ###\n\n> Est-ce qu'un fichier dans la balise `<script>` avec un type MIME inconnu déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE      | Safari | Opera |\n|:------:|:-------:|:-------:|:------:|:-----:|\n| Non    | **Oui** | **Oui** | Non    | Non   |\n\n**Exemple :**\n\n```js\n<script src=\"script.js\" type=\"foo/bar\"></script>\n```\n\n> *`Pas toujours.`* Cela induit une requête dans Firefox et IE. Aucun des navigateurs n'est censé exécuter des scripts dont le type est inconnu, mais Firefox et IE vont télécharger le script indépendamment de son type.\n\n> [La specification HTML](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#script-processing-prepare) dit aux navigateurs d'ignorer les scripts avec un type non supporté.\n\n> *Note : Bien que le type* `text/html` *soit supporté par les navigateurs, cela n'est pas le cas via la balise* `<script>`*.*\n\n> *Note 2 : l'attribut ancien* `language` *suit le même procéder dans les 5 navigateurs.*\n\n\n\n### Sans type ###\n\n> Est-ce qu'un fichier dans la balise `<script>` sans type MIME déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```js\n<script src=\"script.js\"></script>\n```\n\n> **`Oui.`** Si un script n'a pas d'attribut `type` ou `language`, `text/javascript` est utilisé. C'est un comportement commun des navigateurs [qui fait parti de la specification HTML](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#script-processing-prepare).\n\n\n-----\n\n\n## Chargement dynamique de scripts ##\n\n### Création simple ###\n\n> Créer un script et lui affecter un fichier déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE      | Safari | Opera |\n|:------:|:-------:|:-------:|:------:|:-----:|\n| Non    | Non     | **Oui** | Non    | Non   |\n\n**Exemple :**\n\n```js\nvar script = document.createElement('script');\nscript.src = 'script.js';\n```\n\n> *`Pas toujours.`* Ce que dit [la specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#dfnReturnLink-0) :\n\n> > Quand un élément script... rencontre l'un des événements listés... celui-ci doit être synchronisé quand l'élément sera inséré dans le document...\n\n> IE ne suit pas les règles en effectuant la requête avant que le script ne soit inséré dans le document, bien que cela permette de télécharger un script et l'analyser de manière séparé.\n\n\n\n### Injection puis retrait ###\n\n> Créer un script et lui affecter un fichier, puis l'ajouter au DOM et le retirer, déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```js\nvar script = document.createElement('script');\nscript.src = 'script.js';\ndocument.body.appendChild(script);\ndocument.body.removeChild(script);\n```\n\n> **`Oui.`** Regardons de nouveau [la specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#dfnReturnLink-0) :\n\n> > Quand un élément script... rencontre l'un des événement listé... celui-ci doit être synchronisé quand l'élément sera inséré dans le document...\n\n> La préparation du script est synchrone, elle n'attend pas la fin de l'exécution du code.\n\n\n-----\n\n\n## Chargement dynamique de fichiers ##\n\n### Création simple ###\n\n> Créer une balise `link` et lui affecter un fichier déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Non    | Non     | Non | Non    | Non   |\n\n**Exemple :**\n\n```js\nvar link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.href = 'style.css';\n```\n\n> *`Non.`* Pas de requête cette fois ci, en accord avec [la specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#link-type-stylesheet) :\n\n> > Le moment approprié pour obtenir une ressource externe via un `link` créé est le moment où celui-ci est inséré dans le document...\n\n> ...donc on ne s'attend pas à voir partir une requête tant que l'élément n'est pas inséré dans le DOM.\n\n\n\n### Injection puis retrait ###\n\n> Créer une balise `link` et lui affecter un fichier, puis l'ajouter au DOM et le retirer, déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```js\nvar link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.href = 'style.css';\ndocument.body.appendChild(link);\ndocument.body.removeChild(link);\n```\n\n> **`Oui.`** Le style par défaut donné à une ressource `link` est `text/css` donc ne pas mettre de `type` n’empêche pas la requête d'être faites.\n\n> Aussi, comme pour les scripts, les stylesheets requièrent une action synchrone. Retirer l'élément juste après n’empêche pas la requête d'être faites.\n\n\n\n### Avec un mauvais type ###\n\n> Créer une balise `link` avec un mauvais type MIME et lui affecter un fichier déclenche une requête HTTP ?\n\n| Chrome  | Firefox | IE  | Safari  | Opera   |\n|:-------:|:-------:|:---:|:-------:|:-------:|\n| **Oui** | Non     | Non | **Oui** | **Oui** |\n\n**Exemple :**\n\n```js\nvar link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.href = 'style.css';\nlink.type = 'text/javascript';\ndocument.body.appendChild(link);\n```\n\n> *`Pas toujours.`* La spécification ne couvre pas ce qui arrive quand un content-type non supporté par `link` est mentionné. Chrome, Opera et Safari font tout de même la requête ici, bien qu'ils n'analysent même pas le style...\n\n\n-----\n\n\n## Les iframes ##\n\n### Sans rien ###\n\n> Est-ce qu'une balise `<iframe>` déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera   |\n|:------:|:-------:|:---:|:------:|:-------:|\n| Non    | Non     | Non | Non    | **Oui** |\n\n**Exemple :**\n\n```html\n<iframe></iframe>\n```\n\n> *`Pas toujours.`* La [specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-iframe-element.html#process-the-iframe-attributes) dit à propos d'une iframe sans `src` :\n\n> > Si un élément n'a pas d'attribut `src` de spécifié... simplement levé un événement nommé « load » sur l'élément iframe.\n\n> Seul Opera lance une requête sur la page « about:blank ».\n\n\n\n#### Avec une source vide ####\n\n> Est-ce qu'une balise `<iframe>` avec une source vide déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera   |\n|:------:|:-------:|:---:|:------:|:-------:|\n| Non    | Non     | Non | Non    | **Oui** |\n\n**Exemple :**\n\n```html\n<iframe src=\"\"></iframe>\n```\n\n> *`Pas toujours.`* Continuons avec la [specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-iframe-element.html#process-the-iframe-attributes) :\n\n> > De plus si la valeur de l'attribut est une string vide l'url sera `about:blank`.\n\n> Aucune requête n'est faites, sauf pour Opera.\n\n\n\n### Avec un identificateur de fragment (hash) ###\n\n> Est-ce qu'une balise `<iframe>` avec un identificateur de fragment déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE      | Safari | Opera |\n|:------:|:-------:|:-------:|:------:|:-----:|\n| Oui    | **Non** | **Non** | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<iframe src=\"#\"></iframe>\n```\n\n> **`Pas toujours.`** Lisons encore plus de [specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-iframe-element.html#process-the-iframe-attributes) :\n\n> > De plus, résoudre la valeur de la source relativement à la source de l'iframe parent.\n\n> On s'attend donc à une requête, cependant...\n\n> > Si il existe un ancêtre dans le contexte du document actif à cette adresse il faut ignorer l'identificateur de fragment.\n\n> Et donc il ne devrait pas y avoir de requête à cet endroit. Finalement personne ne fait ce qu'il faut sur ce point.\n\n\n\n### Avec une chaîne GET ###\n\n> Est-ce qu'une balise `<iframe>` avec une chaîne GET déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<iframe src=\"?\"></iframe>\n```\n\n> **`Oui.`** `?` est ure url différente aussi cela lève une requête.\n\n\n-----\n\n\n## Changer le DOM avec `document.write` ##\n\n### Commentaires ###\n\n> Ne pas ouvrir un commentaire directement mais l'écrire en script autour d'une balise image déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE      | Safari | Opera |\n|:------:|:-------:|:-------:|:------:|:-----:|\n| Non    | **Oui** | **Oui** | Non    | Non   |\n\n**Exemple :**\n\n```html\n<script>document.write('<'+'!--')</script>\n<img src=\"image.png\">\n-->\n```\n\n> *`Pas toujours.`* Si un commentaire HTML est écrit, le `img` à l'intérieur n'est jamais analysé et donc il n'y a aucune requête. Cependant, plusieurs navigateurs améliore leur performances en regardant plus en avant. Si ils tombent sur un script inline, au lieu de s'arrêter ils continuent afin de gagner en temps, quitte à faire de l'affichage inutile (car inhibé par le script précédent). On appel cela de l'[analyse spéculative](https://developer.mozilla.org/en-US/docs/HTML/Optimizing_Your_Pages_for_Speculative_Parsing).\n\nFirefox et IE continue d'analyser le document pendant que le script est en cours d'exécution. Ils vont donc lancer une requête en rencontrant l'image. Quand le script à fini son analyse il va inhiber la balise `img` car un commentaire HTML se sera inséré entre temps. Malheureusement la requête aura déjà été faites.\n\nChrome fait également de l'analyse spéculative pour les scripts externes mais pas dans le cas de script inline.\n\n\n\n### Commentaires asynchrones ###\n\n> Ne pas ouvrir un commentaire directement mais l'écrire en script asynchrone autour d'une balise image déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE      | Safari | Opera |\n|:------:|:-------:|:-------:|:------:|:-----:|\n| Non    | **Oui** | **Oui** | Non    | Non   |\n\n**Exemple :**\n\n```html\n<script async>document.write('<'+'!--')</script>\n<img src=\"image.png\">\n-->\n```\n\n> *`Pas toujours.`* Même en `async` les scripts inline sont bloquant comme je l'ai déjà [expliqué dans un précédent billet](http://blog.lesieur.name/differences-entre-async-et-defer-en-html5/#pour-les-scripts-inline).\n\n> *Note 2 : cela est la même chose en ce qui concerne l'attribut * `defer`*.*\n\n\n-----\n\n\n## Recalcule d'affichage de page ##\n\n#### Avec un disperseur d’événement ####\n\nRetailler la fenêtre avec une demande de rechargement par dispersement au redimensionnement déclenche une requête HTTP ?\n\n| Chrome  | Firefox | IE      | Safari  | Opera   |\n|:-------:|:-------:|:-------:|:-------:|:-------:|\n| **Oui** | Non     | **Oui** | **Oui** | **Oui** |\n\n**Exemple :**\n\n```javascript\nwindow.onresize = function() {\n  window.location.reload();\n};\nvar event = document.createEvent('Event');\nevent.initEvent('resize', false, false);\nwindow.dispatchEvent(event);\n```\n\n> *`Pas toujours.`* Disperser l’événement `resize` déclenche un rechargement de page ? Non, cela est une [violation de la specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#dom-location-reload).\n\n> > Quand une méthode `reload()` est invoquée... Si l'exécution courante est un événement dispersé de redimensionnement... abandonner cette étape.\n\n> Tout le monde à faux sauf Firefox cette fois.\n\n> *Note : Le code ci-dessous déclenche bien une requête chez tout le monde.*\n\n> ```js\nwindow.onresize = function() {\n  window.location.reload();\n};\nwindow.onresize();\n```\n\n\n-----\n\n\n## Chargement de police ##\n\n### Seulement avec `@font-face` ###\n\nLa simple déclaration d'une police déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Non    | Non     | Non | Non    | Non   |\n\n**Exemple :**\n\n```html\n<style>\n  @font-face {\n    font-family: 'myfont';\n    src: url('font.woff');\n    unicode-range: U+61-7A; /* lowercase a-z */\n  }\n</style>\n```\n\n> *`Non.`* Pas de requête si on ne fait que la déclarer.\n\n\n\n### Avec application CSS ###\n\nLa déclaration d'une police appelé depuis un sélecteur CSS déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Non    | Non     | Non | Non    | Non   |\n\n**Exemple :**\n\n```html\n<style>\n  @font-face {\n    font-family: 'myfont';\n    src: url('font.woff');\n    unicode-range: U+61-7A; /* lowercase a-z */\n  }\n  p { font-family: myfont, sans-serif; }\n</style>\n```\n\n> *`Non.`* Pas de requête si on ne fait que la déclarer et l'associer.\n\n\n\n### Avec présence d'une balise ###\n\nLa déclaration d'une police appelé depuis un sélecteur CSS sur une balise présente déclenche une requête HTTP ?\n\n| Chrome | Firefox | IE  | Safari | Opera |\n|:------:|:-------:|:---:|:------:|:-----:|\n| Oui    | Oui     | Oui | Oui    | Oui   |\n\n**Exemple :**\n\n```html\n<style>\n  @font-face {\n    font-family: 'myfont';\n    src: url('font.woff');\n    unicode-range: U+61-7A; /* lowercase a-z */\n  }\n  p { font-family: myfont, sans-serif; }\n</style>\n<p></p>\n```\n\n> **`Oui.`** Effectivement si une balise vide a une police d'appliquée, une requête est lancée même si visuellement elle ne rend rien.\n\n\n-----\n\n\n## Conclusion ##\n\nCe qu'il ressort c'est que l'on ne peut pas se fier aux spécifications pour prévoir avec certitude le comportement de chaque navigateur, mais ça, ça n'étonne personne ! Dans le domaine des requêtes HTTP il n'y a aucun bon élève.", "dates" : { "published" : { "$date" : 1403177400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".text table {\nwidth: 100%\n}", "title" : "<span>Maîtriser</span> les <span>requêtes</span> au <span>chargement</span> d'une page <span>web</span>", "urn" : "maitriser-les-requetes-au-chargement-d-une-page-web" }
{ "__v" : 0, "_id" : { "$oid" : "53a44667252cf3af329c2664" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48ca" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48ba" } ], "content" : "Il y a quelque temps, j'expliquais qu'il était difficile d'obtenir [un travail Front-end de qualité avec des Frameworks CSS](http://blog.lesieur.name/bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite/) HTML-Driven. Le gros reproche que je fais à ces Frameworks est de prendre le contre pied de l'approche du W3C qui met tout en œuvre avec HTML5 et CSS3 pour complètement effacer toute trace de design dans l'architecture HTML et la rendre structurellement sémantique.\n\nUn Framework CSS c'est vraiment pratique pour ne pas trop se mouiller et gagner du temps parait-il. On me dit d'ailleurs souvent que les systèmes de Grid c'est bien pratique. Ce que j'en pense pour ma part c'est qu'on ne peut jamais sortir des chemins battu d'un Framework lourd à moins de parfaitement connaître les mécanismes de celui-ci pour le contrer. Et dès lors qu'on est assez aguerrit pour comprendre des mécanismes menant à des « [abstractions qui fuient](http://french.joelonsoftware.com/Articles/LeakyAbstractions.html) », on est alors assez aguerrit pour s'en passer.\n\n**Sachez que l'on peut facilement se passer de Framework pour gérer une grille Responsive Web Design propre et maintenable en évitant ainsi d'horribles codes comme `<div class=\"header col-xs-12 col-sm-6 col-sm-push-6 text-right-sm bg-info\">` tout en restant maître de ce que l'on fait.** [Cette page CodePen en est un exemple](http://codepen.io/Haeresis/pen/wkIiq).\n\nSuivez-moi, je vais vous montrer !\n\n\n\n\n\n## Création d'une structure HTML ##\n\nEntrons dans le vif du sujet. Pour commencer, nous allons nous attacher à comprendre comment manager facilement notre grille via une feuille CSS, aussi la structure sera pour le moment plate et non sémantique. Là voici :\n\n**HTML**\n\n```html\n<html>\n    <head>\n        <title>Responsive and Semantic CSS Grid CSS-Driven</title>\n        <link rel=\"stylesheet\" href=\"common.css\">\n    </head>\n    <body>\n        <div class=\"page\">\n            <div class=\"brand\"></div>\n            <div class=\"slogan\"></div>\n            <div class=\"title\"></div>\n            <div class=\"main-nav\"></div>\n            <div class=\"overview\"></div>\n            <div class=\"anchor-nav\"></div>\n            <div class=\"main\"></div>\n            <div class=\"call-to-action\"></div>\n            <div class=\"call-to-action\"></div>\n            <div class=\"call-to-action\"></div>\n            <div class=\"call-to-action\"></div>\n            <div class=\"call-to-action\"></div>\n            <div class=\"call-to-action\"></div>\n            <div class=\"secondary-nav\"></div>\n            <div class=\"utils\"></div>\n            <div class=\"legals\"></div>\n        </div>\n    </body>\n</html>\n```\n\n\n\n\n\n## Mise en place de la grille CSS ##\n\nComme vous pouvez le constater pour le moment, la structure HTML est vide de contenu. Nous allons l'injecter pendant nos tests unitaires via la CSS.\n\n\n\n### Tests visuels ###\n\nNous allons commencer par habiller l'exemple précédent avec un style de test pour bien vérifier que la construction de la grille se fait sans soucis. C'est une étape non nécessaire mais qui aidera grandement à commenter l'architecture de la page facilement. Injectons ce code voué à être commenté en dernier lieu :\n\n**CSS (dans common.css)**\n\n```css\n.brand:before,\n.slogan:before,\n.title:before,\n.main-nav:before,\n.overview:before,\n.anchor-nav:before,\n.main:before,\n.call-to-action:before,\n.secondary-nav:before,\n.legals:before,\n.utils:before {\n   width: 100%;\n   display: inline-block;\n}\n\n.brand:before {\n    content: \"Brand\";\n   background-color: rgba(0, 0, 150, 0.5);\n}\n.slogan:before {\n   content: \"Slogan\";\n   background-color: rgba(150, 150, 0, 0.5);\n}\n.title:before {\n   content: \"Title\";\n   background-color: rgba(255, 0, 0, 0.2);\n}\n.main-nav:before {\n   content: \"Nav\";\n   background-color: rgba(0, 255, 0, 0.2);\n}\n.overview:before {\n   content: \"Overview\";\n   background-color: rgba(150, 0, 0, 0.5);\n}\n.anchor-nav:before {\n   content: \"Anchor nav\";\n   background-color: rgba(0, 0, 255, 0.2);\n}\n.main:before {\n   content: \"Main\";\n   background-color: rgba(255, 255, 0, 0.2);\n}\n.call-to-action:before {\n   content: \"Call to action\";\n   background-color: rgba(255, 0, 255, 0.2);\n}\n.secondary-nav:before {\n   content: \"Secondary nav\";\n   background-color: rgba(0, 150, 0, 0.5);\n}\n.legals:before {\n   content: \"Legals\";\n   background-color: rgba(0, 255, 255, 0.2);\n}\n.utils:before {\n   content: \"Utils\";\n   background-color: rgba(150, 0, 150, 0.5);\n}\n```\n\n\n\n### Grille de base ###\n\nC'est ici que nous allons définir notre ensemble de grilles existantes sur le site web. Pour notre exemple nous n'allons créer qu'une grille de 12 colonnes.\n\n\n#### Rappel d'une grille dans un Framework CSS ####\n\nLa grille consiste a diviser l'espace alloué à l'affichage du site en 12 colonnes dans notre exemple. Chaque partie de la grille pourra donc être large de un douzième (1/12) de la taille d'affichage à douze douzième (12/12). Si un composant fait 8 colonnes et que celui qui le suit en fait 4, ils tiendront l'un à côté de l'autre. Par contre, si le second en fais 8 également, il s'affichera à la ligne, car ne pouvant pas rentrer à côté.\n\n#### À vos calculatrices ####\n\nSi on estime qu'une colonne faisant 100% de la ligne vaut 12 unités alors :\n\n- 1 unité = (1 * 100) / 12 = 8.33333333%\n- 2 unités = (2 * 100) / 12 = 16.66666667%\n- 3 unités = (3 * 100) / 12 = 25%\n- 4 unités = (4 * 100) / 12 = 33.33333333%\n- 5 unités = (5 * 100) / 12 = 41.66666667%\n- 6 unités = (6 * 100) / 12 = 50%\n- 7 unités = (7 * 100) / 12 = 58.33333333%\n- 8 unités = (8 * 100) / 12 = 66.66666667%\n- 9 unités = (9 * 100) / 12 = 75%\n- 10 unités = (10 * 100) / 12 = 83.33333333%\n- 11 unités = (11 * 100) / 12 = 91.66666667%\n- 12 unités = (12 * 100) / 12 = 100%\n\nce qui nous donnerais une grille de référence dans un Framework comme celle-ci :\n\n**CSS (dans common.css)**\n\n*Espace pris par les 12 tailles de colonne possible*\n\n```css\n/*\n.span12-12 { width: 100%; }\n.span12-11 { width: 91.66666667%; }\n.span12-10 { width: 83.33333333%; }\n.span12-9 { width: 75%; }\n.span12-8 { width: 66.66666667%; }\n.span12-7 { width: 58.33333333%; }\n.span12-6 { width: 50%; }\n.span12-5 { width: 41.66666667%; }\n.span12-4 { width: 33.33333333%; }\n.span12-3 { width: 25%; }\n.span12-2 { width: 16.66666667%; }\n.span12-1 { width: 8.33333333%; }\n*/\n```\n\n*Espace vers la gauche nécessaire pour générer une colonne vide*\n\n```css\n/*\n.prepend12-12 { margin-left: 100%; }\n.prepend12-11 { margin-left: 91.66666667%; }\n.prepend12-10 { margin-left: 83.33333333%; }\n.prepend12-9 { margin-left: 75%; }\n.prepend12-8 { margin-left: 66.66666667%; }\n.prepend12-7 { margin-left: 58.33333333%; }\n.prepend12-6 { margin-left: 50%; }\n.prepend12-5 { margin-left: 41.66666667%; }\n.prepend12-4 { margin-left: 33.33333333%; }\n.prepend12-3 { margin-left: 25%; }\n.prepend12-2 { margin-left: 16.66666667%; }\n.prepend12-1 { margin-left: 8.33333333%; }\n.prepend12-0 { margin-left: 0; }\n*/\n```\n\n*Espace vers la droite nécessaire pour générer une colonne vide*\n\n```css\n/*\n.append12-12 { margin-right: 100%; }\n.append12-11 { margin-right: 91.66666667%; }\n.append12-10 { margin-right: 83.33333333%; }\n.append12-9 { margin-right: 75%; }\n.append12-8 { margin-right: 66.66666667%; }\n.append12-7 { margin-right: 58.33333333%; }\n.append12-6 { margin-right: 50%; }\n.append12-5 { margin-right: 41.66666667%; }\n.append12-4 { margin-right: 33.33333333%; }\n.append12-3 { margin-right: 25%; }\n.append12-2 { margin-right: 16.66666667%; }\n.append12-1 { margin-right: 8.33333333%; }\n.append12-0 { margin-right: 0; }\n*/\n```\n\n*Décalage vers la gauche nécessaire pour reculer les colonnes dans la grille en vue de les intervertir*\n\n```css\n/*\n.pull12-12 { right: 100%; }\n.pull12-11 { right: 91.66666667%; }\n.pull12-10 { right: 83.33333333%; }\n.pull12-9 { right: 75%; }\n.pull12-8 { right: 66.66666667%; }\n.pull12-7 { right: 58.33333333%; }\n.pull12-6 { right: 50%; }\n.pull12-5 { right: 41.66666667%; }\n.pull12-4 { right: 33.33333333%; }\n.pull12-3 { right: 25%; }\n.pull12-2 { right: 16.66666667%; }\n.pull12-1 { right: 8.33333333%; }\n.pull12-0 { right: 0; }\n*/\n```\n\n*Décalage vers la droite nécessaire pour avancer les colonnes dans la grille en vue de les intervertir*\n\n```css\n/*\n.push12-12 { left: 100%; }\n.push12-11 { left: 91.66666667%; }\n.push12-10 { left: 83.33333333%; }\n.push12-9 { left: 75%; }\n.push12-8 { left: 66.66666667%; }\n.push12-7 { left: 58.33333333%; }\n.push12-6 { left: 50%; }\n.push12-5 { left: 41.66666667%; }\n.push12-4 { left: 33.33333333%; }\n.push12-3 { left: 25%; }\n.push12-2 { left: 16.66666667%; }\n.push12-1 { left: 8.33333333%; }\n.push12-0 { left: 0; }\n*/\n```\n\n*Propriété pour permettre le déplacement de colonne et les gouttières inter colonne (arbitrairement placé à 16px)*\n\n```css\n/*\n.pull-push { position: relative; }\n.gutter { padding-left: 16px; padding-right: 16px; }\n.pull-push-reset { position: static; }\n.gutter-reset { padding-left: 0; padding-right: 0; }\n*/\n```\n\n\n#### La grille et le Responsive Web Design ####\n\nPour commencer nous allons initialiser la grille et les colonnes qui la compose.\n\nNotre site sera habillé en Mobile First, nous allons également définir nos gaps de responsivité. [Vous pouvez lire cet article pour plus de compréhension sur le Responsive Web Design, le Mobile First et les gaps de responsivité](http://blog.lesieur.name/les-concepts-autour-du-responsive-web-design/).\n\n**CSS (dans common.css)**\n\n*Propriété pour manager les colonnes*\n\n```css\n    .page:after,\n.grid:after {\n    content: \"\";\n    clear: both;\n    display: block;\n}\n\n    .brand,\n    .slogan,\n    .title,\n    .main-nav,\n    .overview,\n    .anchor-nav,\n    .main,\n    .call-to-action,\n    .secondary-nav,\n    .utils,\n    .legals,\n.column {\n    float: left;\n    width: 100%;\n}\n```\n\nPour faire fonctionner ce mécanisme de colonnes côte à côte qui passe à la ligne si elles manquent de place nous utiliserons des balises flottantes. L'idée est de nommer la zone avec la classe « .column » mais ne jamais l'utiliser dans le code HTML. À la place, c'est les éléments HTML de type « column » qui seront empilé au dessus.\n\nDe la même manière vous constaterez que l'élément `.page:after` est référencé comme se comportant comme l'élément `.grid:after`.\n\n*Media Queries pour gérer le comportement de chaque colonne en fonction de la taille d'affichage*\n\n```css\n/* Mobile / Small tablet */\n\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n}\n\n/* Desktop */\n@media (min-width: 992px) {\n}\n\n/* Large desktop */\n@media (min-width: 1200px) {\n}\n```\n\nAvant de vous expliquer les étapes pour rapidement manager votre grille voici à quoi doit ressembler votre feuille CSS, et ce qu'elle donne appliquée sur notre structure HTML exemple.\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/jtDEm)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/jtDEm)\n\n\n\n\n\n## Manager ses Grilles ##\n\nPour notre exemple nous n'utilisons qu'une grille. Mais il est tout à fait possible d'en avoir plusieurs (12 colonnes, 16 colonnes, etc.) et d'en changer en fonction du template de page (ou pour les grilles imbriquées différentes).\n\n\n\n### Étape 1 : Importer les règles ###\n\nLe rendu ci-dessus étant déjà celui-sur Mobile, nous allons alimenter le rendu pour Tablette et plus.\n\n> À partir de 768px, je souhaite que la partie « Brand » occupe 2 colonnes. Je place donc mon curseur dans mon fichier à cette ligne dans mon exemple de grille mise en commentaire :\n\n> ```css\n.span12-2 { width: 16.66666667%; }\n```\n\n> et avec le raccourci de duplication rapide de ligne (sur Sublim Text celui-ci est `Ctrl + Shift + D`) j'obtiens une duplication de celle-ci :\n\n> ```css\n.span12-2 { width: 16.66666667%; }\n.span12-2 { width: 16.66666667%; }\n```\n\n> avec mon raccourci d’interversion rapide de ligne, je vais aller placer la propriété dupliquée dans la bonne Media Query (sur Sublim Text celui-ci est `Ctrl + Shift + Flèche du bas` pour descendre une ligne ou Ctrl + Shift + Flèche du haut` pour la monter). Cela nous donne alors :\n\n> ```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n.span12-2 { width: 16.66666667%; }\n}\n```\n\n\n### Étape 2 : Associer la balise ###\n\nContinuons.\n\n> Puisque je souhaite que « Brand » fasse deux colonnes, je place mon curseur sur la ligne ou je l'ai référencé comme étant de type colonne (attaché à « .column »),\n\n> ```css\n    .brand,\n```\n\n> je duplique la ligne,\n\n> ```css\n    .brand,\n    .brand,\n```\n\n> et je place le duplicata sur la règle de deux colonnes que j'ai créé plus tôt :\n\n> ```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n    .brand,\n.span12-2 { width: 16.66666667%; }\n}\n```\n\n\n\n### Étape 3 : Recommencer pour toute la grille Tablette ###\n\nIl nous reste à présent à faire de même pour les autres colonnes.\n\n> Je souhaite que Title fasse également 2 colonnes sur 12 :\n\n> ```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n  .brand,\n  .title,\n.span12-2 { width: 16.66666667%; }\n}\n```\n\n> Je souhaite que Anchor nav et Utils fasse également 3 colonnes sur 12 :\n\n> ```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n  .brand,\n  .title,\n.span12-2 { width: 16.66666667%; }\n  .anchor-nav,\n  .utils,\n.span12-3 { width: 25%; }\n}\n```\n\n> Je souhaite que les Call to Action fassent 6 colonnes sur 12, que Legals et Main en fassent 9 et que Main nav et Slogan en fasse 10 :\n\n> ```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n  .brand,\n  .title,\n.span12-2 { width: 16.66666667%; }\n  .anchor-nav,\n  .utils,\n.span12-3 { width: 25%; }\n  .call-to-action,\n.span12-6 { width: 50%; }\n  .legals,\n  .main,\n.span12-9 { width: 75%; }\n  .main-nav,\n  .slogan,\n.span12-10 { width: 83.33333333%; }\n}\n```\n\nEt notre grille commence à prendre forme !\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/kfdsp)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/kfdsp)\n\n_**N'hésitez pas à retailler la fenêtre de votre navigateur pour constater les différences en fonction de votre périphérique d'affichage.**_\n\n\n\n### Étape 4 : Faire de même pour d'autres règles ###\n\nSur le même principe, nous allons ajouter des gouttières à nos colonnes pour les espacer les une des autres.\n\n> Nous allons donc récupérer toutes les colonnes sur lesquels nous souhaitons appliquer des gouttières. Comme nous les voulons pour toutes les différentes tailles nous allons les attacher dans la partie Mobile :\n\n```css\n/* Mobile / Small tablet */\n  .brand,\n  .slogan,\n  .title,\n  .main-nav,\n  .overview,\n  .anchor-nav,\n  .main,\n  .call-to-action,\n  .secondary-nav,\n  .utils,\n  .legals,\n.gutter { padding-left: 16px; padding-right: 16px; }\n```\n\nCe qui donne :\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/dAKch)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/dAKch)\n\nNous allons à présent intervertir à partir de l'affichage mobile les Brand et Slogan.\n\n> Pour cela nous allons poussez Brand de 10 colonnes et reculer Slogan de 2 colonnes. Nous allons passer les colonnes en relative.\n\n> Nous allons donc importer les règles,\n\n> ```css\n.pull-push { position: relative; }\n```\n\n> ```css\n.push12-10 { left: 83.33333333%; }\n```\n\n> ```css\n.pull12-2 { right: 16.66666667%; }\n```\n\n> et attacher\n\n> ```css\n  .brand,\n```\n\n> ```css\n  .slogan,\n```\n\n> dans l'affichage Tablette. Idem pour Legals et Utils avec 9 colonnes en avant et 3 colonnes en arrière :\n\n> ```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n  .brand,\n  .title,\n.span12-2 { width: 16.66666667%; }\n  .anchor-nav,\n  .utils,\n.span12-3 { width: 25%; }  \n  .call-to-action,\n.span12-6 { width: 50%; }\n  .legals,\n  .main,\n.span12-9 { width: 75%; }\n  .main-nav,\n  .slogan,\n.span12-10 { width: 83.33333333%; }\n/**/\n  .utils,\n  .legals,\n  .brand,\n  .slogan,\n.pull-push { position: relative; }\n/**/\n  .utils,\n.push12-9 { left: 75%; }\n  .brand,\n.push12-10 { left: 83.33333333%; }\n  .slogan,\n.pull12-2 { right: 16.66666667%; }\n  .legals,\n.pull12-3 { right: 25%; }\n}\n```\n\nCe qui donne :\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/KyGcs)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/KyGcs)\n\n\n\n### Étape 5 : Alimenter toutes les tailles de périphérique ###\n\nIl est à présent temps de faire de même pour Desktop et Large Desktop. Cela va vous faire importer de nouvelles règles ou en écraser des précédentes.\n\n> Par exemple avec cette configuration Desktop : Anchor nav, les Call to Action et Main vont changer de comportement :\n\n> ```css\n/* Desktop */\n@media (min-width: 992px) {\n  .anchor-nav,  \n  .call-to-action,\n.span12-4 { width: 33.33333333%; }\n  .main,\n.span12-8 { width: 66.66666667%; }\n}\n```\n\nNous allons en profiter pour introduire les colonnes invisibles avec le Large Desktop :\n\n> Nous allons importer les règles :\n\n> ```css\n.prepend12-2 { margin-left: 16.66666667%; }\n```\n\n> et\n\n> ```css\n.append12-2 { margin-right: 16.66666667%; }\n```\n\n> Pour créer des colonnes inexistantes de part et d'autres de nos Call to Action. Nous allons les cibler avec la propriété CSS3 `:nth-child()` :\n\n> ```css\n/* Large desktop */\n@media (min-width: 1200px) {\n  .anchor-nav,\n.span12-3 { width: 25%; }\n  .call-to-action\n.span12-4 { width: 33.33333333%; }\n  .main,\n.span12-9 { width: 75%; }\n/**/\n  .call-to-action:nth-child(8),\n  .call-to-action:nth-child(10),\n  .call-to-action:nth-child(12),\n.prepend12-2 { margin-left: 16.66666667%; }\n/**/\n  .call-to-action:nth-child(9),\n  .call-to-action:nth-child(11),\n  .call-to-action:nth-child(13),\n.append12-2 { margin-right: 16.66666667%; }\n}\n```\n\nCe qui donne :\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/kKHuy)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/kKHuy)\n\n\n\n\n\n## Grille CSS Sémantique ##\n\nMaintenant que nous avons vu que la grille fonctionne avec un empilement de `div` tout ce qu'il y a de plus classique, offrons à notre structure un petit côté sémantique et observons que cela n'affecte en rien le fonctionnement de la grille. C'est même bien plus pratique dans le cas de composant en liste comme pour les Call to Action !\n\n\n\n### Nouvelle structure ###\n\nVoici une structure HTML fonctionnelle avec nos grilles.\n\n**HTML**\n\n```html\n<html>\n    <head>\n        <title>Responsive and Semantic CSS Grid CSS-Driven</title>\n        <link rel=\"stylesheet\" href=\"common.css\">      \n    </head>\n    <body>\n        <header>\n            <div class=\"brand\"></div>\n            <div class=\"slogan\"></div>\n            <div class=\"title\"></div>\n            <nav class=\"main-nav\"></nav>\n        </header>\n        <div class=\"content\">\n            <section class=\"overview\"></section>\n            <nav class=\"anchor-nav\"></nav>\n            <article class=\"main\"></article>\n            <ul class=\"call-to-action-list\">\n                <li class=\"call-to-action\"></li>\n                <li class=\"call-to-action\"></li>\n                <li class=\"call-to-action\"></li>\n                <li class=\"call-to-action\"></li>\n                <li class=\"call-to-action\"></li>\n                <li class=\"call-to-action\"></li>\n            </ul>\n        </div>\n        <footer>\n            <nav class=\"secondary-nav\"></nav>\n            <div class=\"utils\"></div>\n            <div class=\"legals\"></div>\n        </footer>\n    </body>\n</html>\n```\n\n\n\n### Ajustement CSS ###\n\nComme la structure a légèrement changé, nous allons également légèrement changer nos associations.\n\n> ```css\n    .page:after,\n.grid:after {\n    content: \"\";\n    clear: both;\n    display: block;\n}\n```\n\n> devient\n\n> ```css\n  body > header:after,\n  body > footer:after,\n  .content:after,\n.grid:after {\n  content: \"\";\n  clear: both;\n  display: block;\n}\n```\n\nCréation d'un annulateur de liste dans la grille pour les balises comme `.call-to-action-list`.\n\n> ```css\n.list-reset { margin: 0;padding: 0;list-style-type: none; }\n```\n\n> Association dans la partie Mobile et plus :\n\n> ```css\n  .call-to-action-list,\n.list-reset { margin: 0;padding: 0;list-style-type: none; }\n```\n\nEt facilitation du ciblage des Call to Action devenu des listes :\n\n> ```css\n  .call-to-action:nth-child(8),\n  .call-to-action:nth-child(10),\n  .call-to-action:nth-child(12),\n.prepend12-2 { margin-left: 16.66666667%; }\n/**/\n  .call-to-action:nth-child(9),\n  .call-to-action:nth-child(11),\n  .call-to-action:nth-child(13),\n.append12-2 { margin-right: 16.66666667%; }\n```\n\n> devient\n\n> ```css\n  .call-to-action:nth-child(odd),\n.prepend12-2 { margin-left: 16.66666667%; }\n/**/\n  .call-to-action:nth-child(even),\n.append12-2 { margin-right: 16.66666667%; }\n```\n\nCe qui donne :\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/Lshcj)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/Lshcj)\n\n\n\n\n\n## Grille imbriquée ##\n\nLe système de grille peut ensuite s'appliquer à l'intérieur même des colonnes. En fonction de ce que vous souhaitez faire, il peut être intéressant de retirer les gouttières d'un élément parent pour les appliquer à la sous grille.\n\nVoici la zone Main rempli avec une sous grille. Main fait alors office de `.grid`, Article et Steps office de `.column`\n\n**HTML**\n\n```html\n<!-- ... header ... -->\n\n<div class=\"content\">\n  <section class=\"overview\"></section>\n  <nav class=\"anchor-nav\"></nav>\n\n\n  <article class=\"main\">\n    <div class=\"article\"></div>\n    <ol class=\"step-list\">\n      <li class=\"step\"></li>\n      <li class=\"step\"></li>\n      <li class=\"step\"></li>\n    </ol>\n  </article>\n\n\n  <ul class=\"call-to-action-list\">\n    <li class=\"call-to-action\"></li>\n    <li class=\"call-to-action\"></li>\n    <li class=\"call-to-action\"></li>\n    <li class=\"call-to-action\"></li>\n    <li class=\"call-to-action\"></li>\n    <li class=\"call-to-action\"></li>\n  </ul>\n</div>\n\n<!-- ... footer ... -->\n```\n\nNous allons donc améliorer nos CSS de test en rajoutant,\n\n```css\n.main:before {\n  content: none;\n}\n.article:before {\n  content: \"Article\";\n  background-color: rgba(255, 255, 0, 0.2);\n  width: 100%;\n  display: inline-block;\n}\n.step:before {\n  content: \"Steps\";\n  background-color: rgba(0, 255, 0, 0.2);\n  width: 100%;\n  display: inline-block;\n}\n\n```\n\nen rajoutant les listes ordonnées sans style pour la grille,\n\n```css\n    .step-list,\n    .call-to-action-list,\n.list-reset { margin: 0;padding: 0;list-style-type: none; }\n```\n\nen retirant les gouttières des « .column » faisant office de « .grid » et\n\n```css\n/* Mobile / Small tablet */\n    .brand,\n    .slogan,\n    .title,\n    .main-nav,\n    .overview,\n    .anchor-nav,\n    .call-to-action,\n    .secondary-nav,\n    .utils,\n    .legals,\n.gutter { padding-left: 16px; padding-right: 16px; }\n```\n\nen abonnant `.step-list` et `.step` aux `.grid`, `.column` et `gutter`\n\n```css\n    .brand,\n    .slogan,\n    .title,\n    .main-nav,\n    .overview,\n    .anchor-nav,\n    .main,\n    .article,\n    .step,\n    .call-to-action,\n    .secondary-nav,\n    .utils,\n    .legals,\n.column {\n    float: left;\n    width: 100%;\n}\n\n/* Mobile / Small tablet */\n    .brand,\n    .slogan,\n    .title,\n    .main-nav,\n    .overview,\n    .anchor-nav,\n    .article,\n    .step,\n    .call-to-action,\n    .secondary-nav,\n    .utils,\n    .legals,\n.gutter { padding-left: 16px; padding-right: 16px; }\n```\n\nIl ne nous reste plus qu'à manager le comportement des colonnes en fonction des périphériques :\n\n```css\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n    .brand,\n    .title,\n.span12-2 { width: 16.66666667%; }\n    .anchor-nav,\n    .utils,\n.span12-3 { width: 25%; }\n    .step,\n.span12-4 { width: 33.33333333%; }    \n    .call-to-action,\n.span12-6 { width: 50%; }\n    .legals,\n    .main,\n.span12-9 { width: 75%; }\n    .main-nav,\n    .slogan,\n.span12-10 { width: 83.33333333%; }\n\n    .utils,\n    .legals,\n    .brand,\n    .slogan,\n.pull-push { position: relative; }\n\n    .utils,\n.push12-9 { left: 75%; }\n    .brand,\n.push12-10 { left: 83.33333333%; }\n    .slogan,\n.pull12-2 { right: 16.66666667%; }\n    .legals,\n.pull12-3 { right: 25%; }\n}\n```\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/hcGib)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/hcGib)\n\n\n\n\n\n## Équivalent d'un clearfix ##\n\nEn remplissant notre architecture avec du contenu on s'aperçoit qu'il y a des problèmes de chevauchement.\n\nC'est le cas avec la zone Title dans l'exemple ci-après :\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/aJKkd)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/aJKkd)\n\nPour résoudre cela, il suffit de créer une règle CSS `clearfix` et d'associer la zone Title.\n\n```css\n    .title,\n.clearfix { clear: both; }\n```\n\n*Note : J'en profite également pour empêcher le site d'être plus large que 1200px*\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/emwIv)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/emwIv)\n\n\n\n\n\n## Pour aller plus loin ##\n\n### Alignement ###\n\nIl est tout à fait possible de reproduire ce type de fonctionnement pour autre chose que la grille. Par exemple pour l'alignement des textes, images, etc.\n\nCréons par exemple les règles exemples suivantes :\n\n```css\n/*------------------------------------*\\\n    $ALIGMENT\n\\*------------------------------------*/\n\n/*\n.text-left { text-align: left; }\n.text-center { text-align: center; }\n.text-right { text-align: right; }\n.text-justify { text-align: justify; }\n*/\n```\n\net appliquons la CSS sur les zones de la manière suivante :\n\n```css\n/* Mobile / Small tablet */\n    .utils,\n.text-center { text-align: center; }\n\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n     .brand,\n     .utils,\n.text-right { text-align: right; }\n}\n```\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/lyqir)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/lyqir)\n\n\n\n### Afficher / Masquer ###\n\nDe la même manière il est possible d'afficher ou de masquer certaines zones en fonction de la résolution d'affichage.\n\n```css\n/*------------------------------------*\\\n    $VISTIBLE / HIDDEN\n\\*------------------------------------*/\n\n/*\n.display-block, visible { display: block; }\n.display-inline { display: inline-block; }\n.display-inline-block { display: inline-block; }\n...\n.display-none, hidden { display: none; }\n*/\n```\n\nN'affichons que 2 des 3 Call to Action en Tablette et en Large Desktop et les Step seulement à partir de Tablette :\n\n```css\n/* Mobile / Small tablet */\n    .step,\n.display-none, hidden { display: none; }\n\n/* Tablet / Small desktop */\n@media (min-width: 768px) {\n    .step,\n.display-block, visible { display: block; }\n    .call-to-action:nth-child(n + 3),\n.display-none, hidden { display: none; }\n}\n\n/* Desktop */\n@media (min-width: 992px) {\n    .call-to-action:nth-child(n + 3),\n.display-block, visible { display: block; }\n}\n\n/* Large desktop */\n@media (min-width: 1200px) {\n    .call-to-action:nth-child(n + 3),\n.display-none, hidden { display: none; }\n}\n```\n\n> **`L'`** **Exemple :**\n\n> - [Voir le résultat en plein écran en cliquant ici](http://codepen.io/Haeresis/full/kvcBg)\n> - [Voir le code source en cliquant ici](http://codepen.io/Haeresis/pen/kvcBg)\n\n\n\n\n\n## Pour finir ##\n\nLa rapidité d’adressage et la maintenance du code CSS est tout aussi aisé sinon plus rapide avec un bon éditeur de texte. La perte de temps réside dans la préparation des classes possibles avant affectation mais rien ne vous empêche d'aller les piocher dans les divers Frameworks CSS existant et de faire vos mélanges !", "dates" : { "published" : { "$date" : 1403530500000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "<span>Grille</span> <span>CSS</span> <span>Responsive</span> et <span>Sémantique</span> sans <span>Framework</span>", "urn" : "grille-css-responsive-et-semantique-sans-framework" }
{ "__v" : 0, "_id" : { "$oid" : "53ae894483fce724706bdf36" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c9" }, { "$oid" : "5310456355dfd5f7698d48c1" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "5310456355dfd5f7698d48c0" }, { "$oid" : "53aec7ad17ee9f4db5874c66" } ], "content" : "Connaissez vous les langages Markdown ? Mais si, il est probable que vous en connaissiez sans même savoir qu'ils pouvaient être nommé. Vous avez déjà écris un texte sur un [Wiki](http://www.mediawiki.org/wiki/MediaWiki/fr) ? Rédiger une carte sur [Trello](https://trello.com/) ? Rédigé un Readme sur [GitHub](https://github.com/) ou sur [BitBucket](https://bitbucket.org/) ? Un commentaire sur [CodePen](https://codepen.io/) ? Vous les avez déjà croisé ces `.md` rarement reconnus de base par les Bloc-notes.\n\n<figure>\n<img src=\"http://blog.haeresis.fr/upload/image/stack-edit.jpg\" alt=\"Responsive Web Design\">\n<figcaption>Source : lh4.googleusercontent.com</figcaption>\n</figure>\n\nNon ? Si cela ne vous parle pas, sachez que Markdown pourrait devenir votre meilleur ami pour écrire des spécifications précises ou vagues sur vos projets, seul ou avec vos collègues avec un minimum d'efforts grâce à [StackEdit.io]. Vous pourriez même au final écrire toutes sortes de choses facilement !\n\n\n\n\n## Qu'est-ce que le langage Markdown ##\n\nJe me suis peut être emballé en disant « les langages Markdown ». En fait, ce langage n'a jamais été formellement standardisé bien que tous s'accordent à dire qu'il [suit ses règles ci](http://fr.wikipedia.org/wiki/Markdown).\n\n> **Wikipedia** : Markdown est un langage de balisage léger créé par John Gruber et Aaron Swartz en 2004. Son but est d'offrir une syntaxe facile à lire et à écrire. Un document formaté selon Markdown devrait pouvoir être publié comme tel, en texte, sans donner l’impression qu’il a été marqué par des balises ou des instructions de formatage.\n\nC'est à dire que les balises Wikipedia ne sont pas les mêmes que le langage Markdown mais sont un langage de « type Markdown » dans le sens où, hors d'une visionneuse de formatage, le texte reste parfaitement compréhensible de tous (contrairement par exemple au formatage HTML qui en mode `source` peut sembler compliqué pour qui ne le connaît pas).\n\n\n\n\n## StackEdit.io, le super éditeur Markdown en ligne ##\n\n[StackEdit.io] est un logiciel embarqué via navigateur, accessible en ligne et hors ligne ! Il fonctionne parfaitement avec Google Chrome par exemple, surtout en mode « Applications » (Menu > Outils > Créer des raccourcis vers les applications...).\n\nVous managez vos documents dans l'application, (création / suppression) et vous les enregistrez dans le Cloud de manière définitive via des plateformes de stockage tierces (Google Drive, DropBox, ...).\n\nVous pouvez même rédiger vos documents en temps réel à plusieurs.\n\nTout cela dans le but de publier vos documentations dans vos repositories internes sous forme de Readme, ou de fournir des spécifications fonctionnelles au format PDF ou HTML facilement. De créer du contenu pour vos cartes Trellos, bref... De rédiger en Markdown.\n\n\n\n\n## Testez-le ! ##\n\nPour tester [StackEdit.io], rendez vous sur [https://stackedit.io/](https://stackedit.io/).\n\n> **`une`** **Note** : [StackEdit.io] est également une très bonne visionneuse Markdown en ligne. Vous pouvez donc lui fournir n'importe qu'elle url de fichier `.md` et envoyer le lien de lecture à quelqu'un ! Par exemple, voici :\n\n> - ### [La version française du document de bienvenue StackEdit.io](https://stackedit.io/viewer#!provider=gist&gistId=46e7665286651d79f7d5&filename=StackEdit.io%20-%20Document%20de%20bienvenue) ###\n\n  [StackEdit.io]: https://stackedit.io/", "dates" : { "published" : { "$date" : 1403947320000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "StackEdit.io, l'éditeur Markdown en ligne par excellence !", "urn" : "stackeditio-l-editeur-markdown-en-ligne-par-excellence" }
{ "__v" : 0, "_id" : { "$oid" : "53e38776a8f05c9a1dbb971d" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bf" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "S'il y a bien une action redondante et qui nécessite de passer par la case JavaScript, c'est bien la validation des formulaires ! Mais sachez qu'il est possible de les valider sans utiliser une seule ligne de code ! J'avoue, je triche un peu quand je dis ça. En réalité il n'y a rien de magique et il faudra tout de même inclure trois scripts pour réaliser cela, mais il ne sera pas nécessaire que **vous** écriviez du JavaScript.\n\nVoyons ici quel sont ces scripts et parcourons les différents cas de figure pour valider des champs vides, vérifier qu'un email est bien formé ou encore qu'une confirmation de mot de passe correspond bien au mot de passe initialement tapé. Par exemple, pour vérifier qu'un champ « Pseudo » est bien remplis et indiquer la place de son message d'erreur, il suffirait de le déclarer dans un formulaire comme ceci :\n\n```html\n<label for=\"pseudo\">Pseudo</label>\n<input type=\"text\" name=\"pseudo\" id=\"pseudo\" placeholder=\"Haeresis\"\n       data-rule-required=\"true\"\n       data-msg-required=\"Le champ Pseudo est requis.\" />\n<span data-valmsg-for=\"pseudo\" data-valmsg-replace=\"true\"></span>\n```\n\nC'est donc parti pour :\n\n1. Trouver votre bonheur dans l'exemple complet suivant : [http://codepen.io/Haeresis/pen/AzJgF/](http://codepen.io/Haeresis/pen/AzJgF/)\n\n2. Ou/Et lire la suite de ce billet pour en apprendre un peu plus sur le jQuery Validation Unobstrusive Plugin.\n\n\n\n\n\n## Les 3 Scripts Magiques ##\n\n### jQuery ###\n\nLe premier des trois scripts est l'incontournable [jQuery](http://jqueryvalidation.org/). Celui-ci va servir aux deux suivants pour cibler les champs à valider de manière simple sur tous les types de navigateur, mais ça, vous le saviez probablement déjà.\n\n\n\n### jQuery Validate Plugin ###\n\nLe deuxième script est le de plus en plus populaire [jQuery Validate Plugin](http://jqueryvalidation.org/) qui avec un ensemble d'instructions JavaScript permet de manager la manière dont le formulaire doit se comporter lors de la validation post soumission. C'est là généralement (même si vous utilisez habituellement un autre script que ce plugin) que vous répéter toujours le même code JavaScript redondant pour assigner vos messages d'erreur à vos inputs.\n\n\n\n### jQuery Validation Unobstrusive Plugin ###\n\nVoici le troisième script magique qui va vous permettre de pré-valider votre formulaire côté client sans utiliser une seule ligne de JavaScript sur votre page ! Si vous n'y connaissez rien, et bien c'est le moment de jouer un peu avec votre DOM... uniquement à la main depuis le code HTML !\n\n> Note : le plus gros défaut de ce plugin est qu'il doit être utilisé dans un cadre de travail Microsoft. Dans tous autres cas, Microsoft ce réserve le droit de vous en interdire l'utilisation. Vous voilà donc prévenu :)\n\n\n\n\n## Mise en place rapide ##\n\nVoici un petit formulaire sans prétention qui va fonctionner...\n\n**Partie utile placée dans Body**\n\n```html\n<form action=\"\" method=\"post\">\n    <div class=\"field\">\n        <label for=\"pseudo\">Pseudo</label>\n        \n        <!-- Ajout de data-rule-required et data-msg-required -->\n        <input type=\"text\" id=\"pseudo\" name=\"pseudo\" placeholder=\"Haeresis\"\n               data-rule-required=\"true\"\n               data-msg-required=\"Le champ Pseudo est requis.\"\n        />\n        \n        <!-- Placement du message d'erreur dédié spécifiquement. -->\n        <span data-valmsg-for=\"pseudo\" data-valmsg-replace=\"true\"></span>\n    </div>\n    \n    <!-- Ajout de la liste total des messages d'erreur pour information. -->\n    <div class=\"validation-summary-valid\" data-valmsg-summary=\"true\">\n        <ul>\n            <li style=\"display:none\"></li>\n        </ul>\n    </div>\n    \n    <div class=\"submit\">\n        <input type=\"submit\" value=\"Valider\" />\n    </div>   \n</form>\n```\n\n...une fois nos trois scripts mis en place.\n\n**Appel des trois scripts, de préférence en pied de Body**\n\n```html\n<!-- jQuery -->\n<script src='//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js'></script>\n<!-- jQuery Validate Plugin -->\n<script src='//ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.js'></script>\n<!-- jQuery Validation Unobstrusive Plugin -->\n<script src='//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.js'></script>\n```\n\nIl ne reste alors plus qu'a styler les messages d'erreur...\n\n**CSS pour styler les messages d'erreur**\n\n```css\n/* Couleur des messages d'erreur totaux */\n.validation-summary-errors,\n/* Couleur des messages d'erreur spécifiques */\n.field-validation-error {\n  color: #f00;\n}\n\n/* Couleur des bord des champs spécifiques */\n.input-validation-error {\n  border: 1px solid #f00;\n}\n```\n\n## Voir tous les types de champs ! ##\n\nVous pouvez consulter ici tous les autres types de champs et fonctionnement custom avec quelques lignes de JavaScript.\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<div class=\"codepen\"><p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"AzJgF\" data-default-tab=\"html\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/AzJgF/'>Validation de formulaire Inline sans JavaScript</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p></div>", "dates" : { "published" : { "$date" : 1407423840000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".codepen {\n    margin-top: 8px;\n}", "title" : "<span>Valider</span> les <span>formulaires</span> simplement, et sans <span>JavaScript</span>", "urn" : "valider-les-formulaires-simplement-et-sans-javascript" }
{ "__v" : 0, "_id" : { "$oid" : "54265d082634df6329891daf" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "530cc2f27188099a66e9bcec" } ], "content" : "## Habiller son interface avec et sans JavaScript ##\n\n## Différencier les types Layout, Component et Pattern ##\n\n## Manager les grilles Responsive Web Design en CSS-Driven ##\n\n\n\n## Images Responsive ##\n\nLe comportement est simple : l'image s'affiche à sa taille standard s'il y a assez de place pour l'afficher sinon elle s'affiche à 100% de la taille de son container.\n\n**Exemple CSS**\n\n```css\nimg.responsive {\n    max-width: 100%;\n    height: auto;\n}\n.text-center {\n    text-align: center;\n}\nimg.center {\n    display: block;\n    margin-left:auto;\n    margin-right:auto;\n}\nimg.left{\n    display: block;\n    margin-right:auto;\n}\nimg.right {\n    display: block;\n    margin-left:auto;\n}\n```\n\n**Exemple HTML**\n\n```html\n<p>\n    <img class=\"responsive center\" src=\"http://37.media.tumblr.com/f4680ad069eaa173da12c53863112699/tumblr_n3s8i3yPih1s9y3qio2_500.jpg\">\n</p>\n<p class=\"text-center\">\n    <img class=\"responsive\" src=\"http://static.hdw.eweb4.com/media/thumbs/1/101/1008447.jpg\">\n    <img class=\"responsive\" src=\"http://static.hdw.eweb4.com/media/thumbs/1/101/1008104.jpg\">\n</p\n```\n\n**Rendu**\n\n<p>\n    <img class=\"responsive center\" src=\"http://37.media.tumblr.com/f4680ad069eaa173da12c53863112699/tumblr_n3s8i3yPih1s9y3qio2_500.jpg\">\n</p>\n<p class=\"text-center\">\n    <img class=\"responsive\" src=\"http://static.hdw.eweb4.com/media/thumbs/1/101/1008447.jpg\">\n    <img class=\"responsive\" src=\"http://static.hdw.eweb4.com/media/thumbs/1/101/1008104.jpg\">\n</p>\n\n*Note : retaillez votre fenêtre pour voir les effets de responsivité.*\n\n## Empècher l'écoulement des flottants ##\n\n## Éviter le débordement de marge ##\n\n## Gérer l'overflow horizontal ##\n\n## Before et After pour la décoration ##\n\n## Description par classes Sémantique ##\n\n\n\n\n\n\n\n\n\n\n\nImpossible de mute le son sur iPhone/iPad (impossible donc de pré-loadé le son en le lisant) : http://stackoverflow.com/questions/10214315/htmlaudioelement-wont-mute-properly-in-safari-on-ipod-touch-5-0-1\n- https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Using_HTML5_Audio_Video.pdf\nImpossible de pré-charger le son sir iPhone/iPad (impossible donc de pré-loadé le son à l'ouverture de page) : http://stackoverflow.com/questions/9811429/html5-audio-tag-on-safari-has-a-delay\n- http://developer.apple.com/library/safari/#documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1\n\nhttp://www.ibm.com/developerworks/library/wa-ioshtml5/\n\n\n\n\n\n\n\n\n\n", "dates" : { "published" : { "$date" : 1414719900000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "stylesheet" : "img.responsive {\n    max-width: 100%;\n    height: auto;\n}\n.text-center {\n    text-align: center;\n}\nimg.center {\n    display: block;\n    margin-left:auto;\n    margin-right:auto;\n}\nimg.left{\n    display: block;\n    margin-right:auto;\n}\nimg.right {\n    display: block;\n    margin-left:auto;\n}", "title" : "1 <span>astuces</span> avec les <span>classes</span> <span>CSS</span> et <span>JS</span>", "urn" : "astuces-avec-les-classes-css-et-js" }
{ "__v" : 0, "_id" : { "$oid" : "542bc5069fe4c08c340c83e7" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48c3" } ], "content" : "Une solution rapide et qui fonctionne sur tous les navigateurs à partir de IE9 est le centrage vertical avec la valeur CSS3 `translateY` de la propriété `transform`.\n\nPour mettre cela en place, trois simples propriétés :\n\n1. On place l'élément en relatif pour le repositionner par rapport à son élément parent avec `position: relative;`.\n\n2. On déplace l'élément de la moitié de la hauteur de l'élément parent avec `top: 50%;`, la référence de déplacement étant actuellement son bord haut.\n\n3. On re-centre l'élément non plus à partir de son bord haut mais de son centre vertical avec `transform: translateY(-50%);`\n\nEt voilà !\n\n\n\n\n\n\n## Exemple de code minimal ##\n\nVoici ce que cela donne avec les préfixes propriétaires :\n\n```css\n.vertical-align {\n    position: relative;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n       -moz-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n         -o-transform: translateY(-50%);\n            transform: translateY(-50%);\n}\n```\n\n*Note : si votre élément est de type inline, il faudra ajouter la propriété `display: inline-block;` pour que la transformation soit valide dans tous les cas de figures sur tous les navigateurs supportant `translateY` :*\n\n```css\n.inline-block {\n    display: inline-block\n}\n```\n\n*Note : si le centrage affiche l'élément sur un demi-pixel, celui-ci peut paraître flou. Pour empêcher cela, il suffit de munir un élément parent de `transform-style: preserve-3d;` :*\n\n```css\n.preserve-3d {\n    -webkit-transform-style: preserve-3d;\n       -moz-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n}\n```\n\n\n\n\n\n## Exemple concret d'utilisation ##\n\n### Texte en Hover sur image ###\n\n_Passez votre souris sur l'image :_\n\n<div class=\"example\">\n\t<img src=\"http://blog.haeresis.fr/upload/image/the_moment_by_dzsurnik.jpg\" alt=\"The Moment by Dzsurnik\">\n\t<a href=\"http://blog.haeresis.fr/upload/image/the_moment_by_dzsurnik.jpg\" target=\"_blank\">\n\t\t<span>Voir l'image en grand format</span>\n\t</a>\n</div>\n\n*Note : Vous pouvez retailler la fenêtre pour voir le résultat en Responsive Web Design*\n\n-----\n\n__HTML__\n\n```html\n<div class=\"example\">\n\t<img src=\"http://fc08.deviantart.net/fs70/i/2012/309/9/1/the_moment_by_dzsurnik-d5k2le2.jpg\" alt=\"The Moment by Dzsurnik\">\n\t<a href=\"http://fc08.deviantart.net/fs70/i/2012/309/9/1/the_moment_by_dzsurnik-d5k2le2.jpg\" target=\"_blank\">\n\t\t<span>Voir l'image en grand format</span>\n\t</a>\n</div>\n```\n\n__CSS__\n```css\n.example {\n    /* Permettre à `a` d'être bien placer en absolue */\n    position: relative;\n    /* Éviter les rendus flous */\n    -webkit-transform-style: preserve-3d;\n       -moz-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n}\n.example img {\n    /* Rendre l'image Responsive */\n    display: block;\n    max-width: 100%;\n    /* Centrer l'image */\n    margin-left: auto;\n    margin-right: auto;\n}\n.example a {\n    /* Cacher le lien si la zone n'est pas survolée */\n    display: none;\n    /* Couvrir l'intégralité de `.example` */\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    /* Être transparent pour voir l'image */\n    background-color: rgba(255, 255, 255, 0.8);\n    /* Centrer horizontalement le texte */\t\n    text-align: center;\n    /* Styler le texte */\n    font-weight: bold;\n    font-size: 1.6em;\n    line-height: 1.3;\n}\n.example a:hover {\n    /* Désactiver visuellement le comportement `:hover` sur le lien */\n    color: #48739E;\n    text-decoration: none;\n}\n.example:hover a {\n    /* Afficher `a` au survole de `.example` */\n    display: block;\n}\n.example span {\n    /* Centrage vertical automatique pour le texte */\n    position: relative;\n    display: inline-block;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n       -moz-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n         -o-transform: translateY(-50%);\n            transform: translateY(-50%);\n}\n```\n\n### Centrer une Popup ###\n\n<a class=\"example-link\" href=\"javascript:;\">Cliquez sur ce lien pour ouvrir une popup</a>\n<div class=\"example-2\">\n    <figure>\n        <img src=\"http://blog.haeresis.fr/upload/image/devon_jade_dubstep_themed_edit_2_by_matthewjendrasiak.jpg\" alt=\"Devon Jade Dubstep Themed Edit 2 by Matthew Jendrasiak\">\n        <figcaption>Cliquez n'importe où pour fermer</figcaption>\n    </figure>\n</div>\n\n-----\n\n__HTML__\n\n```html\n<a class=\"example-link\" href=\"javascript:;\">Cliquez sur ce lien pour ouvrir une popup</a>\n<div class=\"example-2\">\n    <figure>\n        <img src=\"http://fc07.deviantart.net/fs71/i/2013/265/1/9/devon_jade__dubstep_themed_edit__2_by_matthewjendrasiak-d6ngt26.jpg\" alt=\"Devon Jade Dubstep Themed Edit 2 by Matthew Jendrasiak\">\n        <figcaption>Cliquez n'importe où pour fermer</figcaption>\n    </figure>\n</div>\n```\n\n__CSS__\n```css\n.example-2 {\n    /* Par défaut notre popup est fermée */\n    display: none;\n    /* Zone de popup prenant toute la place */\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n.example-2.opened {\n    /* Avec la classe opened, la popup est visible */\n    display: block;\n}\n.example-2:before {\n    /* Rendre visible le background */\n    content: \"\";\n    position: absolute;\n    z-index: 1;\n    background-color: rgba(0, 0, 0, 0.8);\n    width: 100%;\n    height: 100%;\n}\n.example-2 figure {\n    /* Mise en forme du contenu */\n    background-color: #FFF;\n    margin: 0;\n    /* Le contenu prend de base toute la largeur */\n    width: 100%;\n    /* Popup par dessus le background */\n    z-index: 2;\n    /* Centrage vertical automatique pour le contenu */\n    position: absolute;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n       -moz-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n         -o-transform: translateY(-50%);\n            transform: translateY(-50%);\n}\n@media (min-width: 768px) {\n    .example-2 figure {\n        /* Taille fixe pour la popup à partir de 768px... */\n        width: 764px;\n        /* ...et centrage vertical et horizontal automatique pour le contenu */\n        top: 50%;\n        left: 50%;\n        -webkit-transform: translateX(-50%) translateY(-50%);\n           -moz-transform: translateX(-50%) translateY(-50%);\n            -ms-transform: translateX(-50%) translateY(-50%);\n             -o-transform: translateX(-50%) translateY(-50%);\n                transform: translateX(-50%) translateY(-50%);\n    }\n}\n.example-2 figcaption {\n    /* Mise en forme figcaption */\n    text-align: center;\n    padding: 16px;\n}\n.example-2 img {\n    /* Image responsive */\n    max-width: 100%;\n}\n```\n\n__JS__\n```javascript\n// Ouverture et fermeture de popup.\n$(\".example-link, .example-2\").click(function () {\n    $(\".example-2\").toggleClass(\"opened\");\n});\n```\n*Note : `$` est une instance de la librairie [jQuery](http://jquery.com/).*", "dates" : { "published" : { "$date" : 1413280800000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "$(\".example-link, .example-2\").click(function () {\n    $(\".example-2\").toggleClass(\"opened\");\n});", "stylesheet" : ".example {\n    position: relative;\n    -webkit-transform-style: preserve-3d;\n       -moz-transform-style: preserve-3d;\n            transform-style: preserve-3d;\n}\n.example img {\n    display: block;\n    max-width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n}\n.example a {\n    display: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, 0.8);\n    text-align: center;\n    font-weight: bold;\n    font-size: 1.6em;\n    line-height: 1.3;\n}\n.example a:hover {\n    color: #48739E;\n    text-decoration: none;\n}\n.example:hover a {\n    display: block;\n}\n.example span {\n    position: relative;\n    display: inline-block;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n       -moz-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n         -o-transform: translateY(-50%);\n            transform: translateY(-50%);\n}\n\n.example-2 {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n.example-2 img {\n    margin-top: 0;\n    max-width: 100%;\n}\n.example-2.opened {\n    display: block;\n}\n.example-2:before {\n    content: \"\";\n    position: absolute;\n    z-index: 1;\n    background-color: rgba(0, 0, 0, 0.8);\n    width: 100%;\n    height: 100%;\n}\n.example-2 figure {\n    background-color: #FFF;\n    position: absolute;\n    z-index: 2;\n    margin: 0;\n    width: 100%;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n       -moz-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n         -o-transform: translateY(-50%);\n            transform: translateY(-50%);\n}\n\n@media (min-width: 768px) {\n    .example-2 figure {\n        top: 50%;\n        left: 50%;\n    width: 764px;\n    -webkit-transform: translateX(-50%) translateY(-50%);\n       -moz-transform: translateX(-50%) translateY(-50%);\n        -ms-transform: translateX(-50%) translateY(-50%);\n         -o-transform: translateX(-50%) translateY(-50%);\n            transform: translateX(-50%) translateY(-50%);\n    }\n}\n.example-2 figcaption {\n    /* Mise en forme figcaption */\n    text-align: center;\n    padding: 16px;\n    margin-top: -5px;\n}\n\n\n.article {\n    position: relative;\n    z-index: 4;\n}\n.example-link {\n    font-weight: bold;\n    font-size: 1.6em;\n    display: block;\n    text-align: center;\n    margin-top: 32px;\n    margin-bottom: 32px;\n}", "title" : "<span>Centrer</span> <span>verticalement</span> n'importe quel élément en quelques lignes <span>CSS</span>", "urn" : "centrer-verticalement-n-importe-quel-element-en-quelques-lignes-css" }
{ "__v" : 0, "_id" : { "$oid" : "542c24e6ac53204337fa2e08" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ca" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "Une chose qui me gène avec la `$(document).ready()` de la librairie [jQuery], c'est que c'est une magnifique porte ouverte aux mauvaises pratiques JavaScript. Elle empèche les développeurs web en herbe de se pauser les bonnes questions et pire encore, comme j'ai pu le constater récemment, aux développeurs à priori chevronnés d'en faire de même...\n\nOui, le `$(document).ready()` *peut* être utilisé plus d'une fois dans un ensemble de fichier et oui, il *peut* être placé n'importe où dans une page HTML __mais non, ce n'est absolument pas vous rendre service que de faire cela !__ Ce n'est pas parce que l'on peut, que l'on doit.\n\nMettre ces déclarations un peu partout rend plus difficile la relecture et le debug du code en empêchant de savoir qui s'exécute avant qui sans regarder l'ordre d'appel des fichiers. Effectivement, si cela semble simple et pratique quand 3 fichiers se battent en duel, cela peut rapidement devenir complexe. De plus, si une exception est levé dans l'un des `$(document).ready()`, aucun des autres n’exécutera plus rien du tout. Pour finir, le code est ralenti lors de l'appel de plusieurs `$(document).ready()` contre un seul, ou contre aucun d'ailleurs.\n\n<figure>\n<img src=\"http://blog.haeresis.fr/upload/image/jquery-document-ready-zzzz.jpg\" alt=\"$(document).ready() ZzzZz\">\n<figcaption><a href=\"http://encosia.com/dont-let-jquerys-document-ready-slow-you-down/\" title=\"Don’t let jQuery’s $(document).ready() slow you down\">Don’t let jQuery’s $(document).ready() slow you down</a></figcaption>\n</figure>\n\nDans cet article nous allons voir l'une des dizaines de façon de vous passer de `$(document).ready()` dans vos pages web. Le maître mot ? Un seul point d'entré pour l'ensemble du code exécuté sur une page. [Vous trouverez également un exemple de la méthode décrite dans cet article dans ce repository GitHub](https://github.com/Haeresis/SimpleAtlas).\n\n  [jQuery]: http://jquery.com/\n\n\n\n\n\n## Être composant orienté avec jQuery ##\n\n### JavaScript en vrac ###\n\nAdmettons que dans une page on trouve deux composants de Carrousel avec en pied de page un appel à la libraire [jQuery], à l'extension jQuery [OWL Carousel](http://owlgraphic.com/owlcarousel/) pour gérer des carrousels, et un fichier pour écrire notre code JavaScript.\n\n```html\n<!-- Ici une image pleine, slidable -->\n<div class=\"one-item-carousel\">\n    <div class=\"carousel\">\n        <div class=\"item\"><img src=\"assets/fullimage1.jpg\" alt=\"The Last of us\"></div>\n        <div class=\"item\"><img src=\"assets/fullimage2.jpg\" alt=\"GTA V\"></div>\n        <div class=\"item\"><img src=\"assets/fullimage3.jpg\" alt=\"Mirror Edge\"></div>\n    </div>\n</div>\n\n<!-- Ici plusieurs petites images qui défilent -->\n<div class=\"multiple-item-carousel\">\n    <div class=\"carousel\">\n        <div class=\"item\"><img src=\"assets/fullimage1.jpg\" alt=\"The Last of us\"></div>\n        <div class=\"item\"><img src=\"assets/fullimage2.jpg\" alt=\"GTA V\"></div>\n        <div class=\"item\"><img src=\"assets/fullimage3.jpg\" alt=\"Mirror Edge\"></div>\n    </div>\n</div>\n\n<!-- ... -->\n\n<!-- En pied de page, l'appel aux scripts -->\n<script src=\"jquery.js\"></script>\n<script src=\"owl.carousel.js\"></script>\n<script src=\"common.js\"></script>\n```\n\nLe fichier `common.js` pourrait alors ressembler à cela :\n\n```js\n$(document).ready(function() {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n});\n\n$(document).ready(function() {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n});\n```\n\net une découpe en composant des fichiers pourrait être celle-ci :\n\n*component.one-item-carousel.js*\n\n```js\n$(document).ready(function() {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n});\n```\n\n*component.multiple-item-carousel.js*\n\n```\n$(document).ready(function() {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n});\n```\n\n\n\n### Exécution en retour AJAX après que le document soit `ready` impossible ###\n\nQue ce passerait t-il si `.one-item-carousel` était déjà dans le code source HTML de la page mais que `.multiple-item-carousel` était rapatrié par chargement AJAX ou Websocket ?\n\n```js\n$(document).ready(function() {\n    $.ajax(\"multiple-item-carousel.html\", function() {\n        // Rapatriement du code HTML de `.multiple-item-carousel` et injection dans la page.\n    });\n});\n\n$(document).ready(function() {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n});\n\n$(document).ready(function() {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        items : 10,\n        itemsDesktop : [1000,5],\n        itemsDesktopSmall : [900,3],\n        itemsTablet: [600,2],\n        itemsMobile : false\n    });\n});\n```\n\nEt bien `.one-item-carousel .carousel` serait bien exécuté mais pas `.multiple-item-carousel .carousel` car aucun élément ne serait ciblé quand le « document serait ready ». Et selon la rapidité de votre machine ou du réseau, peut-être que finalement ça passerait... Pire, votre seul moyen de ré-exécuter le code dans vos `$(document).ready()` est de supprimer et ré-injecter le script dans le HTML. \n\n\n\n### Appels de fonctions ###\n\n« Mais c'est très simple ! Il suffit alors de déporter les appels dans des fonctions et d'en exécuter une en retour d'AJAX ! »\n\n```js\nfunction loadOneItemCarousel() {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n}\n\nfunction loadMultipleItemCarousel();() {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        items : 10,\n        itemsDesktop : [1000,5],\n        itemsDesktopSmall : [900,3],\n        itemsTablet: [600,2],\n        itemsMobile : false\n    });\n}\n\n$(document).ready(function() {\n    $.ajax(\"multiple-item-carousel.html\", function() {\n        // Rapatriement du code HTML de `.multiple-item-carousel` et injection dans la page.\n        // Après rapatriement, on exécute le code JavaScript.\n        loadMultipleItemCarousel();\n    });\n});\n\n$(document).ready(function() {\n    loadOneItemCarousel();\n});\n\n$(document).ready(function() {\n    loadMultipleItemCarousel();\n});\n```\n\n\n\n### Inutilité de plusieurs `$(document).ready()` ###\n\nOn peut alors aisément transformer le code précédent en celui-ci et par la même occasion se débarrasser des multiples `$(document).ready()` :\n\n```js\nfunction loadOneItemCarousel() {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n}\n\nfunction loadMultipleItemCarousel() {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        items : 10,\n        itemsDesktop : [1000,5],\n        itemsDesktopSmall : [900,3],\n        itemsTablet: [600,2],\n        itemsMobile : false\n    });\n}\n\n$(document).ready(function() {\n    $.ajax(\"multiple-item-carousel.html\", function() {\n        // Rapatriement du code HTML de `.multiple-item-carousel` et injection dans la page.\n        // Après rapatriement, on exécute le code JavaScript.\n        loadMultipleItemCarousel(); \n    });\n\n    loadOneItemCarousel();\n    loadMultipleItemCarousel();\n});\n```\n\n\n\n### Namespace pour ses fonctions ###\n\nC'est un bon début mais que va t'il se passer s'il y a des milliers de fonctions et de composants ? \n\n```js\nfunction loadOneItemCarousel() {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n}\n\nfunction playOneItemCarousel() {\n    $(\".one-item-carousel .carousel\").trigger('owl.play', 1000);\n}\n\nfunction loadMultipleItemCarousel() {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        items : 10,\n        itemsDesktop : [1000,5],\n        itemsDesktopSmall : [900,3],\n        itemsTablet: [600,2],\n        itemsMobile : false\n    });\n}\n\nfunction playMultipleItemCarousel() {\n    $(\".multiple-item-carousel .carousel\").trigger('owl.play', 1000);\n}\n\n$(document).ready(function() {\n    $.ajax(\"multiple-item-carousel.html\", function() {\n        // Rapatriement du code HTML de `.multiple-item-carousel` et injection dans la page.\n        // Après rapatriement, on exécute le code JavaScript.\n        loadMultipleItemCarousel(); \n    });\n\n    loadOneItemCarousel();\n    loadMultipleItemCarousel();\n});\n```\n\nVos nom de fonction vont se télescoper ou alors ils vont être très long. C'est le moment de les rassembler dans les mêmes objets.\n\n\n```js\nvar website = {},\n    website.components = {};\n\n\n\n// Composant one-item-carousel.\nwebsite.components[\"one-item-carousel\"] = {};\nwebsite.components[\"one-item-carousel\"].load = function () {\n    $(\".one-item-carousel .carousel\").owlCarousel({\n        navigation : true,\n        slideSpeed : 300,\n        paginationSpeed : 400,\n        singleItem:true \n    });\n};\nwebsite.components[\"one-item-carousel\"].play = function () {\n    $(\".one-item-carousel .carousel\").trigger('owl.play', 1000);\n};\nwebsite.components[\"one-item-carousel\"] = function () {\n    website.components[\"one-item-carousel\"].load();\n    website.components[\"one-item-carousel\"].play();\n};\n\n\n\n// Composant multiple-item-carousel.\nwebsite.components[\"multiple-item-carousel\"] = {};\nwebsite.components[\"multiple-item-carousel\"].load = function () {\n    $(\".multiple-item-carousel .carousel\").owlCarousel({\n        items : 10,\n        itemsDesktop : [1000,5],\n        itemsDesktopSmall : [900,3],\n        itemsTablet: [600,2],\n        itemsMobile : false\n    });\n}\n};\nwebsite.components[\"multiple-item-carousel\"].play = function () {\n    $(\".multiple-item-carousel .carousel\").trigger('owl.play', 1000);\n};\nwebsite.components[\"multiple-item-carousel\"] = function () {\n    website.components[\"multiple-item-carousel\"].load();\n    website.components[\"multiple-item-carousel\"].play();\n};\n\n\n\n// Controller de page.\nwebsite.ajax = function () {\n    $.ajax(\"multiple-item-carousel.html\", function() {\n        website.components[\"multiple-item-carousel\"]();\n    });\n};\nwebsite = function () {\n    // Lancement Controller.\n    website.ajax();\n\n    // Lancement Composant.\n    website.components[\"one-item-carousel\"]();\n    website.components[\"multiple-item-carousel\"](); \n};\n\n\n\n// Le fameux Document Ready.\n$(document).ready(function() {\n    website.init();\n});\n```\n\n\n\n### Du code moins verbeux, du cloisonnement ###\n\nOn voit facilement qu'il y a redondance d'appel et que le code est toujours alimenter depuis le champ lexical global contrairement à un appel dans `$(document).ready()` qui à le mérite de cloisonner l'exécution de code. Allégeons tout ça, et créons de vrai cloisons sans `$(document).ready()`. \n\n```js\nvar website = {};\n\n\n\n// Composant one-item-carousel.\n(function (publics) {\n    var name = \"one-item-carousel\",\n        privates = {};\n\n    publics.components = publics.components || {};\n\n    privates.load = function () {\n        $(\".\" + name + \" .carousel\").owlCarousel({\n            navigation : true,\n            slideSpeed : 300,\n            paginationSpeed : 400,\n            singleItem:true \n        });\n    };\n    privates.play = function () {\n        $(\".\" + name + \" .carousel\").trigger('owl.play', 1000);\n    };\n    privates = function () {\n        privates.load();\n        privates.play();\n    };\n\n    publics.components[name] = function () {\n        privates();\n    };\n}(website));\n\n\n\n// Composant multiple-item-carousel.\n(function (publics) {\n    var name = \"multiple-item-carousel\",\n        privates = {};\n\n    publics.components = publics.components || {};\n\n    privates.load = function () {\n        $(\".\" + name + \" .carousel\").owlCarousel({\n            items : 10,\n            itemsDesktop : [1000,5],\n            itemsDesktopSmall : [900,3],\n            itemsTablet: [600,2],\n            itemsMobile : false\n        });\n    };\n    privates.play = function () {\n        $(\".\" + name + \" .carousel\").trigger('owl.play', 1000);\n    };\n    privates = function () {\n        privates.load();\n        privates.play();\n    };\n\n    publics.components[name] = function () {\n        privates();\n    };\n}(website));\n\n\n\n// Controller de page.\n(function (publics) {\n    var privates = {};\n\n    privates.ajax = function () {\n        $.ajax(\"multiple-item-carousel.html\", function() {\n            publics.components[\"multiple-item-carousel\"]();\n        });\n    };\n    publics.init = function () {\n        privates.ajax();\n\n        // Lancement Composant.\n        publics.components[\"one-item-carousel\"]();\n        publics.components[\"multiple-item-carousel\"]();\n    };\n}(website));\n\n\n\n// Le fameux Document Ready.\n$(document).ready(function() {\n    website.init();\n});\n```\n\nNote : Vous pourrez mieux comprendre cet exemple, notamment la différence entre `publics` et `privates` avec l'article [Structurer le JavaScript de son site avec ou sans Framework](http://blog.lesieur.name/structurer-le-javascript-de-son-site-avec-ou-sans-framework/)\n\n\n\n## Composant orienté, sans $(document).ready() ##\n\nIl est aisé à présent de découper notre code dans ces trois fichiers par exemple :\n\n```html\n        <!-- ... -->\n\n        <script src=\"component.one-item-carousel.js\"></script>\n        <script src=\"component.multiple-item-carousel.js\"></script>\n        <script src=\"common.js\"></script>\n    </body>\n</html>\n```\n\n*component.one-item-carousel.js*\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    var name = \"one-item-carousel\",\n        privates = {};\n\n    publics.components = publics.components || {};\n\n    privates.load = function () {\n        $(\".\" + name + \" .carousel\").owlCarousel({\n            navigation : true,\n            slideSpeed : 300,\n            paginationSpeed : 400,\n            singleItem:true \n        });\n    };\n    privates.play = function () {\n        $(\".\" + name + \" .carousel\").trigger('owl.play', 1000);\n    };\n    privates = function () {\n        privates.load();\n        privates.play();\n    };\n\n    publics.components[name] = function () {\n        privates();\n    };\n}(website));\n```\n\n*component.multiple-item-carousel.js*\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    var name = \"multiple-item-carousel\",\n        privates = {};\n\n    publics.components = publics.components || {};\n\n    privates.load = function () {\n        $(\".\" + name + \" .carousel\").owlCarousel({\n            items : 10,\n            itemsDesktop : [1000,5],\n            itemsDesktopSmall : [900,3],\n            itemsTablet: [600,2],\n            itemsMobile : false\n        });\n    };\n    privates.play = function () {\n        $(\".\" + name + \" .carousel\").trigger('owl.play', 1000);\n    };\n    privates = function () {\n        privates.load();\n        privates.play();\n    };\n\n    publics.components[name] = function () {\n        privates();\n    };\n}(website));\n```\n\nEt de faire sauter le dernier `$(document).ready()` qui ne sert à rien puisque `common.js` est le dernier fichier appelé sur la page.\n\n*common.js*\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    var privates = {};\n\n    privates.ajax = function () {\n        $.ajax(\"multiple-item-carousel.html\", function() {\n            publics.components[\"multiple-item-carousel\"]();\n        });\n    };\n    publics.init = function () {\n        privates.ajax();\n\n        // Lancement Composant.\n        publics.components[\"one-item-carousel\"]();\n        publics.components[\"multiple-item-carousel\"]();\n    };\n}(website));\n\n\n\n// Le fameux Document Ready disparait.\n//$(document).ready(function() {\n    website.init();\n//});\n```\n\n\n\n## Charger automatiquement les composants présent dans la page ##\n\nC'est vrai que notre petit exercice nous permet de moduler l'appel des fonctions indépendamment de l'état du DOM mais elles ne se chargent plus automatiquement au chargement...\n\nCe petit ajustement de `common.js` répondra à cette problématique\n\n```js\nvar website = website || {};\n\n(function (publics) {\n    var privates = {};\n\n    privates.ajax = function () {\n        $.ajax(\"multiple-item-carousel.html\", function() {\n            publics.components[\"multiple-item-carousel\"]();\n        });\n    };\n\n    // Chargement automatique des composants présent dans la page.\n    privates.loadComponents = function () {\n        for (var i in publics.components) {\n            // Sont t-il bien présent ?\n            if ($(\".\" + i).length > 0) {\n                publics.components[i]();\n            }\n        }\n    };\n\n    publics.init = function () {\n        privates.ajax();\n\n        // Lancement Composant.\n        privates.loadComponents();\n    };\n}(website));\n\nwebsite.init();\n```\n\n\n\n### Déjà exécuté ? ###\n\nAvec une petite classe, il est même possible de taguer les composants comme déjà exécutés pour ne pas les ré-exécuter une autre fois lors d'un rapatriement via AJAX ou Websocket.\n\n\n\n### Arrêter le cas par cas ###\n\nVous pouvez également en retour d'AJAX ou Websocket exécuté `website.loadComponents()` au lieu de `website.components[\"multiple-item-carousel\"]()` par exemple (à condition d'accrocher `loadComponents()` à `publics`) pour ne plus vous préoccuper des composants renvoyé par les sources AJAX.\n\n\n\n## Exemple complet sur GitHub ##\n\n[Vous pouvez tester un exemple similaire à ce petit exercice dans le projet GitHub « ComponentAutoLoadTemplate »](https://github.com/Haeresis/SimpleAtlas).", "dates" : { "published" : { "$date" : 1413992400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Éviter les multiples $(document).ready() dans vos pages web", "urn" : "eviter-les-multiples-jquery-document-ready-dans-vos-pages-web" }
{ "__v" : 0, "_id" : { "$oid" : "5434dd2bac53204337fa2e0a" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48ca" } ], "content" : "Depuis que le [Responsive Web Design] a commencé son invasion, beaucoup de site ne possède plus qu'une unique version qui gère :\n- un affichage complet pour écrans larges de type écran d'ordinateur (Desktop) et\n- un affichage léger et partiellement complet pour les écrans de type mobiles/tablettes.\n\nCela revient souvent à inhiber des fonctionnements jugés peu utiles par les développeurs ou ergonomiquement trop instables pour être présentés sur les petits appareils et empêche alors : \n- d'afficher la version Desktop sur les mobiles/tablettes ou \n- d'afficher la version Desktop dans une fenêtre de navigateur rétréci.\n\nJe vous propose, à travers des exemples [CSS-Driven](http://blog.lesieur.name/grille-css-responsive-et-semantique-sans-framework/), de vous expliquer comment gérer deux versions d'affichage de vos pages avec comme toujours [une seule structure HTML sémantique](http://blog.lesieur.name/grille-css-responsive-et-semantique-sans-framework/).\n\n\n\n\n\n## En [Desktop First] ##\n\nLe [Desktop First] consiste à penser en priorité l'affichage maximal pour grand écran d'un site web puis ensuite d'ajouter des instructions pour des versions plus petites. En générale ce n'est pas une approche choisi consciemment mais utilisée sur des sites déjà existant qui n'ont pas initialement fait l'objet d'une version Mobile.\n\nVoici donc un site créer pour un affichage fixe :\n\n**CSS du site version Desktop**\n\n```css\nbody {\n    /* Le site est taillé pour un affichage 1024px */\n    width: 1024px;\n}\n\n```\n\nUne fois la version Mobile ajouté au code existant, le site s'affiche en version [Responsive Web Design] sur tous les petits périphériques ou dans les fenêtres de navigateurs rétrécis :\n\n**CSS addon pour version Mobile**\n\n```css\nbody {\n    width: 1024px;\n}\n@media (max-width: 1023px) {\n    /* Cependant, si l'écran est inférieur à 1024px... */\n    /* ...alors on applique la propriété suivante */\n    body {\n        width: auto;\n    }\n}\n\n```\n\nAvec cette modification, il n'est plus possible d'afficher la version Desktop sur mobiles/tablettes ou fenêtre rétrécis.\n\nVoici une manière simple d'ajouter un affichage [Responsive Web Design] (version Mobile) tout en conservant l'affichage, si souhaité, de la version Desktop pour mobiles/tablettes en [Desktop First]. Il faut pour cela :\n\n1. Se servir d'une classe conditionnelle `.rwd` (pour « Responsive Web Design ») que l'on va placer dans `<html class=\"rwd\">` pour rendre notre site [Responsive Web Design].\n\n2. Préfixer tous les sélecteurs CSS destinés à habiller des affichages inférieurs à la version Desktop (la plus large) par `.rwd` :\n\n    **Ajout de .rwd**\n\n    ```css\nbody {\n    /* Le site est taillé pour un affichage 1024px */\n    width: 1024px;\n}\n@media (max-width: 1023px) {\n    /* Cependant, si l'écran est inférieur à 1024px... */\n    /* ...et uniquement si le site est en mode RWD (c'est le cas par defaut)... */\n    /* ...alors on applique la propriété suivante */\n    .rwd body {\n        width: auto;\n    }\n}\n```\n\n3. Ajouter un lien *Version Desktop* qui ne s'affiche que si le site possède la classe `.rwd` et n'est pas dans sa taille maximale et ajouter un lien *Version Mobile* qui ne s'affiche que si la classe `.rwd` n'est pas là.\n\n   **Ajout de liens de switch**\n\n   ```css\n/* On force à ne pas proposer l'affichage Desktop... */\na.ask-for-display-desktop {\n    display: none;\n}\n@media (max-width: 1023px) {\n    /* ...sauf si le site est en RWD et est... */\n    /* ...en version inférieur à la version maximale */\n    .rwd a.ask-for-display-desktop {\n        display: inline;\n    }\n}\n/* Par défaut la demande de passer en version RWD est là... */\n/* ...et si on est déjà en RWD on ne l'affiche pas */\n.rwd a.ask-for-display-responsive {\n    display: none;\n}\n```\n\nÀ présent il suffit du côté Back-end :\n\n- d'injecter la classe `.rwd` ainsi que la meta `name=\"viewport\"` pour la version [Responsive Web Design] dans la page délivrée.\n\n   ```html\n<!DOCTYPE html>\n<html lang=\"en\" class=\"rwd\">\n    <head>\n        <!-- Title, Meta, etc. -->\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n    </head>\n    <!-- Body -->\n</html>\n```\n\n- de ne pas le faire pour la version Desktop\n\n   ```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <!-- Title, Meta, etc. -->\n    </head>\n    <!-- Body -->\n</html>\n```\n\n\n\n### Exemple live ###\n\n> **<a href=\"http://blog.haeresis.fr/examples/desktop-support/desktop-first_mobile-and-desktop-version.html\" target=\"_blank\">Vous pouvez tester ici un exemple de site inter-changeable entre version Desktop et version Mobile (Responsive) avec la technique Desktop First.</a>**\n\n> - Si vous venez d'un grand écran, pensez à rétrécir la fenêtre de votre navigateur pour faire apparaître en pied de page le lien de la version non Responsive.\n> - Si vous venez d'un(e) mobile/tablette, cliquez juste sur le lien de pied de page.\n\n> *[Le code source est là](http://codepen.io/Haeresis/pen/aBmIj)*\n\n\n\n### Recharger la meta viewport sans recharger la page ##\n\nComme votre structure HTML et CSS est identique quelque soit la version, vous n'êtes pas obligé de rafraîchir le navigateur pour passer d'une version à l'autre. L'astuce pour forcer les appareils à prendre en compte les modifications de la `<meta name=\"viewport\">` est, plutôt que de la mettre et la retirer, de la laisser en permanence et simplement remplir (ou non) son attribut `content`. Voici un exemple de code jQuery :\n\n```js\n$(\"a.ask-for-display-desktop\").click(function (e) {\n    e.preventDefault();\n    $(\"html\")\n        .removeClass(\"rwd\");\n    $(\"meta[name=viewport]\").attr('content','');\n    $.ajax(/* prévenez le Back-end que le site sera dorénavant affiché en Desktop */);\n});\n$(\"a.ask-for-display-responsive\").click(function (e) {\n    e.preventDefault();\n    $(\"html\")\n        .addClass(\"rwd\");\n    $(\"meta[name=viewport]\").attr('content','width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no');\n    $.ajax(/* prévenez le Back-end que le site sera dorénavant affiché en Mobile */);\n});\n```\n\navec dans votre fichier html :\n\n```html\n<!-- ... -->\n<a class=\"display-desktop\" href=\"desktop-first_desktop-version.html\">Afficher version Bureau</a>\n<!-- ... -->\n<a class=\"display-responsive\" href=\"desktop-first_mobile-version.html\">Afficher version Mobile/Tablette</a>\n<!-- ... -->\n```\n\n\n\n\n\n## En [Mobile First] ##\n\nSi en [Desktop First] cela se révèle être un jeu d'enfant, il en est tout autrement pour le [Mobile First]. Effectivement, cette aproche fait qu'en réalité, notre site ne possède pas « réellement » de version Desktop mais seulement un affichage le plus large possible. Il n'a donc initialement pas été convenu d'une version Desktop dont l'utilité est cette fois plus discutable qu'en [Desktop First].\n\nVoyons en quoi cela pause problème avec ces 4 fichiers :\n\n**Fichier common-xs.css**\n\n```css\n/* Fichier pour mobile */\nbody {\n    width: auto;\n}\n```\n\n**Fichier common-sm.css**\n\n```css\n/* Fichier pour grand mobile ou petite tablette */\n@media (min-width: 768px) {\n    body {\n        width: 768px;\n    }\n}\n```\n\n**Fichier common-md.css**\n\n```css\n/* Fichier pour grande tablette ou petit écran */\n@media (min-width: 992px) {\n    body {\n        width: 992px;\n    }\n}\n```\n\n**Fichier common-lg.css**\n\n```css\n/* Fichier pour grand écrann */\n@media (min-width: 1200px) {\n    body {\n        width: 1200px;\n    }\n}\n```\n\nComprenez bien que si en [Desktop First], ce qui se trouve dans la partie `@media (max-width: 1023px)` est interprété sur écran mobiles/tablettes (et inhibé sans `.rwd` pour afficher la version Desktop) ; ici jamais les instructions du fichier `common-lg.css` censés s'occuper de l'affichage Desktop ne seront interprétés sur un périphérique plus petit que 1200px. Donc quoi qu'il arrive : il ne peut exister de version Desktop affichable sur mobile/tablette.\n\nVoyons tout de même deux types d'implémentations [Mobile First] qui pallie à ce problème.\n\n\n\n### Implémentation en plusieurs fichiers ###\n\nLes 4 fichiers précédents peuvent être appelés de manière minifiés par 4 balises comme suit :\n\n```html\n<!-- ... -->\n<head>\n    <!-- ... -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n    <link rel=\"stylesheet\" href=\"common-xs.css\" media=\"screen\">\n    <link rel=\"stylesheet\" href=\"common-sm.css\" media=\"screen and (min-width: 768px)\">\n    <link rel=\"stylesheet\" href=\"common-md.css\" media=\"screen and (min-width: 992px)\">\n    <link rel=\"stylesheet\" href=\"common-lg.css\" media=\"screen and (min-width: 1200px)\">\n    <!-- ... -->\n</head>\n<!-- ... -->\n```\n\n- _Avantage_ : chargement priorisé,\n\n  - si je réclame la page sur grand écran, on arrête le traitement de la page HTML le temps de charger les 4 fichiers mais,\n  - si je réclame la page sur mobile, on arrête le traitement de la page HTML le temps de charger le premier fichier, la page est alors rendu complètement, puis les 3 autres fichiers sont chargés à la fin. Si l'écran est un peu plus grand que 768px alors ce seront les 2 premiers fichiers puis les deux autres à la fin, etc.\n\n- _Inconvénient_ : plus de requêtes HTTP.\n\nPour que cette configuration fonctionne, il faut dans un premier temps retirer les Media Queries des fichiers CSS eux-mêmes. Cela n'impacte en rien le rendu puisque les Media Queries sont gérées au niveau de la page HTML dans la propriété `media` :\n\n```css\n/* Fichier pour mobile */\nbody {\n    width: auto;\n}\n```\n\n**Fichier common-sm.css**\n\n```css\n/* Fichier pour grand mobile ou petite tablette */\nbody {\n    width: 768px;\n}\n```\n\n**Fichier common-md.css**\n\n```css\n/* Fichier pour grande tablette ou petit écran */\nbody {\n    width: 992px;\n}\n```\n\n**Fichier common-lg.css**\n\n```css\n/* Fichier pour grand écrann */\nbody {\n    width: 1200px;\n}\n```\n\nÀ présent quand le site est réclamé en version Desktop via un lien spécifique il faut : \n\n- ne pas injecter les Media Queries dans l'attribut `media` des balises `link` de la page délivrée et de retirer la `<meta name=\"viewport\">`\n\n   ```html\n<!-- ... -->\n<head>\n    <!-- ... -->\n    <link rel=\"stylesheet\" href=\"common-xs.css\" media=\"screen\">\n    <link rel=\"stylesheet\" href=\"common-sm.css\" media=\"screen\">\n    <link rel=\"stylesheet\" href=\"common-md.css\" media=\"screen\">\n    <link rel=\"stylesheet\" href=\"common-lg.css\" media=\"screen\">\n    <!-- ... -->\n</head>\n<!-- ... -->\n```\n\n\n\n### Implémentation en un seul fichier ###\n\nPour reproduire une équivalence du [Mobile First] en respectant l'ordre d'appel des propriétés CSS (de l'affichage le plus petit au plus grand) tout en permettant un fonctionnement comme dans la partie [Desktop First] de cet article il va falloir :\n\n1. Rassembler les éléments en un seul fichier.\n\n   ```css\n/* Fichier pour mobile */\nbody {\n    width: auto;\n}\n/* Fichier pour grand mobile ou petite tablette */\n@media (min-width: 768px) {\n    body {\n        width: 768px;\n    }\n}\n/* Fichier pour grande tablette ou petit écran */\n@media (min-width: 992px) {\n    body {\n        width: 992px;\n    }\n}\n/* Fichier pour grand écrann */\n@media (min-width: 1200px) {\n    body {\n        width: 1200px;\n    }\n}\n```\n\n2. Empiler les sections par pallier maximal avec Media Queries et traiter les propriétés de la partie large Desktop sans Media Queries :\n\n   ```css\n/* Fichier pour mobile */\n@media (max-width: 767px) {\n    body {\n        width: auto;\n    }\n}\n/* Fichier pour grand mobile ou petite tablette */\n@media (max-width: 991px) {\n    body {\n        width: 768px;\n    }\n}\n/* Fichier pour grande tablette ou petit écran */\n@media (max-width: 1199px) {\n    body {\n        width: 992px;\n    }\n}\n/* Fichier pour grand écrann */\nbody {\n    width: 1200px;\n}\n```\n\n3. Et intégrer une classe `.rwd` que l'on va placer dans `<html class=\"rwd\">` sur chacune des propriétés dans les Media Queries :\n\n   ```css\n/* Fichier pour mobile */\n@media (max-width: 767px) {\n    .rwd body {\n        width: auto;\n    }\n}\n/* Fichier pour grand mobile ou petite tablette */\n@media (max-width: 991px) {\n    .rwd body {\n        width: 768px;\n    }\n}\n/* Fichier pour grande tablette ou petit écran */\n@media (max-width: 1199px) {\n    .rwd body {\n        width: 992px;\n    }\n}\n/* Fichier pour grand écrann */\nbody {\n    width: 1200px;\n}\n```\n\nÀ présent il suffit du côté Back-end :\n\n- d'injecter la classe `.rwd` ainsi que la meta `name=\"viewport\"` pour la version [Responsive Web Design] dans la page délivrée.\n\n   ```html\n<!DOCTYPE html>\n<html lang=\"en\" class=\"rwd\">\n    <head>\n        <!-- Title, Meta, etc. -->\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n    </head>\n    <!-- Body -->\n</html>\n```\n\n- de ne pas le faire pour la version Desktop\n\n   ```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <!-- Title, Meta, etc. -->\n    </head>\n    <!-- Body -->\n</html>\n```\n\n\n\n\n\n## Scénario de cas d'utilisation ##\n\n**[Dans cet exemple](http://blog.haeresis.fr/examples/desktop-support/desktop-first_mobile-and-desktop-version.html)**, l'utilisateur n'a pas accès aux trois zones vertes « Step » en pied de la zone « Article » s'il visite le site sur mobile.\n\nC'est un utilisateur qui va quasiment toujours sur le site sur son PC de bureau. Cependant, quand il se rend sur son site préféré depuis son mobile afin justement d'aller consulter les informations dans ces zones « Step », il ne les trouve pas. Il aurait juré qu'elles étaient là sur son PC, mais là, il ne voit rien. De plus, avant la version mobile n'existait pas.\n\nC'est ennuyant car sont mobile à un très bon écran et gère le zoom à merveille. Alors il va cocher le paramètre proposé par son navigateur mobile qui s'appelle « Voir version ordinateur » mais rien... toujours pas de « Step », pourquoi diable ne peut-il pas afficher cette @!#$? de version Desktop !\n\n**Le problème de notre utilisateur est résolu grâce a cet article car, comme bon nombre de sites qui on une version Desktop et une version Mobile dédiée, il y a heureusement un lien « Afficher version bureau » ! Ce que notre utilisateur ne sait pas, c'est que ça version Desktop est au « .rwd » prêt la même page !**\n\n  [Responsive Web Design]: ./les-concepts-autour-du-responsive-web-design/\n  [Mobile First]: ./les-concepts-autour-du-responsive-web-design/#mobile-first\n  [Desktop First]: ./les-concepts-autour-du-responsive-web-design/#desktop-first", "dates" : { "published" : { "$date" : 1412764980000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Conserver un affichage Desktop sur mobile avec une version Responsive Web Design", "urn" : "conserver-une-version-desktop-avec-une-version-mobile-sur-le-meme-site-web" }
{ "__v" : 0, "_id" : { "$oid" : "54369e88ac53204337fa2e0c" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48ca" } ], "content" : "Afin d'apporter un cadre à l'équipe et parce que créer nos propres UI Kit n'est pas à l'ordre du jour, nous avons pris le partie d'utiliser Bootstrap 3 [non sans chagrin](./bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite/).\n\nL'idée finale derrière cette utilisation est de pouvoir créer facilement des composants et de pouvoir les déplacer n'importe ou dans un layout ou dans un composant lui-même.\n\n[Après avoir défendu l'idée que je n'avais pas besoin d'un quelconque Framework pour réaliser cela](./grille-css-responsive-et-semantique-sans-framework/), je me suis atteler à Bootstrap.\n\nLes remarques n'ont pas tardées à tomber sur la manière d'intégrer tout cela :\n\n- « Ça ne sert à rien de mettre un “.col-xs-12” ici, ça revient au même de ne rien mettre »,\n- « Pourquoi il n'y a pas un seul “.container” pour gérer toute la page comme dans [la source de cette page](http://getbootstrap.com/examples/offcanvas/) »,\n- « Il ne faut pas mettre les “.container”  dans les composants mais à l'extérieur sinon en mettant les composants dans des petites colonnes on va dépasser la largeur de la grille. Regarde [la source de cette page](http://getbootstrap.com/examples/offcanvas/) »,\n- « T'as pas besoin de “.container” pour utiliser des “.row” », etc.\n\nLe constat est clair, l'utilisation de Bootstrap pour réaliser des pages en imbriquant des composants est une chose, mais le faire correctement en est une autre !\n\nSuivez le guide pour comprendre les guidelines que doivent suivre tout composant pour être « Drag and Droppable » n'importe où !\n\n\n\n\n\n## Repérer des équivalences ##\n\nLa première chose va être de lister ce que représente réellement chaque classe :\n\n- `<div>` => 100% de la largeur\n- `<div class=\"container-fluid\">` => 100% de la largeur + paddings positifs (+15)\n- `<div class=\"container\">` => largeur de grille + paddings positifs (+15)\n- `<div class=\"row\">` => 100% de la largeur + margins négatives (-15)\n- `<div class=\"col-xs-12\">` => 100% de la largeur + paddings positifs (+15)\n- `<div class=\"col-xx-YY\">` => ZZ% de la largeur + paddings positifs (+15)\n\nOn s'aperçoit alors très vite que :\n\n1. `<div>` et `<div class=\"col-xs-12\">`, ce n'est pas pareil.\n2. `.container-fluid` et `.col-xs-12` sont la même chose.\n3. `.container` et `.col-xs-12` sont la même chose à la seule différence que .container à une largeur fixée.\n4. `.row` a forcément besoin d'un `.container`, c'est juste que si vous n'en voyez pas au dessus, c'est peut-être parce que celui-ci s'appelle `.col-xs-12` (ou n'importe quelle déclinaison `<div class=\"col-xx-YY\">`).\n5. `.container-fluid/.container/.col-xs-12/.col-xx-YY` sont l’opposé de `.row` (paddings positifs est annulé par margins négatifs).\n\n[On peut également aller plus loin en permettant à `.container` d'avoir une taille maximale fixée plutôt qu'une taille fixée](./gerer-sa-cascade-de-grille-et-de-composant-avec-bootstrap/#grille-bootstrap-non-fixe-mais-limite-max).\n\n\n\n\n\n## Être composant orienté ##\n\n### Plusieurs Container ###\n\nSi je sais d'avance ce qui va composer ma grille principale et ce qui va composer mes sous-grilles alors effectivement, je n'ai besoin que d'un seul `.container` pour englober ma page.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Static</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"jumbotron\">\n                <h1>Title</h1>\n            </div>\n            <div class=\"panel\">\n                <h1>Carousel</h1>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-8\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple A</h2>\n                                <p>Exemple A</p>\n                                <p>Exemple A</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple B</h2>\n                                <p>Exemple B</p>\n                                <p>Exemple B</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple C</h2>\n                                <p>Exemple C</p>\n                                <p>Exemple C</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple D</h2>\n                                <p>Exemple D</p>\n                                <p>Exemple D</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple E</h2>\n                                <p>Exemple E</p>\n                                <p>Exemple E</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple F</h2>\n                                <p>Exemple F</p>\n                                <p>Exemple F</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple G</h2>\n                                <p>Exemple G</p>\n                                <p>Exemple G</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <nav class=\"panel\">\n                        <ul>\n                            <li><a href=\"javascript:;\">Link A</a></li>\n                            <li><a href=\"javascript:;\">Link B</a></li>\n                            <li><a href=\"javascript:;\">Link C</a></li>\n                            <li><a href=\"javascript:;\">Link D</a></li>\n                        </ul>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n```\n\n> [Voir le rendu ici](http://codepen.io/Haeresis/pen/Cxhkb)\n\n**Problème**\n\n- Si je souhaite que mon carrousel prenne toute la largeur de la page, je suis bloqué dans mon `.container`. Résolvons ça dans le point suivant.\n\n**Solution**\n\nPour permettre à mon carrousel de prendre toute la largeur, je vais donc éviter le `.container` global mais plutôt utiliser un `.container` ou un `.container-fluid` en fonction de mes besoins.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Multiple container</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"jumbotron\">\n                <h1>Title</h1>\n            </div>\n        </div>\n        <div class=\"container-fluid\">\n            <div class=\"panel\">\n                <h1>Carousel</h1>\n            </div>\n        </div>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-sm-8\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple A</h2>\n                                <p>Exemple A</p>\n                                <p>Exemple A</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple B</h2>\n                                <p>Exemple B</p>\n                                <p>Exemple B</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"component-text panel\">\n                                <h2>Exemple C</h2>\n                                <p>Exemple C</p>\n                                <p>Exemple C</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple D</h2>\n                                <p>Exemple D</p>\n                                <p>Exemple D</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple E</h2>\n                                <p>Exemple E</p>\n                                <p>Exemple E</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple F</h2>\n                                <p>Exemple F</p>\n                                <p>Exemple F</p>\n                            </div>\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <div class=\"panel\">\n                                <h2>Exemple G</h2>\n                                <p>Exemple G</p>\n                                <p>Exemple G</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <nav class=\"panel\">\n                        <ul>\n                            <li><a href=\"javascript:;\">Link A</a></li>\n                            <li><a href=\"javascript:;\">Link B</a></li>\n                            <li><a href=\"javascript:;\">Link C</a></li>\n                            <li><a href=\"javascript:;\">Link D</a></li>\n                        </ul>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n```\n\n> [Voir le rendu ici](http://codepen.io/Haeresis/pen/yIgib)\n\n\n\n### Approche « Layouts / Components » ###\n\nPour permettre l'interversion de tous les composants dans toutes les zones de la page il va toujours falloir les plugger dans des zones d’atterrissage identique.\n\nComme `.container-fluid/.container/.col-xs-12/.col-xx-YY` sont la même chose au niveau des paddings positif, il faut découper les composants entre ces zones pour les rendre interchangeable.\n\nPar conséquent un **composant** atterrira toujours dans une zones à paddings positif et donc ne contiendra jamais en premier lieu une balise enfant avec un `.container-fluid/.container/.col-xs-12/.col-xx-YY`.\n\n*Composant Jumbotron*\n\n```html\n<div class=\"component jumbotron\">\n    <div class=\"jumbotron\">\n        <h1>Title</h1>\n    </div>\n</div>\n```\n\n*Composant Carousel*\n\n```html\n<div class=\"component carousel\">\n    <div class=\"panel\">\n        <h1>Carousel</h1>\n    </div>\n</div>\n```\n\n*Composant Menu*\n\n```html\n<nav class=\"component menu\">\n    <div class=\"panel\">\n        <ul>\n            <li><a href=\"javascript:;\">Link A</a></li>\n            <li><a href=\"javascript:;\">Link B</a></li>\n            <li><a href=\"javascript:;\">Link C</a></li>\n            <li><a href=\"javascript:;\">Link D</a></li>\n        </ul>\n    </div>\n</nav>\n```\n\n*Composant Texte*\n\n```html\n<div class=\"component text\">\n    <div class=\"panel\">\n        <h2>Exemple A</h2>\n        <p>Exemple A</p>\n        <p>Exemple A</p>\n    </div>\n</div>\n```\n\nCependant un **composant** peut commencer par une `.row` pour annuler le padding de sa zone d'arrivée, en vu d'injecter plusieurs `.col-xx-YY`.\n\n*Composant Texte et Image à Droite*\n\n```html\n<div class=\"component text right image\">\n    <div class=\"panel\">\n        <div class=\"row\">\n            <div class=\"col-xs-8\">\n                <h2>Exemple B</h2>\n                <p>Exemple B</p>\n            </div>\n            <div class=\"col-xs-4\">\n                <img class=\"img-responsive\" src=\"\" alt=\"\">\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nAprès le découpage précédent qui a donné naissance à des composants, où est passé la carcasse et les zones d'atterrissage ? C'est ce qui constitue le **layout**. Nos composants précédents peuvent être indépendamment placer dans ce layout : \n\n*Layout A*\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Layout A</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <!-- include component -->\n        </div>\n        <div class=\"container-fluid\">\n            <!-- include component -->\n        </div>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-sm-8\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                        <div class=\"col-sm-4\">\n                            <!-- include component -->\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-sm-4\">\n                    <!-- include component -->    \n                </div>\n            </div>\n        </div>\n    </body>\n</html>\n```\n\nou pourquoi pas celui là :\n\n*Layout B*\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Layout B</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <!-- include component -->\n        </div>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <!-- include component -->\n                </div>\n                <div class=\"col-sm-6\">\n                    <!-- include component -->    \n                </div>\n            </div>\n        </div>\n        <div class=\"container\">\n            <!-- include component -->\n        </div>\n    </body>\n</html>\n```\n\n> [Voir le rendu B ici](http://codepen.io/Haeresis/pen/clifo)\n\nou n'importe quel autre layout !\n\n\n\n### Approche « Full Components » ###\n\nCette approche part du postulat que vous n'avez aucun layout et que tout n'est que composant de composant ! Dans cette approche le découpage va être sensiblement différent et c'est bien les composants eux-mêmes qui vont embarquer les `.container` en tout premier lieux.\n\nÀ noter également que les zones d’atterrissage de composant ne devrons cette fois jamais avoir de padding et donc toujours être précédé d'un `.row`.\n\nIl y a également 2 composants spéciaux qui sont le header et le footer qui contiennent les injections CSS et JavaScript ainsi que les meta données.\n\n#### Grille Bootstrap non fixe mais à limite max ####\n\nAvant tout, pour que cela fonctionne il va falloir transformer les tailles fixes des `.containers` de Bootstrap en tailles maximales.\n\nAjoutez soit cela à la suite de l'appel du fichier Bootstrap :\n\n```css\n@media (min-width: 768px) {\n  .container {\n    width: auto;\n    max-width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: auto;\n    max-width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: auto;\n    max-width: 1170px;\n  }\n}\n```\n\nou remplacez dans le fichier d'origine Bootstrap les 3 `width` précédentes en `max-width`.\n\nCela fera que `.container` deviendra :\n\n- ~~`<div class=\"container\">` => largeur de grille + paddings positifs (+15)~~\n- `<div class=\"container\">` => 100% de la largeur + paddings positifs (+15) + limite max de grille\n\net pourra être inclus lui-même dans un `.container` sans poser de problème.\n\n#### Composants ####\n\nRevoyons le découpage de nos précédents composants :\n\n*Composant Jumbotron*\n\n```html\n<div class=\"component jumbotron\">\n    <div class=\"container\">\n        <div class=\"jumbotron\">\n            <h1>Title</h1>\n        </div>   \n    </div>\n</div>\n```\n\n*Composant Carousel*\n\n```html\n<div class=\"component carousel\">\n    <div class=\"container-fluid\">\n        <div class=\"panel\">\n            <h1>Carousel</h1>\n        </div>\n    </div>\n</div>\n```\n\n*Composant Menu*\n\n```html\n<nav class=\"component menu\">\n    <div class=\"container\">\n        <div class=\"panel\">\n            <ul>\n                <li><a href=\"javascript:;\">Link A</a></li>\n                <li><a href=\"javascript:;\">Link B</a></li>\n                <li><a href=\"javascript:;\">Link C</a></li>\n                <li><a href=\"javascript:;\">Link D</a></li>\n            </ul>\n        </div>\n    </div>\n</nav>\n```\n\n*Composant Texte*\n\n```html\n<div class=\"component text\">\n    <div class=\"container\">\n        <div class=\"panel\">\n            <h2>Exemple A</h2>\n            <p>Exemple A</p>\n            <p>Exemple A</p>\n        </div>\n    </div>\n</div>\n```\n\n*Composant Texte et Image à Droite*\n\n```html\n<div class=\"component text right image\">\n    <div class=\"container\">\n        <div class=\"panel\">\n            <div class=\"row\">\n                <div class=\"col-xs-8\">\n                    <h2>Exemple B</h2>\n                    <p>Exemple B</p>\n                </div>\n                <div class=\"col-xs-4\">\n                    <img class=\"img-responsive\" src=\"\" alt=\"\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nNous voyons qu'a présent se sont les composants eux-mêmes qui embarquent leur comportement maximum. Ajoutons maintenant un composant embarquant des composants.\n\n*Composant Liste à 3 Colonnes*\n\n```html\n<div class=\"component list three colums\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <!-- start for -->\n            <div class=\"col-sm-4\">\n                <div class=\"row\">\n                    <!-- include component[i] -->\n                </div>\n            </div>\n            <!-- end for -->\n        </div>\n    </div>\n</div>\n```\n\n*Composant 2 Tiers 1 Tiers*\n\n```html\n<div class=\"component grid2-1\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-sm-8\">\n                <div class=\"row\">\n                    <!-- include component[0] -->\n                </div>\n            </div>\n            <div class=\"col-sm-4\">\n                <div class=\"row\">\n                    <!-- include component[1] -->\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n*Composant Liste à 2 Colonnes*\n\n```html\n<div class=\"component list two colums\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <!-- start for -->\n            <div class=\"col-sm-6\">\n                <div class=\"row\">\n                    <!-- include component[i] -->\n                </div>\n            </div>\n            <!-- end for -->\n        </div>\n    </div>\n</div>\n```\n\nFinissons avec nos 2 composants spéciaux.\n\n*Composant Header*\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Multiple container</title>\n    </head>\n    <body>\n```\n\n*Composant Footer*\n\n```html\n    </body>\n</html>\n```\n\n#### Pages ####\n\nIl ne nous reste plus, avec un unique moteur comme par exemple [NodeAtlas](http://www.lesieur.name/node-atlas/), à appeler à chaque affichage de page avec une configuration `.json` par exemple.\n\n*Moteur Lamba*\n\n```html\n<!-- start for -->\n<!-- include component[i] -->\n<!-- end for -->\n```\n\n*Équivalent Layout A*\n\n```javascript\n[\n    { \"header\": [] },\n    { \"jumbotron\": [] },\n    { \"carousel\": [] },\n    { \"grid2-1\": [\n        { \"list-three-columns\": [\n            { \"text\": [] },\n            { \"text\": [] },\n            { \"text\": [] },\n            { \"text\": [] },\n            { \"text\": [] },\n            { \"text\": [] },\n            { \"text\": [] }\n        ] },\n        { \"menu\": [] }\n    ] },\n    { \"footer\" }\n]\n```\n\n*Équivalent Layout B*\n\n```javascript\n[\n    { \"header\": [] },\n    { \"jumbotron\": [] },\n    { \"list-two-columns\": [\n        { \"menu\": [] },\n    \t{ \"text-image-right\": [] }\n    ] },\n    { \"carousel\": [] },\n    { \"footer\" }\n]\n```\n\n> [Voir le rendu B ici](http://codepen.io/Haeresis/pen/FlDip)\n\n## Pour aller plus loin ##\n\nEnfin qui dit découpe par composant dans le HTML dit découpe des CSS et JS dans le même sens. Vous pouvez par exemple enregistrer tout ce qui à trait au composant `carousel` dans `component.carousel.js` et `component.carousel.css` et l'injecter dans un bundle spécifique à la page avec les autres composants qui ne sont appelés qu'ici ou dans un bundle commun à toutes les pages. Des Framework comme [NodeAtlas s'occupe pour vous comme des grands de vos bundles](http://haeresis.github.io/NodeAtlas/#minifier-les-cssjs).\n\nVous pouvez également [organiser votre découpe du JavaScript par composant en vous inspirant de ces exemples](http://blog.lesieur.name/structurer-le-javascript-de-son-site-avec-ou-sans-framework/#segmentation).\n\nEt pour finir, même si je n'en ai pas parlé ici, il est évident que le contenu des composants doit être mappé à une source transversale de données indépendamment du composant en lui-même en fonction de la page ou du layout [comme peut le faire NodeAtlas](http://haeresis.github.io/NodeAtlas/#g%C3%A9rer-des-variations-au-sein-dun-m%C3%AAme-template).", "dates" : { "published" : { "$date" : 1412951820000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Gérer sa cascade de grille et de composant avec Bootstrap", "urn" : "gerer-sa-cascade-de-grille-et-de-composant-avec-bootstrap" }
{ "__v" : 0, "_id" : { "$oid" : "544017beac53204337fa2e0d" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "Voilà les petites bases qu'il faut rapidement se mettre en tête à propos de la différence entre les marges externes ou margins et marges internes ou paddings :\n\n- Les margins d'un élément HTML se superposent avec les margins de leur voisin, avec les margins de leur parents, avec les margins des enfants des voisins, etc. Puisqu'elles se trouvent à l'extérieur des borders, elles ne sont pas affectées par les backgrounds.\n\n- Les paddings d'un élément HTML s'additionnent ou se cumulent avec les paddings de leur voisins, avec les paddings de leur parents, avec les paddings des enfants des voisins etc. Puisqu'elles se trouvent à l'intérieur de border, elles sont affectées par les backgrounds.\n\nDeux trois autres chose rapide sont à savoir : comme le fait qu'un élément inline ne gère pas les paddings ou qu'un margin négatif déplace les éléments contrairement au padding négatif qui ne fait rien, etc.\n\nMais saviez-vous que : **Si les éléments deviennent flottants en continuant de prendre toute la largeur... les marges externes se comportent comme les marges internes !**\n\n\n\n\n\n## Guide pour constater le problème ##\n\n### Petite architecture de test ###\n\nNous allons tester ce HTML :\n\n```html\n<p>1. p voisin haut</p>\n<p>1. p voisin bas</p>\n<p>2. p voisin de div haut</p>\n<div>\n  <p>2. p haut enfant de div et entre deux p</p>\n  <p>2. p bas enfant de div et entre deux p</p>\n</div>\n<p>2. p voisin de div bas</p>\n<div>\n  <p>3. p enfant de div qui est voisin haut</p>\n</div>\n<div>\n  <p>3. p enfant de div qui est voisin bas</p>\n</div>\n```\n\navec des marges externes ou margins :\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\np {\n  margin: 10px 0;\n}\ndiv {\n  margin: 10px 0;\n  background-color: #d9d9ff;\n}\n```\n\navec des marges internes ou paddings :\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\np {\n  padding: 10px 0;\n}\ndiv {\n  padding: 10px 0;\n  background-color: #d9d9ff;\n}\n```\n\net avec des margins et des floats :\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\np {\n  margin: 10px 0;\n  width: 100%;\n  float: left;\n}\ndiv {\n  margin: 10px 0;\n  background-color: #d9d9ff;\n  width: 100%;\n  float: left;\n}\n```\n\n\n\n### Test live ! ###\n\nPar défaut dans notre exemple, tous les div et p ont les margings et paddings à 0. Vous êtes en mode margin par défaut sans que rien ne flotte. Les p ont un fond transparent mais les div ont un fond violet. Vous pouvez appréhender l'architecture HTML de cette exemple juste au dessus.\n\n#### Constater la superposition des Margins ###\n\nEn passant votre souris sur les éléments, vous pouvez constater la superposition des margins (marges externes). Les p sont oranges, les div sont violettes foncées, et la superposition fait apparaître du marron. Si vous cochez les checkboxs, vous maintiendrez l'effet même en enlevant votre souris. La première case représente le p, la seconde la div.\n\n<div class=\"example\">\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"jKvmh\" data-default-tab=\"result\" data-user=\"Haeresis\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/jKvmh/'>Behavior of Margin is equals to behavior of Padding with Float</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n</div>\n\n\n#### Constater l'addition des Paddings ###\n\nAvec le menu en haut à droite, « Basculer en mode padding » en cliquant, et constatez que les marges internes s'additionnent. N'hésitez pas à cocher les cases pour maintenir l'effet.\n\n<div class=\"example\">\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"jKvmh\" data-default-tab=\"result\" data-user=\"Haeresis\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/jKvmh/'>Behavior of Margin is equals to behavior of Padding with Float</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n</div>\n\n\n#### Les Margins se comportent comme des Paddings sur les éléments en Float ###\n\nMaintenant « Activez les flottants » tout en restant en « Mode Margin » et, ô surprise, nos margins se comportent maintenant comme des paddings ! Les margins ne se superpose plus mais s'additionne. Et pourtant bien des marges externes.\n\n<div class=\"example\">\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"jKvmh\" data-default-tab=\"result\" data-user=\"Haeresis\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/jKvmh/'>Behavior of Margin is equals to behavior of Padding with Float</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n</div>\n\n\n#### Les Backgrounds ne sont pas affectés ###\n\nAvec les flottants actif, et avec le menu en haut à gauche, alternativement, « Basculer en mode padding » et « Basculez en mode margin » pour remarquer que le background rouge associé aux div borde les enfants dans un cas, et englobe le padding dans l'autre.\n\n<div class=\"example\">\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"jKvmh\" data-default-tab=\"result\" data-user=\"Haeresis\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/jKvmh/'>Behavior of Margin is equals to behavior of Padding with Float</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n</div>\n\n\n\n\n## Petite discussion Bootstrap ##\n\nPour en venir à Bootstrap et sa grille, vous vous êtes peut-être déjà fait la réflexion suivante ou quelqu'un vous la faites :\n\n« Il ne sert à rien d'écrire : » \n\n```html\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <h1>Ceci est le titre</h1>\n        </div>\n        <div class=\"col-xs-12\">\n            <h2>Ceci est le sous-titre</h2>\n        </div>\n    </div>\n</div>\n```\n\n« il faut plutôt écrire : » \n\n```html\n<div class=\"container\">\n    <h1>Ceci est le titre</h1>\n    <h2>Ceci est le sous-titre</h2>\n</div>\n```\n\n« C'est là même chose. »\n\nEt bien avec ce billet, sachez que, puisque `.col-xs-12` et toutes ses déclinaisons sont des flottants, dans le premier cas les marges externes vont se superposer, alors que dans le second cas elles vont s'additionner.\n\nAinsi si sur certaine page censée être identique vous devez juste ajouter en regard du titre un lien pour filtrer les résultats de page :\n\n ```html\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-sm-6\">\n            <h1>Ceci est le titre</h1>\n        </div>\n       <div class=\"col-sm-6 text-right\">\n            <a href=\"\">Filtrer les résultats</a>\n        </div>\n        <div class=\"col-xs-12\">\n            <h2>Ceci est le sous-titre</h2>\n        </div>\n    </div>\n</div>\n```\n\navec le premier cas cité il n'y aura aucun changement si ce n'est l'ajout du lien alors qu'avec le second cas cité, le titre sera plus espacé du sous-titre sur les pages avec filtre et moins espacé sur les pages sans filtre.\n\nLa praticité de Bootstrap nous met malheureusement face à [une abstraction qui fuie](http://french.joelonsoftware.com/Articles/LeakyAbstractions.html) !\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n\n\n\n\n", "dates" : { "published" : { "$date" : 1413542160000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".example {\n   margin: 10px 0;\n}", "title" : "Les Margins se comportent comme des Paddings avec les grilles Bootstrap", "urn" : "les-margins-se-comportent-comme-des-paddings-avec-bootstrap" }
{ "__v" : 0, "_id" : { "$oid" : "544a4724ac53204337fa2e0e" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [], "content" : "*[NodeAtlas]* est une application multi-os écrite en [Node.js] qui va vous permettre de créer, modifier et maintenir tout un ensemble de maquette HTML. Ces maquettes HTML pourront ensuite être validée par le client, et ré-utilisée totalement ou en partie par les développeurs Back-end quelque soit leurs technologie. C'est ce que nous allons voir dans cet article.\n\n*[NodeAtlas]* permet également de faire tourner des sites web complet, performant et rapide tel que le site sur lequel vous être entrain de lire cet article.\n\n> *[NodeAtlas]* est designé pour :\n- [Les débutants en JavaScript qui souhaitent se mettre au Node.js rapidement](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/).\n- **Les experts Front-end, en leur permettant de créer des sites web ou des maquettes HTML de qualité**.\n- Les experts en développement web et/ou JavaScript en leur permettant de créer des sites web et applications JavaScript à hautes performances serveurs.\n\n[NodeAtlas]: https://www.npmjs.com/package/node-atlas/ \"Create MVC2 or Front-end-based websites easily.\"\n[Node.js]: http://nodejs.org/ \"Node.js is a platform built on Chrome's JavaScript runtime easily building fast, scalable network applications.\"\n\n\n\n\n\n## Pourquoi ? ##\n\n1. Remplacer le travail initialement fait avec des wireframes par une création en HTML avec l'aide de CSS de Wireframing. Plus besoin de créer des tas et des tas de page de wireframe, et le travail est directement près pour l'étape de design. Vous pouvez ensuite soumettre vos Wireframes au client.\n2. Remplacer le travail initialement fait avec Photoshop directement à partir de l'étape de Wireframing avec des CSS pour le design et diverses images. Plus besoin de transférer des tas et des tas de PSD, tout est mutualisé et la moindre partie n'est pas dupliquée. Vous pouvez ensuite soumettre vos maquettes au client. Le design est intégrable pour l'étape suivante puisqu'il tourne déjà.\n3. Pouvoir fournir à des Intégrateurs Back-end, qu'ils travail avec PHP, Java, .NET, Node.js etc. des assets HTML directement exploitables et intégrables. Ils pourront ré-utiliser des morceaux de code, voir la totalité des maquettes dans le site qui va être créé.\n4. Transformer ses maquettes HTML à destination des Back-end directement en site web qui tournera avec [Node.js] sous le module *[NodeAtlas]* qui, en plus de créer des maquettes, fait tourner des sites web.\n\n\n\n\n\n## Installer et prendre en main NodeAtlas ##\n\nVous pouvez vous familiariser avec les bases de la création de *View* et de *Route* grâce à l'article « [Des sites web Node.js pour les débutants en JavaScript avec NodeAtlas](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/) » afin de mieux appréhender cet article.\n\nPour la suite de ce billet, nous continuerons de travailler le site exemple qui avait été commencé avec [le dit article](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/).\n\n\n\n\n\n## Générer des maquettes à partir de pages lives ##\n\n### Petit rappel pour notre « site de création de maquette » ###\n\nSouvenons nous du [webconfig que nous avions fini par obtenir dans l'artcle précédent](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/).\n\n```json\n{\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"commonVariation\": \"common.json\",\n    \"routes\": {\n        \"home\": {\n        \t\"url\": \"/\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\"\n        },\n        \"presentation\": {\n        \t\"url\": \"/presentation/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\"\n        },\n        \"contact-us\": {\n        \t\"url\": \"/contact-us/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\"\n        },\n        \"home-fr-fr\": {\n        \t\"url\": \"/francais/\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"presentation-fr-fr\": {\n        \t\"url\": \"/francais/presentation/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"contact-us-fr-fr\": {\n        \t\"url\": \"/francais/contactez-nous/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"error-fr-fr\": {\n        \t\"url\": \"/francais/*\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"languageCode\": \"fr-fr\",\n\t\t\"statusCode\": 404\n        },\n        \"error\": {\n        \t\"url\": \"/page-404/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n\t\t\t\"statusCode\": 404\n        }\n    }\n}\n```\n\nIl nous permet, en exécutant la commande `node server.js`, de visionner les urls suivantes :\n\n- « `http://localhost/` »\n- « `http://localhost/presentation/` »\n- « `http://localhost/contact-us/` »\n- « `http://localhost/francais/` »\n- « `http://localhost/francais/presentation/` »\n- « `http://localhost/francais/contactez-nous/` »\n- Toutes urls commençant par « `http://localhost/francais/` », et n'étant pas dans la liste précédente, comme par exemple « `http://localhost/francais/test/` » auront la 404 française.\n- Toutes les autres urls n'étant pas dans la liste précédente comme par exemple « `http://localhost/test/` » auront la 404 anglaise.\n\nSouvenons nous également de notre structure projet qui est la suivante :\n\n```\nproject-directory/\n— node_modules/\n—— node-atlas/\n——— ...\n— assets/\n—— javascript/\n——— common.js\n——— home.js\n—— stylesheets/\n——— common.css\n——— home.css\n—— media/\n——— images/\n— templates/\n—— home.htm\n—— default.htm\n— components/\n—— head.htm\n—— header.htm\n—— footer.htm\n—— foot.htm\n— variations/\n—— common.json\n—— home.json\n—— presentation.json\n—— contact-us.json\n—— page-404.json\n—— fr-fr/\n——— common.json\n——— home.json\n——— presentation.json\n——— contact-us.json\n——— page-404.json\n— server.js \n— webconfig.json\n```\n\n**[Vous pouvez récupérer l'intégralité du code de l'article précédent dans cette archive pour continuer avec un code prèt pour cet article](http://blog.haeresis.fr/upload/example/project-directory.zip).**\n\n\n\n### Générer des HTML à partir de ses fichiers ###\n\nLes urls précédentes ne représentent pas des fichiers physiquement enregistrable. Vous avez donc deux solutions pour pouvoir générer ces pages au format HTML.\n\n1. La première est de rajouter une propriété `generate` à chaque route pour connaître le fichier de génération HTML.\n\n   ```json\n{\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"commonVariation\": \"common.json\",\n    \"routes\": {\n        \"home\": {\n        \t\"url\": \"/\",\n        \t\"generate\": \"home.html\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\"\n        },\n        \"presentation\": {\n        \t\"url\": \"/presentation/\",\n        \t\"generate\": \"presentation.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\"\n        },\n        \"contact-us\": {\n        \t\"url\": \"/contact-us/\",\n        \t\"generate\": \"contact-us.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\"\n        },\n        \"home-fr-fr\": {\n        \t\"url\": \"/francais/\",\n        \t\"generate\": \"francais/bienvenue.html\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"presentation-fr-fr\": {\n        \t\"url\": \"/francais/presentation/\",\n        \t\"generate\": \"francais/presentation.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"contact-us-fr-fr\": {\n        \t\"url\": \"/francais/contactez-nous/\",\n        \t\"generate\": \"francais/contactez-nous.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"error-fr-fr\": {\n        \t\"url\": \"/francais/*\",\n        \t\"generate\": \"francais/page-404.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"languageCode\": \"fr-fr\",\n\t\t\"statusCode\": 404\n        },\n        \"error\": {\n        \t\"url\": \"/page-404/\",\n        \t\"generate\": \"page-404.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n\t\t\t\"statusCode\": 404\n        }\n    }\n}\n```\n\n2. La seconde est de faire de vos routes elles mêmes des fichiers physiquement enregistrable (ce qui changera les urls d'accès dans votre navigateur).\n\n   ```json\n{\n    \"enableIndex\": true,\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"commonVariation\": \"common.json\",\n    \"routes\": {\n        \"home\": {\n        \t\"url\": \"/home.html\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\"\n        },\n        \"presentation\": {\n        \t\"url\": \"/presentation.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\"\n        },\n        \"contact-us\": {\n        \t\"url\": \"/contact-us.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\"\n        },\n        \"home-fr-fr\": {\n        \t\"url\": \"/francais/bienvenue.html\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"presentation-fr-fr\": {\n        \t\"url\": \"/francais/presentation.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"contact-us-fr-fr\": {\n        \t\"url\": \"/francais/contactez-nous.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"error-fr-fr\": {\n        \t\"url\": \"/francais/*\",\n        \t\"generate\": \"francais/page-404.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"languageCode\": \"fr-fr\",\n\t\t\"statusCode\": 404\n        },\n        \"error\": {\n        \t\"url\": \"/page-404/\",\n        \t\"generate\": \"/page-404.html\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n\t\t\t\"statusCode\": 404\n        }\n    }\n}\n```\n\n   *Note : vous pourrez constatez que la route `error-fr-fr` doit obligatoirement utiliser la propriété `generate` à cause de sont « * ».\n\n   *Note 2 : n'ayant plus d'url à l'adresse `http://localhost/`, j'ai activé la liste des pages pour un accès rapide à vos assets avec `\"enableIndex\": true`.*\n\nPour activer la génération globale, ajoutez à votre architecture le dossier suivant.\n\n```\n— generates/\n```\n\nTout cela vous permettra de générer dans le dossier `project-directory/generates` **en utilisant la commande `node server.js --generate`** les fichiers suivants :\n\n- *project-directory/generates/home.html*\n- *project-directory/generates/presentation.html*\n- *project-directory/generates/contact-us.html*\n- *project-directory/generates/francais.html*\n- *project-directory/generates/francais/presentation.html*\n- *project-directory/generates/francais/contactez-nous.html*\n- *project-directory/generates/francais/page-404.html*\n- *project-directory/generates/page-404.html*\n\nen plus de copier l'intégralité du dossier `assets/` à l'intérieur de `generates/`.\n\nVotre nouvelle structure sera donc :\n\n```\nproject-directory/\n— node_modules/\n—— node-atlas/\n——— ...\n— assets/\n—— javascript/\n——— common.js\n——— home.js\n—— stylesheets/\n——— common.css\n——— home.css\n—— media/\n——— images/\n— templates/\n—— home.htm\n—— default.htm\n— components/\n—— head.htm\n—— header.htm\n—— footer.htm\n—— foot.htm\n— variations/\n—— common.json\n—— home.json\n—— presentation.json\n—— contact-us.json\n—— page-404.json\n—— fr-fr/\n——— common.json\n——— home.json\n——— presentation.json\n——— contact-us.json\n——— page-404.json\n\n— generates/\n—— javascript/\n——— common.js\n——— home.js\n—— stylesheets/\n——— common.css\n——— home.css\n—— media/\n——— images/\n—— home.html\n—— presentation.html\n—— contact-us.html\n—— francais.html\n—— francais/presentation.html\n—— francais/contactez-nous.html\n—— francais/page-404.html\n—— page-404.html\n\n— server.js \n— webconfig.json\n```\n\n*Note : ne pas ajouter de dossier `generates/` ou ajouter une propriété `\"htmlGenerateEnable\": false` empêchera la génération même si les routes sont correctement définie.*\n\n### Quelque informations utiles sur la génération ###\n \n#### La variable `urlBasePath` ####\n\nDans le fichier `components/head.htm`, nous utilisons la variable `urlBasePath` dans la balise `<base>`.\n\nCette balise renvoi `https://localhost:7777/sub/folder/` avec la configuration suivante quand le serveur NodeAtlas tourne :\n\n```\n\"httpSecure\": true,\n\"urlRelativeSubPath\": \"/sub/folder\"\n\"route\": { \"/\": \"index.htm\" }\n```\n\ncependant \n- quand celle-ci est utilisé pour générer un fichier dans `generates/` elle renvoi `./`, \n- quand elle est utilisé pour générer un fichier dans `generates/francais/` elle renvoi `./../`\n- quand elle est utilisé pour générer un fichier dans `generates/francais/encore-une-profondeur/` elle renvoi `./../../`\n- etc.\n\nde manière à ce que les liens de chaque page se pointent les uns les autres même depuis des sous dossiers.\n\nCela permet également de déplacer votre dossier sans avoir à changer la racine `<base>`.\n\n#### Activer la génération de page à chaque affichage de page ####\n\nVous pouvez généré chaque page que vous affichez dans votre navigateur en ajoutant la propriété suivante : `\"htmlGenerateBeforeResponse\": true`. Cela signifie donc que sans faire appel à `--generate`, vos pages seront à jour dans le dossier `generates/` à chaque fois que vous rafraîchirez la page. \n\n\n\n\n\n## Minifier et Obfusquer ses CSS et JS ##\n\n## Travailler avec des fichiers Less ##\n\n## Optimiser les Images ##\n\n## Maintenir des Email Template ##\n", "dates" : { "published" : { "$date" : 1421055180000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "stylesheet" : "", "title" : "Créer et maintenir des maquettes HTML avec NodeAtlas", "urn" : "creer-et-maintenir-des-maquettes-html-avec-node-atlas" }
{ "__v" : 0, "_id" : { "$oid" : "549993c07d7ac1495000ea7b" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5499b03566bb5aeedaafd8b6" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "J'ai déjà abordé le sujet des Frameworks CSS qui surchargeaient le DOM HTML inutilement et allait à l'encontre de la philosophie du [W3C](http://www.w3.org/) (séparation du fond et de la forme) dans un précédent article où j'expliquais pourquoi, par exemple, [Bootstrap est une régression pour un développement Front-end de qualité](http://blog.lesieur.name/bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite/).\n\nJ'ai également expliqué comment reproduire l'équivalent de fonctionnalités utiles dans un Framework en respectant l'approche CSS-driven dans [Grille CSS Responsive et Sémantique sans Framework](http://blog.lesieur.name/grille-css-responsive-et-semantique-sans-framework/).\n\n**Je vais ici vous démontrer que cette méthode CSS-driven peut non seulement être grandement simplifiée avec l'utilisation des préprocesseurs CSS comme [Less](http://lesscss.org/) ou [Sass](http://sass-lang.com/), mais qu'elle permet également d'exploiter les Frameworks tel que [Bootstrap](http://getbootstrap.com/) de manière propre et conforme à la philosophie de séparation de la sémantique et du design.**\n\n\n\n\n\n## Les approches HTML-driven et CSS-driven pour habiller une page Web ##\n\nLa différence est simple :\n\n### HTML-driven où l'habillage rapide et désolant ###\n\n- Les Frameworks CSS imposent une utilisation HTML-driven des sélecteurs CSS en demandant aux développeurs d'habiller une page web en la surchargeant de `div` et de `class` représentant l'habillage et la disposition graphique de la page.\n\n**HTML**\n\n```html\n<footer class=\"container\">\n    <div class=\"row\">\n\t    <div class=\"col-sm-4 col-sm-push-8\">\n\t\t    <div class=\"text-right hidden-xs\">\n\t\t        <a href=\"\">Join us on Facebook !</a>\n\t\t    </div>\n\t\t    <div class=\"text-center visible-xs\">\n\t\t        <a href=\"\">Join us on Facebook !</a>\n\t\t    </div>\n\t    </div>\n\t    <div class=\"col-sm-8 col-sm-pull-4\">\n\t\t    All rights not reserved.\n\t    </div>\n    </div>\n</footer>\n```\n\n**CSS**\n\n```css\n/* Appel d'un Framework CSS. Lourd en poids et état de boite noire si on ne le connait pas. */\n```\n\n*C'est malheureusement ce que l'on voit de plus en plus souvent sur les sites Internet et qui est selon moi « LA » régression pour un travail Front-end de qualité.*\n\n### CSS-driven où le travail effectué avec l'évolution du HTML par le W3C ###\n\n- L'habillage CSS tel que défini par le W3C est lui CSS-driven. Il y a séparation du fond (la sémantique) et de la forme (la feuille de style) et rien de la disposition ou du design graphique ne doit transparaître dans le DOM HTML.\n \n**HTML**\n\n```html\n<footer>\n\t    <div class=\"share\">\n\t\t        <a href=\"\">Follow us on Google+ !</a>\n\t    </div>\n\t    <div class=\"copyright\">\n\t\t    All rights not reserved.\n\t    </div>\n</footer>\n```\n\n**CSS**\n\n```css\n    .footer,\n.container {\n    max-width: 1200px;\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 15px;\n    padding-right: 15px;\n}\n    .footer\n.no-gutter {\n    padding-left: -15px;\n    padding-right: -15px;\n}\n    .share,\n    .copyright,\n.col {\n    float: left;\n    width: 100%;\n    padding-left: 15px;\n    padding-right: 15px;\n}\n    .share,\n    .copyright,\n.relative { padding: relative; }\n    .share,\n.text-center { text-align: center; }\n\n@media (min-width: 768px) {\n    .copyright,\n.col12-8 { width: 66.66666667%; }\n    .share,\n.col12-4 { width: 33.33333333%; }\n\n    .copyright,\n.push12-8 { left: 66.66666667%; }\n    .share,\n.pull12-4 { right: 33.33333333%; }\n\n    .share,\n.text-right { text-align: right; }\n}\n```\n\n*Et effectivement cela nécessite de savoir utiliser le CSS.*\n\n### Pourquoi être HTML-driven est un réel problème ? ###\n\nPrenons un exemple concret ; le « Footer » utilisé dans notre exemple précédent à les caractéristiques suivantes :\n- Sur mobile la partie de partage à son texte centré. Il en va de même pour la partie copyright.\n- Sur grand écran le copyright se trouve à gauche et prend 8/12ème de la place en largeur tandis que la partie de partage se trouve à droite et en prend 4/12ème. La partie de gauche a son texte aligné à gauche et la partie de droite a son texte aligné à droite. \n\n> Cependant les designers pensent que pour **des raisons d'ergonomie** il est préférable que sur la page d'accueil le bouton Facebook soit à gauche et prenne la moitié de la place et que le copyright soit à droite en prenant l'autre moitié. C'est donc à présent le copyright qui est aligné à droite sur grand écran.\n\n#### Les trois choix aberrant faisable avec du développement HTML-driven ####\n\nC'est là que l'utilisation d'un Framework va forcer les développeurs à faire de mauvais choix de développement puisque cette modification **ne devrait impacter que les intégrateurs Front-end**, cependant...\n\n1. Le plus simple sera de **dire aux designers ou au client** que cette modification n'est pas possible. Le « Footer » **doit rester consistant** et étant utilisé sur toutes les pages du site **il n'est pas possible d'avoir un « Footer »** spécifique. Des raisons techniques seront avancées comme **des contraintes Bootstrap**, etc.\n2. Un composant alternatif va être **crée part les développeur Back-end** afin de répondre à cette demande. Une **condition sera mise en place** pour que le composant du **Footer alternatif soit injecté sur l'accueil** et uniquement sur l'accueil.  Cela forcera également de dupliquer du code qu'il faudra maintenir en double en cas de changement.\n\n    ```html\n<footer class=\"container\">\n    <div class=\"row\">\n\t    <div class=\"col-sm-6\">\n\t\t    <div class=\"hidden-xs\">\n\t\t        <a href=\"\">Join us on Facebook !</a>\n\t\t    </div>\n\t\t    <div class=\"text-center visible-xs\">\n\t\t        <a href=\"\">Join us on Facebook !</a>\n\t\t    </div>\n\t    </div>\n\t    <div class=\"col-sm-6\">\n\t\t    <div class=\"text-right hidden-xs\">\n\t\t        All rights not reserved.\n\t\t    </div>\n\t\t    <div class=\"visible-xs\">\n\t\t        All rights not reserved.\n\t\t    </div>\n\t    </div>\n    </div>\n</footer>\n```\n\n3. Dans un cas extrême il serait même envisagé de faire **travailler les Content Filler** en plaçant les classes dans des variations de contenu par page de manière à **ne pas injecter les mêmes classes en fonction de la page appelée** avec un code comme celui ci-dessous... le summum de l'aberrance.\n\n    ```html\n<footer class=\"container\">\n    <div class=\"row\">\n\t    <div class=\"<column-left>\">\n\t\t    <div class=\"<mobile>\">\n\t\t        <a href=\"\">Join us on Facebook !</a>\n\t\t    </div>\n\t\t    <div class=\"<desktop>\">\n\t\t        <a href=\"\">Join us on Facebook !</a>\n\t\t    </div>\n\t    </div>\n\t    <div class=\"<column-right>\">\n\t\t    <div class=\"<mobile>\">\n\t\t        All rights not reserved.\n\t\t    </div>\n\t\t    <div class=\"<desktop>\">\n\t\t        All rights not reserved.\n\t\t    </div>\n\t    </div>\n    </div>\n</footer>\n```\n\n#### La solution logique de l'approche CSS-driven ####\n\nLe HTML n'aurait absolument pas besoin de changer puisque **la demande concerne le design**. C'est donc bien **le développeur Front-end qui doit s'occuper de cette tâche** et en assurer l'évolution et la maintenance. Cela signifie simplement que si le « Footer » est injecté sur un layout comportant la classe `.home` en amont (sur le `<body>` par exemple). Il suffit alors d'**ajouter à la fin de la feuille CSS les règles suivantes** :\n\n```css\n@media (min-width: 768px) {\n    .home .copyright,\n    .home .share,\n.col12-6 { width: 50%; }\n\n    .home .copyright,\n    .home .share,\n.push-pull-reset { left: 0; right: 0; }\n\n    .home .share,\n.text-left { text-align: left; }\n\n    .home .copyright,\n.text-right { text-align: right; }\n}\n```\n\n\n## Profiter des avantages d'un Framework CSS tout en respectant les bonnes pratiques ##\n\nC'est ici qu'intervient le préprocesseur [Less](http://lesscss.org/). Sans être un grand expert dans ce languages on peut très facilement tirer parti des avantages d'un Framework CSS comme Bootstrap sans surcharger d'une seule ligne son DOM.\n\n[Less](http://lesscss.org/) vous permet d'utiliser des variables dans votre CSS ainsi que des raccourcis de classe à la place de retaper toutes vos propriétés CSS. En sortie, c'est bien un fichier CSS qui est généré mais, vous n'avez pas besoin de vous en pré-occuper :\n- Vous n'avez qu'à maintenir le `.less` dans vos fichiers et le `.css` est automatiquement généré. Un fichier `.css.map` permet également à votre navigateur de vous indiquer pour un élément HTML ciblé dans votre débogueur F12 quelles lignes du fichier `.less` sont utilisées (C'est le cas pour Google Chrome sans aucune intervention de votre part).\n- Pour maintenir non plus un fichier `.css`, mais un fichier `.less`, il va vous falloir un logiciel qui va exécuter pour vous votre fichier `test.less` avant le renvoi de la réponse au client quand le fichier `test.css` est demandé.\n- Une fois en environnement de production on active aucunement Less et c'est bien `test.css` qui sera renvoyé sans calcule supplémentaire quand une requête pour `test.css` sera effectuée par le client.\n\n> **Pour ma part, j'utilise le moteur de sites web [Node.js](http://nodejs.org/) : [NodeAtlas](http://haeresis.github.io/NodeAtlas/)**. [Il permet d'activer Less facilement](https://github.com/Haeresis/NodeAtlas#g%C3%A9n%C3%A9rer-les-css-avec-less) dans un environnement de développement pour travailler dans les règles de l'art avec les versions Less de vos Frameworks préférés !\n\n\n### Étude d'un exemple avec Bootstrap ###\n\nIl vous faudra :\n- La [version Less de Bootstrap](http://getbootstrap.com/getting-started/), \n- un navigateur déboguant facilement Less avec des fichiers `.css.map` comme [Google Chrome et son débogueur](https://www.google.com/chrome/browser/desktop/index.html) et,\n- un interpréteur de `.less` pour générer vos `.css` comme [NodeAtlas](http://haeresis.github.io/NodeAtlas/) si vous faites du [Node.js](http://nodejs.org/).\n\n\n\n#### Sources ####\n- Une implémentation de cet exemple pour [NodeAtlas](https://github.com/Haeresis/NodeAtlas) se trouve sur [le repository LessAtlas](https://github.com/Haeresis/LessAtlas) à l'url : http://localhost:7777/bootstrap/ une fois le site lancé.\n- [Un exemple Codepen live se trouve derrière ce lien](http://codepen.io/Haeresis/pen/dPpMNv) !\n\n#### Explications ####\n\nNous allons habiller la structure HTML suivante avec Bootstrap ; notez qu'aucune classe Bootstrap ne vient polluer le DOM HTML :\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n\t\t<meta charset=\"UTF-8\">\n        <title>Less Example with Bootstrap</title>\n    </head>\n    <body>\n        <header>\n            <div class=\"brand\">\n                \n                <div class=\"logo component\">\n                    <h3>Bruno Lesieur</h3>\n                </div>\n\n            </div>\n            <div class=\"slogan\">\n                \n                <div class=\"markdown component\">\n                    <p>Some #ID with lot of .CLASS</p>\n                </div>\n\n            </div>\n            <div class=\"title\">\n                \n                <div class=\"logo component\">\n                    <h1>Quelque #ID et beaucoup de .CLASS</h1>\n                </div>  \n\n            </div>\n            <nav class=\"main-nav\">\n                \n                <div class=\"navigation component\">\n                    <ul>\n                        <li><a href=\"\">Home</a></li>\n                        <li><a href=\"\">Section A</a></li>\n                        <li><a href=\"\">Section B</a></li>\n                        <li><a href=\"\">Section C</a></li>\n                    </ul>\n                </div>      \n\n            </nav>\n        </header>\n        <div class=\"content\">\n            <section class=\"overview\">\n                \n                <div class=\"carousel component\">\n                    <h1>Slide 1</h1>\n                    <p>Bla bla bla</p>\n                </div>  \n\n            </section>\n            <nav class=\"anchor-nav\">\n                \n                <div class=\"navigation component\">\n                    <h2>Summary</h2>\n                    <ul>\n                        <li>\n                            <a href=\"#h1-title\">H1 Title</a>\n                            <ul>\n                                <li>\n                                    <a href=\"#h2-title\">H2 Title</a>\n                                    <ul>\n                                        <li><a href=\"#h3-title-1\">H3 Title 1</a></li>\n                                        <li><a href=\"#h3-title-2\">H3 Title 1</a></li>\n                                    </ul>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n\n            </nav>\n            <article class=\"main\">\n                <div class=\"article\">\n\n                    <div class=\"markdown component\">\n                        <header>\n                            <h1 id=\"h1-title\">H1 Title</h1>\n                            <p>This is a leading text for my article</p>\n                        </header>\n\n                        <h2 id=\"h2-title\">H2 Title</h2>\n                        <p>Bla bla bla</p>\n\n                        <h3 id=\"h3-title-1\">H3 Title 1</h3>\n                        <p>Bla bla bla</p>\n\n                        <h3 id=\"h3-title-2\">H3 Title 2</h3>\n                        <p>Bla bla bla</p>\n\n                        <header>\n                            <footer>\n                                <p>by <a href=\"\">Haeresis</a></p>\n                                <p>date, etc</a></p>\n                            </footer>\n                        </header>\n                    </div>\n\n                </div>\n                <ul class=\"step-list\">\n                    <li class=\"step\">\n\n                        <div class=\"markdown component\">\n                            <h3>H3 Step</h3>\n                            <p>Bla bla bla</p>\n                        </div>\n\n                    </li>\n                    <li class=\"step\">\n                        \n                        <div class=\"markdown component\">\n                            <h3>H3 Step</h3>\n                            <p>Bla bla bla</p>\n                        </div>\n\n                    </li>\n                    <li class=\"step\">\n                        \n                        <div class=\"markdown component\">\n                            <h3>H3 Step</h3>\n                            <p>Bla bla bla</p>\n                        </div>\n\n                    </li>\n                </ul>\n            </article>\n            <ul class=\"call-to-action-list\">\n                <li class=\"call-to-action\">\n                    \n                    <div class=\"markdown component\">\n                        <h2>H2 Action</h2>\n                        <p>Bla bla bla</p>\n                    </div>\n\n                </li>\n                <li class=\"call-to-action\">\n        \n                    <div class=\"markdown component\">\n                        <h2>H2 Action</h2>\n                        <p>Bla bla bla</p>\n                    </div>          \n\n                </li>\n                <li class=\"call-to-action\">\n        \n                    <div class=\"markdown component\">\n                        <h2>H2 Action</h2>\n                        <p>Bla bla bla</p>\n                    </div>          \n\n                </li>\n            </ul>\n        </div>\n        <footer>\n            <nav class=\"secondary-nav\">\n                \n                <div class=\"navigation component\">\n                    <ul>\n                        <li>\n                            <a href=\"\">Contact us</a>\n                        </li>\n                    </ul>\n                </div>\n\n            </nav>\n            <div class=\"utils\">\n                \n                <div class=\"markdown component\">\n                    <p>Join us on Google+</p>\n                </div>  \n\n            </div>\n            <div class=\"legals\">\n                \n                <div class=\"markdown component\">\n                    <p>©All Right not reserved at all</p>\n                </div>  \n\n            </div>\n        </footer>\n    <body>\n</html>\n```\n\nEt voici le fichier Less expliqué :\n\n**Less**\n\n```css\n/*------------------------------------*\\\n    $SUMMARY\n\\*------------------------------------*/\n\n/**\n * SUMMARY.................C'est moi !\n * RESET...................Même rendu pour tous les navigateurs.\n * IMPORT..................Les fichiers Less nécessaire de Bootstrap.\n * TESTS...................Des règles CSS activables et désactivables pour les tests.\n * GRID....................Habillage de la grille.\n */\n\n\n\n\n\n/*------------------------------------*\\\n    $RESET\n\\*------------------------------------*/\n\n/* On inclut le padding à la taille. */\n* {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n\n/* On évite les marges. */\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n\n\n\n\n/*------------------------------------*\\\n    $IMPORT\n\\*------------------------------------*/\n\n/* On importe les variables du Framework. */\n@import 'bootstrap/variables';\n\n/* On importe le système de grille. */\n@import 'bootstrap/grid';\n@import 'bootstrap/mixins/grid';\n@import 'bootstrap/mixins/grid-framework';\n\n/* On importe le système de responsivité. */\n@import 'bootstrap/responsive-utilities';\n@import 'bootstrap/mixins/responsive-visibility';\n\n/* À titre d'exemple, voici tout ce qu'il faudrait importer pour utiliser `.text-center` et `.text-right`. Il n'est parfois pas toujours judicieux d'importer des parties de Framework quand on a besoin que d'une classe. Nous créerons notre propre alignement plus bas. */\n/*\n@import 'bootstrap/type';\n@import 'bootstrap/mixins/text-overflow.less';\n@import 'bootstrap/mixins/text-emphasis.less';\n@import 'bootstrap/mixins/background-variant.less';\n*/\n\n\n\n\n\n/*------------------------------------*\\\n    $TESTS\n\\*------------------------------------*/\n\n/* Afficher les zones plus facilement dans la page HTML pour déboguer l'affichage. */\n.brand:before,\n.slogan:before,\n.title:before,\n.main-nav:before,\n.overview:before,\n.anchor-nav:before,\n.main:before,\n.call-to-action:before,\n.secondary-nav:before,\n.legals:before,\n.utils:before {\n   width: 100%;\n   display: inline-block;\n}\n\n.brand:before {\n    content: \"Brand\";\n   background-color: rgba(0, 0, 150, 0.5);\n}\n.slogan:before {\n   content: \"Slogan\";\n   background-color: rgba(150, 150, 0, 0.5);\n}\n.title:before {\n   content: \"Title\";\n   background-color: rgba(255, 0, 0, 0.2);\n}\n.main-nav:before {\n   content: \"Nav\";\n   background-color: rgba(0, 255, 0, 0.2);\n}\n.overview:before {\n   content: \"Overview\";\n   background-color: rgba(150, 0, 0, 0.5);\n}\n.anchor-nav:before {\n   content: \"Anchor nav\";\n   background-color: rgba(0, 0, 255, 0.2);\n}\n.main:before {\n   content: \"Main\";\n   background-color: rgba(255, 255, 0, 0.2);\n}\n.call-to-action:before {\n   content: \"Call to action\";\n   background-color: rgba(255, 0, 255, 0.2);\n}\n.secondary-nav:before {\n   content: \"Secondary nav\";\n   background-color: rgba(0, 150, 0, 0.5);\n}\n.legals:before {\n   content: \"Legals\";\n   background-color: rgba(0, 255, 255, 0.2);\n}\n.utils:before {\n   content: \"Utils\";\n   background-color: rgba(150, 0, 150, 0.5);\n}\n.main:before {\n  content: none;\n}\n.article:before {\n  content: \"Article\";\n  background-color: rgba(255, 255, 0, 0.2);\n  width: 100%;\n  display: inline-block;\n}\n.step:before {\n  content: \"Step\";\n  background-color: rgba(0, 255, 0, 0.2);\n  width: 100%;\n  display: inline-block;\n}\n\n\n\n\n/*------------------------------------*\\\n    $GRID\n\\*------------------------------------*/\n\n/* Normalement, Bootsrap utilise la classe `.row` sur un élément enfant pour annuler le padding inutile en vu d'injecter des colonnes. Nous n'allons pas surcharger le DOM pour cela aussi nous créons une nouvelle classe qui s'applique directement sur le `.container` et qui à la même fonction. */\n.padding-reset {\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tpadding-left: 0;\n\tpadding-right: 0;\n}\n\n/* Nous allons manager nous même les `.row` sans nécessairement ajouter des éléments dans le DOM. */\n.clear-left {\n\tclear: left;\t\n}\n\n/* Nous allons utiliser les listes pour définir des éléments de liste et non des `div` comme Bootstrap le fait habituellement. */\n.ul-reset {\n\tpadding: 0;\n\tmargin: 0;\n\tlist-style: none;\n}\n\n/* Affin de ne pas importer du code inutile, nous allons nous même recréer les trois classes nécessaire pour l'alignement des textes. */\n.text-right {\n  text-align: right;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n\n\n\n\n\n/* À partir d'ici, on habille notre grille avec les raccourcis propre à Less.\n- `&:extend(<class>);` rajoute la classe courante à la liste des classes du sélecteur `<class>` à la ligne ou elle est définie.\n- `<class>;` ajoute l'intégralité des sélecteurs de la classe <class> à ceux de la classe courante. */\n\n/* Ainsi on ajoute\n- `body > header, .content, body > footer` aux classes `.container` et `.padding-reset`\nce qui donnera en sortie\n- `body > header, .content, body > footer, .container {}` et \n- `body > header, .content, body > footer, .padding-reset {}` */\nbody > header,\n.content,\nbody > footer {\n\t&:extend(.container, .padding-reset);\n}\n\n/* Ici on ajoute les mécanismes des colonnes Bootstrap. */\n.brand {\n\t.make-sm-column(2);\n\t.make-sm-column-push(10);\n}\n.slogan {\n\t.make-sm-column(10);\n\t.make-sm-column-pull(2);\n}\n/* On créer manuellement un retour à la ligne sous cette colonne, peut importe son contenu. */\n.title {\n\t&:extend(.clear-left);\n\t.make-sm-column(2);\n}\n.main-nav {\n\t.make-sm-column(10);\n}\n.overview {\n\t.make-sm-column(12);\n}\n.anchor-nav {\n\t.make-sm-column(3);\t\n}\n.main {\n\t.make-sm-column(9);\t\n}\n.call-to-action-list {\n\t&:extend(.ul-reset);\n}\n.call-to-action {\n\t.make-sm-column(6);\n\t.make-md-column(4);\n}\n.call-to-action:nth-child(1) {\n\t.make-lg-column-offset(2);\n}\n\n/* On cache le troisième élément `.call-to-action` en fonction de la taille de l'écran représenté par les variables : `@screen-sm-min`, `@screen-md-min` et `@screen-lg-min`. */\n@media (min-width: @screen-sm-min) {\n\t.call-to-action:nth-child(n+3) {\n\t\tdisplay: none;\n\t}\n}\n@media (min-width: @screen-md-min) {\n\t.call-to-action:nth-child(n+3) {\n\t\tdisplay: block;\n\t}\n}\n@media (min-width: @screen-lg-min) {\n\t.call-to-action:nth-child(n+3) {\n\t\tdisplay: none;\n\t}\n}\n.secondary-nav {\n\t.make-sm-column(12);\n}\n.utils {\n\t.make-sm-column(3);\n\t.make-sm-column-push(9);\n}\n.legals {\n\t.make-sm-column(9);\n\t.make-sm-column-pull(3);\n}\n/* Cette fois on utilise bien `.row` pour annuler le padding de l'élément englobant afin de ré-aligner la grille interne. */\n.step-list {\n\t&:extend(.ul-reset);\n\t.row;\n}\n.step {\n\t.hidden-xs;\n\t.make-sm-column(4);\n}\n.legals,\n.brand {\n  .text-left;\n}\n.utils {\n  .text-center;\n}\n@media (min-width: @screen-sm-min) {\n  .utils,\n  .brand {\n    .text-right;\n  }\n  .legals {\n    .text-left\n  }\n}\n```\n\n\n\n### Étude d'un exemple sans Framework ###\n\nIl vous faudra :\n- Un navigateur déboguant facilement Less avec des fichiers `.css.map` comme [Google Chrome et son débogueur](https://www.google.com/chrome/browser/desktop/index.html) et,\n- un interpréteur de `.less` pour générer vos `.css` comme [NodeAtlas](http://haeresis.github.io/NodeAtlas/) si vous faites du [Node.js](http://nodejs.org/).\n\n\n\n#### Sources ####\n\n- Une implémentation de cet exemple pour [NodeAtlas](https://github.com/Haeresis/NodeAtlas) se trouve sur [le repository LessAtlas](https://github.com/Haeresis/LessAtlas) à l'url : http://localhost:7777/no-framework/ une fois le site lancé.\n- [Un exemple Codepen live se trouve derrière ce lien](http://codepen.io/Haeresis/pen/KwgzmE)  !\n\n#### Explications ####\n\nNous allons habiller la même structure HTML que précédemment mais à la main sans aucun Framework :\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n\t\t<meta charset=\"UTF-8\">\n        <title>Less Example with Bootstrap</title>\n    </head>\n    <body>\n        <header>\n            <div class=\"brand\">\n                \n                <div class=\"logo component\">\n                    <h3>Bruno Lesieur</h3>\n                </div>\n\n            </div>\n            <div class=\"slogan\">\n                \n                <div class=\"markdown component\">\n                    <p>Some #ID with lot of .CLASS</p>\n                </div>\n\n            </div>\n            <div class=\"title\">\n                \n                <div class=\"logo component\">\n                    <h1>Quelque #ID et beaucoup de .CLASS</h1>\n                </div>  \n\n            </div>\n            <nav class=\"main-nav\">\n                \n                <div class=\"navigation component\">\n                    <ul>\n                        <li><a href=\"\">Home</a></li>\n                        <li><a href=\"\">Section A</a></li>\n                        <li><a href=\"\">Section B</a></li>\n                        <li><a href=\"\">Section C</a></li>\n                    </ul>\n                </div>      \n\n            </nav>\n        </header>\n        <div class=\"content\">\n            <section class=\"overview\">\n                \n                <div class=\"carousel component\">\n                    <h1>Slide 1</h1>\n                    <p>Bla bla bla</p>\n                </div>  \n\n            </section>\n            <nav class=\"anchor-nav\">\n                \n                <div class=\"navigation component\">\n                    <h2>Summary</h2>\n                    <ul>\n                        <li>\n                            <a href=\"#h1-title\">H1 Title</a>\n                            <ul>\n                                <li>\n                                    <a href=\"#h2-title\">H2 Title</a>\n                                    <ul>\n                                        <li><a href=\"#h3-title-1\">H3 Title 1</a></li>\n                                        <li><a href=\"#h3-title-2\">H3 Title 1</a></li>\n                                    </ul>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n\n            </nav>\n            <article class=\"main\">\n                <div class=\"article\">\n\n                    <div class=\"markdown component\">\n                        <header>\n                            <h1 id=\"h1-title\">H1 Title</h1>\n                            <p>This is a leading text for my article</p>\n                        </header>\n\n                        <h2 id=\"h2-title\">H2 Title</h2>\n                        <p>Bla bla bla</p>\n\n                        <h3 id=\"h3-title-1\">H3 Title 1</h3>\n                        <p>Bla bla bla</p>\n\n                        <h3 id=\"h3-title-2\">H3 Title 2</h3>\n                        <p>Bla bla bla</p>\n\n                        <header>\n                            <footer>\n                                <p>by <a href=\"\">Haeresis</a></p>\n                                <p>date, etc</a></p>\n                            </footer>\n                        </header>\n                    </div>\n\n                </div>\n                <ul class=\"step-list\">\n                    <li class=\"step\">\n\n                        <div class=\"markdown component\">\n                            <h3>H3 Step</h3>\n                            <p>Bla bla bla</p>\n                        </div>\n\n                    </li>\n                    <li class=\"step\">\n                        \n                        <div class=\"markdown component\">\n                            <h3>H3 Step</h3>\n                            <p>Bla bla bla</p>\n                        </div>\n\n                    </li>\n                    <li class=\"step\">\n                        \n                        <div class=\"markdown component\">\n                            <h3>H3 Step</h3>\n                            <p>Bla bla bla</p>\n                        </div>\n\n                    </li>\n                </ul>\n            </article>\n            <ul class=\"call-to-action-list\">\n                <li class=\"call-to-action\">\n                    \n                    <div class=\"markdown component\">\n                        <h2>H2 Action</h2>\n                        <p>Bla bla bla</p>\n                    </div>\n\n                </li>\n                <li class=\"call-to-action\">\n        \n                    <div class=\"markdown component\">\n                        <h2>H2 Action</h2>\n                        <p>Bla bla bla</p>\n                    </div>          \n\n                </li>\n                <li class=\"call-to-action\">\n        \n                    <div class=\"markdown component\">\n                        <h2>H2 Action</h2>\n                        <p>Bla bla bla</p>\n                    </div>          \n\n                </li>\n            </ul>\n        </div>\n        <footer>\n            <nav class=\"secondary-nav\">\n                \n                <div class=\"navigation component\">\n                    <ul>\n                        <li>\n                            <a href=\"\">Contact us</a>\n                        </li>\n                    </ul>\n                </div>\n\n            </nav>\n            <div class=\"utils\">\n                \n                <div class=\"markdown component\">\n                    <p>Join us on Google+</p>\n                </div>  \n\n            </div>\n            <div class=\"legals\">\n                \n                <div class=\"markdown component\">\n                    <p>©All Right not reserved at all</p>\n                </div>  \n\n            </div>\n        </footer>\n    <body>\n</html>\n```\n\nEt voici le fichier Less expliqué :\n\n**Less**\n\n```css\n/*------------------------------------*\\\n\t\t$SUMMARY\n\\*------------------------------------*/\n\n/**\n * SUMMARY.................C'est moi !\n * VARIABLES...............Valeurs réutilisables.\n * RESET...................Même rendu pour tous les navigateurs.\n * TESTS...................Des règles CSS activables et désactivables pour les tests.\n * GRID....................Grille de base à 12 colonnes.\n * ALIGNMENT...............Alignement du contenu des colonnes.\n * VISTIBLE / HIDDEN.......Cacher / Afficher les colonnes.\n * UI......................Appliquer la CSS sur les éléments.\n */\n\n\n\n\n\n/*------------------------------------*\\\n    $VARIABLES\n\\*------------------------------------*/\n\n/* Les valeurs qui vont nous servir de gap pour l'affichage responsive des éléments. */\n@screen-xs-max: 763px;\n@screen-sm-min: 764px;\n@screen-sm-max: 991px;\n@screen-md-min: 992px;\n@screen-md-max: 1199px;\n@screen-lg-min: 1200px;\n\n\n\n\n\n/*------------------------------------*\\\n\t$RESET\n\\*------------------------------------*/\n\n/* On inclut le padding à la taille. */\n* {\n\t-webkit-box-sizing: border-box;\n\t   -moz-box-sizing: border-box;\n\t\t\tbox-sizing: border-box;\n}\n\n/* On évite les marges. */\nbody {\n\tmargin: 0;\n\tpadding: 0;\n}\n\n\n\n\n\n/*------------------------------------*\\\n\t$TESTS\n\\*------------------------------------*/\n\n/* Afficher les zones plus facilement dans la page HTML pour déboguer l'affichage. */\n.brand:before,\n.slogan:before,\n.title:before,\n.main-nav:before,\n.overview:before,\n.anchor-nav:before,\n.main:before,\n.call-to-action:before,\n.secondary-nav:before,\n.legals:before,\n.utils:before {\n    width: 100%;\n    display: inline-block;\n}\n\n.brand:before {\n    content: \"Brand\";\n    background-color: rgba(0, 0, 150, 0.5);\n}\n.slogan:before {\n    content: \"Slogan\";\n    background-color: rgba(150, 150, 0, 0.5);\n}\n.title:before {\n    content: \"Title\";\n    background-color: rgba(255, 0, 0, 0.2);\n}\n.main-nav:before {\n    content: \"Nav\";\n    background-color: rgba(0, 255, 0, 0.2);\n}\n.overview:before {\n    content: \"Overview\";\n    background-color: rgba(150, 0, 0, 0.5);\n}\n.anchor-nav:before {\n    content: \"Anchor nav\";\n    background-color: rgba(0, 0, 255, 0.2);\n}\n.main:before {\n    content: \"Main\";\n    background-color: rgba(255, 255, 0, 0.2);\n}\n.call-to-action:before {\n    content: \"Call to action\";\n    background-color: rgba(255, 0, 255, 0.2);\n}\n.secondary-nav:before {\n    content: \"Secondary nav\";\n    background-color: rgba(0, 150, 0, 0.5);\n}\n.legals:before {\n    content: \"Legals\";\n    background-color: rgba(0, 255, 255, 0.2);\n}\n.utils:before {\n    content: \"Utils\";\n    background-color: rgba(150, 0, 150, 0.5);\n}\n.main:before {\n\tcontent: none;\n}\n.article:before {\n\tcontent: \"Article\";\n\tbackground-color: rgba(255, 255, 0, 0.2);\n\twidth: 100%;\n\tdisplay: inline-block;\n}\n.step:before {\n\tcontent: \"Step\";\n\tbackground-color: rgba(0, 255, 0, 0.2);\n\twidth: 100%;\n\tdisplay: inline-block;\n}\n\n\n\n\n\n/*------------------------------------*\\\n    $GRID\n\\*------------------------------------*/\n\n/* On crée une grille sur 12 colonnes en affectant les valeurs. */\n.span12-12 { width: 100%; }\n.span12-11 { width: 91.66666667%; }\n.span12-10 { width: 83.33333333%; }\n.span12-9 { width: 75%; }\n.span12-8 { width: 66.66666667%; }\n.span12-7 { width: 58.33333333%; }\n.span12-6 { width: 50%; }\n.span12-5 { width: 41.66666667%; }\n.span12-4 { width: 33.33333333%; }\n.span12-3 { width: 25%; }\n.span12-2 { width: 16.66666667%; }\n.span12-1 { width: 8.33333333%; }\n\n/* On crée de quoi déplacer les colonnes vers la droite. */\n.pull12-12 { right: 100%; }\n.pull12-11 { right: 91.66666667%; }\n.pull12-10 { right: 83.33333333%; }\n.pull12-9 { right: 75%; }\n.pull12-8 { right: 66.66666667%; }\n.pull12-7 { right: 58.33333333%; }\n.pull12-6 { right: 50%; }\n.pull12-5 { right: 41.66666667%; }\n.pull12-4 { right: 33.33333333%; }\n.pull12-3 { right: 25%; }\n.pull12-2 { right: 16.66666667%; }\n.pull12-1 { right: 8.33333333%; }\n.pull12-0 { right: 0; }\n\n/* On crée de quoi déplacer les colonnes vers la gauche. */\n.push12-12 { left: 100%; }\n.push12-11 { left: 91.66666667%; }\n.push12-10 { left: 83.33333333%; }\n.push12-9 { left: 75%; }\n.push12-8 { left: 66.66666667%; }\n.push12-7 { left: 58.33333333%; }\n.push12-6 { left: 50%; }\n.push12-5 { left: 41.66666667%; }\n.push12-4 { left: 33.33333333%; }\n.push12-3 { left: 25%; }\n.push12-2 { left: 16.66666667%; }\n.push12-1 { left: 8.33333333%; }\n.push12-0 { left: 0; }\n\n/* On crée de quoi déplacer les colonnes vers la gauche en créant des espaces vides. */\n.prepend12-12 { margin-left: 100%; }\n.prepend12-11 { margin-left: 91.66666667%; }\n.prepend12-10 { margin-left: 83.33333333%; }\n.prepend12-9 { margin-left: 75%; }\n.prepend12-8 { margin-left: 66.66666667%; }\n.prepend12-7 { margin-left: 58.33333333%; }\n.prepend12-6 { margin-left: 50%; }\n.prepend12-5 { margin-left: 41.66666667%; }\n.prepend12-4 { margin-left: 33.33333333%; }\n.prepend12-3 { margin-left: 25%; }\n.prepend12-2 { margin-left: 16.66666667%; }\n.prepend12-1 { margin-left: 8.33333333%; }\n.prepend12-0 { margin-left: 0; }\n\n/* On crée de quoi déplacer les colonnes vers la droite en créant des espaces vides. */\n.append12-12 { margin-right: 100%; }\n.append12-11 { margin-right: 91.66666667%; }\n.append12-10 { margin-right: 83.33333333%; }\n.append12-9 { margin-right: 75%; }\n.append12-8 { margin-right: 66.66666667%; }\n.append12-7 { margin-right: 58.33333333%; }\n.append12-6 { margin-right: 50%; }\n.append12-5 { margin-right: 41.66666667%; }\n.append12-4 { margin-right: 33.33333333%; }\n.append12-3 { margin-right: 25%; }\n.append12-2 { margin-right: 16.66666667%; }\n.append12-1 { margin-right: 8.33333333%; }\n.append12-0 { margin-right: 0; }\n\n/* On crée de quoi appliquer les états définis au dessus sur nos colonnes. */\n.pull-push { position: relative; }\n.pull-push-reset { position: static; }\n\n/* On crée de quoi gérer les paddings. */\n.gutter { padding-left: 16px; padding-right: 16px; }\n.gutter-reset { padding-left: 0; padding-right: 0; }\n\n/* On crée de quoi gérer les listes et les retours à la ligne. */\n.list-reset { margin: 0;padding: 0;list-style-type: none; }\n.clearfix { clear: both; }\n\n/* On crée nos éléments unitaires. */\n.grid { max-width: 1200px; margin-left:auto; margin-right:auto; }\n.grid:after { content: \"\"; clear: both; display: block; }\n.column { float: left; width: 100%; }\n\n\n\n\n\n/*------------------------------------*\\\n\t\t$ALIGMENT\n\\*------------------------------------*/\n\n/* Gestion de l'alignement du contenu. */\n.text-left { text-align: left; }\n.text-center { text-align: center; }\n.text-right { text-align: right; }\n.text-justify { text-align: justify; }\n\n\n\n\n\t\n/*------------------------------------*\\\n\t\t$VISTIBLE / HIDDEN\n\\*------------------------------------*/\n\n/* Gestion de la visibilité du contenu. */\n.display-block { display: block; }\n.display-inline { display: inline-block; }\n.display-inline-block { display: inline-block; }\n.display-none { display: none; }\n\n\n\n\n\n/*------------------------------------*\\\n    $UI\n\\*------------------------------------*/\n\n/* Habillage Mobile et Petite Tablette. */\n/* Comme on n'utilise pas de Media Queries dans les prochaines définitions, on peut utiliser `&:extend` qui va ajouter la classe courante au sélecteur dans `&:extend` au niveau de la définition du sélecteur plus haut, cela pour alléger la feuille CSS qui sera générées. */\nbody > header,\nbody > footer,\n.content {\n    &:extend(.grid);\n}\n\nbody > header:after,\nbody > footer:after,\n.content:after {\n    &:extend(.grid:after);  \n}\n\n.brand,\n.slogan,\n.title,\n.main-nav,\n.overview,\n.anchor-nav,\n.main,\n.article,\n.step,\n.call-to-action,\n.secondary-nav,\n.utils,\n.legals {\n    &:extend(.column);   \n}\n\n.brand,\n.slogan,\n.title,\n.main-nav,\n.overview,\n.anchor-nav,\n .article,\n.step,\n.call-to-action,\n.secondary-nav,\n.utils,\n.legals {\n    &:extend(.gutter);\n}\n\n.step-list,\n.call-to-action-list {\n    &:extend(.list-reset);\n}\n\n.title {\n    &:extend(.clearfix);\n}\n\n.legals,\n.utils {\n    &:extend(.text-center);  \n}\n\n.step {\n    &:extend(.display-none);    \n}\n\n/* Tablette / Petit Écran \nOn utilise nos variables `@screen-sm-min`, `@screen-md-min` et `@screen-lg-min`  pour garder toujours la même valeur dans la zone de @media.\n*/\n\n@media (min-width: @screen-sm-min) {\n\n/* En ce qui concerne les classes dans des zones de Media Queries, il ne faut pas utiliser `&:extend` mais simplement le nom des classes de manière à dupliquer les sélecteurs de ces classes à l'intérieur de la classe que vous venez de déclarer et donc à l'intérieur des Media Queries. */\n    .brand,\n    .title {\n        .span12-2;\n    }\n    .anchor-nav,\n    .utils {\n        .span12-3;\n    }\n    .step {\n        .span12-4;\n    }\n    .call-to-action {\n        .span12-6;\n    }\n    .legals,\n    .main {\n        .span12-9;\n    }\n    .main-nav,\n    .slogan {\n        .span12-10;\n    }\n\n    .utils,\n    .legals,\n    .brand,\n    .slogan {\n        .pull-push;\n    }\n\n    .utils {\n        .push12-9;\n    }\n    .brand {\n        .push12-10;\n    }\n    .slogan {\n        .pull12-2;\n    }\n    .legals {\n        .pull12-3;\n    }\n    .legals {\n        .text-left;\n    }\n    .brand,\n    .utils {\n        .text-right;\n    }\n    .step {\n        .display-block;\n    }\n    .call-to-action:nth-child(n + 3) {\n        .display-none;\n    }\n}\n\n/* Écran Standard */\n@media (min-width: @screen-md-min) {\n    .anchor-nav,  \n    .call-to-action {\n        .span12-4;\n    }\n    .main {\n        .span12-8;\n    }\n    .call-to-action:nth-child(n + 3) {\n        .display-block;\n    }\n}\n\n/* Grand Écran */\n@media (min-width: @screen-lg-min) {\n    .anchor-nav {\n        .span12-3;\n    }\n    .call-to-action {\n        .span12-4;\n    }\n    .main {\n        .span12-9;\n    }\n    .call-to-action:nth-child(odd) {\n        .prepend12-2;\n    }\n    .call-to-action:nth-child(even) {\n        .append12-2;\n    }\n    .call-to-action:nth-child(n + 3) {\n        .display-none;\n    }\n}\n```\n\n\n\n\n\n## De l'utilité d'un Framework ##\n\nCe que l'on peut constater facilement en étudiant les deux exemples précédents c'est que la connaissance du Framework, afin de l'utiliser judicieusement, n'est pas bien plus utile/difficile à appliquer que de créer son propre jeu de classe CSS. Les Frameworks CSS sont donc de très bonnes sources d'inspiration et l'étude de leurs mécanismes améliorera grandement vos aptitudes en CSS mais leur utilisation [ne vous dispense pas de réfléchir](http://blog.goetter.fr/2013/08/23/un-framework-css-ne-dispense-pas-de-reflechir/).", "dates" : { "published" : { "$date" : 1419340140000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Utilisation optimisée de Framework CSS comme Bootstrap avec Less", "urn" : "utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less" }
{ "__v" : 0, "_id" : { "$oid" : "54aa5e637d7ac1495000ea7c" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48c7" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "Je vous propose de créer vos propres sites [Node.js] armés pour un rendu de qualité côté client et sans utiliser une seule ligne de JavaScript côté serveur. Vous pourrez ensuite, petit à petit et à votre rythme, vous plonger dans la partie Back-end JavaScript offerte par [Node.js]. Tout ceci est possible grâce au module [npm] (node.js package manager) *[NodeAtlas]*.\n\n*[NodeAtlas]* est un Framework MVC2 orienté Front-end, c'est-à-dire qu'il permet de faire tourner des sites multilingues complets uniquement avec les parties *View* et *Route* d'activées. Bien évidemment, en activant la partie *Controller* et *Model* vous pouvez créer de grands sites de qualités avec tout ce que l'on est en droit d'attendre : compte utilisateur, envoi de message, chat en direct... ou de solides applications web couplées à des Frameworks tels que [Angular.js], [Semantic UI] ou même votre propre code maison ! Mais commençons par le commencement.\n\nSachez que le blog sur lequel vous lisez cet article est fait avec *[NodeAtlas]* ([obtenir les sources](https://github.com/Haeresis/BlogAtlas/)), ce qui lui permet de respecter facilement les standards [HTML](http://validator.w3.org/check?uri=http%3A%2F%2Fblog.lesieur.name%2Fdes-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas%2F&charset=%28detect+automatically%29&doctype=Inline&group=0&user-agent=W3C_Validator%2F1.3+http%3A%2F%2Fvalidator.w3.org%2Fservices)/[CSS](http://jigsaw.w3.org/css-validator/validator?uri=http%3A%2F%2Fblog.lesieur.name%2Fdes-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas%2F&profile=css3&usermedium=all&warning=1&vextwarning=&lang=fr) et de [fournir sans efforts de hautes performances](https://gtmetrix.com/reports/blog.lesieur.name/16MEVbeA). \n\n> *[NodeAtlas]* est designé pour :\n- **Les débutants en JavaScript qui souhaitent se mettre au Node.js rapidement**.\n- Les experts Front-end, en leur permettant de créer des sites web ou des maquettes HTML de qualité.\n- Les experts en développement web et/ou JavaScript en leur permettant de créer des sites web et applications JavaScript à hautes performances serveurs.\n\n[npm]: https://www.npmjs.com/ \"npm is the package manager for node.\"\n[NodeAtlas]: https://www.npmjs.com/package/node-atlas/ \"Create MVC2 or Front-end-based websites easily.\"\n[Node.js]: http://nodejs.org/ \"Node.js is a platform built on Chrome's JavaScript runtime easily building fast, scalable network applications.\"\n[Angular.js]: https://angularjs.org/ \"HTML enhanced for web apps!\"\n[Semantic UI]: http://semantic-ui.com/ \"User Interface is the web language.\"\n\n\n\n\n\n## Créer un projet et lancer son Hello World ##\n\nIl existe bien des manières d'utiliser le module *[NodeAtlas]*, cependant dans un soucis de facilité, nous allons ici l'utiliser avec le `require` de [Node.js].\n\n### Installer le module NodeAtlas ###\n\nNous allons prendre en considération que vous [avez déjà installé Node.js et npm sur votre machine](http://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/).\n\n1. Créez vous n'importe où sur votre machine l'arborescences suivante :\n\n   ```\nproject-directory/\n— server.js\n```\n\n2. et remplissez le contenu de `server.js` avec le code suivant :\n\n   ```js\nrequire('node-atlas').run({\n    browse: true\n});\n```\n\n3. puis placez-vous ensuite dans votre répertoire `project-directory` et ouvrez un invité de commande (sous Windows, dans l'explorer de dossier, maintenez la touche `shift` enfoncée et faites un clique droit ; sélectionnez ensuite l'option « Ouvrir une fenêtre de commandes ici »).\n\n4. Entrez la commande `npm install node-atlas` pour installer le module *[NodeAtlas]* localement, dans votre dossier projet. Une fois installé, votre contenu de répertoire projet devrait ressembler à ceci :\n\n   ```\nproject-directory/\n— node_modules/\n—— node-atlas/\n——— ...\n— server.js \n```\n\n5. Enfin, testez le tout en tapant dans votre console `node server.js` pour obtenir le message « ... So NodeAtlas is running in “Simple Web Server” mode » ou « NodeAtlas is stopped because port 80 is already listening by other application. ». Une page web devrait également s'ouvrir avec le message « Cannot GET / ».\n\n\n\n### Le Hello World ###\n\nAffichons notre première page web ! Nous allons ajouter à la structure initiale un `webconfig.json` et une page `index.htm` dans le dossier des templates `templates/` afin de créer une route.\n\n1. Nous créons donc le fichier `webconfig.json` que nous allons alimenter comme suit :\n\n   ```json\n{\n    \"routes\": {\n        \"/hello-world/\": \"index.htm\"\n    }\n}\n```\n\n   Nous venons donc de dire qu'à l'adresse « http://localhost/hello-world/ » nous afficherons le contenu de `index.htm`.\n\n   > Si vous aviez eu le message « NodeAtlas is stopped because port 80 is already listening by other application. », changez alors le port d'écoute de votre application avec le `webconfig.json` suivant :\n\n   > ```json\n{\n    \"httpPort\": 7777,\n    \"routes\": {\n        \"/hello-world/\": \"index.htm\"\n    }\n}\n```\n  \n  > Cette fois, c'est à l'adresse « http://localhost:7777/hello-world/ » qu'il faudra afficher pour avoir le contenu de `index.htm`.\n\n2. Nous créons ensuite le fameux fichier de contenu `index.htm` pour obtenir l'arborescence suivante :\n\n   ```\nproject-directory/\n— node_modules/\n—— node-atlas/\n——— ...\n— templates/\n—— index.htm\n— server.js \n— webconfig.json\n```\n\n   et le remplissons de ce contenu :\n\n   ```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>The Hello World Page !</title>\n\t</head>\n\t<body>\n\t\t<p>Hello World !</p>\n\t</body>\n</html>\n```\n\n3. Relançons la commande précédente : `node server.js`.\n 1. En retournant dans votre invité de commande.\n 2. En tapant `Ctrl + C` pour couper l'instance en cours\n 3. En appuyant sur la touche « haut » pour ré-afficher la commande `node server.js`.\n   \n   Cela ouvre votre navigateur à l'adresse « http://localhost/ » (ou « http://localhost:7777/ ») avec un joli : « Cannot GET / ». Allez donc à l'addresse « /hello-world/ » comme celà : « http://localhost/hello-world/ » pour afficher votre « Hello World ! ».\n\n[<img alt=\"Votre premier Hello World avec NodeAtlas\" src=\"http://blog.haeresis.fr/upload/image/nodeatlas-hello-world-mini.jpg\" width=\"560\" height=\"313\">](http://blog.haeresis.fr/upload/image/nodeatlas-hello-world.jpg)\n\n> Il est possible, si votre page d'atterissage est « /hello-world/ », de changer votre fichier `server.js` comme suit :\n\n   > ```js\nrequire('node-atlas').run({\n    browse: \"/hello-world/\"\n});\n```\n\n\n\n\n\n## Architecture HTML multilingue ##\n\n### Gestion des templates et inclusions ###\n\n#### La structure de l'exemple ####\n\nLa structure et le découpage que je vais vous proposer est arbitraire. [NodeAtlas] vous laisse la totale liberté quand à la structure et au découpage de votre rendu. Pas d'id imposé, pas de classe... rien.\n\nVoici celle que je vous propose pour notre exemple :\n\n1. Le dossier du projet qui contient tous les fichiers.\n\n   ```\nproject-directory/\n```\n\n2. Le dossier contenant tous les modules npm de votre site.\n\n   ```\n— node_modules/\n—— node-atlas/\n——— ...\n```\n\n3. Le dossier contenant tous les fichiers disponible par demande http sans nécésiter de référence de route dans le `webconfig.json`. Le dossier « /public ».\n\n   ```\n— assets/\n—— javascript/\n——— common.js\n——— home.js\n—— stylesheets/\n——— common.css\n——— home.css\n—— media/\n——— images/\n```\n\n4. Le dossier contenant chaque template d'affichage différent pour votre site.\n\n   ```\n— templates/\n—— home.htm\n—— default.htm\n```\n\n5. Le dossier contenant les composants HTML répétable sur plus d'un template et ajouté via des « include ».\n\n   ```\n— components/\n—— head.htm\n—— header.htm\n—— footer.htm\n—— foot.htm\n```\n\n6. Les fichiers de la racines du projet. S'ajouterons à termes un `readme.md` et un `package.json`.\n\n   ```\n— server.js \n— webconfig.json\n```\n\nCe qui nous donne en totalité :\n\n```\nproject-directory/\n— node_modules/\n—— node-atlas/\n——— ...\n— assets/\n—— javascript/\n——— common.js\n——— home.js\n—— stylesheets/\n——— common.css\n——— home.css\n—— media/\n——— images/\n— templates/\n—— home.htm\n—— default.htm\n— components/\n—— head.htm\n—— header.htm\n—— footer.htm\n—— foot.htm\n— server.js \n— webconfig.json\n```\n\nNous allons remplir ces fichiers, avant d'exécuter la suite. [Vous pouvez télécharger cette arborescence à vide ici pour gagner du temps](http://blog.haeresis.fr/upload/example/project-directory-assets-components-templates.zip).\n\n#### Liste des routes ####\n\nVoici le fichier `webconfig.json` que nous allons alimenter :\n\n```\n{\n\t\"languageCode\": \"en-gb\",\n\t\"pageNotFound\": \"/page-404/\",\n\t\"routes\": {\n\t\t\"/\": \"home.htm\",\n\t\t\"/presentation/\": \"default.htm\",\n\t\t\"/contact-us/\": \"default.htm\",\n\t\t\"/page-404/\": {\n\t\t\t\"template\": \"default.htm\",\n\t\t\t\"statusCode\": 404\n\t\t}\n\t}\n}\n```\n\nDe manière à obtenir (pour le moment) :\n- Une page d'accueil derrière « `http://localhost/` »,\n- Une page de présentation derrière « `http://localhost/presentation/` »,\n- Une page de contact derrière « `http://localhost/contact-us/` »,\n- Et une page d'erreur derrière toutes les urls ne pointant pas vers un fichier du dossier `assets/`.\n\n*Note : si la route —initialement une `string`— se transforme en `Object`, alors la propriété dans cet objet (représentant la `string` initiale) est `template`.*\n\n#### Structure des templates Home et Default ####\n\nPour commencer, nous n'aurons que deux templates différents. Un template présentant une liste d'éléments important à consulter et un template permettant d'afficher *un titre* et *du texte*.\n\nVoici donc nos deux templates :\n\n**templates/default.htm**\n\n```html\n<!-- Sections communes stockées dans le dossier `components/` et inclues dans notre template. Ici la balise <head> avec les feuilles de style communes ainsi que le header. -->\n<%- include('head.htm') %>\n<%- include('header.htm') %>\n\n\t\t<section class=\"overview\">\n\t\t\t<h1>Presentation</h1>\n\n\t\t\t<p>This is a presentation about subject of the website !</p>\n\t\t</section>\n\n<!-- Sections communes stockées dans le dossier `components/` et inclues dans notre template. Ici les scripts JavaScript communs et le footer. -->\n<%- include('footer.htm') %>\n<%- include('foot.htm') %>\n```\n\n**templates/home.htm**\n\n```html\n<%- include('head.htm') %>\n\n\t\t<!-- Liste des styles CSS disponibles pour le template courant. -->\n\t\t<link rel=\"stylesheet\" href=\"stylesheets/home.css\">\n\n<%- include('header.htm') %>\n\n\t\t<section class=\"must-see\">\n\t\t\t<h1>Not to be missed</h1>\n\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<h2>What is our subject ?</h2>\n\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\n\t\t\t\t\t<p><a href=\"./presentation/\">Go to Presentation</a></p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<h2>Contac us !</h2>\n\t\t\t\t\t<p>Quibusdam eaque nemo dolorum labore dolor repellendus minus, magnam asperiores, nostrum, nisi porro, molestiae ipsa.</p>\n\t\t\t\t\t<p><a href=\"./contact-us/\">Go to Contact Information</a></p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<h2>Welcome !</h2>\n\t\t\t\t\t<p>Vero aliquam debitis, similique rerum hic asperiores.</p>\n\t\t\t\t\t<p><a href=\"./\">Go to Home</a></p>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</section>\n\n<%- include('footer.htm') %>\n\t\t\n\t\t<!-- Liste des controllers JavaScript client spécifiques au template courant. -->\n\t\t<script type=\"text/javascript\" src=\"javascript/home.js\"></script\n\n<%- include('foot.htm') %>\n```\n\net voici les 4 composants commun inclut dans ses deux templates :\n\n1. **components/head.htm**\n\n   ```html\n<!DOCTYPE html>\n<!-- Injection dynamique de la langue pour la route courante via `languageCode`. -->\n<html lang=\"<%= languageCode %>\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Title of the page</title>\n\n\t\t<!-- Injection dynamique de l'url absolue du site jusqu'à sa racine (qui inclut une éventuelle `urlRelativeSubPath`). -->\n\t\t<base href=\"<%= urlBasePath %>\">\n\n\t\t<!-- Liste des Frameworks CSS disponibles pour toutes les pages. -->\n\t\t<link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css\">\n\n\t\t<!-- Liste des styles CSS disponibles pour toutes les pages. -->\n\t\t<link rel=\"stylesheet\" href=\"stylesheets/common.css\">\n```\n\n2. **components/header.htm**\n\n   ```html\n\t</head>\n\t<body>\n\t    <!-- Classe spécifique à chaque layout. -->\n\t\t<div class=\"home layout\">\n\t\t\t<header>\n\t\t\t\t<h1>Website main title</h1>\n\t\t\t</header>\n```\n\n   *Note : nous verrons dans la partie suivante comment injecter une classe de layout différente en fonction du template qui injecte le composant.*\n\n3. **components/footer.htm**\n\n   ```html\n\t\t\t<footer>\n\t\t\t\t<p>©All rights not reserved at all !</p>\n\t\t\t</footer>\n\t\t</div>\n\n\t\t<!-- Liste des librairies JavaScript disponibles pour tous les templates. -->\n\t\t<script type=\"text/javascript\" src=\"//code.jquery.com/jquery-2.1.3.min.js\"></script>\n```\n\n4. **components/foot.htm**\n\n   ```html\n\t\t<!-- Liste des controllers JavaScript client qui affectent tous les templates. -->\n\t\t<script type=\"text/javascript\" src=\"javascript/common.js\"></script>\n\t</body>\n</html>\n```\n\n   > N'oubliez pas de remettre votre page de lancement à la racine :\n\n   > ```js\nrequire('node-atlas').run({\n    browse: \"/\" // ou true\n});\n```\n\nÀ présent, ré-exécutez `node server.js` rapidement :\n1. En retournant dans votre invité de commande.\n2. En tapant `Ctrl + C` pour couper l'instance en cours\n3. En appuyant sur la touche « haut » pour ré-afficher la commande `node server.js`.\n\n*Note : à notre niveau d'utilisation de [NodeAtlas], seul un changement dans le `webconfig.json` nécessite un redémarrage du moteur*.\n\nComme vous pouvez le constater, toutes vos pages ont le même titre, la même classe de layout et même pire, les pages « /presentation/ », « /contact-us/ » ou les pages d'erreurs sont identiques... pas très pratique tout cela. Bien qu'il soit possible d'étendre la configuration dédiée de chaque page dans le `webconfig` lui-même comme vous allez le voir ci-dessous, la section « Gestion des variations et du multilingue » de cet article sera dédiée à cette tâche.\n\n#### Étendre les routes du webconfig.json ####\n\nPour le petit exemple, si vous ne souhaitez pas activer les variations (voir plus loin dans cet article) pour quelques delta entre chaque page vous pouvez procéder comme suit :\n\n**webconfig.json**\n\n```\n{\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"routes\": {\n        \"/\": { \n        \t\"template\": \"home.htm\",\n        \t\"_layout\": \"home\",\n        \t\"_title\": \"Home Page\"\n        },\n        \"/presentation/\": { \n        \t\"template\": \"default.htm\",\n        \t\"_layout\": \"default\",\n        \t\"_title\": \"Presentation\"\n        },\n        \"/contact-us/\": { \n        \t\"template\": \"default.htm\",\n        \t\"_layout\": \"default\",\n        \t\"_title\": \"Contact Us\"\n        },\n        \"/page-404/\": { \n        \t\"template\": \"default.htm\",\n\t\t\"statusCode\": 404,\n        \t\"_layout\": \"default\",\n        \t\"_title\": \"Page 404\"\n        }\n    }\n}\n```\n\n*Note : les noms de propriété pour étendre vos routes commence par des « _ » (cela est totalement arbitraire pour l'exemple) pour éviter qu'elles n'entrent en conflit avec de futures propriétés réservées par [NodeAtlas].*\n\n**components/header.htm**\n\n```html\n\t</head>\n\t<body>\n\t\t<!-- Utilisation de la valeur « home » ou « default » en fonction de la route. -->\n\t\t<div class=\"<%- currentRouteParameters._layout %> layout\">\n\t\t\t<header>\n\t\t\t\t<!-- Utilisation de la valeur « Home Page », « Presentation », « Contact Us » ou « Page 404 » en fonction de la route. -->\n\t\t\t\t<h1><%- currentRouteParameters._title %></h1>\n\t\t\t</header>\n```\n\nDe cette manière, la classe layout et le titre seront différent en fonction de la page.\n\n\n\n\n### Gestion des variations et du multilingue ###\n\nÉtendre les routes avec vos propres variables de webconfig est plus une rustine qu'une véritable bonne pratique. Cela peut faire l'affaire pour une ou deux variables cependant le but du template est d'être alimenté par des données transversales et différentes en fonction de la route : ces données sont les variations !\n\n#### Mettre en place des fichiers de variations pour un même template ####\n\nNotre nouveau `webconfig.json` est le suivant :\n\n```\n{\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"routes\": {\n        \"/\": { \n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\"\n        },\n        \"/presentation/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\"\n        },\n        \"/contact-us/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\"\n        },\n        \"/page-404/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"statusCode\": 404\n        }\n    }\n}\n```\n\net nous avons donc dans notre structure le nouveau dossier :\n\n```\n— variations/\n—— home.json\n—— presentation.json\n—— contact-us.json\n—— page-404.json\n```\n\n[Vous pouvez télécharger ce complément d'arborescence à vide ici pour gagner du temps](http://blog.haeresis.fr/upload/example/project-directory-variations.zip).\n\nCela fait que nous avons à présent des variables utilisables pour chaque template via `variation`. C'est vous qui décidez qu'elles sont les variables que vous souhaitez vous créer pour pouvoir par la suite les utiliser dans vos templates. Voyons de plus prèt tous ses fichiers.\n\nAvec les 3 fichiers de variations suivant :\n\n**variations/presentation.json**\n\n```json\n{\n\t\"layout\": \"default presentation\",\n\t\"title\": \"Presentation\",\n\t\"content\": \"<p>This is a presentation about subject of the website !</p>\"\n}\n```\n\n**variations/contact-us.json**\n\n```json\n{\n\t\"layout\": \"default contact-us\",\n\t\"title\": \"Contact Us\",\n\t\"content\": \"<p>Please contact us to fake@email.here.</p>\"\n}\n```\n\n**variations/page-404.json**\n\n```json\n{\n\t\"layout\": \"default page-404\",\n\t\"title\": \"Page 404\",\n\t\"content\": \"<p>This page do not exist !</p>\"\n}\n```\n\non peut alimenter le template suivant :\n\n**templates/default.html**\n\n```html\n<%- include('head.htm') %>\n<%- include('header.htm') %>\n\n\t\t<section class=\"overview\">\n\t\t\t<!-- Retourne la valeur `title` du fichier json référencé dans la propriété `variation` de la route. -->\n\t\t\t<h1><%- specific.title %></h1>\n\n\t\t\t<!-- Retourne la valeur `content` du fichier json référencé dans la propriété `variation` de la route. -->\n\t\t\t<%- specific.content %>\n\t\t</section>\n\n<%- include('footer.htm') %>\n<%- include('foot.htm') %>\n```\n\nainsi le contenu des pages est différent en fonction de si l'on appel :\n\n- « `http://localhost/presentation/` »,\n- « `http://localhost/contact-us/` » ou\n- Une page qui n'existe pas « `http://localhost/a-non-existing-page/` ».\n\nDe la même manière le fichier de variation :\n\n**variations/home.json**\n\n```json\n{\n\t\"layout\": \"home\",\n\t\"title\": \"Home Page\",\n\t\"overview\": [{\n\t\t\"title\": \"What is our subject ?\",\t\n\t\t\"content\": \"<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\",\n\t\t\"link\": {\n\t\t\t\"href\": \"./presentation/\",\n\t\t\t\"content\": \"Go to Presentation\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Contac us !\",\n\t\t\"content\": \"<p>Quibusdam eaque nemo dolorum labore dolor repellendus minus, magnam asperiores, nostrum, nisi porro, molestiae ipsa.</p>\",\n\t\t\"link\": {\n\t\t\t\"href\": \"./contact-us/\",\n\t\t\t\"content\": \"Go to Contact Information\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Welcome !\",\n\t\t\"content\": \"<p>Vero aliquam debitis, similique rerum hic asperiores.</p>\",\n\t\t\"link\": {\n\t\t\t\"href\": \"./\",\n\t\t\t\"content\": \"Go to Home\"\n\t\t}\n\t}]\n}\n```\n\nalimente le template :\n\n**templates/home.html**\n\n```html\n<%- include('head.htm') %>\n\n\t\t<link rel=\"stylesheet\" href=\"stylesheets/home.css\">\n\n<%- include('header.htm') %>\n\n\t\t<section class=\"must-see\">\n\n\t\t\t<!-- Le tiret indique que l'on veut afficher la valeur et interpréter les éventuels éléments HTML qu'elle contient. -->\n\t\t\t<h1><%- specific.title %></h1>\n\n\t\t\t<ul>\n\n\t\t\t\t<!-- Voici comment boucler sur le tableau `specific.overview` du fichier de variation. -->\n\t\t\t    <% for (var i = 0, l = specific.overview.length; i < l; i++) { %>\n\t\t\t\t<li>\n\t\t\t\t\t<h2><%- specific.overview[i].title %></h2>\n\t\t\t\t\t<%- specific.overview[i].content %>\n\n\t\t\t\t\t<!-- L'égale indique que l'on veut affichier la valeur sans interpréter les éventuels éléments HTML qu'elle contient. -->\n\t\t\t\t\t<p><a href=\".<%= specific.overview[i].link.href %>\"><%- specific.overview[i].link.content %></a></p>\n\t\t\t\t</li>\n\t\t\t    <% } %>\n\t\t\t</ul>\n\t\t</section>\n\n<%- include('footer.htm') %>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"javascript/home.js\"></script\n\n<%- include('foot.htm') %>\n```\n\nÀ présent, ré-exécutez `node server.js` pour tester.\n1. En retournant dans votre invité de commande.\n2. En tapant `Ctrl + C` pour couper l'instance en cours\n3. En appuyant sur la touche « haut » pour ré-afficher la commande `node server.js`.\n\n#### Gestion de sites multilingues avec les variations ####\n\nAvec cette mécanique, nous pouvons facilement gérer des sites en plusieurs langues. Pour cela nous allons activer deux mécanismes :\n\n- La possibilité d'avoir un fichier de variation commun à l'ensemble des pages.\n- La possiblilité d'indiquer un `languageCode` différent en fonction de la route utilisé.\n\nVoyons cela avec le fichier `webconfig.json` suivant :\n\n```\n{\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"commonVariation\": \"common.json\",\n    \"routes\": {\n        \"/\": { \n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\"\n        },\n        \"/presentation/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\"\n        },\n        \"/contact-us/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\"\n        },\n        \"/francais/\": { \n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"/francais/presentation/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"/francais/contactez-nous/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"/francais/*\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"languageCode\": \"fr-fr\",\n\t\t\"statusCode\": 404\n        },\n        \"/page-404/\": { \n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"statusCode\": 404\n        }\n    }\n}\n```\n\net le nouveau dossier de variation suivant :\n\n```\n— variations/\n—— common.json\n—— home.json\n—— presentation.json\n—— contact-us.json\n—— page-404.json\n—— fr-fr/\n——— common.json\n——— home.json\n——— presentation.json\n——— contact-us.json\n——— page-404.json\n```\n\n[Vous pouvez télécharger ce complément d'arborescence à vide ici pour gagner du temps](http://blog.haeresis.fr/upload/example/project-directory-variations-2.zip).\n\navec le nouveau fichier `en-gb` :\n\n**variations/common.json**\n\n```json\n{\n\t\"title\": \"My first Website !\",\n\t\"copyright\": \"©All rights not reserved at all !\"\n}\n```\n\net son équivalent `fr-fr` :\n\n**variations/fr-fr/common.json**\n\n```json\n{\n\t\"title\": \"Mon premier site web !\",\n\t\"copyright\": \"©Tous les droits ne sont pas réservés du tout !\"\n}\n```\n\net les versions complètes en français de :\n\n**variations/fr-fr/presentation.json**\n\n```json\n{\n\t\"layout\": \"default presentation\",\n\t\"title\": \"Présentation\",\n\t\"content\": \"<p>Voici une présentation à propos du site de notre projet.</p>\"\n}\n```\n\n**variations/fr-fr/contact-us.json**\n\n```json\n{\n\t\"layout\": \"default contact-us\",\n\t\"title\": \"Contactez-nous\",\n\t\"content\": \"<p>Merci de nous contacter à l'adresse fake@email.here.</p>\"\n}\n```\n\n**variations/fr-fr/page-404.json**\n\n```json\n{\n\t\"layout\": \"default page-404\",\n\t\"title\": \"Page 404\",\n\t\"content\": \"<p>Cette page n'existe pas !</p>\"\n}\n```\n\n**variations/fr-fr/home.json**\n\n```json\n{\n\t\"layout\": \"home\",\n\t\"title\": \"Page d'accueil\",\n\t\"overview\": [{\n\t\t\"title\": \"Qu'est-ce que notre projet ?\",\t\n\t\t\"link\": {\n\t\t\t\"href\": \"./francais/presentation/\",\n\t\t\t\"content\": \"Allez à la présentation\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Contactez-nous !\",\n\t\t\"link\": {\n\t\t\t\"href\": \"./francais/contact-us/\",\n\t\t\t\"content\": \"Aller aux informations de contact\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Bienvenue !\",\n\t\t\"link\": {\n\t\t\t\"href\": \"./francais/\",\n\t\t\t\"content\": \"Aller à l'accueil\"\n\t\t}\n\t}]\n}\n```\n\n*Note : vous remarquerez que les valeurs de `specific.overview[i].content` n'ont pas été traduites. Dans ce cas là, c'est la valeur du dossier parent qui sera prise en compte, dans notre cas la version `en-gb`.*\n\nEn ce qui concerne les templates, pas de changement puisqu'ils avaient déjà été effectués. Cependant, nous allons rendre dynamique les valeurs dans nos composants `header.htm` et `footer.htm` à partir de notre fichier de vartiation `common.json`.\n\n**components/header.htm**\n\n```html\n\t</head>\n\t<body>\n\n\t\t<!-- Cette valeur sera différente en fonction de la route car elle provient d'un fichier spécifique. -->\n\t\t<div class=\"<%= specific.layout %> layout\">\n\t\t\t<header>\n\n\t\t\t\t<!-- Cette valeur sera identique pour toutes les routes car elle provient d'un fichier commun. -->\n\t\t\t\t<h1><%- common.title %></h1>\n\t\t\t</header>\n```\n\n**components/footer.htm**\n\n```html\n\t\t\t<!-- Cette valeur sera identique pour toutes les routes car elle provient d'un fichier commun. -->\n\t\t\t<footer>\n\t\t\t\t<p><%- common.copyright %></p>\n\t\t\t</footer>\n\t\t</div>\n\t\t<script type=\"text/javascript\" src=\"//code.jquery.com/jquery-2.1.3.min.js\"></script>\n```\n\nÀ présent, ré-exécutez `node server.js` pour tester.\n\n- La page d'accueil `en-gb` derrière « http://localhost/ »,\n- La page de présentation `en-gb` derrière « http://localhost/presentation/ »,\n- La page de contact `en-gb` derrière « http://localhost/contact-us/ »,\n- Les page d'erreur `en-gb` derrière toutes les urls ne pointant pas vers un fichier du dossier `assets/` et n'étant pas dans `francais/`.\n- La page d'accueil `fr-fr` derrière « http://localhost/francais/ »,\n- La page de présentation `fr-fr` derrière « http://localhost/francais/presentation/ »,\n- La page de contact `fr-fr` derrière « http://localhost/francais/contactez-nous/ »,\n- Les page d'erreur `fr-fr` derrière toutes les urls pointant vers un chemin de `francais/` non listé avant.\n\n\n\n\n\n## Pour aller plus loin ##\n\n### Des urls dynamiques ###\n\nIl ne vous aura peut-être pas échapé que si vous changez l'intégralité de vos urls dans le fichier `webconfig.json`, tous vos liens ne seront plus valide à travers tous vos fichiers de variations. Voici la marche à suivre pour rendre tous vos liens dynamiques !\n\nChangeons notre `webconfig.json` comme suit :\n\n```\n{\n    \"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"commonVariation\": \"common.json\",\n    \"routes\": {\n        \"home\": {\n        \t\"url\": \"/\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\"\n        },\n        \"presentation\": {\n        \t\"url\": \"/presentation/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\"\n        },\n        \"contact-us\": {\n        \t\"url\": \"/contact-us/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\"\n        },\n        \"home-fr-fr\": {\n        \t\"url\": \"/francais/\",\n        \t\"template\": \"home.htm\",\n        \t\"variation\": \"home.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"presentation-fr-fr\": {\n        \t\"url\": \"/francais/presentation/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"presentation.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"contact-us-fr-fr\": {\n        \t\"url\": \"/francais/contactez-nous/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"contact-us.json\",\n        \t\"languageCode\": \"fr-fr\"\n        },\n        \"error-fr-fr\": {\n        \t\"url\": \"/francais/*\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n        \t\"languageCode\": \"fr-fr\",\n\t\t\"statusCode\": 404\n        },\n        \"error\": {\n        \t\"url\": \"/page-404/\",\n        \t\"template\": \"default.htm\",\n        \t\"variation\": \"page-404.json\",\n\t\t\"statusCode\": 404\n        }\n    }\n}\n```\n\net voyons les modifications d'appel pour les liens dans le template `home.htm` :\n\n**templates/home.html**\n\n```html\n<%- include('head.htm') %>\n\n\t\t<link rel=\"stylesheet\" href=\"stylesheets/home.css\">\n\n<%- include('header.htm') %>\n\n\t\t<section class=\"must-see\">\n\n\t\t\t<h1><%- specific.title %></h1>\n\n\t\t\t<ul>\n\t\t\t\t<% for (var i = 0, l = specific.overview.length; i < l; i++) { %>\n\t\t\t\t<li>\n\t\t\t\t\t<h2><%- specific.overview[i].title %></h2>\n\t\t\t\t\t<%- specific.overview[i].content %>\n\n\t\t\t\t\t<!-- On réclame la clé `specific.overview[i].link.href` dans la liste des routes `webconfig.routes` pour en afficher son `url`. -->\n\t\t\t\t\t<p><a href=\".<%= webconfig.routes[specific.overview[i].link.href].url %>\"><%- specific.overview[i].link.content %></a></p>\n\t\t\t\t</li>\n\t\t\t    <% } %>\n\t\t\t</ul>\n\t\t</section>\n\n<%- include('footer.htm') %>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"javascript/home.js\"></script\n\n<%- include('foot.htm') %>\n```\n\nIl faudra ensuite placer les bonnes clés dans les propriétés `overview[i].link.href` de vos fichiers `common.js` :\n\n**variations/home.json**\n\n```json\n{\n\t\"layout\": \"home\",\n\t\"title\": \"Home Page\",\n\t\"overview\": [{\n\t\t\"title\": \"What is our subject ?\",\t\n\t\t\"content\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\",\n\t\t\"link\": {\n\t\t\t\"href\": \"presentation\",\n\t\t\t\"content\": \"Go to Presentation\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Contac us !\",\n\t\t\"content\": \"Quibusdam eaque nemo dolorum labore dolor repellendus minus, magnam asperiores, nostrum, nisi porro, molestiae ipsa.\",\n\t\t\"link\": {\n\t\t\t\"href\": \"contact-us\",\n\t\t\t\"content\": \"Go to Contact Information\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Welcome !\",\n\t\t\"content\": \"Vero aliquam debitis, similique rerum hic asperiores.\",\n\t\t\"link\": {\n\t\t\t\"href\": \"home\",\n\t\t\t\"content\": \"Go to Home\"\n\t\t}\n\t}]\n}\n```\n\n**variations/fr-fr/home.json**\n\n```json\n{\n\t\"layout\": \"home\",\n\t\"title\": \"Page d'accueil\",\n\t\"overview\": [{\n\t\t\"title\": \"Qu'est-ce que notre projet ?\",\t\n\t\t\"link\": {\n\t\t\t\"href\": \"presentation-fr-fr\",\n\t\t\t\"content\": \"Allez à la présentation\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Contactez-nous !\",\n\t\t\"link\": {\n\t\t\t\"href\": \"contact-us-fr-fr\",\n\t\t\t\"content\": \"Aller aux informations de contact\"\n\t\t}\n\t}, {\n\t\t\"title\": \"Bienvenue !\",\n\t\t\"link\": {\n\t\t\t\"href\": \"home-fr-fr\",\n\t\t\t\"content\": \"Aller à l'accueil\"\n\t\t}\n\t}]\n}\n```\n\nÀ présent, ré-exécutez `node server.js` pour tester.\n\n**[Vous pouvez récupérer l'intégralité du code de cet article dans cette archive pour tester](http://blog.haeresis.fr/upload/example/project-directory.zip).**\n\n### D'autres bonnes pratiques ###\n\nVous trouverez d'autres fonctionnalités de *[NodeAtlas]* en lisant le [README.md](https://github.com/Haeresis/NodeAtlas) en attendant la rédaction de deux futures articles dédiés :\n\n- aux développeur Front-end, en expliquant comment générer des maquettes HTML à partir d'un site *[NodeAtlas]* ou comment rendre automatique les tâches liées à la performance côté client et\n- aux développeur Back-end ou JavaScript en étendant le fonctionnement de *[NodeAtlas]* aux parties *Controller* et *Model* avec une implémentation des *Websockets* pour les actions en temps réel.", "dates" : { "published" : { "$date" : 1420793400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".text p img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100%;\n}", "title" : "Des sites web Node.js pour les débutants en JavaScript avec NodeAtlas", "urn" : "des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas" }
{ "__v" : 0, "_id" : { "$oid" : "54bcdc3c1bee52d944ae9aac" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48c8" }, { "$oid" : "5310456355dfd5f7698d48c0" }, { "$oid" : "5310456355dfd5f7698d48cc" } ], "content" : "*Ceci est une traduction du [tl;dr (to long; didn't read)](https://github.com/Haeresis/NodeAtlas/blob/master/TLDR.md) du [module npm node-atlas](https://www.npmjs.com/package/node-atlas) pour [Node.js](https://nodejs.org/). Si [vous ne savez pas ce qu'est Node.js](http://blog.lesieur.name/developper-en-javascript-cote-serveur-avec-nodejs/) c'est par [ici](http://blog.lesieur.name/developper-en-javascript-cote-serveur-avec-nodejs/), si [vous souhaitez l'installer](http://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/) c'est par [ici](http://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/) et pour [utiliser NodeAtlas rapidement](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/) c'est par [ici](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/) !*\n\n> *NodeAtlas* est un Framework JavaScript MVC2 orienté Front-end SEO-compliant et W3C-compliant. C'est-à-dire qu'il permet de faire tourner des sites multilingues indexables ou de créer des maquettes HTML et passant la validation W3C uniquement avec les parties View et Url Rewriting d'activées avec modifications à chaud. Bien évidemment, en activant la partie Controller et Model vous pouvez créer de grands sites respectant les nouveaux standards !\n\n**For an international version of this document, [follow this link](https://www.npmjs.com/package/node-atlas).**\n\n[![Faites un don](https://img.shields.io/badge/don-%E2%9D%A4-ddddff.svg)](https://www.paypal.me/BrunoLesieur/5) [![Travis CI](https://travis-ci.org/Haeresis/NodeAtlas.svg)](https://travis-ci.org/Haeresis/NodeAtlas/) [![Version 1.0 Beta](https://img.shields.io/badge/version-1.0.0--beta-brightgreen.svg)](https://github.com/Haeresis/NodeAtlas) [![Package NPM](https://badge.fury.io/js/node-atlas.svg)](https://www.npmjs.com/package/node-atlas) [![Node.js](https://img.shields.io/badge/nodejs-0.10.0%2C_4.1.1-brightgreen.svg)](https://nodejs.org/en/) [![Technical Debt Ratio](https://img.shields.io/badge/debt_ratio-0%25-brightgreen.svg)](http://docs.sonarqube.org/display/PLUG/JavaScript+Plugin) [![Dependency Status](https://gemnasium.com/Haeresis/NodeAtlas.svg)](https://gemnasium.com/Haeresis/NodeAtlas)\n\n\n\n## Utilisation ##\n\nPour une documentation complète, vous pouvez lire le [README.md](http://haeresis.github.io/NodeAtlas/doc/).\n\n1. ### Étape 1 - Installation ###\n\n   Installer *NodeAtlas* avec l'une des deux méthodes suivantes :\n\n   - `npm install node-atlas` recommandée pour une utilisation en tant qu'API.\n   - `npm install -g node-atlas` recommandée pour une utilisation à la ligne de commande.\n\n2. ### Étape 2 - Configuration ###\n\n   Créer un fichier `webconfig.json` et ses fichiers de dépendances pour configurer votre site.\n\n   **website.json** exemple pour le développement :\n\n   ```js\n{\n    \"languageCode\": \"en-gb\",                /* Définir la langue principale. */\n    \"pageNotFound\": \"/page-404/\",           /* Assigner une vue dédiée à la page 404. */\n    \"commonVariation\": \"common.json\",       /* Assigner les fichiers de variations communes pour la localisation. */\n    \"commonController\": \"common.js\",        /* Assigner les fichiers des contrôles appelés sur toutes les pages. */\n    \"postSupport\": false,                   /* Par défaut, empêcher les requêtes de page en POST. */\n    \"bundles\": \"bundles.json\",              /* Définir les fichiers CSS et JS concaténés ensemble et minifiés dans un fichier exterieur. */\n    \"optimizations\": \"optimizations.json\",  /* Définir les images à optimiser pour le web dans un fichier extérieur. */\n    \"htmlGenerateBeforeResponse\": true,     /* Générer la page couramment affichée dans le dossier \"generates\". */\n    \"stylesheetsBundlesEnable\": true,       /* Minifier les CSS dans des fichiers \".min\" avant de renvoyer la page. */\n    \"javascriptBundlesEnable\": true,        /* Offusquer les JS dans des fichiers \".min\" avant de renvoyer la page. */\n    \"enableLess\": true,                     /* Utiliser des fichiers Less avec des fichiers \".map\" pour la partie développement. */\n    \"routes\": \"route.json\"                  /* Définir toutes les urls fournis par le site dans un fichier extérieur. */\n}\n```\n\n   **website.prod.json** exemple pour la production :\n\n   ```js\n{\n\t\"httpPort\": 7777,                       /* Définir le vrai port HTTP pour l'application si le port 80 est déjà écouté. */\n\t\"urlHttp\": 80,                          /* Définir le port d'accès pour l'application depuis le net (proxy). */\n\t\"httpSecure\": \"security/server\",        /* Définir le répertoire où trouver les fichiers \"server.key\" et \"server.crt\" pour le HTTPs. */\n\t\"urlHostname\": \"www.my-website.com\",    /* Définir le hostname pour l'application sur le net. */\n    \"urlRelativeSubPath\": \"example\",       /* Définir un sous dossier d'exécution pour l'url de l'application. Par exemple : \"https://www.my-website.com/example/\". */\n\t\"languageCode\": \"en-gb\",\n    \"pageNotFound\": \"/page-404/\",\n    \"commonVariation\": \"common.json\",\n    \"commonController\": \"common.js\",\n    \"postSupport\": false,\n    \"routes\": \"route.json\",\n}\n```\n\n   **routes.json** example:\n\n   ```js\n{\n\t\"home\": {                               /* Définir une clé à utiliser comme référence pour manipuler les paramètres définis ou d'url dans le code. */\n\t\t\"url\": \"/\",                         /* Définir l'url d'accès à la page derrière cette route. */\n\t\t\"generate\": \"home.html\",            /* Définir le chemin d'accès pour enregistrer le rendu au format HTML de manière statique. */\n\t\t\"template\": \"home.htm\",             /* Assigner une un fichier de vue utilisé pour présenter l'information. */\n\t\t\"variation\": \"home.json\",           /* Assigner un fichier de variation spécifique utilisé pour localiser la page. */\n\t\t\"controller\": \"home.js\"             /* Assigner un fichier de contrôle spécifique utilisé pour la page d'accueil (afficher les derniers articles, le nombre d'inscrit, etc.). */\n\t},\n\t\"presentation\": {\n\t\t\"url\": \"/presentation/\",\n\t\t\"generate\": \"presentation.html\",\n\t\t\"template\": \"default.htm\",          /* Même template utilisé avec... */\n\t\t\"variation\": \"presentation.json\"    /* ...une variation différente pour générer du contenu de page différent (voir \"error\"). */\n\t},\n\t\"members\": {\n\t\t\"url\": \"/members/\",\n\t\t\"generate\": \"members.html\",\n\t\t\"template\": \"members.htm\",\n\t\t\"variation\": \"members.json\",\n\t\t\"controller\": \"members.js\"\n\t},\n\t\"memberV2\": {                           /* Une nouvelle version de rendu pour les pages \"member\". */\n\t\t\"url\": \"/members/:member/\",         /* La partie \":member\" représente le membre courrament demandé... */\n\t\t\"generate\": \"members/bob.html\",     /* ...et un faux utilisateur est utilisé pour un rendu statique dans le dossier des fichier générés. */\n\t\t\"template\": \"member.htm\",\n\t\t\"variation\": \"member.json\",\n\t\t\"controller\": \"member.js\"\n\t},\n\t\"member\": {                             /* La vieille version de des pages \"memberV2\"... */\n\t\t\"url\": \"/members-profile/:member/\", /* ...avec une vieille route... */\n\t\t\"redirect\": \"/members/:member/\",    /* ...conservée pour rediriger sur la nouvelle page... */\n\t\t\"statusCode\": 301                   /* ...de manière permanente. */\n\t},\n\t\"contact-us\": {\n\t\t\"url\": \"/contact-us/\",\n\t\t\"generate\": \"contact-us.html\",\n\t\t\"template\": \"contact-us.htm\",\n\t\t\"variation\": \"contact-us.json\",\n\t\t\"controller\": \"contact-us.js\",\n\t\t\"postSupport\": true                 /* Permettre d'accéder à la page par demande en POST pour envoyer un email avec un formulaire. */\n\t},\n\t\"home-fr-fr\": {\n\t\t\"url\": \"/francais/\",\n\t\t\"generate\": \"francais/bienvenue.html\",\n\t\t\"template\": \"home.htm\",\n\t\t\"variation\": \"home.json\",\n\t\t\"controller\": \"home.js\",\n\t\t\"languageCode\": \"fr-fr\"             /* Un code de langue spécifique pour cette page. */\n\t},\n\t\"presentation-fr-fr\": {\n\t\t\"url\": \"/francais/presentation/\",\n\t\t\"generate\": \"francais/presentation.html\",\n\t\t\"template\": \"default.htm\",\n\t\t\"variation\": \"presentation.json\",\n\t\t\"languageCode\": \"fr-fr\"\n\t},\n\t\"members-fr-fr\": {\n\t\t\"url\": \"/francais/membres/\",\n\t\t\"generate\": \"francais/members.html\",\n\t\t\"template\": \"members.htm\",\n\t\t\"variation\": \"members.json\",\n\t\t\"controller\": \"members.js\",\n\t\t\"languageCode\": \"fr-fr\"\n\t},\n\t\"memberV2-fr-fr\": {\n\t\t\"url\": \"/francais/membres/:member/\",\n\t\t\"generate\": \"francais/members/bob.html\",\n\t\t\"template\": \"member.htm\",\n\t\t\"variation\": \"member.json\",\n\t\t\"controller\": \"member.js\",\n\t\t\"languageCode\": \"fr-fr\"\n\t},\n\t\"member-fr-fr\": {\n\t\t\"url\": \"/profile-de-membres/:member/\",\n\t\t\"redirect\": \"/membres/:member/\",\n\t\t\"statusCode\": 301\n\t},\n\t\"contact-us-fr-fr\": {\n\t\t\"url\": \"/francais/contactez-nous/\",\n\t\t\"generate\": \"francais/contactez-nous.html\",\n\t\t\"template\": \"contact-us.htm\",\n\t\t\"variation\": \"contact-us.json\",\n\t\t\"languageCode\": \"fr-fr\",\n\t\t\"controller\": \"contact-us.js\",\n\t\t\"postSupport\": true\n\t},\n\t\"error-fr-fr\": {\n\t\t\"url\": \"/francais/*\",               /* Toutes les pages commençant par \"/francais/\" pour la page d'erreur française. */\n\t\t\"generate\": \"francais/page-404.html\",\n\t\t\"template\": \"default.htm\",          /* Template partagé par différentes routes (voir \"presentation\"). */\n\t\t\"variation\": \"page-404.json\",\n\t\t\"languageCode\": \"fr-fr\",\n\t\t\"statusCode\": 404                   /* Un statu 404 approprié pour les pages d'erreur. */\n\t},\n\t\"error\": {\n\t\t\"url\": \"/page-404/\",                /* Page d'erreur par défaut défini avec \"pageNotFound\". */\n\t\t\"generate\": \"page-404.html\",\n\t\t\"template\": \"default.htm\",\n\t\t\"variation\": \"page-404.json\",\n\t\t\"statusCode\": 404\n\t}\n}\n```\n\n   autres fichiers...\n\n3. ### Étape 3 - Création ###\n\n\tCréer des fichiers pour développer votre site !\n\n   Structure de dossier *NodeAtlas* par défaut:\n\n   ```\nmy-website/\n\t— node_modules/               <= Tous les modules node.js pour votre application.\n\t\t— node-atlas/\n\t\t— ...\n\t— assets/                     <= Tous les fichiers publiques peuvent être accédés en HTTP(s) sans route specifique définie.\n\t\t— javascript/\n\t\t\t...\n\t\t— stylesheets/\n\t\t\t...\n\t\t— media/\n\t\t\t...\n\t\t— ...\n\t— templates/                  <= La partie Vue avec chaque type de template pour le rendu.\n\t\thome.htm\n\t\tdefault.htm\n\t\t...\n\t— variations/                 <= Tous les fichiers pour le remplissage de contenu avec \"en-gb\" par défaut...\n\t\tcommon.json\n\t\thome.json\n\t\t...\n\t\t— fr-fr/                  <= ...et également le \"fr-fr\".\n\t\t\tcommon.json\n\t\t\thome.json\n\t\t\t...\n\t— controller/                 <= La partie Contrôle pour manipuler le template, la variation et les modèles avec les bases de données ou les paramètres d'url.\n\t\tcommon.js\n\t\thome.js\n\t\t...\n\t— components/                 <= Toutes les parties mutualisées pour...\n\t\t— templates/              <= ...les templates...\n\t\t\thead.htm\n\t\t\tfoot.htm\n\t\t\t...\n\t\t— controllers/            <= ...et les contrôles.\n\t\t\tform-contact-us.js\n\t\t\t...\n\t— models/                     <= La partie Modèle avec des fichiers de modèle utilisés par les contrôles pour remplir les templates.\n\t\t— ...\n\t— generates/                  <= Toutes les maquettes HTML générées et utilisables par les Back-end avec autre chose que Node.js.\n\t...\n\tserver.js                     <= Fichier utilisé pour faire tourner et configurer NodeAtlas pour une utilisation sous forme d'API.\n\twebconfig.json                <= Fichier utilisé pour faire tourner le site sur localhost pour le développement.\n\twebconfig.prod.json           <= Fichier utilisé pour faire tourner le site sur le net pour la production.\n\troutes.json                   <= Fichier utilisé par \"webconfig.json\" et \"webconfig.prod.json\" pour définir les routes.\n\t...\n\twebconfig.prod.en-gb.json     <= Fichier exemple utilisé pour faire tourner uniquement les routes \"en-gb\" sur un port...\n\troutes.en-gb.json             <= ...avec le fichier de route anglais...\n\twebconfig.prod.fr-fr.json     <= ...et faire tourner les routes \"fr-fr\" sur un autre port...\n\troutes.fr-fr.json             <= ...avec le fichier de route français.\n\t...\n```\n\n4. ### Étape 4 - Lancement ! ###\n\n   Lancer *NodeAtlas* depuis le dossier \"my-website\" dans votre environnement de développement :\n\n   - avec un fichier `server.js`:\n\n     ```\n     node server.js\n     ```\n\n   - with CLI command: \n\n     ```\n     nodeatlas\n     ```\n\n   - pour générer les assets : \n\n     ```\n     nodeatlas --generate\n     ```\n\n   Lancer *NodeAtlas* dans votre environnement de production :\n\n   - en standard: \n\n     ```\n     nodeatlas --directory /var/www/my-website/ --webconfig webconfig.prod.json\n     ```\n\n   - avec *Forever*: \n\n     ```\n     forever start /usr/local/lib/node_modules/node-atlas/node-atlas.js --directory /var/www/my-website/ --webconfig webconfig.prod.json\n     ```\n\n\n\n\n\n## Documentation ##\n\n### À propos de NodeAtlas ##\n\n- [README.md complet et détaillé sur GitHub](https://github.com/Haeresis/NodeAtlas)\n- [Pour maintenir et développer node-atlas.js](http://haeresis.github.io/NodeAtlas/doc/namespaces.list.html)\n\n### Exemple de sites ##\n\n- [Génération et maintenance de maquette HTML](https://github.com/Haeresis/ResumeAtlas/).\n- [Maintenance de site HTML (sans Back-end)](https://github.com/Haeresis/ResumeAtlas/).\n- [Site Node.js avec Websocket et PopState](https://github.com/Haeresis/BookAtlas/).\n- [Site Node.js avec base MongoDB et Redis](https://github.com/Haeresis/BlogAtlas/).\n- [Exemple Node.js de modification de contenu live sans Back-office](https://github.com/Haeresis/EditAtlas/).\n- [Simple Serveur Web pour un dossier](https://github.com/Haeresis/SimpleAtlas/).\n- [Utilisation du préprocesseur Less pour des Framework non invasif dans le HTML](https://github.com/Haeresis/LessAtlas/).\n- [Création d'extensions pour booster les capacités natives](https://github.com/Haeresis/SublimeAtlas/).\n\n### Articles ###\n\n- [Article pour les débutants en JavaScript qui souhaitent se mettre au Node.js rapidement](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/).\n- Article pour les experts Front-end, en leur permettant de créer des sites web ou des maquettes HTML de qualité (prochainement...).\n- Article pour les experts en développement web et/ou JavaScript en leur permettant de créer des sites web et applications JavaScript à hautes performances serveurs (prochainement...).", "dates" : { "published" : { "$date" : 1421609280000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "NodeAtlas, le Framework Node.js orienté Front-end, SEO et W3C compliant.", "urn" : "nodeatlas-le-framework-nodejs-mvc2-oriente-front-end" }
{ "__v" : 0, "_id" : { "$oid" : "54cc92c2a36eedac79a3a599" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" } ], "content" : "Nous allons voir dans cet article comment créer rapidement un système permettant de surveiller si une touche du clavier est enfoncée lors de l'exécution d'une action dans votre navigateur ou mieux, si une série de touche est enfoncée pour autoriser/lancer l'exécution d'une action lors de la pression, par exemple, sur « Ctrl + Alt + E ».\n\n<figure>\n    <img src=\"http://blog.haeresis.fr/upload/image/ctrlalte.jpg\" alt=\"Ctrl + Alt + E\">\n    <figcaption><a href=\"https://s-media-cache-ak0.pinimg.com/736x/5e/11/0f/5e110f0cda1acb3fdba06b38aab93586.jpg\">Image originale ici</a></figcaption>\n</figure>\n\nEt comme toujours, on va devoir jouer avec un peu de JavaScript ! Si vous n'avez pas trop le temps de jouer, [le code qui vous intéresse probablement se trouve ici](http://blog.lesieur.name/comment-gerer-les-raccourcis-clavier-en-javascript/#avec-jquery)\n\n\n\n\n\n## Détecter qu'une ou plusieurs touches sont enfoncées ##\n\nNous allons implémenter dans cette partie la fonctionnalité tant convoitée, mais de différentes manières. Cela vous ferra un exercice JavaScript intéressant. Par exemple sur cette page, appuyez sur « Ctrl + Alt + E ».\n\n\n\n### Avec les méthodes JavaScript inline `onkeydown` et `onkeyup` ###\n\nPour les anciens, vous les connaissez peut-être pour les avoir croisés au détour d'un attribut HTML comme ici : `<input type=\"text\" onkeydown=\"doSomething()\" />`. Ce qu'il faut retenir de la méthode inline pour les événements, c'est qu'elle ne garde que la dernière affectation de code, et qu'elle écrase toutes celles associées précédemment. Voyons plus bas cette implémentation.\n\n> [Tester cet exemple de code en live sur cette page](http://codepen.io/Haeresis/pen/KwvOPB).\n\n```js\n/*\n * Nous sommes dans le scope global,\n * aussi l'objet `keys` est accessible partout\n * dans le code à travers tous les fichiers JavaScript.\n*/\nvar keys = {};\n\n/*\n * Étant dans le code global,\n * `window.onkeydown` est identique à `this.onkeydown` \n * lui même identique à `onkeydown`.\n * On associe ci-dessous la même fonction lorsqu'une\n * touche est appuyée, et lorsqu'une touche est relachée.\n*/\nonkeydown = onkeyup = function (e) {\n\n    /*\n     * Si `e` n'existe pas, \n     * nous somme probablement dans un vieux IE.\n     * On affecte alors `event` à `e`.\n     */\n    e = e || event;\n\n    /*\n     * Si la fonction courante est executée, \n     * quand une touche est enfoncée,\n     * `e.type === 'keydown'` renverra `true`\n     * sinon elle renverra `false`.\n     * Il suffit alors d'assigner chaque état \n     * dans le tableau `keys` pour chaque\n     * touche `e.keyCode`.\n     */     \n    keys[e.keyCode] = e.type === 'keydown';\n    \n    /*\n     * Cette zone sera exécutée lorsque les touches\n     * Ctrl (17), Alt (18) et E (69)\n     * seront enfoncée en même temps\n     * car l'objet `keys` vaudra alors :\n     * {\n     *  17: true,\n     *  18: true,\n     *  69: true\n     * }\n  \t */\n    if (keys[17] && keys[18] && keys[69]) {\n\n      /*\n       * Affichera dans la console (F12, onglet console)\n       * le texte « Ctrl + Alt + E ».\n       */\n      console.log('Ctrl + Alt + E');\n    }\n}\n\n/*\n * Si l'on clique dans le navigateur...\n */\nonclick = function () {\n\n    /*\n     * ...alors que les touches\n     * Ctrl (17), Alt (16) et E (69)\n     * sont appuyées...\n     */\n    if (keys[17] && keys[16] && keys[69]) {\n\n        /*\n         * ...on affichera dans la console \n         * le texte « Ctrl + Alt + E ».\n         */\n        console.log('Ctrl + Shift + E');\n    }\n}\n```\n\n\n\n### Avec les écouteurs d'événement JavaScript ###\n\nÉtant donné que nous accrochons nos événements à l'objet global `window`, le mieux est d'abonner les événements à des écouteurs plutôt que d'utiliser les méthodes inline, comme cela nous pourrons par la suite abonner d'autres fonctions.\n\nCela se fait avec `addEventListener` (ou `attachEvent` sur les anciens IE).\n\n> [Tester cet exemple de code en live sur cette page](http://codepen.io/Haeresis/pen/LEjwWN).\n\n```js\nvar keys = {};\n\n/*\n * Mise du code appelé en commun dans une\n * fonction que nous allons\n * abonnée à un écouteur d'événement.\n */\nfunction trackMultipleKeyStroke (e) {\n    e = e || event;\n    keys[e.keyCode] = e.type === 'keydown';\n  \n    /*\n     * Cette partie constitue le code exécuté quand\n     * Ctrl (17), Alt (18) et E (69)\n     * sont enfoncées.\n     */\n    if (keys[17] && keys[18] && keys[69]) {\n        console.log('Ctrl + Alt + E');\n    }\n}\n\n/*\n * Fonction de rétro-compatibilité pour\n * les navigateurs Internet Explorer.\n * Elle marchera dans tous les navigateurs\n * et demandera qui s'abonne, à quel événement\n * et ce qu'il se passe quand l'événement est\n * appelé/levé.\n */\nfunction addEvent(element, event, func) {\n\n\t/*\n\t * Avons nous à faire à un vieil Internet Explorer ?\n\t */\n\tif (element.attachEvent) {\n\n\t\t/*\n\t\t * Abonnons nous alors comme Internet Explorer le propose.\n\t\t */\n\t\treturn element.attachEvent('on' + event, func);\n\t} else {\n\n  \t\t/*\n  \t\t * Nous nous abonnons comme la spécification ECMAScript le propose.\n  \t\t */\n\t\treturn element.addEventListener(event, func, false);\n  \t}\n}\n\n/*\n * Appel de la fonction de rétro-compatibilité \n * que nous venons de créer pour abonner `window`\n * au événement `keydown` et `keyup`\n */\naddEvent(window, \"keydown\", trackMultipleKeyStroke);\naddEvent(window, \"keyup\", trackMultipleKeyStroke);\n\n/*\n * Cette partie constitue le code exécuté quand\n * on clique dans la page...\n */\naddEvent(window, \"click\", function () {\n\n    /*\n     * ...si Ctrl (17), Shift (16) et E (69)\n     * sont enfoncées.\n     */\n    if (keys[17] && keys[16] && keys[69]) {\n        console.log('Ctrl + Shift + E');\n    }\n});\n```\n\n\n\n### Avec jQuery ###\n\nComme toujours, pour ne pas vous soucier de la compatibilité et écrire moins de code, vous pouvez faire appel à la librairie [jQuery](http://jquery.com/). Comme le code proposé ci-dessous.\n\n> [Tester cet exemple de code en live sur cette page](http://codepen.io/Haeresis/pen/XJavgr).\n\n```js\nvar keys = {};\n\n$(window).on(\"keyup keydown\", function (e) {\n    e = e || event;\n    keys[e.keyCode] = e.type === 'keydown';\n  \n    /*\n     * Cette partie constitue le code exécuté quand\n     * Ctrl (17), Alt (18) et E (69)\n     * sont enfoncées.\n     */\n    if (keys[17] && keys[18] && keys[69]) {\n        console.log('Ctrl + Alt + E');\n    }\n\n    /*\n     * Cette partie constitue le code exécuté quand\n     * on clique dans la page...\n     */\n}).click(function () {\n\n    /*\n     * ...si Ctrl (17), Shift (16) et E (69)\n     * sont enfoncées.\n     */\n    if (keys[17] && keys[16] && keys[69]) {\n        console.log('Ctrl + Shift + E');\n    }\n});\n```\n\n\n\n\n\n## 3 points à savoir ##\n\nIl y a quelques points à savoir pour ensuite utiliser ces raccourcis clavier en toutes circonstances.\n\n\n\n1. ### Perte de focus ###\n\n   Quand vous levez une popup via `alert` ou plus globalement que vous perdez le focus, l'événement `keyup` n'est pas levé ce qui laisse penser au navigateur que vous maintenez encore les touches alors que ce n'est peut-être plus le cas. Pour remédier à cela, l'astuce est de remettre à vide l'objet global `keys`.\n\n   > Ainsi le code ci-dessous produit le bug : *`voyez-plutôt`*\n\n   > ```js\nvar keys = {};\n$(window).on(\"keyup keydown\", function (e) {\n    e = e || event;\n    keys[e.keyCode] = e.type === 'keydown';\n}).click(function () {\n    /*\n     * Quand vous ré-appuierez sur une des trois touches de la combinaison,\n     * même sans appuyer sur les autres touches,\n     * l'alerte se relancera car elle empêche les valeurs de l'objet \n     * contenant les touches de repasser à `false` quand vous les relâchés.\n     */\n    if (keys[17] && keys[16] && keys[69]) {\n        alert('Ctrl + Shift + E');\n    }\n});\n```\n\n   La solution est donc de vider toutes les valeurs pour qu'elles soient interprétées comme \n`false` après l'appel de la fonction faisant perdre le focus.\n\n   > Ainsi le code ci-dessous résout le bug : **`voyez-plutôt`**\n\n   > ```js\nvar keys = {};\n$(window).on(\"keyup keydown\", function (e) {\n    e = e || event;\n    keys[e.keyCode] = e.type === 'keydown';\n}).click(function () {\n    if (keys[17] && keys[16] && keys[69]) {\n        alert('Ctrl + Shift + E');\n        /*\n         * Remet les valeurs des touches à `false` en les vidants.\n         */\n        keys = {};\n    }\n});\n```\n\n2. ### Plusieurs écoutes, bon ordre ###\n\n   Si vous souhaiter lister vos raccourcis clavier, il faut lister vos combinaisons de touches de la séquence la plus longue à la séquence la plus courte avec des `else if` sinon vous n’arriverez jamais à faire fonctionner les combinaisons les plus longues.\n\n   > Ci-dessous la seconde combinaison ne sera jamais appelée : *`voyez-plutôt`*\n\n   > ```js\nif (keys[17] && keys[69]) {\n    console.log('Ctrl + E');\n} else if (keys[17] && keys[16] && keys[69]) {\n    console.log('Ctrl + Shift + E');\n}\n```\n\n   La bonne pratique est donc la suivante.\n\n   > Ci-dessous la seconde combinaison fonctionnera : **`voyez-plutôt`**\n\n   > ```js\nif (keys[17] && keys[16] && keys[69]) {\n    console.log('Ctrl + Shift + E');\n} else if (keys[17] && keys[69]) {\n    console.log('Ctrl + E');\n}\n```\n\n3. ### Prendre la main sur les raccourcis du navigateur ###\n\n   Parfois, votre combinaison de touche ouvre une action par défaut programmée par le navigateur. Si vous souhaitez l'annuler, faites comme suit :\n\n   ```js\nvar keys = {};\n$(window).on(\"keyup keydown\", function (e) {\n    e = e || event;\n    keys[e.keyCode] = e.type === 'keydown';\n\n    if (keys[17]] && keys[84]) {\n\n        /*\n         * Normalement, un nouvel onglet devrait s'ouvrir, \n         * car c'est le raccourci utilisé pour cela.\n         */\n        console.log('Ctrl + T');\n\n        /*\n         * Mais pas en ajoutant `return false`.\n         */\n        return false;\n    }\n});\n```\n\n\n\n\n\n## Les Char Codes ou Key Codes ##\n\nVous trouverez [la liste des nombres](http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes) à mettre dans votre objet `keys` sur [la page suivante](http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes).", "dates" : { "published" : { "$date" : 1422786600000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "var keys = {};\n$(window).on(\"keyup keydown\", function (e) {\n    e = e || event;\n    keys[e.keyCode] = e.type === 'keydown';\n    if (keys[17] && keys[18] && keys[69]) {\n        alert('Ctrl + Alt + E');\n        keys = {};\n        return false;\n    }\n});", "stylesheet" : "", "title" : "Comment gérer les raccourcis clavier en JavaScript", "urn" : "comment-gerer-les-raccourcis-clavier-en-javascript" }
{ "__v" : 0, "_id" : { "$oid" : "54d0dd87a36eedac79a3a59d" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48bc" } ], "content" : "Pour les personnes en charge de l'édition de contenu, remplir des liens est souvent source de problème car, là où la page des termes et conditions avaient toujours été une page interne au site, la voilà devenu un fichier PDF ou une page plus globale hébergée sur un autre site web ; ce qui demande l'ouverture d'un nouvel onglet pour s'afficher. Et le pire dans tout cela, c'est que c'est juste pour la version du site en Vulcain ! Il va donc falloir laisser ces mêmes personnes gérer eux-mêmes la propriété `target` ou...\n\n...**utiliser un script intelligent qui va ajouter les `target=\"_blank\"` là ou ils sont nécessaires !**\n\nCela est également très pratique quand on rédige ses pages en Markdown.\n\n\n\n\n\n## Un peu d'histoire ##\n\nLe fameux attribut `target=\"_blank\"` que l'on utilise pour ouvrir une fenêtre dans un nouvel onglet à toujours été une petite source de conflit. Très utilisé lors de l'époque du HTML4, il a été boudée un certain temps durant la période xHTML car non valide. La bataille a donc fait rage entre :\n\n- ceux ne faisant que peu de cas des standards,\n- ceux affirmant que c'était à l'utilisateur de décider dans quel onglet ouvrir le lien (sans que ce même utilisateur ne sache comment faire),\net \n- ceux faisant appel au JavaScript pour passer les validations...\n\nAujourd'hui de l'eau a été mis dans le vin puisque à l'heure du HTML5, la balise `target` est de nouveau autorisée.\n\n\n\n\n\n## Smart Target Injection ##\n\n### Explication ###\n\n*Voilà les règles établies pour savoir si un lien doit être ouvert dans un nouvel onglet, ou dans l'onglet courant :*\n*Si le lien a déjà l'attribut `target` de défini (à `_blank`, `_self` ou autre), on ne touche à rien, mais si cet attribut est absent alors :*\n - *si le lien pointe sur un nom de domaine différent, on ouvre la page dans un nouvel onglet*\n - *si le lien pointe sur notre site web, deux cas :*\n   - *si c'est une page web on l'ouvre dans le même onglet,*\n   - *si c'est un média/fichier (.pdf, .jpg, .png, .js, .mp4, etc.) on l'ouvre dans un nouvel onglet.*\n\n### Code jQuery ###\n\nVoici le petit code [jQuery](http://jquery.com/) qui va faire cela. Si vous n'aimez pas [jQuery](http://jquery.com/), je vous propose [une version de ce code en JavaScript natif plus bas](http://blog.lesieur.name/ne-vous-souciez-plus-de-la-target-dans-vos-liens/#code-purement-javascript) et si vous voulez que vos `target` ne soient pas ajoutées côté client en JavaScript, [vous pouvez toujours utiliser NodeAtlas](http://blog.lesieur.name/nodeatlas-le-framework-nodejs-mvc2-oriente-front-end/) !\n\n```js\n/*\n * Pour tous les liens de la page courante...\n */\n$(document.links).filter(function() {\n    /*\n     * ...garder ceux qui n'on pas déjà une `target` dans les attributs...\n     */\n    return !this.target;\n}).filter(function() {\n    /*\n     * ...et garder les pages qui ne sont pas sur le nom de domaine courant...\n     */\n    return this.hostname !== window.location.hostname ||\n        /*\n         * ...ou qui ne sont pas des pages web (.pdf, .jpg, .png, .js, .mp4, etc.).\n         */\n        /\\.(?!html?)([a-z]{0,3}|[a-zt]{0,4})$/.test(this.pathname);\n/*\n * Pour toutes les pages conservées, ajouter l'attribut `target=\"_blank\"`. \n */\n}).attr('target', '_blank');\n```\n\n### À propos de la RegExp ###\n\nVous pouvez comprendre la RegExp utilisée ligne 17 sur [cette page explicative](https://regex101.com/r/sE6gT9/3).\n\nIl est également bon de noter que dans ce code, seules les extensions `.html` et `.htm` s'ouvre dans l'onglet courant. Vous pouvez ajouter des extensions comme cela :\n\n```js\n\\.(?!html?|aspx?|php3?)([a-z]{0,3}|[a-zt]{0,4})$\n```\n\nici les pages de type `.htm`, `.html`, `.php`, `.php3`, `.asp` et `.aspx` s'ouvrirons dans le même onglet.\n\n\n\n\n\n## Petit jeu de test ##\n\nVoici une liste de lien à tester. Sachez que de mon côté, je les ai écris en Markdown (`[Accueil relative « ./ »](./)`) et que je ne me suis absolument pas soucié de la `target` (devinez comment ?!).\n\n- [Accueil relative « ./ »](./) (page courante)\n- [Page actuelle relative « ./ne-vous-souciez-plus-de-la-target-dans-vos-liens/ »](./ne-vous-souciez-plus-de-la-target-dans-vos-liens/) (page courante)\n- [Une image du site relative « ./media/images/bw-author.png »](./media/images/bw-author.png) (nouvel onglet)\n- [Le flux RSS du site relatif « ./feeds/articles.xml »](./feeds/articles.xml) (nouvel onglet)\n- [Un lien relatif sans extension « ./non-exsitante-page »](./non-exsitante-page) (page courante)\n- [Un lien relatif avec .htm « ./non-exsitante-page.htm »](./non-exsitante-page.htm) (page courante)\n- [Un lien relatif avec .html « ./non-exsitante-page.html »](./non-exsitante-page.html) (page courante)\n- [Accueil absolue « http://blog.lesieur.name/ »](http://blog.lesieur.name/) (page courante)\n- [Page actuelle absolue « http://blog.lesieur.name/ne-vous-souciez-plus-de-la-target-dans-vos-liens/ »](http://blog.lesieur.name/ne-vous-souciez-plus-de-la-target-dans-vos-liens/) (page courante)\n- [Une image du site absolue « http://blog.lesieur.name/media/images/bw-author.png »](http://blog.lesieur.name/media/images/bw-author.png) (nouvel onglet)\n- [Le flux RSS du site absolue « http://blog.lesieur.name/feeds/articles.xml »](http://blog.lesieur.name/feeds/articles.xml) (nouvel onglet)\n- [Page nouvel onglet « http://www.lesieur.name »](http://www.lesieur.name) (nouvel onglet)\n- [Image nouvel onglet « http://fc08.dev{...}d5k2le2.jpg »](http://fc08.deviantart.net/fs70/i/2012/309/9/1/the_moment_by_dzsurnik-d5k2le2.jpg) (nouvel onglet)\n- <a target=\"_self\" href=\"http://fc08.deviantart.net/fs70/i/2012/309/9/1/the_moment_by_dzsurnik-d5k2le2.jpg\">Image manuellement définie à target=\"_self\" « http://fc08.dev{...}d5k2le2.jpg »</a> (page courante)\n- <a target=\"_blank\" href=\"./\">Accueil manuellement définie à target=\"_blank\" « ./ »</a> (nouvel onglet)\n\n\n\n\n\n## Code purement JavaScript ##\n\nSi vous n'utilisez pas [jQuery](http://jquery.com/), voici le code :\n\n```js\nvar links = document.links;\n\nfor (var i = 0, linksLength = links.length; i < linksLength; i++) {\n    if (!links[i].target) {\n        if (\n            links[i].hostname !== window.location.hostname || \n            /\\.(?!html?)([a-z]{0,3}|[a-zt]{0,4})$/.test(links[i].pathname)\n        ) {\n            links[i].target = '_blank';\n        } \n    }\n}\n```\n", "dates" : { "published" : { "$date" : 1422967140000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "website.script = function () {\n    $(document.links).filter(function() {\n       return /\\.(html?)$/.test(this.pathname);\n    }).removeAttr('target');\n};", "stylesheet" : "", "title" : "Ne vous souciez plus de la target dans vos liens", "urn" : "ne-vous-souciez-plus-de-la-target-dans-vos-liens" }
{ "__v" : 0, "_id" : { "$oid" : "54e5ff40a36eedac79a3a59e" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "54f042102ae5a068f260dae2" } ], "content" : "Autant vous annoncer la mauvaise nouvelle tout de suite, il n'est pas possible d'utiliser les Media Queries dans l'attribut des balises HTML `style`. Ainsi le code suivant ne fonctionnera pas...\n\n```html\n<div>\n    <img \n        src=\"image/que/je/veux/decaller/seulement/quand/elle/flotte.png\" \n        style=\"@media(min-width: 768px){float:left margin:-4px 16px 8px -24px;}\">\n    <p>J'aimerai faire flotter à gauche l'image ci-dessus uniquement sur \n    les grands écrans. Comme les valeurs de `margin` sont ajustées uniquement \n    aux propriétés de cette image (-4px 16px 8px -24px), il n'existe pas de\n    classe  HTML-driven comme créer un `.float-left` (à l'avance) qui répondrait \n    exactement à mon besoin.</p>\n</div>\n```\n\n...c'est comme ça !\n\nDans ce cas, *comment faire pour gérer des propriétés CSS ponctuellement en utilisant les Media Queries ?* Cela est très utile pour le remplissage de contenu pour ajuster des images ou encore manager des `background-image`.\n\nLa solution n'est pas l'attribut `style` des balises HTML **mais la balise `<style>` elle même** !\n\n\n\n\n## La balise style ##\n\nLa solution simple en HTML5 est donc d'utiliser la balise `<style scoped>` dans la balise `<body>` d'un document HTML :\n\n```html\n<!DOCTYPE html><!-- On travail en HTML5 -->\n...\n<body>\n\t...\n\t<div>\n\t\t<style scoped>\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.on-the-fly-class-example { \n\t\t\t\t\tfloat: left; \n\t\t\t\t\tmargin: -4px 16px 8px -24px;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t\t<img class=\"on-the-fly-class-example\" src=\"image/que/je/veux/decaller/seulement/quand/elle/flotte.png\">\n\t\tJ'aimerai faire flotter à gauche l'image ci-dessus uniquement sur les grands écrans. Comme les valeurs de `margin` sont ajusté uniquement aux propriété de cette image (-4px 16px 8px -24px), il n'existe pas de classe HTML-driven comme `.float-left` (à l'avance) qui répondrait exactement à mon besoin.\n\t</div>\n\t...\n</body>\n```\n\n> [Tester le rendu de ce code](http://codepen.io/Haeresis/pen/KwooLd)\n\nNote : Il est important que la balise `<style>` soit déclarée avant son utilisation pour éviter que le navigateur ne pose un problème de [FOUC](http://fr.wikipedia.org/wiki/FOUC).\n\n\n\n### Pourquoi ajouter l'attribut scoped ? ###\n\nEn HTML5, il n'est pas valide de placer la balise `<style>` en dehors de la balise `<head>`. Oui, mais ce n'est pas tout à fait exacte... En réalité, il n'est pas valide de la placer dans `<body>` uniquement si on ne mentionne pas qu'elle est `scoped`, ce qui signifie que notre exemple est parfaitement valide.\n\nOui, mais pourquoi est-il nécessaire cet attribut ? `scoped` signifie que le style ne s'appliquera que sur la balise parente imédiate (ici `<div>`) et la totalité de ses balises enfants (ici `<img>`). Cependant dans les faits, aucun navigateur ne l'implémente encore et il ne limite donc pas du tout sa portée.\n\nVous pouvez tout à fait vous en passer donc mais cela ne sera pas valide W3C.\n\n\n\n### Je ne travail pas en HTML5 ###\n\nCela signifie donc que l'attribut `scoped` ne peut pas être utilisé et qu'il faut lui préférer `<style type=\"text/css\">`. Cependant, même avec toute votre bonne volonté en plus, l'attribut `style` est invalide en dehors de la balise `<head>`.\n\nActuellement, même si vous ne passerez pas la validation la quasi totalité des navigateurs qui savent lire les Média Queries sauront exécuter le `style` dans le `body`. Mais parceque les standards ne sont pas fait pour les chiens, vous pouvez soit :\n\n- Migrer votre site en HTML5 pour utiliser ce type de fonctionnalité.\n- Faire comme ce blog : proposer un chanp textarea pour entrer toutes les instructions CSS souhaitées lors de la rédaction d'un article, et injecter son contenu dans une balise `<style>` située après les balises `<link>` de la balise `<head>` lors de son rendu côté serveur.\n- Ne pas l'utiliser :)\n\n\n\n### Un petit mot sur les performances ###\n\nN'ayez point peur, du fait que les instructions CSS (même si elles sont dans une feuille CSS à part) bloquent le rendu de votre page le temps qu'elles soient analysées, cela revient donc au même de placer vos instructions dans la page en amont des balises à habiller.\n\nÇa allégera vos feuilles CSS qui n'ont pas besoin de déclarations spécifiques pour des éléments affichés uniquement sur la page courante.", "dates" : { "published" : { "$date" : 1424360400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Utiliser les Media Queries CSS3 dans l'attribut style", "urn" : "utiliser-les-media-queries-css3-dans-l-attribut-style" }
{ "__v" : 0, "_id" : { "$oid" : "54f02a0e8abb243843ee1e75" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "54f042102ae5a068f260dae2" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48c5" }, { "$oid" : "54f0408e2ae5a068f260dae1" } ], "content" : "Par convention, on a toujours utilisé la balise `link` dans la balise `head`. Cette balise est utilisée —entre autre— pour permettre aux navigateurs de lire et d'appliquer les instructions CSS depuis une feuille CSS. \n\nPar convention dis-je ? Pas réellement car :\n- Côté W3C, la balise `link` telle qu'elle a été créée n'est valide en HTML4, xHTML ou HTML5 uniquement si elle est appelé dans la balise `head`.\n- Côté technique, une propriété CSS est appliqué sur un élément du DOM quand il est rendu sur la page uniquement si elle a été interprété avant de rencontrer cet élément. Si une feuille CSS est lu en pied de page donc, c'est-à-dire après le rendu d'un élément, il y aura un phénomène de [FOUC](http://fr.wikipedia.org/wiki/FOUC) très dérangeant si la page est demandée depuis un réseau bas débit.\n\n> **`Exemple :`** Ainsi le code suivant est valide :\n\n> ```html\n<head>\n\t...\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"example/css.css\" media=\"screen\" />\n\t...\n</head>\n```\n\nmais\n\n> *`Exemple :`* le code suivant est invalide :\n\n> ```html\n<body>\n\t...\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"example/css.css\" media=\"screen\" />\n\t...\n</body>\n```\n\nCependant, puisque l'affichage du contenu de la page est retardé tant que les `link` vers les feuille CSS n'ont pas été interprétés (comprendre ici lu) par le navigateur, cela participe à ralentir l'affichage du contenu des pages ce qui mène parfois les outils comme [PageSpeed](https://developers.google.com/speed/pagespeed/) ou [GTmetrix](http://gtmetrix.com/) a demander de placer les feuilles CSS très lourdes après la lecture du DOM.\n\nMais puisque cela n'est pas valide, comment faire pour placer la balise `link` dans la balise `body` ?\n\n\n\n\n\n## Link dans le Body autorisé par HTML5.1 ##\n\nPour répondre à la demande des outils de rapidité web, il est parfois nécessaire de lier sa feuille en pied de page pour être sur que le contenu soit déjà lisible avant même qu'il ne soit habillé par la CSS.\n\nCela est totalement valide grâce à la norme HTML5.1 ou [HTML+RDFa 1.1](http://www.w3.org/TR/html-rdfa/) (signifiant également que cela est valide en HTML4 également).\n\n[RDFa](http://fr.wikipedia.org/wiki/RDFa) introduit des attributs permettant de décrire des éléments HTML à l'instar des [Microdatas](http://en.wikipedia.org/wiki/Microdata_%28HTML%29). Parmi ces attributs, il y a `property`. Et c'est justement ce qui va nous permettre de rendre valide `link` dans le `body`.\n\n**En HTML5 les 3 codes suivant sont identiques.**\n\n-----\n\n> ```html\n<html ...>\n\t...\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"example/css.css\" media=\"screen\" />\n\t...\n</html>\n```\n\nn'est pas valide dans le `body`, est valide dans le `head`.\n\n-----\n\n> ```html\n<html ...>\n\t...\n\t<link property=\"stylesheet\" type=\"text/css\" href=\"example/css.css\" media=\"screen\" />\n\t...\n</html>\n```\n\nest valide dans le `body` et dans le `head` (utilisation de RDFa).\n\n-----\n\n> ```html\n<html ... itemscope itemtype=\"http://schema.org/WebPageElement\">\n\t...\n\t<link itemprop=\"stylesheet\" type=\"text/css\" href=\"example/css.css\" media=\"screen\" />\n\t...\n</html>\n```\n\nest valide dans le `body` et dans le `head` (utilisation des Microdatas)\n\n-----\n\n**On peut donc en conclure que remplacer `rel` par `property` dans le cas d'un appel CSS est une bonne pratique assurant la parfaite validité de celle-ci quelque soit l'endroit ou elle se trouve. À noter que `rel` ne doit pas être présent si `itemprop` est en place alors qu'il n'est pas gênant (juste redondant) si `property` est en place.**\n \n> Vous pouvez vous-même vous renseigner sur l'utilité total des attributs RDFa et Microdatas qui ne se limitent pas à rendre l'appel des `link` valide dans la balise body.\n\n\n\n\n\n## Phénomène de FOUC VS accès rapide au contenu important de la page ##\n\nEt quid du phénomène de FOUC si je mets les CSS en pied de page ? Sans trop entrer dans la technique, des pistes à étudier seraient :\n\n- De charger avant dans le `head` les fichiers CSS les plus léger ne contenant que des instructions de disposition, de visibilité, d'habillage des textes etc. dans l'optique de présenter le plus rapidement possible du texte lisible et mis en forme mais surtout qu'il n'y ai aucun déplacement d’élément ou changement de taille d'élément quand les feuilles CSS de pied de `body` (les plus lourdes) seront chargées.\n\n- D'uniquement habiller les éléments au-dessus de la ligne de flottaison avec des feuilles dans le `head` (toujours de manière légère) et d'apporter la couche lourde en pied de page.\n\n- D'utiliser l'un des deux mécanismes précédents pour la première visite de l'internaute, puis de placer par la suite l'intégralité dans le `head` (même les feuilles lourdes) pour éviter aux navigateurs de faire son rendu deux fois (il n'y aura plus de problème de temps de chargement lié aux feuilles lourdes puisqu'elles auront été mises en cache lors de la première visite).\n\n> Dans le cas d'une app web, on peut également imaginer uniquement cacher tout le contenu et habiller dans le `head` un encart dédié à couvrir la page et a notifier que l'interface est `en chargement...` et charger les feuilles lourdes en pied de page avec comme premier rôle de masquer le message d'attente et de ré-afficher complètement habiller l'intégralité de l'interface.", "dates" : { "published" : { "$date" : 1425014400000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Utiliser la balise Link dans la balise Body", "urn" : "utiliser-la-balise-link-dans-la-balise-body" }
{ "__v" : 0, "_id" : { "$oid" : "54f838fb8abb243843ee1e76" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48ca" } ], "content" : "<a href=\"http://s22.postimg.org/k2fb4aj81/gmail_not_dot_sensitive.png\"><img alt=\"Gmail n'est pas sensible aux points\" src=\"http://s22.postimg.org/k2fb4aj81/gmail_not_dot_sensitive.png\" style=\"max-width: 100%; border: solid 1px #ccc\"></a>\n\nAussi étrange que cela puisse paraître sachez qu'une adresse Gmail n'est pas « dot sensitive » c'est-à-dire sensible aux points...\n\nMais quelle mouche a piqué Google ?!\n\n\n\n## Explication ##\n\nCela signifie donc que les adresses :\n\n- br**.**uno**.**lesi**.**eur<span class=\"gmail\"></span>\n- brunolesieur<span class=\"gmail\"></span>\n- bruno**.**lesieur<span class=\"gmail\"></span>\n- **.**brunolesieur<span class=\"gmail\"></span>\n- brunolesieur**.**<span class=\"gmail\"></span>\n- bru**..**no**.**lesieu**..**r<span class=\"gmail\"></span>\n\nsont toutes les 6 identiques ! Elles appartiennent à la même personne et... sont toutes valides pour Gmail.\n\nTestez vous même, envoyez-vous divers email à votre adresse Gmail avec des variations de point dans l'adresse et constatez que vous les recevrez tous.\n\nUn petit « Oui, il s'agit bien de votre adresse. » sera même précisé à côté de votre adresse.\n\n\n\n## Inscription sur Gmail ##\n\nCela fait que personne ne peut s'inscrire sur Gmail avec l'adresse « brunolesieur<span class=\"gmail\"></span> » par exemple ou toutes autres déclinaisons.\n\n\n\n## Inscription sur des sites tierces ##\n\nMais cela signifie aussi que je peux m'inscrire 10 fois sur le même site en faisant pointer tous les emails (c'est à dire mes identifiants) sur la même boîte en ajoutant simplement des points entre les lettres.\n\nEt pas seulement 10 fois, mais une infinité de fois puisque les points peuvent s'empiler les uns derrière les autres.\n\n\n\n## Quelle mouche a piqué Google ? ##\n\nGoogle s'explique [ici](https://support.google.com/mail/answer/10313?hl=fr) en avançant le fait qu'un utilisateur qui ne se souviendrait pas exactement s'il y a un point ou pas dans votre adresse email pourrait tout de même vous contacter.\n\nC'est un argument que l'on pourrait trouver curieux en avançant alors que l'adresse bruno-lesieur<span class=\"gmail\"></span> appartiendrait elle a quelqu'un d'autre alors qu'on penserait me contacter ? Et bien non car Gmail a réponse à tout : une adresse Gmail ne peux pas contenir de tiret (« - ») ni d'underscore (« _ »). Curieuse politique chez Google !\n\n> Note : Envoyer un email à bruno.lesieur+ce-que-je-veux<span class=\"gmail\"></span> ferra également arriver un email dans la boîte originale comme précisé dans les commentaires de cet article.\n\n\n\n## Un peu de code ##\n\nEffectivement, l'expression régulière pour valider les emails [la plus communément utilisée autorise les caractères suivants](http://www.regular-expressions.info/email.html) devant l'arobase : `[a-zA-Z0-9._%+-]+`. [Vous pouvez tester la Regex et la comprendre ici](https://regex101.com/r/kA0eG1/2).\n\n\n\n## Un problème de plus pour la validation d'email ##\n\nEt puisque cette règle est spécifique à Google, à moins de faire une règle spécifique pour les adresses Gmail, on ne peut pas se permettre de faire notre validation « not dot sensitive » puisque toto@example.com n'est pas la même adresse que to.to@example.com...\n\n\n\n## Effets de bord ? ##\n\nEt vous, quels effets de bord imaginez-vous pour cette utilisation ?\n\nPour ma part j'ai reçu pour une adresse similaire à la mienne (ou plutôt une de mes infinités d'adresse) une facture qui ne m'était pas destiné. Ceci n'explique pas le pourquoi du comment mais il est assez difficile d'expliquer aux opérateurs que cette facture ne m'est pas destiné si elle est tombé dans ma boîte email, surtout si effectivement, on est bien inscrit chez le prestataire qui a envoyé la facture, mais pour un autre service !\n\n\n\n## Le mot de la fin ##\n\nCe qui est sûr, c'est que Yopmail n'est peut-être pas la seule solution pour les tests d'inscriptions faciles lors des phases de développement !", "dates" : { "published" : { "$date" : 1425555360000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "$(\".gmail\").text(\"@gmail.com\");", "stylesheet" : "", "title" : "Gmail n'est pas sensible aux points", "urn" : "gmail-n-est-pas-sensible-aux-points" }
{ "__v" : 0, "_id" : { "$oid" : "54f8874a8abb243843ee1e77" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48cd" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "54f042102ae5a068f260dae2" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530ef6a6789c1a55e4fde0af" } ], "content" : "Je l'ai encore croisée au détour d'un code ! J'y ai prêté attention pour la première fois sur le Framework CSS [Semantic-UI](http://semantic-ui.com/elements/icon.html#/icons) car j'ai vu dans la source qu'il était impossible d'afficher une icône avec ce Framework sans utiliser **la balise qui n'existe pas : la balise Icon** !\n\nJe vous la présente sans plus de suspense avec cet exemple : `<i class=\"icon settings\"></i>`. Et son rendu est une icône, représentant par exemple ici de quoi modifier les <span class=\"icons settings\">paramètres</span>. Il n'y a pas de doute, l'intention première est d'afficher une icône, non pas avec la balise `<img>` estimée réservée à de l'affichage de contenu pure (au contraire d'une décoration), mais en remplacement de `<span>` qui, lui, est trop neutre.\n\n<figure>\n<img src=\"http://miriamposner.com/blog/wp-content/uploads/2011/11/Basic-HTML.png\" alt=\"Balise i en HTML4\" style=\"max-width: 100%\">\n<figcaption>La balise &lt;i&gt; en HTML4, miriamposner.com</figcaption>\n</figure>\n\nQuoi de mieux qu'une balise qui est inline, courte, dont la seule lettre représente le début du mot « icon » et qui passe même la validation W3C ? Je vous présente la balise `<i>` qui a vu le jour grâce à HTML4 et signifiait « *le contenu affiché est italique* » et qui tenterait de faire son coming-back en tant que nouvelle icône derrière le dos du W3C !\n\nMais ça me pause un problème. Parlons en de cette fausse-vrai balise !\n\n\n\n\n\n## Une balise tombée dans l’oubli ##\n\nTout commence avec la balise `<i>ce texte est italique</i>` totalement valide HTML4 et qui représente de la forme. Cela est légion à l'époque avec les cousines `<b>`, `<center>`, `<font>`, etc. Comprenez par là que `<i>` n'a aucune autre utilité que de rendre le texte italique et est un parfait raccourci du mot « italic ».\n\nEt puis, le CSS fait sont petit bonhomme de chemin si bien que l'on peut très vite rendre italique le contenu de n'importe quel groupe de balise si bien que l’existence même de `<i>` (et ses comparses) va être remise en cause. xHTML, le petit frère va enfoncer le clou et un texte ne sera plus `<i>` pour « italic » mais sera `<em>` pour « emphasis » et ce sera alors au CSS de décider si le rendu de son contenu sera italique ou rouge souligné... idem avec `<b>` pour « bold » qui deviendra `<strong>` —c-à-d avec sens fort, important— et qui ne donnera pas nécessairement lieu à un rendu gras si la CSS en a décidé autrement.\n\nCependant, le rendu « par défaut » des `<em>` étant de l'italique et de `<strong>` étant du gras, il n'en fallait pas plus pour les catégoriser, à tord, comme les « remplaçant » de `<i>` et `<b>` or... il n'en ai rien ! Nous allons voir ça plus loin.\n\n\n\n\n\n## Icône, du contenu ou de la décoration ? ##\n\nParlons de deux catégories d'images : celles qui sont destinées à représenter du contenu, l'équivalent de ce que raconte le texte mais sous forme d'image et celle destinées à la décoration permettant de rendre ce que l'on consulte plus agréable à l’œil, plus attractif. Il y a donc ;\n\n- les images de contenu qui [se charger quelque soit le périphérique, la place qu'il y a pour afficher de l'information](http://blog.lesieur.name/maitriser-les-requetes-au-chargement-d-une-page-web/#les-images). Quoi qu'il arrive le réseau doit être en mesure d'aller la chercher sinon un message alternatif doit expliquer pourquoi la ressource manque. C'est pourquoi nous utilisons une balise `<img>`. Et il y a,\n- les images de décoration, de design qui ne sont que contextuelles, ne pas les afficher ne changerait en rien le sens du message délivré par la page, juste son appréciation par l'utilisateur. C'est pourquoi la magnifique image de background sur écran large ne doit pas être chargée sur mobile, idem pour les petits éléments décoratifs de ci de là car, on manque de réseau (pas toujours), mais surtout, on manque de place ! On utilise donc ici les propriétés CSS `background-image` [qui ne feront pas d'appel au réseau si elles ne sont pas sollicitées](http://blog.lesieur.name/maitriser-les-requetes-au-chargement-d-une-page-web/#les-backgrounds) (cachées par les parents, dans une Media Querie non interprétée, etc.).\n\nMais les icônes ? Que sont elles ? Du contenu ? Pas vraiment, elles ne changent pas le contenu du message délivré. De la décoration ? Pas totalement puisque c'est un guide ergonomique pour l’œil qui va bien au delà de la simple décoration (même si dans un sens, un bon design en plus d'être agréable à l’œil est censé aller dans ce sens également).\n\n\n\n\n\n## Les icônes et les polices custom ##\n\nAlors comment représenter des icônes ? Mettons les balise `<img>` de côté tout de suite, si on considère qu'une icône n'est pas du contenu pertinent. L'icône sert dans le meilleurs des cas à accompagner un mot, un groupe de mot ou dans le pire des cas à être affiché seule. Par exemple le mot « Paramètre » peut donc être précédé d'une icône d'écrou ou ne pas être affiché et guider l'utilisateur en lui laissant penser que cette icône seule représente le mot ou l'action « Paramètre ».\n\nQu'est-ce qui —sémantiquement ou d'un point de vu de séparation du fond et de la forme– serait le plus proche de ce comportement ? **Une balise inline, dont la valeur `:before` représenterait une icône** elle même affiché par une `background-image` ou part une police.\n\nAinsi ceci répond parfaitement au besoin :\n\n```html\n`<span class=\"icon settings\">Paramètres</span>`\n```\n\nou ceci\n\n```html\n`<span class=\"icon settings hidden\">Paramètres</span>`\n```\n\navec comme affichage ceci :\n\n```css\n.icon:before {\n    content: \"\";\n    width: 0.8em;\n    height: 0.8em;\n    margin-right: 0.2em;\n    display: inline-block;\n    background-size: cover;\n}\n.icon.hidden {\n    display: block;\n    width: 0.8em;\n    text-indent: -7777px;\n}\n.icon.hidden:before {\n    display: none;\n}\n.icon.hidden:after {\n    content: \"\";\n    width: 0.8em;\n    height: 0.8em;\n    display: inline-block;\n    background-size: cover;\n    float: right;\n}\n\n.icon.settings:after,\n.icon.settings:before {\n    background-image: url('une-image-icone-ici.png');\n    /* À noter que l'on peut également charger une police avec un caractère spéciale représentant l'icône à la place d'images de background. Mais nous ne traiterons pas cet aspect dans cet article */\n}\n```\n\n> Résultat\n<p data-height=\"338\" data-theme-id=\"0\" data-slug-hash=\"pvZmae\" data-default-tab=\"result\" data-user=\"Haeresis\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/pvZmae/'>Display icon with background-image</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n\n\n\n\n## La balise i, le retour discret ! ##\n\nMais détrompez-vous. Non, seulement la balise `<i>` n'a pas été remplacé par `<em>` mais elle reste totalement utilisée par le W3C dans la spécification  HTML5 !\n\nEt quoi de plus pratique et séduisant que de remplacer notre exemple précédent par\n\n```html\n`<i class=\"settings\">Paramètres</i>`\n```\n\nou ceci\n\n```html\n`<i class=\"settings hidden\">Paramètres</i>`\n```\n\n__Malheureusement pour cette pratique, si la balise `<i>` est toujours valide de nos jour, ce n'est pas que pour la rétro-compatibilité HTML5 mais belle et bien parce qu'elle signifie quelque chose, et ce n'est pas « icon ».__\n\n[La documentation HTML5 nous explique pour `<i>`](https://html.spec.whatwg.org/multipage/semantics.html#the-i-element) qu'il s'applique à une portion de texte empruntant une autre voix, ou une autre humeur c-à-d étant en décalage avec le propos global dans sa manière de l'aborder bien que son sujet reste le même ;\n\n1. comme une pensée :\n\n   > `<p>`Tu as de très jolies yeux aujourd'hui, dit Salie. `<i>`_Dommage que tes oreilles les caches..._`</i>` pensa t-elle.`</p>`\n\n2. une pensée idiomatique d'une autre langue :\n\n   > `<p>`It's like a `<i lang=\"fr\">`déjà-vu`</i>` all over again.`</p>`\n\n3. un terme technique\n\n   > `<p>`La notion de `<i class=\"term\">`flemme empathique`</i>` est expliqué dans un autre article.`</p>`\n\n4. une taxonomie\n\n   > `<p>`J'ai `<i class=\"taxonomy\">`veni vidi vici`</i>`.`</p>`\n\nDe la même manière, sachez que `<b>` n'a pas été remplacé par `<strong>` mais tout comme `<i>`, [`<b>` à une utilité précise](https://html.spec.whatwg.org/multipage/semantics.html#the-b-element).\n\n\n\n\n\n## La balise i peut-elle représenter une icône ? ##\n\nEst-ce bien d'utiliser la balise `<i>` pour représenter une icône en lieu et place de la balise `<span>`. On peut clairement objecter que le code suivant `<i class=\"icon settings\"></i>` est une faute absolue puisque dans ce cas, la balise `<i>` ne représente aucun texte. D'une autre manière, `<i class=\"settings\">Paramètres</i>` sans la classe `icon` est déconseillé puisque `<i>` doit avoir son propre rendu quand il ne sert pas à afficher une icône. Il faut donc absolument l'accompagner d'un mot et d'une classe spécifique, quitte à ensuite le masquer pour ne garder que l'icône, comme ceci `<i class=\"icon settings hidden\">Paramètres</i>` (la classe `icon` étant ici une équivalence de `taxonomy` ou `term` dans nos exemples précédents).\n\nAu final, en extrapolant un peu, on peut estimer que l'icône *paramètres* est une autre manière de parler du message « paramètre ». Cet affichage est donc en décalage avec le propos du mot en lui même puisque c'est une autre manière de l'exprimer —comme le serrait de le signer (avec les mains), ou de l'écrire avec un symbole japonais— mais reste cohérent avec son sujet qui est « je désigne un ensemble de paramètre ». Ainsi ici, il est question de mettre l'accent sur le mot exprimé à travers un dessin.\n\nPour ma part, c'est une explication qui ne me satisfait pas totalement aussi j'estime que laisser le choix entre l'utilisation de `<i class=\"icon settings hidden\">Paramètres</i>` et `<span class=\"icon settings hidden\">Paramètres</span>` au développeur est la moindre des choses pour un Framework CSS monsieur [Semantic-UI](http://semantic-ui.com/elements/icon.html#/icons) !\n\nEt vous ? Que pensez-vous de cette pratique ou de ce « détournement » des spécifications ?", "dates" : { "published" : { "$date" : 1428410460000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "(function (d) {\nvar js = d.createElement('script'),\n    ref = d.getElementsByTagName('script')[0]\njs.async = true;\njs.src = '//assets.codepen.io/assets/embed/ei.js';\nref.parentNode.insertBefore(js, ref);\n}(document));", "stylesheet" : ".icons:before {\n    content: \"\";\n    width: 0.8em;\n    height: 0.8em;\n    margin-right: 0.2em;\n    display: inline-block;\n    background-size: cover;\n}\n.icons.hidden {\n    display: block;\n    width: 0.8em;\n    text-indent: -7777px;\n}\n.icons.hidden:before {\n    display: none;\n}\n.icons.hidden:after {\n    content: \"\";\n    width: 0.8em;\n    height: 0.8em;\n    display: inline-block;\n    background-size: cover;\n    float: right;\n}\n\n.icons.settings:after,\n.icons.settings:before {\n    background-image:  url('https://cdn2.iconfinder.com/data/icons/basicset/gear_64.png');\n}", "title" : "Icon ou la balise sémantique HTML qui n'existait pas !", "urn" : "icon-ou-la-balise-html-semantique-qui-n-existait-pas" }
{ "__v" : 0, "_id" : { "$oid" : "555ca3736868ca087fbf8644" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [], "content" : "Photoshop est *un outil vaste et complet* qui fait *le bonheur des designers* au quotidien, **mais un peu moins celui des intégrateurs HTML**.\n\nDans un monde parfait, une fois les recherches ergonomiques et visuelles faites, appliquées, testée et validée ; \n- un ensemble de gabari nous serait envoyé pour l'ensemble des pages du site (faites avec par exemple l'outil [Moqups](https://moqups.com/) que je vous conseil),\n- le résultat visuel en jpg serait éventuellement fourni pour avoir une idée du rendu global, ainsi que les polices d'écritures nécessaires,\n- l'ensemble des images de contenu seraient extraites et prêtes à l'emploi,\n- et un Guide de Style référençant l'intégralité des couleurs, typographies, espacements, etc. nous serait fourni dans [un document comme celui-ci](http://purina.k-expert.com/html/style-guidelines-example/guidelines.htm).\n\nCependant, si nous étions dans un monde parfait, cela se saurait. Aussi il faut se contenter au quotidien :\n- de *recevoir des PSDs pour chaque page*, d'une taille plus ou moins conséquente et d'une organisation plus ou moins correcte,\n- de *se procurer une version de Photoshop* « par les moyens dans nos moyens » afin d'aller fouiller cet ensemble de fichier à la recherche de nos valeurs et nos images,\n- de *courir après les polices* manquantes,\n- et de *faire nous même du Photoshop* pour rectifier des demandes faites par le Client qui ne va pas les demander à l'agence de création sous peine de devoir, après une modification conséquente de tous les PSDs, nous les renvoyer dans leur intégralité !\n\nEt dire que dans un monde parfait il suffirait de changer quelque ligne dans le Guide de Style sans même que nous sachions réellement que Photoshop existe... \n\nMais plutôt que d'attendre que le monde change, et si nous nous facilitions la vie avec ce qu'il a à nous offrir ? **C'est partit pour une liste non exhaustive de ce que j'utilise pour aller le plus vite possible lors de mes « Séances d'extraction Photoshop » !**", "dates" : { "published" : { "$date" : 1432134480000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "stylesheet" : "", "title" : "Les Tips Photoshop pour Développeurs Front-end", "urn" : "les-tips-photoshop-pour-developpeurs-front-end" }
{ "__v" : 0, "_id" : { "$oid" : "5577e6346868ca087fbf8645" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5499b03566bb5aeedaafd8b6" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "Lors des reviews d'intégration HTML à partir de valeurs fournis dans un PSD, on m'a fait remarquer que « _les tailles de polices n'étaient pas bonnes_ » car elles étaient en `rem` et non en `px`. Aujourd'hui pire, on me somme de remplacer tous les `rem` par des `px`. C'est tout, c'est comme ça. Peut-être parce que l'on a peur que la conversion `rem` en `px` ne soit pas juste ou peut-être simplement parce qu'on ne sait pas bien à quoi sert le `rem`.\n\n<figure>\n<img src=\"https://cdn.css-tricks.com/wp-content/uploads/2014/04/rem-all.png\" alt=\"Balise i en HTML4\" style=\"max-width: 100%\">\n<figcaption>Comment gérer avec du Rem, css-tricks.com</figcaption>\n</figure>\n\n**Sans entrer dans des détails techniques poussés, je vais vous expliquer pourquoi j'utilise `rem`.**\n\n[Je vous laisse également une petite démo temps réel plus bas dans l'article](http://blog.lesieur.name/pourquoi-j-utilise-l-unite-rem-et-non-l-unite-pixel/#exemple)\n\nAllez, n'ayons pas peur, ce `rem`, il ne va pas nous manger !\n\n\n\n\n\n## Pixel VS Rem ##\n\n### Le Pixel ###\n\nNotre bon vieux pixel rassurant se comporte de tel sorte que je précise dans ma feuille CSS `font-size: 16px` et que la taille de la police sur laquelle cette propriété s'applique fait bien 16 pixel de hauteur (il y a des histoires de dpi et de faux pixel là dedans mais ça ne nous intéresse pas pour notre explication). Le problème ici est une question d'accessibilité. Si je demande d'agrandir les textes via l'option de mon navigateur ou de mon OS il ne se passera rien. Comme nous avons établie dans le marbre que le texte fait `16px`, il ferra toujours cette hauteur, peut importe ce que l'utilisateur demande.\n\n\n### Le Rem ###\n\nCette unité quand à elle est un pourcentage de taille en fonction du zoom texte que l'utilisateur applique sur son navigateur. Elle se base toujours sur la taille du texte défini à la racine du document. Avec un savant petit calcul CSS on arrive à faire en sorte que pour un zoom texte de 100% (qui est le zoom texte par défaut des navigateur) `1.0rem` est strictement la même chose que `10px` ou encore que `1.6rem` est strictement la même chose que `16px`. Cela nous permet de travailler facilement, avec une unité identique mais qui est taillé pour l'accessibilité.\n\n\n\n\n\n## Une Histoire de Responsive Web Design ##\n\nPar conséquent, si je modifie la taille du texte à la racine du document, cela modifiera la taille de tous les textes du document de manière proportionnelle ce qui est impossible avec des unités définis en pixel. Il me suffit alors via des Media Queries de difinir une valeur racine plus ou moins grande pour rendre les textes plus lisible ou plus facile à cliquer, etc.\n\n\n**Le pixel n'est donc pas à bannir, mais à utiliser uniquement pour des éléments qui ne doivent pas varier si le zoom texte est changé. Cela peut-être des cas pour les marges par exemple.**\n\n\n\n\n## Rem ou Em ? ##\n\nUne autre unité existante est le `em`. Cependant, à la différence du `rem` qui rend proportionnelle une taille par rapport à la taille du texte à la racine du document, le `em` la rend proportionnelle par rapport à la taille de l'élément parent dans lequel il est contenu. Cela permet de définir, par exemple, qu'un exposant est `0.8em` de sont parent, soit 80% de sa hauteur.\n\n\n\n\n\n## Un peu de concret ##\n\nPar ici c'est un peu plus concret, on s’arrête donc là pour la théorie.\n\n### Exemple ###\n\n<p style=\"margin-bottom: 8px\">Jouez donc avec le slider ou changez la valeur magique de 62.5% qui permet de rendre les valeurs en Rem fluide et constatez la différence entre Pixel et Rem.</p>\n\n<p style=\"margin-bottom: -16px\" data-height=\"364\" data-theme-id=\"0\" data-slug-hash=\"ZGyGWm\" data-default-tab=\"result\" data-user=\"Haeresis\" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/ZGyGWm/'>Pixel VS Rem</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n### Explication ###\n\nPour se mettre à gérer ses tailles en Rem, rien de compliqué. Il suffit de définir la racine du document à 62.5% sur la balise `html` puis de gérer ses tailles en Rem en sachant que 10px correspond à 1.0rem.\n\n**En CSS**\n\n```css\nhtml {\n    font-size: 62.5%; /* Ré-équilibrage du Rem face au Pixel pour des calculs simples */\n}\n\n/* Exemple d'application */\np {\n    font-size: 12px; /* Pour les navigateurs qui ne supportent pas le Rem */\n    font-size: 1.2rem; /* Pour les navigateurs « Responsive » */\n}\n```\n\n**En Less**\n\n```css\nhtml {\n    font-size: 62.5%;\n}\n\n/* Fonction toute prête pour gérer Rem et Pixel en fonction des supports des navigateurs. */\n.font-size(@sizeValue) {\n    @remValue: @sizeValue;\n    @pxValue: (@sizeValue * 10);\n    font-size: ~\"@{pxValue}px\"; \n    font-size: ~\"@{remValue}rem\";\n}\n\n/* Exemple d'application */\np {\n    .font-size(1.2);\n}\n```\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>", "dates" : { "published" : { "$date" : 1433935440000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Pourquoi j'utilise l'unité Rem et non l'unité Pixel", "urn" : "pourquoi-j-utilise-l-unite-rem-et-non-l-unite-pixel" }
{ "__v" : 0, "_id" : { "$oid" : "5579c7c66868ca087fbf8647" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48ca" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5499b03566bb5aeedaafd8b6" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "54f0408e2ae5a068f260dae1" } ], "content" : "On me dit souvent que je n'aime pas Bootstrap, et pour cause, je pense que [c'est une regression pour un travail Front-end de qualité](http://blog.lesieur.name/bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite/). En réalité, ce n'est pas le Framework le fautif, mais la façon dont il est utilisé. Les exemples de mauvaises utilisations sont légions sur le net et les mauvaises intégrations HTML cour les rues.\n\nSuis-je donc entrain de dire qu'il y a une bonne et une mauvaise façon d'utiliser Bootstrap ? C'est exactement ce que je suis entrain de dire, et je vais vous expliquer à travers ce billet le cheminement qui va vous conduire à :\n\n- Séparer le fond et la forme, pour un gain de lisibilité et de propreté,\n- Inclure et générer le stricte minimum pour un gain de performance, avec un exemple d'optimisation de CSS 30 fois plus légère.\n\n<figure>\n<img src=\"http://www.themightycribb.com/wp-content/uploads/2012/12/bootstrap_less.png\" alt=\"Bootstrap et Less\" style=\"max-width: 100%\">\n<figcaption>Bootstrap et Less, themightycribb.com</figcaption>\n</figure>\n\nNon, je suis sérieux, ce billet n'est pas une blague, c'est cadeau, et c'est pour vous.\n\n\n\n\n\n## À ne vraiment pas faire, ou l'utilisation Standard de Bootstrap ##\n\nPour commencer notre réflexion, partons de l'utilisation « standard » de Bootstrap. C'est la majorité du code que nous pourrons trouver à travers le net quand il s'agit de Bootstrap. Si vous êtes farouchement attaché à Bootstrap, ou que vous ne pouvez pas faire autrement que de l'utiliser (certaines personnes ont malheureusement des IT Dictator), oubliez dès aujourd'hui cette méthode de travail.\n\nVoici un petit affichage de grille gratté à la va vite.\n\n**HTML**\n\n*La feuille CSS Bootstrap est inclue*\n\n```html\n<!-- Composant -->\n<div class=\"container\">\n\t<!-- En-tête -->\n\t<div class=\"row\">\n\t\t<div class=\"col-xs-12 col-md-6 col-md-push-6 text-right\">\n\t\t\t<div>\n\t\t\t\t<h1>Je suis un titre</h1>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"col-xs-12 col-md-6 col-md-pull-6\">\n\t\t\t<div>Je suis un petit texte explicatif à propos du site.</div>\n\t\t</div>\n\t</div>\n\t<!-- Liste d'élément -->\n\t<div class=\"row\">\n\t\t<div class=\"col-xs-12 col-sm-6 col-md-4\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t\t<div class=\"col-xs-12 col-sm-6 col-md-4\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t\t<div class=\"col-xs-12 col-sm-6 col-md-4\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t\t<div class=\"col-xs-12 col-sm-6 col-md-4\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t</div>\n</div>\n```\n\nAjoutons maintenant notre propre surcharge pour faire un rendu de tout ça :\n\n**CSS**\n\n```css\n/* Nous colorons la zone de site. */\n.container {\n\tbackground-color: #f2f2f2;\n\tpadding-bottom: 16px;\n}\n\n/* Nous colorons chaque colonne sans sa marge, \n\tnous avons donc été obligé de rajouter une \n\tdiv inutile autour. */\n.row > div > div {\n\tbackground-color: #ddddff;\n\tmargin-top: 16px;\n\tpadding: 10px;\n\tfont-size: 1.5rem;\n}\n\n/* Nous devons tout de même gérer de manière custom\n\tcertain comportement, ici je veux que les colonnes\n\taient une hauteur fixe à partir de la version\n\ttablette. */\n@media (min-width: 768px) {\n  .row > div > div {\n    height: 40px;\n  }\n}\n\n/* Avec Bootstrap, soit le texte est à gauche, soit \n\til est à droite. On ne peut pas changer\n\tse compontement de façon responsive.\n\tOn va donc surcharger la classe « text-right »\n\tqui dans notre cas ne veux plus dire grand chose... */\n.row:first-child .text-right {\n\ttext-align: left;\n}\n\n/* Je redéfini ici qu'il s'aligne à droite\n\tà partir de la tablette. */\n@media (min-width: 992px) {\n  .row:first-child .text-right {\n    text-align: right;\n  }\n}\n\nh1 {\n\tmargin: 0;\n\tfont-size: 3rem;\n\tmargin-top: -6px;\n}\n```\n\n**Résultat**\n\n- **[Voir le résultat avec le code](http://codepen.io/Haeresis/pen/yNXXQO)**\n\n> _`Mauvaise pratique :`_ On constate au rayon des mauvaises choses :\n - Un DOM pollué par un surplus de balises, dans notre exemple nous avons une `<div>` inutile dans chaque colonne.\n - Un DOM pollué par un surplus de classe, non seulement elles décrivent visuellement et non sémantiquement la structure, mais en plus elles ne traduisent pas toujours le comportement réel du visuel (exemple avec la classe `text-right` surchargée dans notre exemple).\n - Une CSS Bootstrap complète et donc excessivement lourde en poids avec en plus notre propre surcharge, actuellement la portion HTML fait [657 octets](http://codepen.io/Haeresis/pen/yNXXQO?editors=100) après compression et le fichier CSS fait [118ko](http://codepen.io/Haeresis/pen/yNXXQO?editors=010) après compression.\n\n\n\n\n\n## Un début de bonne pratique, ou l'utilisation de Bootstrap avec Less ##\n\nVoyons à présent comment nous pouvons nous en sortir en utilisant [une méthode CSS-Driven](http://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/). L'avantage de cette méthode va être de déporter le poids du fichier HTML à l'intérieur des fichiers CSS. C'est une excellente chose puisque les fichiers CSS peuvent être mis en cache, eux. Grâce à la version Less de Bootstrap, nous sommes en mesure de n'inclure que les parties nécessaires à notre habillage. Pour commencer, on arrête avec les affreuses classes Bootstrap partout dans le HTML, et on nomme les classes sémantiquement !\n\n**HTML**\n\n```html\n<div class=\"component\">\n\t<div class=\"header\">\n\t\t<div class=\"title\">\n\t\t\t<div>\n\t\t\t\t<h1>Je suis un titre</h1>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"quote\">\n\t\t\t<div>Je suis un petit texte explicatif à propos du site.</div>\n\t\t</div>\n\t</div>\n\t<div class=\"list\">\n\t\t<div class=\"item\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</div>\n\t</div>\n</div>\n```\n\nOn ajoute ensuite les bribes Bootstrap qui nous sont nécessaires, et nous habillons la structure en Less :\n\n**Less**\n\n```css\n/* Inclusion Bootstrap nécessaire pour la page */\n@import 'bootstrap/normalize';\n@import 'bootstrap/variables';\n@import 'bootstrap/utilities';\n\n/*  Inclusion Bootstrap nécessaire pour la grille */\n@import 'bootstrap/grid';\n@import 'bootstrap/mixins/hide-text';\n@import 'bootstrap/mixins/center-block';\n@import 'bootstrap/mixins/clearfix';\n@import 'bootstrap/mixins/grid';\n@import 'bootstrap/mixins/grid-framework';\n\n/*  Inclusion Bootstrap nécessaire pour l'alignement */\n@import 'bootstrap/type';\n@import 'bootstrap/mixins/text-overflow.less';\n@import 'bootstrap/mixins/text-emphasis.less';\n@import 'bootstrap/mixins/background-variant.less';\n\n/* On se permet de recréer nous même quelques\n\tcomportements nécessitant trop d'inclusion de code. */\nhtml {\n\tfont-size: 62.5%;\n}\n* {\n\t-webkit-box-sizing: border-box;\n\t   -moz-box-sizing: border-box;\n\t        box-sizing: border-box;\n}\n\n/* On travaille nos classes en empilement. */\n.component {\n\t/* Ceci est la même chose que `<div class=\"container\">` \n\t\tappliqué à `.component`. */\n\t.container;\n\t.clearfix;\n\t\n\t.list,\n\t.header {\n\t\t/* Ceci est la même chose que `<div class=\"row\">` \n\t\t\tappliqué à `.header` et `.list`. */\n\t\t.row;\n\t}\n\n\t.header {\t\n\t\t.quote,\n\t\t.title {\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-xs-12\">` \n\t\t\t\tappliqué à `.title` et `.quote`. */\n\t\t\t.make-xs-column(12);\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-md-6\">` \n\t\t\t\tappliqué à `.title` et `.quote`. */\n\t\t\t.make-md-column(6);\n\t\t}\n\n\t\t.title {\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-md-push-6\">` \n\t\t\t\tappliqué à `.title`. */\n\t\t\t.make-md-column-push(6);\n\n\t\t\t/* Ceci est l'équivalent de `<div class=\"text-left\">` \n\t\t\t\tappliqué à `.title`, mais l'avantage, c'est qu'il peut être écrasé facilement. */\n\t\t\t.text-left;\n\n\t\t\t@media (min-width: @screen-sm-min) {\n\t\t\t\t/* Ceci est l'équivalent de `<div class=\"text-right\">` \n\t\t\t\t\tappliqué à `.title` uniquement à partir de la tablette.\n\t\t\t\t\tCeci n'est pas faisable avec une approche classique\n\t\t\t\t\tavec Bootstrap dans le DOM. */\n\t\t\t\t.text-right;\n\t\t\t}\n\t\t}\n\n\t\t.quote {\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-md-pull-6\">` \n\t\t\t\tappliqué à `.quote`. */\n\t\t\t.make-md-column-pull(6);\n\t\t}\n\t}\n\n\t.list {\n\t\t.item {\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-xs-12\">` \n\t\t\t\tappliqué à `.item`. */\n\t\t\t.make-xs-column(12);\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-sm-6\">` \n\t\t\t\tappliqué à `.item`. */\n\t\t\t.make-sm-column(6);\n\t\t\t/* Ceci est l'équivalent de `<div class=\"col-md-4\">` \n\t\t\t\tappliqué à `.item`. */\n\t\t\t.make-md-column(4);\n\t\t}\n\t}\n\n\t/* Par ici on fait un peu de Less standard */\n\t.title,\n\t.quote,\n\t.item {\n\t\tdiv {\n\t\t\tbackground-color: #ddddff;\n\t\t\tmargin-top: 16px;\n\t\t\tpadding: 10px;\n\t\t\tfont-size: 1.5rem;\n\t\t\t\n\t\t\t@media (min-width: @screen-xs-min) {\n\t\t\t\theight: 40px;\n\t\t\t}\n\t\t}\n\t}\n\n\th1 {\n\t\tmargin: 0;\n\t\tfont-size: 3rem;\n\t\tmargin-top: -6px;\n\t}\n\n\tbackground-color: #f2f2f2;\n\tpadding-bottom: 16px;\n}\n```\n\n**Résultat**\n\n- **[Voir le résultat avec le code](http://codepen.io/Haeresis/pen/gpRGQX)**\n\n> Avec cette technique, on a une sortie CSS qui a été divisée par 7 :\n - Le DOM ne contient plus la CSS Bootstrap complète mais uniquement les classes contenues dans les fichiers inclus avec `@include`. Actuellement le fichier HTML fait [504 octets](http://codepen.io/Haeresis/pen/gpRGQX?editors=100) après compression et le fichier CSS fait [16 ko](http://codepen.io/Haeresis/pen/gpRGQX?editors=010) après compression.\n - Mais ce qui est agréable c'est que Le DOM n'est plus pollué par un surplus de classe, elles décrivent maintenant sémantiquement la structure !\n - Cependant le DOM est toujours pollué par des balises inutiles.\n\n\n\n### Utiliser la feature Less :extend() ###\n\nEn Less, il y a deux approches pour utiliser des raccourcis de classe afin de ne pas écrire de code de manière redondante. Tout d'abord, je créé une classe modèle\n\n```\n.model { a; b; c; d; e; f; g; h; i; j; }\n```\n\n- La première approche est celle utilisée dans notre exemple précédent, pour l'appliquer j'utilise le code suivant :\n\t\n\t```\n\t.ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0 { \n\t\t.model;\n\t}\n\t```\n\t\n\tce qui génère en sortie CSS :\n\n\t```\n\t.model { a; b; c; d; e; f; g; h; i; j; }\n\n\t.ex-1 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-2 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-3 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-4 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-5 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-6 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-7 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-8 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-9 { a; b; c; d; e; f; g; h; i; j; }\n\t.ex-0 { a; b; c; d; e; f; g; h; i; j; }\n\t```\n\n- La seconde approche qui est notre fameuse feature `:extend()` permet de gagner de la place en sortie\n\t\n\t```\n\t.ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0 { \n    \t&:extend(.model);\n\t}\n\t```\n\n\tce qui génère en sortie CSS :\n\n\t```\n\t.ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0,\n\t.model { a; b; c; d; e; f; g; h; i; j; k; l; m; n; o; p; q; r; s; t; u; v; w; x; y; z; }\n\t```\n\nL'un des problèmes de cette seconde approche est qu'elle ne fonctionne pas avec des fonctions. Ainsi la fonction Bootstrap `.make-xs-column(12)` par exemple n'est pas utilisable :\n\n```\n.ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0 { \n    &:extend(.make-xs-column(12)); /* Ce code plante. */\n}\n```\n\nUn autre problème est que `:extend()` n'est pas utilisable dans les Media Queries. C'est un formidable atout qui est très limité avec l’utilisation de Bootstrap ou des [approches Desktop First](http://blog.lesieur.name/les-concepts-autour-du-responsive-web-design/) mais qui peut se révéler très intéressant sur des grosses feuilles custom Mobile First.\n\nVoyons rapidement en quoi cela changerait notre précédente feuille :\n\n```css\n\n/* ... */\n\n.component {\n\t/* Ici, `:extend()` est appliquable. */\n\t&:extend(.container, .clearfix all);\n\n\t.list,\n\t.header {\n\t\t/* Ici, `:extend()` est appliquable. */\n\t\t&:extend(.row);\n\t}\n\n\t.header {\t\n\t\t.quote,\n\t\t.title {\n\t\t\t/* Ici, `:extend()` n'est pas appliquable\n\t\t\t\tcar ce sont des fonctions. */\n\t\t\t.make-xs-column(12);\n\t\t\t.make-md-column(6);\n\t\t}\n\n\t\t.title {\n\t\t\t/* Ici, `:extend()` n'est pas appliquable\n\t\t\t\tcar c'est une fonction */\n\t\t\t.make-md-column-push(6);\n\n\t\t\t/* Ici, `:extend()` est appliquable. */\n\t\t\t&:extend(.text-left);\n\n\t\t\t@media (min-width: @screen-sm-min) {\n\t\t\t\t/* Ici, `:extend()` n'est pas appliquable\n\t\t\t\t\tcar on est dans une Media Query. */\n\t\t\t\t.text-right;\n\t\t\t}\n\t\t}\n\n\t\t.quote {\n\t\t\t/* Ici, `:extend()` n'est pas appliquable\n\t\t\t\tcar c'est une fonction */\n\t\t\t.make-md-column-pull(6);\n\t\t}\n\t}\n\n\t.list {\n\t\t.item {\n\t\t\t/* Ici, `:extend()` n'est pas appliquable\n\t\t\t\tcar ce sont des fonctions. */\n\t\t\t.make-xs-column(12);\n\t\t\t.make-sm-column(6);\n\t\t\t.make-md-column(4);\n\t\t}\n\t}\n\n\t/* ... */\n}\n```\n\n> **`Bonne pratique :`** Avec cette technique, on peut donc encore réduire la taille en sortie même si dans notre exemple nous passons seulement d'un code de 16277 bytes à un code de 16038 bytes. Dans de nombreux cas l'écart peut cependant être significatif !\n\n\n\n\n\n## LA bonne pratique, ou l'utilisation de Bootstrap avec Less et par référence ##\n\nC'est par ici qu'on touche réellement à un point intéressant, et à la réelle chose qu'il faut faire quand on utilise du Less, et surtout Bootstrap ; l'inclusion par référence ! Avant d'en parler, adaptons rapidement notre HTML pour le rendre encore plus sémantique. Cela n'a rien à voir avec notre propos, mais des `<div>` partouts, ça me donne des boutons !\n\n**HTML**\n\n```html\n<section class=\"component\">\n\t<header>\n\t\t<div class=\"title\">\n\t\t\t<div>\n\t\t\t\t<h1>Je suis un titre</h1>\n\t\t\t</div>\n\t\t</div>\n\t\t<aside>\n\t\t\t<div>Je suis un petit texte explicatif à propos du site.</div>\n\t\t</aside>\n\t</header>\n\t<ul class=\"list\">\n\t\t<li>\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</li>\n\t\t<li>\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</li>\n\t\t<li>\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</li>\n\t\t<li>\n\t\t\t<div>Je suis un bloc avec contenu</div>\n\t\t</li>\n\t</ul>\n</section>\n```\n\nLe réel intérêt va résider dans l'utilisation de l'inclusion par référence. C'est à dire qu'au lieu d'inclure les portions de Bootstrap utile avec `@import`, nous allons le faire avec `@import (reference)`.\n\n\n**Less**\n\n```css\n@import 'bootstrap/normalize';\n\n/* Inclusion des fichiers, non plus entièrement, mais par\n\tréférence avec « (reference) ». */\n@import (reference) 'bootstrap/variables';\n@import (reference) 'bootstrap/utilities';\n@import (reference) 'bootstrap/grid';\n@import (reference) 'bootstrap/mixins/hide-text';\n@import (reference) 'bootstrap/mixins/center-block';\n@import (reference) 'bootstrap/mixins/clearfix';\n@import (reference) 'bootstrap/mixins/grid';\n@import (reference) 'bootstrap/mixins/grid-framework';\n@import (reference) 'bootstrap/type';\n@import (reference) 'bootstrap/mixins/text-overflow.less';\n@import (reference) 'bootstrap/mixins/text-emphasis.less';\n@import (reference) 'bootstrap/mixins/background-variant.less';\n\nhtml {\n\tfont-size: 62.5%;\n}\n* {\n\t-webkit-box-sizing: border-box;\n\t   -moz-box-sizing: border-box;\n\t        box-sizing: border-box;\n}\n\n/* On permet des listes au rendu vide. */\n.ul-reset {\n\tmargin-left: -15px;\n\tmargin-right: -15px;\n\tpadding: 0;\n\tlist-style-type: none;\n}\n\n.component {\n\t&:extend(.container);\n\t&:extend(.clearfix all);\n\t\n\t.list,\n\theader {\n\t\t&:extend(.row);\n\t}\n\n\theader {\t\n\t\taside,\n\t\t.title {\n\t\t\t.make-xs-column(12);\n\t\t\t.make-md-column(6);\n\t\t}\n\n\t\t.title {\n\t\t\t.make-md-column-push(6);\n\n\t\t\t&:extend(.text-left);\n\n\t\t\t@media (min-width: @screen-sm-min) {\n\t\t\t\t.text-right;\n\t\t\t}\n\t\t}\n\n\t\taside {\n\t\t\t.make-md-column-pull(6);\n\t\t}\n\t}\n\n\t.list {\n\n\t\t/* On applique à `.list` un reset. */\n\t\t&:extend(.ul-reset);\n\n\t\tli {\n\t\t\t.make-xs-column(12);\n\t\t\t.make-sm-column(6);\n\t\t\t.make-md-column(4);\n\t\t}\n\t}\n\n\t.title,\n\taside,\n\t.list li {\n\t\tdiv {\n\t\t\tbackground-color: #ddddff;\n\t\t\tmargin-top: 16px;\n\t\t\tpadding: 10px;\n\t\t\tfont-size: 1.5rem;\n\t\t\t\n\t\t\t@media (min-width: @screen-xs-min) {\n\t\t\t\theight: 40px;\n\t\t\t}\n\t\t}\n\t}\n\n\th1 {\n\t\tmargin: 0;\n\t\tfont-size: 3rem;\n\t\tmargin-top: -6px;\n\t}\n\n\tbackground-color: #f2f2f2;\n\tpadding-bottom: 16px;\n}\n```\n\n**Résultat**\n\n- **[Voir le résultat avec le code](http://codepen.io/Haeresis/pen/gpRGqX)**\n\n> **`Bonne pratique`** Et là, c'est le jackpot, on a une sortie divisée par 30 !\n\n> Ce qu'il se passe est que toutes les classes et fonctions des fichiers inclus par référence ne sont générées que si elles sont appelées en tant que raccourci dans le fichier qui les appels par référence.\n\n> **Ainsi pour la sortie nous avons maintenant un HTML de [431 bytes](http://codepen.io/Haeresis/pen/gpRGqX?editors=100) après compression et un fichier CSS de [4 ko](http://codepen.io/Haeresis/pen/gpRGqX?editors=010) après compression !**\n\n\n\n### Ne plus se soucier des inclusions ###\n\nAvec un appel par référence, comme vous l'aurez peut-être deviné, on peut même remplacer l'intégralité des appels suivant :\n\n```less\n@import (reference) 'bootstrap/variables';\n@import (reference) 'bootstrap/utilities';\n@import (reference) 'bootstrap/grid';\n@import (reference) 'bootstrap/mixins/hide-text';\n@import (reference) 'bootstrap/mixins/center-block';\n@import (reference) 'bootstrap/mixins/clearfix';\n@import (reference) 'bootstrap/mixins/grid';\n@import (reference) 'bootstrap/mixins/grid-framework';\n@import (reference) 'bootstrap/type';\n@import (reference) 'bootstrap/mixins/text-overflow.less';\n@import (reference) 'bootstrap/mixins/text-emphasis.less';\n@import (reference) 'bootstrap/mixins/background-variant.less';\n```\n\nuniquement par :\n\n```less\n@import (reference) 'bootstrap/bootstrap';\n```\n\net c'est la référence qui fera le reste, le tout pour une sortie de [4 ko](http://codepen.io/Haeresis/pen/gpRGqX?editors=010) totalement identique avant l'inclusion feature par feature. On est bien loin de nos [118 ko](http://codepen.io/Haeresis/pen/yNXXQO?editors=010) initiales !\n\n\n\n\n\n## Petits calculs ##\n\nNous allons voir rapidement la quantité de bande passante sauvée en aillant fait l'effort d'ajouter `(reference)` et `:extend()`. Gardez en tête que ce n'est pas pour une page complète, mais bien le petit fragment d'exemple que nous venons d'étudier.\n\nNous avons donc :\n- Méthode Standard, avec DOM négligé : HTML = 657 octets, CSS = 116.972 octets.\n- Méthode Optimisée, avec DOM propre : HTML = 431 octets, CSS = 4.018 octets.\n\n**Côté serveur**, pour 10000 appels (de différent client) :\n- Méthode Standard : 657 x 10000 = 6.570Mo, 116.972 x 10000 = 1.169.720Mo\n- Méthode Optimisé : 431 x 10000 = 4.310Mo, 4.018 x 10000 = 40.180Mo\n\n   Soit une **économie de trafic** :\n   - HTML = 6.570Mo - 4.310Mo = **2.260Mo**\n   - CSS = 1.169.720Mo - 40.180Mo = **1.129Go**\n\n**Côté client**, pour 100 appels d'un seul ordinateur **sans cache** :\n- Méthode Standard : 657 x 100 = 65.700o, 116.972 x 100 = 11.697.200o\n- Méthode Optimisé : 431 x 100 = 43.100o, 4.018 x 100 = 401.800o\n   \n   Soit une **économie de trafic** :\n   - HTML = 65ko - 43ko = **22ko**\n   - CSS = 11.697ko - 401ko = **11Mo**\n\n**Côté client**, pour 100 appels d'un seul ordinateur **avec cache** :\n- Méthode Standard : 657 x 100 = 65.700o, 116.972 x 1 = 116.972o\n- Méthode Optimisé : 431 x 100 = 43.100o, 4.018 x 1 = 4.018o\n   \n   Soit une **économie de trafic** :\n   - HTML = 65ko - 43ko = **22ko**\n   - CSS = 117ko - 4ko = **113ko**\n\n\n\n## En Bonus ##\n\nPour développer des sites web avec Less en toute transparence, je ne saurais que trop vous conseiller le module [NodeAtlas](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/) en [node.js](https://nodejs.org/). Cela vous permettra de développer dans vos feuilles Less et d'appeler les résultats CSS. Un exemple d'implémentation est à votre disposition dans le projet [LessAtlas](https://github.com/Haeresis/LessAtlas/).", "dates" : { "published" : { "$date" : 1434048660000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Bootstrap, lisibilité, propreté, performance, optimisation ; c'est possible !", "urn" : "bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible" }
{ "__v" : 0, "_id" : { "$oid" : "55894a766868ca087fbf8648" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "5310456355dfd5f7698d48bd" }, { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5499b03566bb5aeedaafd8b6" }, { "$oid" : "53746e72eb856da96ba3f8a3" }, { "$oid" : "5310456355dfd5f7698d48bb" } ], "content" : "Dans de nombreux cas, on utilise des balises superflus pour gérer ;\n\n- la largeur total d'une grille avec les éléments externes et \n- l'espacement entre chaque balise avec l'élément interne. Parfois même, \n- pour appliquer de la couleur de fond, on utilise une troisième balise ! \n\nC'est notamment le cas avec le framework CSS Bootstrap qui se fait vieux. Si vous vous ventez de ne plus suporter IE8 parce qu’il à fait son temps, alors il est également temps d'arrêter d'utiliser des balises inutiles !\n\nVoici un exemple d'ancienne pratique et son équivalence avec la propriété CSS3 `calc()`.\n\n\n\n\n\n## La Grille ##\n\n### Exemple old school à la Bootstrap ###\n\n**HTML :**\n\nAvec le HTML suivant :\n\n```html\n<div class=\"container\">\n\t<div class=\"row\">\n\t\t<div class=\"col-xs-4\">\n\t\t\t<div class=\"item\">Zone 1</div>\n\t\t</div>\n\t\t<div class=\"col-xs-4\">\n\t\t\t<div class=\"item\">Zone 2</div>\n\t\t</div>\n\t\t<div class=\"col-xs-4\">\n\t\t\t<div class=\"item\">Zone 3</div>\n\t\t</div>\n\t</div>\n\t<div class=\"row\">\n\t\t<div class=\"col-xs-6\">\n\t\t\t<div class=\"item\">Zone 4</div>\n\t\t</div>\n\t\t<div class=\"col-xs-6\">\n\t\t\t<div class=\"item\">Zone 5</div>\n\t\t</div>\n\t</div>\n</div>\n```\n\net avec la CSS suivante :\n\n**CSS :**\n\n```css\n* {\n\tbox-sizing: border-box;\n}\n.container {\n\tmax-width: 1200px;\n\tpadding-left: 15px;\n\tpadding-right: 15px;\n\tmargin-bottom: 15px;\n}\n.row {\n\tmargin-top: 15px;\n\tmargin-left: -15px;\n\tmargin-right: -15px;\n}\n.row:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: left;\n}\n.col-xs-6 {\n\tpadding-left: 15px;\n\tpadding-right: 15px;\n\twidth: 50%;\n\tfloat: left;\n}\n.col-xs-4 {\n\tpadding-left: 15px;\n\tpadding-right: 15px;\n\twidth: 33.33333333%;\n\tfloat: left;\n}\n.item {\n\tbackground-color: #e8e8e8;\n\tpadding: 15px;\n}\n```\n\nnous obtenons :\n\n**Résultat :**\n\n<div class=\"example-grid\">\n\t<div class=\"container\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-xs-4\">\n\t\t\t\t<div class=\"item\">Zone 1</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-xs-4\">\n\t\t\t\t<div class=\"item\">Zone 2</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-xs-4\">\n\t\t\t\t<div class=\"item\">Zone 3</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-xs-6\">\n\t\t\t\t<div class=\"item\">Zone 4</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-xs-6\">\n\t\t\t\t<div class=\"item\">Zone 5</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n### Même exemple avec calc() en CSS3 ###\n\nAvec le HTML suivant :\n\n**HTML :**\n\n```html\n<ul class=\"component\">\n\t<li>Zone 1</li>\n\t<li>Zone 2</li>\n\t<li>Zone 3</li>\n\t<li>Zone 4</li>\n\t<li>Zone 5</li>\n</ul>\n```\n\net avec la CSS suivante :\n\n**CSS :**\n\n```css\n* {\n\tbox-sizing: border-box;\n}\n.list {\n\tpadding: 0;\n\tmax-width: 1200px;\n\tmargin-top: 0;\n\tmargin-bottom: 15px;\n\tmargin-left: -15px;\n\tmargin-right: -15px;\n\tlist-style-type: none;\n}\n.list:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: left;\n}\n.list li {\n\tmargin-top: 15px;\n\tbackground-color: #e8e8e8;\n\tpadding: 15px;\n\tfloat: left;\n\tmargin-left: 15px;\n\tmargin-right: 15px;\n}\n.list li:nth-child(n+5) {\n\twidth: calc(50% - 30px);\t\n}\n.list li:nth-child(n+3) {\n\twidth: calc(33.33333333% - 30px);\t\n}\n```\n\nnous obtenons :\n\n**Résultat :**\n\n<div class=\"example-list\">\n\t<ul class=\"list\">\n\t\t<li>Zone 1</li>\n\t\t<li>Zone 2</li>\n\t\t<li>Zone 3</li>\n\t\t<li>Zone 4</li>\n\t\t<li>Zone 5</li>\n\t</ul>\n</div>\n\n\n\n\n\n## À propos de calc() ##\n\nLa grande force de `calc()` en CSS3 est qu'elle est capable de mélanger le calcul de plusieurs unités en même temps, et en temps réel. Cela permet en plus de conserver des proportions bonnes dès que la fenêtre change de taille.\n\n### Support des navigateurs ###\n\n#### Support IE9 ###\n\nComme dit en introduction, si vous souhaitez supporter `calc()` pour des versions plus vieille que IE8, il va falloir vous procurer [un polyfill comme celui-ci](https://github.com/closingtag/calc-polyfill). En ce qui concerne IE9, il est mentionné qu'elle est partiellement supportée. En réalité, cela vient du fait que si vous écrivez `calc(50%-30px)` cela fonctionnera partout sauf sur IE9 ou il faut bien mettre des espaces entre les symboles d'opération comme ceci : `calc(50% - 30px)`.\n\n#### Support propriétaire ####\n\nVous pouvez également supporter des versions plus vieille de la plupard des navigateurs avec les extensions propriétaires suivantes :\n\n```css\nwidth: -webkit-calc(50% - 100px);\nwidth:    -moz-calc(50% - 100px);\nwidth:         calc(50% - 100px);\n```\n### Support Less ###\n\nEn Less, la propriété calc() existe aussi, et c'est peut-être elle qui vous avait fait échouer vos tests si vous aviez déjà tenté le mélange d'unité car elle est incapable de le faire, aussi : `width: calc(50% - 30px);` donnera en sortie CSS `width: 20%`. Qui plus est, le calcul n'est pas effectué en temps réel. Pour réellement utiliser la propriété `calc()` CSS3 il va falloir écrire `width: calc(~'50% - 30px');` ce qui donnera en sortie CSS `width: calc(50% - 30px);`.\n\n#### Pour en savoir plus ####\n\nSi vous voulez en savoir plus sur `calc()` et ses subtilités [c'est par ici](http://caniuse.com/#feat=calc).\n\n**À vous de jouer !**", "dates" : { "published" : { "$date" : 1435060800000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : ".example-grid * {\n\t-webkit-box-sizing: border-box;\n\t   -moz-box-sizing: border-box;\n\t        box-sizing: border-box;\n}\n.example-grid .container {\n\tmax-width: 1200px;\n\tpadding-left: 15px;\n\tpadding-right: 15px;\n\tmargin-bottom: 15px;\n}\n.example-grid .row {\n\tmargin-top: 15px;\n\tmargin-left: -15px;\n\tmargin-right: -15px;\n}\n.example-grid .row {\n\tmargin-top: 15px;\n\tmargin-left: -15px;\n\tmargin-right: -15px;\n}\n.example-grid .row:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: left;\n}\n.example-grid .col-xs-6 {\n\tpadding-left: 15px;\n\tpadding-right: 15px;\n\twidth: 50%;\n\tfloat: left;\n}\n.example-grid .col-xs-4 {\n\tpadding-left: 15px;\n\tpadding-right: 15px;\n\twidth: 33.33333333%;\n\tfloat: left;\n}\n.example-grid .item {\n\tbackground-color: #e8e8e8;\n\tpadding: 15px;\n}\n\n.example-list * {\n\t-webkit-box-sizing: border-box;\n\t   -moz-box-sizing: border-box;\n\t        box-sizing: border-box;\n}\n.example-list .list {\n\tpadding: 0;\n\tmax-width: 1200px;\n\tmargin-top: 0;\n\tmargin-bottom: 15px;\n\tmargin-left: -15px;\n\tmargin-right: -15px;\n\tlist-style-type: none;\n}\n.example-list .list:after {\n\tcontent: \"\";\n\tdisplay: block;\n\tclear: left;\n}\n.example-list .list li {\n\tmargin-top: 15px;\n\tbackground-color: #e8e8e8;\n\tpadding: 15px;\n\tfloat: left;\n\tmargin-left: 15px;\n\tmargin-right: 15px;\n\twidth: calc(50% - 30px);\n}\n.example-list .list li:nth-child(n+3) {\n\twidth: calc(33.33333333% - 30px);\t\n}\nbody {\n\toverflow-x: hidden;\n}", "title" : "La propriété CSS3 calc() pour arrêter avec les balises HTML imbriquées inutilement", "urn" : "la-propriete-css3-calc-pour-arreter-avec-les-balises-html-imbriquees-inutilement" }
{ "__v" : 0, "_id" : { "$oid" : "558bf17d6868ca087fbf8649" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48c3" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b8" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "Je viens de voir un code allembiqué permettant de maintenir la hauteur de deux `<div>` côte à côte. Problème ? Ces éléments ne sont pas côte à côte en version mobile mais l'un sous l'autre : et maintenir la hauteur dans ce cas là ne sert à rien. La semaine d'avant, j'ai vu un code avec une cascade de `if` permettant d'ouvrir une vidéo dans une popup sur PC et d'ouvrir un lien Youtube sur mobile. Bien évidemment, les petits écrans PC ouvraient une popup alors qu'il aurait été intéressant qu'ils ouvrent aussi un lien. Je vous fais l'impasse sur les comportements au redimensionnement de la fenêtre.\n\nBref, lançons-nous dans un petit exercice pour permettre un code JavaScript Responsive Web Design, sans se soucier de l'appareil qui l’exécute.\n\n\n\n\n\n## La fonction JavaScript `window.matchMedia` ##\n\nDe la même manière que dans une feuille CSS nous allons nous servir de `@media`, en JavaScript, nous allons nous servir de `window.matchMedia` pour adresser différent comportement en fonction de la taille d'affichage de l'écran. La syntaxe dans les deux cas est identique et une simple ligne gère la condition total d'affichage. Enfin, si votre navigateur ne gère pas `window.matchMedia`, il ne gère pas non plus `@media` ce qui va nous arranger pour le support.\n\n\n\n\n\n## Notre problématique ##\n\nJe souhaite ouvrir la vidéo d'une chaine Youtube dans une popup. Si l'écran est trop petit, je préfère allez sur la page Internet de la page. Cela permet aux smartphones de proposer d'ouvrir le lien Internet dans une application tierce dédiée (entre autre) et aux petits écrans de ne pas se manger de popup.\n\n\n\n### HTML ###\n\nTout d'abord, préparons le terrain HTML. Nous avons besoin de deux box côte à côte, la première présentera la chaine Youtube, la seconde permettra de lancer la vidéo dans une popup. Si l'écran est trop petit, les box seront l'une sous l'autre.\n\n```html\n<section class=\"youtube-presentation\">\n  <div class=\"presentation\">\n    <h1>Youtube for Playstation</h1>\n    <h2>Description</h2>\n    <p>Welcome to the official home of PlayStation on YouTube.</p>\n    <p>Here you'll find the latest videos about your favorite\n    PlayStation products direct from Sony Computer Entertainment,\n    as well as consumer generated clips from other PlayStation\n    fans. To stay up to date, be sure to subscribe above and\n    check back often for the new game trailers,\n    behind-the-scenes footage, in-game moments,\n    tips and tricks and exclusive sneak peeks.</p>\n  </div>\n  <div class=\"video\">\n    <h2>Final Fantasy VII Remake E3 Trailer | PS4</h2>\n    <div class=\"link\">\n      <a \n        href=\"https://www.youtube.com/watch?v=Kznek1uNVsg\"><img \n        src=\"https://lh3.googleusercontent.com/[...]\" \n        alt=\"Final Fantasy VII Remake E3 Trailer | PS4\"></a>\n    </div>\n    <div class=\"popup\">\n      <div class=\"embeded\">\n        <div class=\"close\"></div>\n        <iframe \n          width=\"560\" \n          height=\"315\" \n          src=\"https://www.youtube.com/embed/Kznek1uNVsg\" \n          frameborder=\"0\" \n          allowfullscreen></iframe>\n      </div>\n    </div>\n  </div>\n</section>\n```\n\n### CSS ###\n\nHabillons tout ça :\n\n```css\n/* On créer un container responsive */\n* {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.youtube-presentation {\n  margin-left: -1rem;\n  margin-right: -1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.youtube-presentation:after {\n  content: '';\n  clear: left;\n  display: block;\n}\n\n/* Et deux colonnes Responsive */\n.youtube-presentation .presentation,\n.youtube-presentation .video {\n   padding: 1rem;\n   float: left;\n   width: calc(100% - 2rem);\n   background-color: #e0e0e0;\n   margin: 1rem;\n   margin: 1rem;\n}\n@media (min-width: 768px) {\n  .youtube-presentation .presentation,\n  .youtube-presentation .video {\n     width: calc(50% - 2rem);\n  }\n}\n\n/* Mise en forme de la présentation */\n.youtube-presentation .presentation *:first-child {\n  margin-top: 0;\n}\n.youtube-presentation .presentation *:last-child {\n  margin-bottom: 0;\n}\n\n/* Mise en forme de l'image vidéo */\n.youtube-presentation .video *:first-child {\n  margin-top: 0;\n}\n.youtube-presentation .video .link {\n  max-width: 100%;  \n}\n.youtube-presentation .video .link img {\n  max-width: 100%;\n  background-color: #000;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  margin: 0;\n  margin-top: 1rem;\n}\n\n/* Mise en forme de la popup pour la vidéo */\n.youtube-presentation .video .popup {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.youtube-presentation .video iframe {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n/* Affichage de la popup */\n.youtube-presentation .popup {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n@media (min-width: 768px) {\n  .youtube-presentation .popup.opened {\n    display: block;\n  }\n}\n.youtube-presentation .popup .embeded {\n  position: absolute;\n  width: 50%;\n  height: 50%;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translateX(-50%) translateY(-50%);\n     -moz-transform: translateX(-50%) translateY(-50%);\n      -ms-transform: translateX(-50%) translateY(-50%);\n       -o-transform: translateX(-50%) translateY(-50%);\n          transform: translateX(-50%) translateY(-50%);\n}\n.youtube-presentation .popup .close {\n  position:absolute;\n  right: 0;\n  bottom: 100%;\n  cursor: pointer;\n}\n.youtube-presentation .popup .close:before {\n  content: 'X';\n  display: block;\n  color: #000;\n  -webkit-border-radius: 50%;\n          border-radius: 50%;\n  cursor: pointer;\n  padding: .2rem;\n  font-size: 1rem;\n  width: 2rem;\n  text-align: center;\n  background-color: #fff;\n  margin-bottom: .2rem;\n}\n```\n\nEt voyons le résultat !\n<section class=\"youtube-presentation\">\n  <div class=\"presentation\">\n    <div class=\"like-h1\">Youtube for Playstation</div>\n    <div class=\"like-h2\">Description</div>\n    <p>Welcome to the official home of PlayStation on YouTube.</p>\n    <p>Here you'll find the latest videos about your favorite\n    PlayStation products direct from Sony Computer Entertainment,\n    as well as consumer generated clips from other PlayStation\n    fans. To stay up to date, be sure to subscribe above and \n    check back often for the new game trailers, \n    behind-the-scenes footage, in-game moments, \n    tips and tricks and exclusive sneak peeks.</p>\n  </div>\n  <div class=\"video\">\n    <div class=\"like-h2\">Final Fantasy VII Remake E3 Trailer | PS4</div>\n    <div class=\"link\"><a href=\"https://www.youtube.com/watch?v=Kznek1uNVsg\"><svg><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#1F1F1F\" class=\"ytp-large-play-button-svg\" d=\"M84.15,26.4v6.35c0,2.833-0.15,5.967-0.45,9.4c-0.133,1.7-0.267,3.117-0.4,4.25l-0.15,0.95c-0.167,0.767-0.367,1.517-0.6,2.25c-0.667,2.367-1.533,4.083-2.6,5.15c-1.367,1.4-2.967,2.383-4.8,2.95c-0.633,0.2-1.316,0.333-2.05,0.4c-0.767,0.1-1.3,0.167-1.6,0.2c-4.9,0.367-11.283,0.617-19.15,0.75c-2.434,0.034-4.883,0.067-7.35,0.1h-2.95C38.417,59.117,34.5,59.067,30.3,59c-8.433-0.167-14.05-0.383-16.85-0.65c-0.067-0.033-0.667-0.117-1.8-0.25c-0.9-0.133-1.683-0.283-2.35-0.45c-2.066-0.533-3.783-1.5-5.15-2.9c-1.033-1.067-1.9-2.783-2.6-5.15C1.317,48.867,1.133,48.117,1,47.35L0.8,46.4c-0.133-1.133-0.267-2.55-0.4-4.25C0.133,38.717,0,35.583,0,32.75V26.4c0-2.833,0.133-5.95,0.4-9.35l0.4-4.25c0.167-0.966,0.417-2.05,0.75-3.25c0.7-2.333,1.567-4.033,2.6-5.1c1.367-1.434,2.967-2.434,4.8-3c0.633-0.167,1.333-0.3,2.1-0.4c0.4-0.066,0.917-0.133,1.55-0.2c4.9-0.333,11.283-0.567,19.15-0.7C35.65,0.05,39.083,0,42.05,0L45,0.05c2.467,0,4.933,0.034,7.4,0.1c7.833,0.133,14.2,0.367,19.1,0.7c0.3,0.033,0.833,0.1,1.6,0.2c0.733,0.1,1.417,0.233,2.05,0.4c1.833,0.566,3.434,1.566,4.8,3c1.066,1.066,1.933,2.767,2.6,5.1c0.367,1.2,0.617,2.284,0.75,3.25l0.4,4.25C84,20.45,84.15,23.567,84.15,26.4z M33.3,41.4L56,29.6L33.3,17.75V41.4z\"></path><polygon fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" points=\"33.3,41.4 33.3,17.75 56,29.6\"></polygon></svg><img src=\"https://lh3.googleusercontent.com/proxy/EGUmRlYCgAUhw7F9Hic2auLGZfu3r9rAp1Z3hgouT_iYqgmKzxDtR5xcVimq25AIvdIUdBFC0dESno2LSxH5fd38P3O-jcmecp0A0GFXdCzkfVxDM0PqhVrH=w692-h384\" alt=\"Final Fantasy VII Remake E3 Trailer | PS4\"></a></div>\n    <div class=\"popup\">   \n      <div class=\"embeded\">\n        <div class=\"close\"></div>\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kznek1uNVsg\" frameborder=\"0\" allowfullscreen></iframe>\n      </div>\n    </div>\n  </div>\n</section>\n\n> *`Conclusion :`* Sans JavaScript nous avons été capable d'habiller la totalité des éléments et de créer l'affichage de la popup (que l'on ne voit pas sans la classe `opened`). Nous allons maintenant avoir du JavaScript pour\n\n> - maintenir la hauteur des box à la même taille, uniquement quand ils sont côte à côte,\n- ouvrir la popup en grand format ou laisser le lien amener à une page Youtube.\n\n\n\n\n\n## Notre solution : `window.matchMedia` ##\n\nCommençons dans un premier temps, à l'aide de jQuery, par appliquer le script qui va maintenir la hauteur, et ouvrir la popup.\n\n```js\n/* Variable globale si pas encore défini */\nvar website = website || {},\n    $window = $window || $(window);\n\n/* \n * Scope pour nos deux nouvelles fonctions, \n * aucune variable ici ne polluera le reste\n * des scripts.\n */\n(function (publics) {\n  \n  /* \n   * Création de la fonctionnalité pour maintenir \n   * les hauteurs.\n   */\n  publics.sameHeight = function ($items) {\n  \n    function sameHeight() {\n      var maxHeight = 0;\n      \n      /* Parmi les éléments recherchés... */\n      $items.height(\"\").each(function () {\n        var $current = $(this);\n        \n        /* ...on trouve le plus haut... */\n        if ($current.height() > maxHeight) {\n          maxHeight = $current.height();\n        }\n        \n      /* Et on applique cette hauteur à tous les autres. */\n      }).height(maxHeight);\n    }\n    \n    /* \n     * Application de la fonction à la \n     * lecture de celle-ci...\n     */\n    sameHeight();\n    \n    /* \n     * ...puis à chaque redimensionnement de \n     * page.\n     */\n    $window.resize(function () {\n      sameHeight(); \n    });\n  };\n  \n  /* \n   * Création de la fonctionnalité pour ouvrir/fermer \n   * les popups.\n   */\n  publics.popupVideo = function ($senders, $targets) {\n    \n    /* Sur une popup ouverte... */\n    function closePopup($popup) {\n      /* ...permettre au clique sur le background qu'elle se ferme... */\n      $popup.click(function (e) {\n        e.preventDefault();\n        $popup.removeClass(\"opened\")\n        \n      /* ...mais pas que le contenu utile la ferme... */\n      }).find(\".content\").click(function (e) {\n        e.stopPropagation();\n        \n      /* ...mais que le bouton close la ferme. */\n      }).find(\".close\").click(function (e) {\n        e.preventDefault();\n        $popup.removeClass(\"opened\")\n      });\n    }\n    \n    /* Chaque élément d'ouverture $sender... */\n    function popupVideo() {\n      $senders.each(function (i) {\n        var $sender = $(this),\n            $target = $targets.eq(i);\n        \n        /* ...cible sa popup associée $target */\n        $sender.click(function (e) {\n          /* ...l'ouvre au clique... */\n          e.preventDefault();\n          $target.addClass(\"opened\");\n        });\n        \n        /* ...et met en place sa fermeture. */\n        closePopup($target)\n      });\n    }\n\n    /* \n     * Application de la fonction à la \n     * lecture de celle-ci...\n     */\n    popupVideo();\n    \n    /* \n     * ...puis à chaque redimensionnement de \n     * page.\n     */\n    $window.resize(function () {\n      popupVideo(); \n    });\n  };\n  \n}(website));\n\n/* \n * Application de nos deux fonctions sur le \n * HTML préparé en amont.\n */\nwebsite.sameHeight(\n  $(\".youtube-presentation .presentation, .youtube-presentation .video\")\n);\nwebsite.popupVideo(\n  $(\".youtube-presentation .video a\"),\n  $(\".youtube-presentation .popup\")\n);\n```\n\nCe qui nous donne au final... ceci !\n<section class=\"youtube-presentation ex1\">\n  <div class=\"presentation\">\n    <div class=\"like-h1\">Youtube for Playstation</div>\n    <div class=\"like-h2\">Description</div>\n    <p>Welcome to the official home of PlayStation on YouTube.</p>\n    <p>Here you'll find the latest videos about your favorite\n    PlayStation products direct from Sony Computer Entertainment,\n    as well as consumer generated clips from other PlayStation\n    fans. To stay up to date, be sure to subscribe above and \n    check back often for the new game trailers, \n    behind-the-scenes footage, in-game moments, \n    tips and tricks and exclusive sneak peeks.</p>\n  </div>\n  <div class=\"video\">\n    <div class=\"like-h2\">Final Fantasy VII Remake E3 Trailer | PS4</div>\n    <div class=\"link\"><a href=\"https://www.youtube.com/watch?v=Kznek1uNVsg\"><svg><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#1F1F1F\" class=\"ytp-large-play-button-svg\" d=\"M84.15,26.4v6.35c0,2.833-0.15,5.967-0.45,9.4c-0.133,1.7-0.267,3.117-0.4,4.25l-0.15,0.95c-0.167,0.767-0.367,1.517-0.6,2.25c-0.667,2.367-1.533,4.083-2.6,5.15c-1.367,1.4-2.967,2.383-4.8,2.95c-0.633,0.2-1.316,0.333-2.05,0.4c-0.767,0.1-1.3,0.167-1.6,0.2c-4.9,0.367-11.283,0.617-19.15,0.75c-2.434,0.034-4.883,0.067-7.35,0.1h-2.95C38.417,59.117,34.5,59.067,30.3,59c-8.433-0.167-14.05-0.383-16.85-0.65c-0.067-0.033-0.667-0.117-1.8-0.25c-0.9-0.133-1.683-0.283-2.35-0.45c-2.066-0.533-3.783-1.5-5.15-2.9c-1.033-1.067-1.9-2.783-2.6-5.15C1.317,48.867,1.133,48.117,1,47.35L0.8,46.4c-0.133-1.133-0.267-2.55-0.4-4.25C0.133,38.717,0,35.583,0,32.75V26.4c0-2.833,0.133-5.95,0.4-9.35l0.4-4.25c0.167-0.966,0.417-2.05,0.75-3.25c0.7-2.333,1.567-4.033,2.6-5.1c1.367-1.434,2.967-2.434,4.8-3c0.633-0.167,1.333-0.3,2.1-0.4c0.4-0.066,0.917-0.133,1.55-0.2c4.9-0.333,11.283-0.567,19.15-0.7C35.65,0.05,39.083,0,42.05,0L45,0.05c2.467,0,4.933,0.034,7.4,0.1c7.833,0.133,14.2,0.367,19.1,0.7c0.3,0.033,0.833,0.1,1.6,0.2c0.733,0.1,1.417,0.233,2.05,0.4c1.833,0.566,3.434,1.566,4.8,3c1.066,1.066,1.933,2.767,2.6,5.1c0.367,1.2,0.617,2.284,0.75,3.25l0.4,4.25C84,20.45,84.15,23.567,84.15,26.4z M33.3,41.4L56,29.6L33.3,17.75V41.4z\"></path><polygon fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" points=\"33.3,41.4 33.3,17.75 56,29.6\"></polygon></svg><img src=\"https://lh3.googleusercontent.com/proxy/EGUmRlYCgAUhw7F9Hic2auLGZfu3r9rAp1Z3hgouT_iYqgmKzxDtR5xcVimq25AIvdIUdBFC0dESno2LSxH5fd38P3O-jcmecp0A0GFXdCzkfVxDM0PqhVrH=w692-h384\" alt=\"Final Fantasy VII Remake E3 Trailer | PS4\"></a></div>\n    <div class=\"popup\">   \n      <div class=\"embeded\">\n        <div class=\"close\"></div>\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kznek1uNVsg\" frameborder=\"0\" allowfullscreen></iframe>\n      </div>\n    </div>\n  </div>\n</section>\n\n> Les mécanismes sont en place et fonctionnels, cependant, au vu du design de ma page dans ses divers formats Responsive, nous allons :\n- Pouvoir changer les règles pour les Media Queries `@media` de ma feuille CSS.\n- Les implémenter également dans le JavaScript avec `window.matchMedia`.\n\n\n\n### Le code JavaScript final ###\n\nAu regard de l'affichage de ma zone de contenu, il y a assez de place pour afficher les box côte à côte pour une largeur de fenêtre de 992px à l'infini et entre 480px et 780px. En ce qui concerne l'affichage de la popup, en dessous de 480px de large, je préférerais afficher la vidéo sur une page dédiée Youtube ou dans une application tierce. Je veux également le même comportement si l'affichage est inférieur à 320px de hauteur.\n\nLes deux Media Queries seront donc :\n\n- Pour les box : `(min-width: 480px) AND (max-width: 779px), (min-width: 992px)`\n- Pour la popup : `(min-width: 480px) AND (min-height: 320px)`\n\n*Note : Les valeurs données étant incluses, je mets donc 779px et non 780px pour qu'à 780px les box soient de nouveau en ligne.*\n\nCela nous donne les modifications suivantes pour la CSS :\n\n*CSS*\n\n```css\n/* ... */\n\n/* Et deux colonnes Responsive */\n.youtube-presentation .presentation,\n.youtube-presentation .video {\n   padding: 1rem;\n   float: left;\n   width: calc(100% - 2rem);\n   background-color: #e0e0e0;\n   margin: 1rem;\n   margin: 1rem;\n}\n@media (min-width: 480px) AND (max-width: 779px), (min-width: 992px) { /* Media Queries des box. */\n  .youtube-presentation .presentation,\n  .youtube-presentation .video {\n     width: calc(50% - 2rem);\n  }\n}\n\n/* ... */\n\n/* Affichage de la popup */\n.youtube-presentation .popup {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n@media (min-width:480px) AND (min-height: 320px) { /* Media Queries de la popup. */\n  .youtube-presentation .popup.opened {\n    display: block;\n  }\n}\n\n/* ... */\n```\n\net les modifications suivantes pour le JavaScript :\n\n```js\n/* ... */\n\n(function (publics) {\n  var privates = {};\n  \n  /*\n   * Nous créons une petite fonctionnalité\n   * utile uniquement dans notre scope pour\n   * autoriser, en fonction de la Media Queries\n   * le JavaScript à faire effet.\n   */\n  privates.allowMechanism = function (mediaQueries) {\n    var rtrn = false;\n    \n    /*\n     * Si le navigateur ne gère pas les Media Queries,\n     * la fonctionnalité ne fait rien de notable.\n     */\n    if (typeof mediaQueries !== 'undefined') {\n      \n      /*\n       * Si il les gère, appliquer l'effet, uniquement\n       * sur ce qui a été demandé dans la Media Queries.\n       */\n      if (typeof window.matchMedia !== 'undefined') {\n       rtrn = window.matchMedia(mediaQueries).matches;\n        \n      /*\n       * Si il les gère, mais qu'aucune Media Queries n'a été\n       * définies, rendre l'effet pour touts les\n       * cas de figure.\n       */\n      } else {\n        rtrn = true;\n      }\n    }\n    \n    return rtrn;\n  }\n\n  publics.sameHeight = function ($items, mediaQueries) {\n  \n    function sameHeight() {\n      var maxHeight = 0;\n      $items.height(\"\");\n\n      /*\n       * On ne manage la hauteur des box que\n       * si les Media Queries sont validées.\n       */\n      if (privates.allowMechanism(mediaQueries)) {\n        $items.each(function () {\n          var $current = $(this);\n\n          if ($current.height() > maxHeight) {\n            maxHeight = $current.height();\n          }\n        }).height(maxHeight);\n      }\n    }\n\n    /* ... */\n  };\n\n  publics.popupVideo = function ($senders, $targets, mediaQueries) {\n\n    /* ... */\n    \n    function popupVideo() {\n        /* ... */\n        \n        $sender.click(function (e) {\n\n          /*\n           * On autorise l'ouverture de la Popup uniquement\n           * si les Media Queries sont validées.\n           */\n          if (privates.allowMechanism(mediaQueries)) {\n            e.preventDefault();\n            $target.addClass(\"opened\");\n          }\n        });\n\n        /* ... */\n      });\n    }\n\n    /* ... */\n  };\n  \n}(website));\n\n/* \n * Application de nos deux fonctions sur le \n * HTML préparé en amont.\n */\nwebsite.sameHeight(\n  $(\".youtube-presentation .presentation, .youtube-presentation .video\"),\n  \"(min-width: 480px) AND (max-width: 779px), (min-width: 992px)\"\n);\nwebsite.popupVideo(\n  $(\".youtube-presentation .video a\"),\n  $(\".youtube-presentation .popup\"),\n  \"(min-width: 480px) AND (min-height: 320px)\"\n);\n```\n\nEt voilà !\n<section class=\"youtube-presentation2\">\n  <div class=\"presentation\">\n    <div class=\"like-h1\">Youtube for Playstation</div>\n    <div class=\"like-h2\">Description</div>\n    <p>Welcome to the official home of PlayStation on YouTube.</p>\n    <p>Here you'll find the latest videos about your favorite\n    PlayStation products direct from Sony Computer Entertainment,\n    as well as consumer generated clips from other PlayStation\n    fans. To stay up to date, be sure to subscribe above and \n    check back often for the new game trailers, \n    behind-the-scenes footage, in-game moments, \n    tips and tricks and exclusive sneak peeks.</p>\n  </div>\n  <div class=\"video\">\n    <div class=\"like-h2\">Final Fantasy VII Remake E3 Trailer | PS4</div>\n    <div class=\"link\"><a href=\"https://www.youtube.com/watch?v=Kznek1uNVsg\"><svg><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#1F1F1F\" class=\"ytp-large-play-button-svg\" d=\"M84.15,26.4v6.35c0,2.833-0.15,5.967-0.45,9.4c-0.133,1.7-0.267,3.117-0.4,4.25l-0.15,0.95c-0.167,0.767-0.367,1.517-0.6,2.25c-0.667,2.367-1.533,4.083-2.6,5.15c-1.367,1.4-2.967,2.383-4.8,2.95c-0.633,0.2-1.316,0.333-2.05,0.4c-0.767,0.1-1.3,0.167-1.6,0.2c-4.9,0.367-11.283,0.617-19.15,0.75c-2.434,0.034-4.883,0.067-7.35,0.1h-2.95C38.417,59.117,34.5,59.067,30.3,59c-8.433-0.167-14.05-0.383-16.85-0.65c-0.067-0.033-0.667-0.117-1.8-0.25c-0.9-0.133-1.683-0.283-2.35-0.45c-2.066-0.533-3.783-1.5-5.15-2.9c-1.033-1.067-1.9-2.783-2.6-5.15C1.317,48.867,1.133,48.117,1,47.35L0.8,46.4c-0.133-1.133-0.267-2.55-0.4-4.25C0.133,38.717,0,35.583,0,32.75V26.4c0-2.833,0.133-5.95,0.4-9.35l0.4-4.25c0.167-0.966,0.417-2.05,0.75-3.25c0.7-2.333,1.567-4.033,2.6-5.1c1.367-1.434,2.967-2.434,4.8-3c0.633-0.167,1.333-0.3,2.1-0.4c0.4-0.066,0.917-0.133,1.55-0.2c4.9-0.333,11.283-0.567,19.15-0.7C35.65,0.05,39.083,0,42.05,0L45,0.05c2.467,0,4.933,0.034,7.4,0.1c7.833,0.133,14.2,0.367,19.1,0.7c0.3,0.033,0.833,0.1,1.6,0.2c0.733,0.1,1.417,0.233,2.05,0.4c1.833,0.566,3.434,1.566,4.8,3c1.066,1.066,1.933,2.767,2.6,5.1c0.367,1.2,0.617,2.284,0.75,3.25l0.4,4.25C84,20.45,84.15,23.567,84.15,26.4z M33.3,41.4L56,29.6L33.3,17.75V41.4z\"></path><polygon fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" points=\"33.3,41.4 33.3,17.75 56,29.6\"></polygon></svg><img src=\"https://lh3.googleusercontent.com/proxy/EGUmRlYCgAUhw7F9Hic2auLGZfu3r9rAp1Z3hgouT_iYqgmKzxDtR5xcVimq25AIvdIUdBFC0dESno2LSxH5fd38P3O-jcmecp0A0GFXdCzkfVxDM0PqhVrH=w692-h384\" alt=\"Final Fantasy VII Remake E3 Trailer | PS4\"></a></div>\n    <div class=\"popup\">   \n      <div class=\"embeded\">\n        <div class=\"close\"></div>\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kznek1uNVsg\" frameborder=\"0\" allowfullscreen></iframe>\n      </div>\n    </div>\n  </div>\n</section>\n\n> **`Conclusion :`** Et nous voilà aligné avec les Media Queries que ce soit dans les fichiers CSS ou dans les fichiers JavaScript !\n\n> Si vous souhaitez obtenir le code final complet, [c'est par ici](http://codepen.io/Haeresis/pen/YXEBbK) !", "dates" : { "published" : { "$date" : 1435320180000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "/* Variable globale si pas encore défini */\nvar website = website || {};\n\n/* \n * Scope pour nos deux nouvelles fonctions, \n * aucune variable ici ne pollura le reste\n * des scripts.\n */\n(function (publics) {\n   var privates = {};\n  \n /*\n   * Nous créeons une petite fonctionalité\n   * utile uniquement dans notre scope pour\n   * autoriser, en fonction de la Media Queries\n   * le JavaScript à faire effet.\n   */\n  privates.allowMechanism = function (mediaQueries) {\n    var rtrn = false;\n    \n    /*\n     * Si le navigateur ne gère pas les Media Queries,\n     * la fonctionalité ne fait rien de notable.\n     */\n    if (typeof mediaQueries !== 'undefined') {\n      \n      /*\n       * Si elle les gèrent, appliquer l'effet, uniquement\n       * sur ce qui a été demandé dans la Media Queries.\n       */\n      if (typeof window.matchMedia !== 'undefined') {\n       rtrn = window.matchMedia(mediaQueries).matches;\n        \n      /*\n       * Si elle les gèrent, mais qu'aucune n'a été\n       * définies, rendre l'effet pour toutes les\n       * tailles.\n       */\n      } else {\n        rtrn = true;\n      }\n    }\n    \n    return rtrn;\n  }\n\n  publics.sameHeight2 = function ($items, mediaQueries) {\n  \n    function sameHeight() {\n      var maxHeight = 0;\n\n      $items.height(\"\");\n\n      /*\n       * On ne manage la hauteur des box que\n       * si les mediaQueries sont validées.\n       */\n      if (privates.allowMechanism(mediaQueries)) {\n        $items.each(function () {\n          var $current = $(this);\n\n          if ($current.height() > maxHeight) {\n            maxHeight = $current.height();\n          }\n        }).height(maxHeight);\n      }\n    }\n\n    sameHeight();\n    $window.resize(function () {\n      sameHeight(); \n    });\n  };\n\n  publics.popupVideo2 = function ($senders, $targets, mediaQueries) {\n\n    function closePopup($popup) {\n      $popup.click(function (e) {\n        e.preventDefault();\n        $popup.removeClass(\"opened\")\n      }).find(\".content\").click(function (e) {\n        e.stopPropagation();\n      }).find(\".close\").click(function (e) {\n        e.preventDefault();\n        $popup.removeClass(\"opened\")\n      });\n    }\n    \n    function popupVideo() {\n      $senders.each(function (i) {\n        var $sender = $(this),\n            $target = $targets.eq(i);\n        \n        $sender.click(function (e) {\n\n          /*\n           * On autorise l'ouverture de la Popup uniquement\n           * si les mediaQueries sont validées.\n           */\n          if (privates.allowMechanism(mediaQueries)) {\n            e.preventDefault();\n            $target.addClass(\"opened\");\n          }\n        });\n\n        closePopup($target)\n      });\n    }\n\n    popupVideo();\n    $window.resize(function () {\n      popupVideo(); \n    });\n  };\n  /* \n   * Création de la feature pour maintenir \n   * les hauteurs.\n   */\n  publics.sameHeight = function ($items) {\n  \n    function sameHeight() {\n      var maxHeight = 0;\n\n      /* Parmis les éléments recherchés... */\n      $items.height(\"\").each(function () {\n        var $current = $(this);\n        \n        /* ...on trouve le plus haut... */\n        if ($current.height() > maxHeight) {\n          maxHeight = $current.height();\n        }\n        \n      /* Et on applique cette hauteur à tous les autres. */\n      }).height(maxHeight);\n    }\n    \n    /* \n     * Application de la fonction à la \n     * lecture de celle-ci...\n     */\n    sameHeight();\n    \n    /* \n     * ...puis à chaque redimentionnement de \n     * page.\n     */\n    $(window).resize(function () {\n      sameHeight(); \n    });\n  };\n  \n  /* \n   * Création de la feature pour ouvrir/fermer \n   * les popups.\n   */\n  publics.popupVideo = function ($senders, $targets) {\n    \n    /* Sur une popup ouverte... */\n    function closePopup($popup) {\n      /* ...permettre au clique sur le background qu'elle se ferme... */\n      $popup.click(function (e) {\n        e.preventDefault();\n        $popup.removeClass(\"opened\")\n        \n      /* ...mais pas que le contenu utile la ferme... */\n      }).find(\".content\").click(function (e) {\n        e.stopPropagation();\n        \n      /* ...mais que le bouton Close la ferme. */\n      }).find(\".close\").click(function (e) {\n        e.preventDefault();\n        $popup.removeClass(\"opened\")\n      });\n    }\n    \n    /* Chaque élément d'ouverture $sender... */\n    function popupVideo() {\n      $senders.each(function (i) {\n        var $sender = $(this),\n            $target = $targets.eq(i);\n        \n        /* ...cible sa popup associée $target */\n        $sender.click(function (e) {\n          /* ...l'ouvre au clique... */\n          e.preventDefault();\n          $target.addClass(\"opened\");\n        });\n        \n        /* ...et met en place sa fermeture. */\n        closePopup($target)\n      });\n    }\n\n    /* \n     * Application de la fonction à la \n     * lecture de celle-ci...\n     */\n    popupVideo();\n    \n    /* \n     * ...puis à chaque redimentionnement de \n     * page.\n     */\n    $(window).resize(function () {\n      popupVideo(); \n    });\n  };\n  \n}(website));\n\n/* Application de nos deux fonctions sur le \n * HTML préparé en amont.\n */\nwebsite.sameHeight($(\".youtube-presentation.ex1 .presentation, .youtube-presentation.ex1 .video\"));\nwebsite.popupVideo($(\".youtube-presentation.ex1 .video a\"), $(\".youtube-presentation.ex1 .popup\"));\nwebsite.sameHeight2(\n  $(\".youtube-presentation2 .presentation, .youtube-presentation2 .video\"),\n  \"(min-width: 480px) AND (max-width: 779px), (min-width: 992px)\"\n);\nwebsite.popupVideo2(\n  $(\".youtube-presentation2 .video a\"), $(\".youtube-presentation2 .popup\"),\n  \"(min-width: 480px) AND (min-height: 320px)\"\n);", "stylesheet" : "/* On créer un container responsive */\n.youtube-presentation,\n.youtube-presentation * {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.youtube-presentation {\n  margin-left: -1rem;\n  margin-right: -1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.youtube-presentation:after {\n  content: '';\n  clear: left;\n  display: block;\n}\n\n/* Et deux colonnes responsive */\n.youtube-presentation .presentation,\n.youtube-presentation .video {\n   padding: 1rem;\n   float: left;\n   width: calc(100% - 2rem);\n   background-color: #e0e0e0;\n   margin: 1rem;\n   margin: 1rem;\n}\n\n@media (min-width: 768px) {\n  .youtube-presentation .presentation,\n  .youtube-presentation .video {\n     width: calc(50% - 2rem);\n  }\n}\n\n/* Mise en forme de la présentation */\n.youtube-presentation .presentation *:first-child {\n  margin-top: 0;\n}\n.youtube-presentation .presentation *:last-child {\n  margin-bottom: 0;\n}\n\n/* Mise en forme de l'image vidéo*/\n.youtube-presentation .video *:first-child {\n  margin-top: 0;\n}\n.youtube-presentation .video .link {\n  max-width: 100%;  \n}\n.youtube-presentation .video .link img {\n  max-width: 100%;\n  background-color: #000;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  margin: 0;\n  margin-top: 1rem;\n}\n\n/* Mise en forme de la popup pour la vidéo*/\n.youtube-presentation .video .popup {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.youtube-presentation .video iframe {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n/* Affichage de la popup */\n.youtube-presentation .popup {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 100;\n}\n@media (min-width: 768px) {\n  .youtube-presentation .popup.opened {\n    display: block;\n  }\n}\n.youtube-presentation .popup .embeded {\n  position: absolute;\n  width: 50%;\n  height: 50%;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translateX(-50%) translateY(-50%);\n     -moz-transform: translateX(-50%) translateY(-50%);\n      -ms-transform: translateX(-50%) translateY(-50%);\n       -o-transform: translateX(-50%) translateY(-50%);\n          transform: translateX(-50%) translateY(-50%);\n}\n.youtube-presentation .popup .close {\n  position:absolute;\n  right: 0;\n  bottom: 100%;\n  cursor: pointer;  \n}\n\n.youtube-presentation .popup .close:before {\n  content: 'X';\n  display: block;\n  color: #000;\n  -webkit-border-radius: 50%;\n          border-radius: 50%;\n  cursor: pointer;\n  padding: .2rem;\n  font-size: 1rem;\n  width: 2rem;\n  text-align: center;\n  background-color: #fff;\n  margin-bottom: .2rem;\n}\n\n.youtube-presentation .video .link {\n  position: relative;\n  display: inline-block;\n}\n.video svg {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 86px;\n  height: 60px;\n  -webkit-transform: translateY(-50%) translateX(-50%);\n     -moz-transform: translateY(-50%) translateX(-50%);\n      -ms-transform: translateY(-50%) translateX(-50%);\n       -o-transform: translateY(-50%) translateX(-50%);\n          transform: translateY(-50%) translateX(-50%);\n}\n\nbody {\n   overflow-x: hidden;\n}\n\n\n/* On créer un container responsive */\n.youtube-presentation2,\n.youtube-presentation2 * {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.youtube-presentation2 {\n  margin-left: -1rem;\n  margin-right: -1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.youtube-presentation2:after {\n  content: '';\n  clear: left;\n  display: block;\n}\n\n/* Et deux colonnes responsive */\n.youtube-presentation2 .presentation,\n.youtube-presentation2 .video {\n   padding: 1rem;\n   float: left;\n   width: calc(100% - 2rem);\n   background-color: #e0e0e0;\n   margin: 1rem;\n   margin: 1rem;\n}\n\n@media (min-width: 480px) AND (max-width: 779px), (min-width: 992px) {\n\t.youtube-presentation2 .presentation,\n\t.youtube-presentation2 .video {\n\t   width: calc(50% - 2rem);\n\t}\n}\n\n/* Mise en forme de la présentation */\n.youtube-presentation2 .presentation *:first-child {\n  margin-top: 0;\n}\n.youtube-presentation2 .presentation *:last-child {\n  margin-bottom: 0;\n}\n\n/* Mise en forme de l'image vidéo*/\n.youtube-presentation2 .video *:first-child {\n  margin-top: 0;\n}\n.youtube-presentation2 .video .link {\n  max-width: 100%;  \n}\n.youtube-presentation2 .video .link img {\n  max-width: 100%;\n  background-color: #000;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  margin: 0;\n  margin-top: 1rem;\n}\n\n/* Mise en forme de la popup pour la vidéo*/\n.youtube-presentation2 .video .popup {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.youtube-presentation2 .video iframe {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n/* Affichage de la popup */\n.youtube-presentation2 .popup {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 100;\n}\n@media (min-width:480px) AND (min-height: 320px) {\n  .youtube-presentation2 .popup.opened {\n    display: block;\n  }\n}\n.youtube-presentation2 .popup .embeded {\n  position: absolute;\n  width: 50%;\n  height: 50%;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translateX(-50%) translateY(-50%);\n     -moz-transform: translateX(-50%) translateY(-50%);\n      -ms-transform: translateX(-50%) translateY(-50%);\n       -o-transform: translateX(-50%) translateY(-50%);\n          transform: translateX(-50%) translateY(-50%);\n}\n.youtube-presentation2 .popup .close {\n  position:absolute;\n  right: 0;\n  bottom: 100%;\n  cursor: pointer;\n}\n\n.youtube-presentation2 .popup .close:before {\n  content: 'X';\n  display: block;\n  color: #000;\n  -webkit-border-radius: 50%;\n          border-radius: 50%;\n  cursor: pointer;\n  padding: .2rem;\n  font-size: 1rem;\n  width: 2rem;\n  text-align: center;\n  background-color: #fff;\n  margin-bottom: .2rem;\n}\n\n.youtube-presentation2 .video .link {\nposition: relative;\ndisplay: inline-block;\n}\n.youtube-presentation2 .video svg {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 86px;\n  height: 60px;\n  -webkit-transform: translateY(-50%) translateX(-50%);\n     -moz-transform: translateY(-50%) translateX(-50%);\n      -ms-transform: translateY(-50%) translateX(-50%);\n       -o-transform: translateY(-50%) translateX(-50%);\n          transform: translateY(-50%) translateX(-50%);\n}\n\n.like-h1 {\n  color: #222;\n  margin: 32px 0 0;\n  font-weight: 400;\n  line-height: 1.3;\n  font-size: 1.5em;\n}\n.like-h2 {\n  color: #111;\n  margin: 32px 0 0;\n  font-weight: 400;\n  line-height: 1.3;\n  font-size: 1.17em;\n}", "title" : "Activer vos effets JavaScript en fonction de vos Media Queries", "urn" : "activer-vos-effets-javascript-en-fonction-de-vos-media-queries" }
{ "__v" : 0, "_id" : { "$oid" : "55abad466868ca087fbf864a" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48c9" } ], "content" : "Hier, c'était mon anniversaire. Et cette année, je ne m'en suis souvenu qu'avant-hier. Il ne me semble pas avoir passé une année sans que le mois de juillet arrivé, et même un peu avant, je ne me sois pas « impatienté » en attendant que le 18 arrive. Mais cette année, c'est comme si j'avais oublié de « m'impatienter ».\n\nAujourd'hui, j'ai mal à la tête, côté gauche, au dessus de l'oreille, et ce mal se prolonge jusqu'au dessus de ma tête et glisse jusqu'à ma tempe. C'est ténu, mais c'est le même mal de tête qu'hier, le jour de mon anniversaire, et que celui de la veille, et de la veille... et le même depuis maintenant deux semaines. Cette veille d'anniversaire, j'ai eu une accalmie. J'en ai certain jour, sans vraiment comprendre pourquoi. Avant ses deux dernières semaines, les maux de têtes étaient également chaque jour, mais pas nécessairement ciblés sur ce côté gauche. Avant le mois de mai, les maux de tête n'étaient pas tous les jours. Et avant le mois d'octobre de l'année dernière, les maux de tête n'étaient pas là.\n\nSi on analyse donc la progression de ces maux, en dehors de toutes causes environnementales, sociales ou physiques cela donne :\n - Dimanche 19 Octobre 2014 : premier mal de tête qui a cogné sur le côté gauche de mon crâne au dessus de l'oreille. Je m'en rappel car un tel mal de tête ne s'était jamais produit de toute ma vie. Ça cognait par saccade, c'était dérangeant, mais pas handicapant, juste très très désagréable. Puis cela marque le début de mes chaleurs au front et de mon hypersensibilité au touché frontal sans nécessairement pouvoir appeler ça des maux de tête. Le Nurofen qui était mon ami quand occasionnellement j'avais des maux de tête, ne changeait rien.\n - Samedi 16 Mai 2015 : après plusieurs mois de chaleur, de nausée, d'inquiétude, d'angoisse, de colique etc. Ce mal de tête qui le 19 Octobre a cogné du côté gauche, est apparu du côté droit de mon crâne, au dessus de l'oreille également. Depuis j'ai mal à la tête, tous les jours, à des endroits différents, mais tout est remis à zero la nuit en dormant. Le mal de tête apparaît une heure après le réveil, plus ou moins, et parfois se prolonge jusqu'à midi. Aucun médicament ne fait effet, sauf parfois du Co-doliprane et le très récent Relpax ou Zoromigro.\n - Depuis le 3 juillet 2015 : la majorité, voir la totalité des maux de tête qui réapparaissent chaque matin se trouvent sur le côté gauche, cependant, jusqu'au 12 juillet ils disparaissaient plus ou moins dans la journée, et cela n'a été gênant que deux jours pendant la semaine : des simples Dolipranne ont suffit à ré-apaiser mon mal dans la demi-heure à chaque fois.\n - Du 13 juillet 2015 à aujourd'hui, du matin au soir, du soir au matin, j'ai eu mal à ce côté gauche dans des proportions allant de ténus à presque insoutenable sans que aucun médicament ne change rien. Le 18, jour de mon anniversaire, avec ma première fêtes d'anniversaire surprise, deux Doliprannes et un anti-inflammatoire prescrit par le Neurologue en cas de dernier recours, j'ai passé ma journée à avoir mal.\n\nEn ajoutant les symptômes physiques qui ont accompagnés ses dates, et les examens cela donne :\n\n- Diverses prises de sang entre octobre et décembre qui ont montré un taux de lymphocyte un peu bas et de contre-examen m'étant en évidence le fait que celui-ci remontait progressivement\n - Cachet pour les maux de ventre accompagnant des selles molles mais seine à l'examen coprologique.\n\n- Nausées/maux de tête/prise au nez en fin décembre\n - J'ai eu un IRM cérébral avec l'avis du pratiquant disant RAS, juste un léger remaniement ethmoïdale.\n\n- Sans grosses améliorations en janvier/février\n - tentative de guérir une hypothétique sinusite aux antibiotique.\n\n- Tout Mars re-nausée/maux de tête/prise au nez \n - Cachet au carbone et anti-nauséeux.\n\n- D'Avril à Juin en complément diverse prises de sang, RAS, et un nouvel examen coprologique, RAS puis : \n - Allergologue qui diagnostique une Rhinite Chronique non allergique et qui me prescrit du Rhinocorne, depuis, plus de soucis.\n - Gastro-entérologue qui diagnostique des intestins irritables ainsi qu'un colon fonctionnant mal et qui me prescrit du Spagulax, depuis, plus de réel soucis. \n - Neurologue qui confirme le diagnostique IRM comme parfait et qui me donne un traitement de fond anti-migraine. Après 1 mois et demi, toujours en attente d'amélioration avec quelques nouvelles douleurs dans le bas des mollets, à la jointure du pied.\n\nEn ce qui concerne mon état psychologique :\n\nPour mon psy, et au vu de tous les examens antérieurs que j'ai pu faire, c'est parce que je me pause trop de questions et de problèmes que j'ai ses maux de tête. Alimenter par l'angoisse et la peur de mourir que j'ai eu ses derniers mois. Depuis que mes certitudes sur ma bonne santé ont été brisées par un corps qui m'a fait comprendre, pour la première fois de ma vie, que si la nature le souhaitait, je ne pourrais rien faire pour garder la forme. C'est très dure de penser qu'on n'est maître de son destin et de sa santé quand elle se dégrade sans que cela semble venir de nul part, et qu'on, ou le médecins ne semble rien pouvoir y faire. Pourquoi est ce que ça m'es arrivé maintenant ? On a toujours pas répondu à cette question...\n\nSi je perds un temps précieux à écrire tout ça, c'est parce que cela ne tournera plus dans ma tête une fois sorti de ma tête. Pourtant, j'ai l'impression que, maintenant que c'est écrit, c'est réel. Maintenant que mon histoire est « marqué sur le papier », je ne peux plus espérer que ça n'existe pas, et enfin me lever un matin en me disant : « Bon bah, je sais pas ce qui c'est passé, mais enfin sa semble fini. », ou que je puisse me dire « Je crois que ça s'améliore de mois en mois, ça va s'arrêter... ». Non, je n'en ai pas réellement l'impression en se qui concerne les maux de tête.\n\nMais j'écris sous les directives de mon psy, car je ne peux pas me résigner à avoir mal toute ma vie, et désespérer, je veux tout tenter. Mon psy m'assure que ça va passer, et que penser positivement et évacuer ce qui me tracasse de ma tête est la solution. Pourtant, j'étais vraiment sur qu'aujourd'hui, avec la magnifique journée que j'ai passé hier, les maux de têtes seraient plus ténus, comme pendant ma semaine de vacances. C'est maintenant sans compté le fait d'écrire tout ça qui me « prend la tête » comme ironiquement j'aime le dire ses derniers temps.\n\nJ'ai bien conscience que la vie, c'est pas des vacances, alors comment je vais faire pour arrêter ses maux de tête qui me semblent empirer quand la seule amélioration de ceux-ci semble liée à un environnement de vacances ? Pourquoi je ne peux pas simplement faire comme mes 26 dernières années : affronter les problèmes avec enthousiasme. Pourquoi je ne peux pas simplement profiter de mon bonheur auprès de ma Femme comme je l'ai fait ses 4 dernières années.\n\nEn tout cas, pour clore ce premier récit, pour ceux qui ne l'aurait pas compris, je suis né un 18 juillet il y a 27 ans. Je le marque, parce que je vais peut-être avoir tendance à l'oublier !\n\n\n\n\n\n- Hésitation à la medicine « alternative » car dernier recour avant le mur.\n- Explication de la signification du « plus mal à la tête », « accalmie ».\n- Ça me précoccupe d'avoir mal toujours au même endroit, j'ai lu qu'une personne avait toujours mal au même endroit car elle avait une petite tumeur inopérable tant qu'elle restait petite et qu'elle devrait vivre avec.\n- Je me demande comment un directeur de 55 ans déjà repéré comme pouvant faire des cancers à pu mourir d'une tumeur de la vésicule billiaire.\n- Le souvenirs donne l'impression que le temps est long", "dates" : { "published" : { "$date" : 1437314340000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "stylesheet" : "", "title" : "L'année où j'ai oublié mon anniversaire", "urn" : "l-annee-ou-j-ai-oublie-mon-anniversaire" }
{ "__v" : 0, "_id" : { "$oid" : "55df1d924bf5981b0760b95b" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "530cc2f27188099a66e9bcec" }, { "$oid" : "5310456355dfd5f7698d48b6" }, { "$oid" : "5310456355dfd5f7698d48bd" } ], "content" : "Je viens de (re)terminer la lecture du [Guide CSS Fr](http://guidecss.fr/) et j'ai eu envie d'apporter quelques modifications et ajouts à ces très bons conseils. Cet article va donc en quelque sorte constituer mes conventions en matière de création et maintenance HTML et CSS. Elles sont donc identiques à ce qui est écrit sur [Guide CSS Fr](http://guidecss.fr/) à cet article prêt !\n\n<figure>\n<img src=\"http://blog.haeresis.fr/upload/image/css.jpg\" alt=\"Anatomie d'une règle CSS\" style=\"max-width: 100%\">\n<figcaption>Affreux sélecteur... http://www.puce-et-media.com/</figcaption>\n</figure>\n\nN'ayant rien à ajouter aux parties autres que « [4. Convention de nommage](http://guidecss.fr/convention.html) », je passe directement à mes propres conventions de nommage en vous sensibilisant à l'anatomie d'une page HTML.\n\n**Je finirai néanmoins par pointer du doigt une erreur, sinon la seule, en ce qui concerne la totale inutilité du préfixe `.js-` destiné à séparer le visuel du fonctionnel**.\n\n*Note : Tous les exemples d'inclusion de fragment HTML sont tirés de [NodeAtlas](http://haeresis.github.io/NodeAtlas/) mais c'est la même chose avec vos Frameworks préférés.*\n\n\n\n\n\n## Composition d'une page ##\n\nChaque page HTML est composée par :\n- un *Gabarit* de page que nous nommerons ici **Template**,\n- des *Composants* que nous nommerons ici **Components** et\n- des *Patrons de conception* que nous nommerons ici **Patterns**.\n\nAvant de nous attacher au Template qui représente la structure qui va accueillir nos Components sur une page, intéressons nous au plus important : les Components eux-mêmes.\n\n\n\n### Les Components (Composants) ###\n\n#### Structure ####\n\nLes Components sont des fragments de HTML qui découpent une page de contenu HTML de manière logique et consistante. Bien qu'ils puissent être spécialisés et quasiment dédiés à un seul endroit —comme le Header de site—, ils sont prévus pour être :\n- **Déplaçable** dans une page.\n- **Réutilisable** sur d'autres pages.\n\nÀ cet effet, il est généralement bon d'écrire un Component dans un fichier dédié. Par exemple dans le dossier `components` de [NodeAtlas](http://haeresis.github.io/NodeAtlas/), on pourrait créer un `hearder.htm` et l'utiliser avec `<%- include('header.htm') %>` dans un Template de page HTML.\n\nUn Component est obligatoirement composé de deux `<div>` imbriquées (ou toutes autres balises de type `block`) pour pouvoir se suffire à lui-même et respecter n'importe quel design sans être disposé dans un Template Complexe (voir plus loin).\n\nLa première `<div>` représente la place totale qu'occupera le Component, design visuel inclus (background généralement) et peut varier sémantiquement avec : `header`, `footer`, `section`, `article`, `aside` ou `nav`. Nous reviendrons plus bas sur cet aspect.\n\nLa seconde `<div>` représente la limite du contenu en lui-même (1200px maximum habituellement). Elle contiendra toujours la classe `.ui` (par exemple) qui nous permet de définir la taille maximale d'affichage du contenu des Components, pour tous les Components, quand ils sont libres (utilisés en dehors d'une grille, ce que nous verrons plus loin).\n\n**Voici par exemple un Component HTML dans `components/name-of-component.htm`**\n\n```html\n<div class=\"name-of-component\">\n  <div class=\"ui\">\n    <!-- Subparts of component here. -->\n  </div>\n</div>\n```\n\nLa `<div>` de classe `.ui` fixe la taille maximale dans chaque composant grâce à par exemple...\n\n**...ces directives CSS dans `assets/stylesheets/common.css`**\n\n```css\n.ui {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n}\n```\n\n**ou ponctuellement dans `assets/stylesheets/component.name-of-component.css` avec**\n\n```css\n.name-of-component .ui {\n  max-width: 1024px;\n}\n```\n\nMais aucune taille `width` ou `height` ne doit être forcée de manière à ce que le contenu du composant soit toujours fluide, quelque soit sa place dans une grille.\n\n> **Pourquoi deux « div » imbriquées et une « .ui » partout ?**\n\n> Je vais vous laisser voir cela à travers les divers exemples d'affichages réalisables sans Template Complexe (pas de grille) et **à partir du même code HTML**.\n   - [Toute la place en alternance : type « One Page »](http://codepen.io/Haeresis/pen/pJMBEg),\n   - [inclus dans une page : type « Page Standard »](http://codepen.io/Haeresis/pen/NqQVXv),\n   - [les deux exemples précédents en alternance : type « Design »](http://codepen.io/Haeresis/pen/PqMvQW),\n   - [sur toute la page : type « BackOffice »](http://codepen.io/Haeresis/pen/mJNYxE),\n   - [grille de composant : type « Bootstrap »](http://codepen.io/Haeresis/pen/vOowjL),\n   - [un affichage hors flux : type « Popup »](http://codepen.io/Haeresis/pen/KpOLeR),\n   - [un affichage en absolue : type « App Mobile »](http://codepen.io/Haeresis/pen/jPgopz) ou encore\n   - **[la totalité en une page](http://codepen.io/Haeresis/pen/bdXymY)**.\n\n#### Nommage ####\n\nDans le [Guide CSS Fr](http://guidecss.fr/), il est expliqué que si le nom du Component est : `my-component`, alors celui d'un sous Component serait `my-component__text` et une version alternative de se Component serait permise avec la classe `my-component--alternative` à la place. Pour ma part j'ai opté pour quelque chose de différent pour des questions de lisibilité du `__` ce qui nous permet de ne pas se soucier de séparer les classes par deux espaces.\n\n1. Le nom du Component est unique. Par exemple `.presentation-items`.\n   ```html\n  <div class=\"presentation-items\">\n    <div class=\"ui\">\n      <!-- Subparts -->\n    </div>\n  </div>\n```\n\n2. Une sous partie de Component est nommée par exemple `.presentation-items--title`, `.presentation-items--content` ou encore `.presentation-items--item--title`.\n   ```html\n  <div class=\"presentation-items\">\n    <div class=\"ui\">\n      <div class=\"presentation-items--title\">\n        <!-- Title -->\n      </div>\n      <ul class=\"presentation-items--items\">\n        <li class=\"presentation-items--item\">\n          <div class=\"presentation-items--subtitle\"> <!-- ou `presentation-items--item--title` -->\n            <!-- Subtitle -->\n          </div>\n          <div class=\"presentation-items--content\">\n            <!-- Content -->\n          </div>\n        </li>\n      </ul>\n    </div>\n  </div>\n```\n   et est adressé en CSS directement par son sélecteur CSS\n   ```css\n   .presentation-item {\n     background-color: #f00;\n   }\n   .presentation-item--title {\n     font-size: 1.4rem;\n   }\n   .presentation-item--content {\n     padding: 20px;\n   }\n```\n\n3. La version alternative d'un Component n'est pas préfixée par son nom. Au lieu de cela, le comportement alternatif est nommé et est préfixé par `.as-`. C'est grâce au cumul des classes et non à son changement que l'on appliquera la différence. Par exemple `as-carousel`.\n   ```html\n  <div class=\"presentation-items as-carousel\">\n    <div class=\"ui\">\n      <!-- ... -->\n    </div>\n  </div>\n```\n   qui est adressé en CSS grâce à la cascade\n   ```css\n   /* ... Partie précédente ... */\n\n   .presentation-item.as-carousel { /* Cas rare de double sélection permise. */\n     background-color: #00f;\n   }\n   /*.presentation-item*/.as-carousel .presentation-item--title {\n     font-size: 1.2rem;\n   }\n   /*.presentation-item*/.as-carousel .presentation-item--content {\n     padding: 10px;\n   }\n```\n   ou encore en Less\n   ```css\n   .presentation-item {\n     background-color: #f00;\n     &.as-carousel {\n       background-color: #00f;\n     }\n   }\n   .presentation-item--title {\n     font-size: 1.4rem;\n   }\n   .presentation-item--content {\n     padding: 20px;\n   }\n\n   /*.presentation-item*/.as-carousel {\n     .presentation-item--title {\n       font-size: 1.2rem;\n     }\n     .presentation-item--content {\n       padding: 10px;\n     }\n   }\n```\n\n\n\n### Le Template (Gabarit de page) ###\n\nLe Template est la carcasse qui va accueillir les Components. On appel souvent cette carcasse la Grille ou Grid. Dans son état le plus simple c'est une page HTML sans grille, sans classe de Template : une page uniquement composé de Components les uns à la suite des autres.\n\nLe contenu de la page HTML ne doit jamais être immédiatement sous le `<body>` mais dans une `<div>` de classe `layout` par exemple. Cela permet d'ajouter les scripts HTML à l'extérieur et de pouvoir profiter de `:nth-child(x)` à l'intérieur sans que le nombre ou la place des items soient altérés par l'ajout d'un `<script>` (En ce qui concerne les `<link>`, ça se trouve dans le `<head>`).\n\n\n#### Template Simple (sans classe) ####\n\nVoici à quoi ressemble une page HTML sans grille qui accueil nos Components.\n\n```html\n<body>\n  <!-- Minimum of `script` tags for boot -->\n  <div class=\"layout\">\n    <!-- Loop of Components here. -->\n  </div>\n  <!-- All `script` tags for 99% of Javascript here. -->\n</body>\n```\n\n#### Template Nommé ####\n\nIl est intéressant d'ajouter un nom à chaque Template de manière à pouvoir changer, pour un Template précis, le comportement de n'importe quel Component.\n\n```html\n<body class=\"home\"> <!-- Name of Template -->\n  <div class=\"layout\">\n    <!-- Loop of Components here. -->\n  <div>\n</body>\n```\n\nEn mettant ce nom au sommet de toute balise HTML, cela permet de manipuler les variations CSS de tous les Patterns et Components en fonction du Template. En incluant donc la partie Header et Footer de votre site et même le conteneur `.layout` global. Je peux donc changer l'arrière plan du site, spécifiquement pour le Template de classe `home`.\n\n**Avec ce code CSS par exemple dans `assets/stylesheets/common.less`**\n\n```css\n.layout {\n  background-image: none;\n}\n\n/* ... */\n\n.home {\n\n  /**\n   * Extend `.layout` in common.less\n   */\n  .layout {\n    background-image: url('../media/images/ads.png');\n  }\n}\n```\n\n#### Template Complexe ####\n\nIl est possible de créer des Templates plus complexes en permettant de les habiller avec un système de grille pour avoir une page plus ordonnée.\n\n**Un exemple de Components répartis dans des `.area` destinées à être habillées par une grille.**\n\n```html\n<body class=\"home\">\n  <div class=\"layout\">\n    <section class=\"area for-main\">\n      <div class=\"part for-overview\">\n        <!-- Loop of Components here. -->\n      </div>\n      <aside class=\"part for-ads\">\n        <!-- Loop of Components here. -->\n      </aside>\n    </section>\n    <section class=\"area for-presentation\">\n      <!-- Loop of Components here. -->\n    </section>\n    <aside class=\"area for-also\">\n      <!-- Loop of Components here. -->\n    </aside>\n  </div>\n</body>\n```\n\n**avec un habillage de grille (LESS avec Bootstrap par exemple)**\n\n```css\n@import (reference) 'bootstrap/bootstrap';\n\n.home {\n  .area {\n     .container; /* Add padding left and right... */\n  }\n  .for-presentation {\n    padding: 0; /* ...and remove it. */\n  }\n\n  .part {\n    .make-sm-column(6);\n  }\n}\n```\n\nRien ne vous empêche non plus de changer la grille (l'application CSS sur le Template) en fonction des besoins, ce que vous ne pourriez pas faire si vous appliquer des Patterns comme `.col-xs-6` directement dans la grille (nous verrons cela plus bas).\n\nPar exemple en ajoutant `.with-ads` à votre Template, vous pourriez faire varier votre feuille CSS de manière à accueillir de la publicité de part et d'autre de la page.\n\n```html\n<body class=\"home with-ads\">\n  <div class=\"layout\">\n    <!-- Template Grid -->\n  </div>\n</body>\n```\n\n\n\n### Les Patterns (Patrons de conception) ###\n\nCe sont des modèles prêts à l'emploi destinés à être apposés sur une balise, ou, une balise contenant un ensemble de balise. Lors de sa définition, le Pattern nécessite « obligatoirement » un commentaire CSS sur son utilisation dans un code HTML.\n\nContrairement aux Templates et Components, les Patterns ne sont pas ciblés depuis la feuille CSS vers une classe « sémantique » mais mis à la main sur une balise HTML. En ce sens, ils sont parfait pour permettre à des rédacteurs de contenu de faire de la mise en page ou faire votre grille CSS dans le Template de manière [HTML-Driven](http://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/) plutôt que [CSS-Driven](http://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/).\n\nDans nos exemples précédents, `.container`, `.area` et `.part` pourrait être des Patterns avec chacun un rôle « raccourci » spécifique. Les Patterns peuvent donc servir dans les Components, mais également dans les Templates en fonction du besoin.\n\nVoici des exemples de Patterns :\n\n```css\n/** \n  <div class=\"text-center\">\n    Ce texte est centré.\n  </div>\n */\n.text-center {\n  text-align: center;\n}\n\n/** \n  <div class=\"img-responsive\">\n    <img src=\"fit-container-in-all-size.png\">\n  </div>\n * or\n  <img class=\"img-responsive\" src=\"fit-container-in-all-size.png\">\n */\n.img-responsive {\n  max-width: 100%;\n  img {\n    max-width: 100%;\n  }\n}\n\n/** \n  <button class=\"btn-right-arrow\">\n    <span>Click Me</span>\n  </button>\n */\n.btn-right-arrow {\n  position: relative;\n  span {\n    display: inline-block;\n    padding: 4px 8px;\n    position: relative;\n    z-index: 2;\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    right: 0;\n    .translateY();\n    background-image: url('../media/images/arrow.png');\n    width: 16px;\n    height: 16px;\n  }\n}\n\n/** \n  <div class=\"container\">\n    <!-- Any blocks or inlines -->\n  </div>\n */\n.container {\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n}\n```\n\nLes Patterns étant applicables dans tous les Components, un comportement spécifique à un Component peut-être spécifié dans le fichier du Component de cette manière :\n\n**Exemple de Pattern CSS surchargé spécifiquement pour un Component**\n\n```css\n/** \n  <div class=\"color-alternative\">\n    I am white !\n  </div>\n */\n.color-alternative {\n  color: #fff;\n}\n\n/* ... */\n\n.background-white-component {\n  background-color: #fff;\n\n  /**\n   * Extend `.color-alternative` in common.less\n   */\n  /* Pattern */.color-alternative {\n    color: #888;\n  }\n}\n```\n\n**Mon conseil : un Pattern doit toujours être placé dans une zone dédiée au Contenu et non au Composant en lui-même. Il est parfait dans du HTML qui pourrait avoir vocation à finir dans une base de donnée de contenu. Aussi n'utilisez jamais un `.text-right` sur un `.component--subcomponent` car rien ne garanti que dans un autre contexte (Template), le texte ne serait pas à gauche. Et en ce qui concerne leur utilisation dans les Template : tout dépend si vous préférez intervertir les Templates HTML quand la carcasse varie ou ajouter une classe `.with-this-variation` comme vu précédemment.**\n\n\n\n\n\n## CSS et JS : une seule classe pour les gouverner toutes ##\n\nNous y voilà, au point qui à lui seul m'a donné l'envie d'écrire cet article.\n\n> Le [Guide CSS FR](http://guidecss.fr/convention.html) nous dit « *N'utilisez jamais une classe de style CSS pour vos ancres JavaScript. Associer un comportement javascript à une classe de style signifie que nous ne pourrons jamais avoir l'un sans l'autre.* » et nous donne comme exemple : « *is-sortable  js-is-sortable* »\n\n> **Cela est faux.** Je m'explique.\n\n1. Dans le cas des Patterns ; une unique classe doit se suffire à elle-même. C'est précisément parce qu'elle a vocation à être apposée à la main qu'il ne doit pas être possible de gérer le visuel et le JavaScript indépendamment.\n\n   Soit tous les `.btn-popup` ouvre une popup, soit aucun. Il n'y a pas de raison que les `.btn-popup` n'ouvre pas les popups et que les `.btn-popup.js-btn-popup` les ouvre. Le `.btn-popup` se suffit à lui-même. Si toutefois on souhaite un bouton identique au `.btn-popup`, sans que celui-ci n'ouvre de popup, c'est dans la CSS et le HTML que ça se passe avec par exemple les règles CSS `.btn-popup, .btn-foo { /* same design */ }` que l'on applique sur l'élément HTML `.btn-foo`.\n   \n   Une autre manière de faire serait alors les règles CSS `.btn-foo { /* design */ } .is-popup-openable { cursor: pointer; }` appliqué sur un élément HTML `.btn-foo.is-popup-openable`. Comprenez bien ici que le `cursor: pointer` et l'action de rendre cliquable sont encore une fois liés à une unique classe qui est `.is-popup-openable` et qu'il n'y a pas de sens à utiliser `.is-popup-openable.js-is-popup-openable`. Soit la classe y est et l'élément est cliquable avec une main, soit elle n'y ai pas et l'élément n'est pas cliquable sans main.\n\n2. Dans le cas des Components et des Templates, c'est pareil. Il est cependant envisageable que dans un cas on souhaite afficher un Component de manière standard, et dans un autre cas on souhaite lui faire exécuter un script pour par exemple gérer un défilement automatique d'item ; une visionneuse. \n\n   Cela n'a pas de sens que `.presentation-items` ne soit pas un visionneur mais que `.presentation-items.js-presentation-items` en soit un. Non, cela a plus de sens que `.presentation-items` n'en soit pas nécessairement un mais que `.presentation-items.as-viewer` en soit un.\n\n   Pas besoin de préciser `.js-` car c'est au moment de sélectionner un Component par la classe le désignant (et sa variation ou non) dans nos fichiers JavaScript qu'on décide qu'un code JavaScript doit s'appliquer dessus : et absolument pas parce que nous l'avons décidé en ajoutant la même classe avec `.js-` devant.\n\n   *Exemple : Il est possible que j'ajoute du JavaScript pour faire fonctionner `.presentation-items` pour par exemple faire du Lazy Loading de contenu ou que je n'en utilise pas sur `.presentation-items.as-viewer` car mes transitions automatiques sont gérées en CSS3 avec transition et animation.*\n\n**En conclusion : style et comportement doivent être liés à la même classe. Si une autre classe doit être ajoutée, c'est pour décrire un _Autre_ comportement visuel et/ou fonctionnel.**\n\n\n\n\n\n## Des Components réellement déplaçable partout ##\n\nLa problématique lorsque l'on déplace des fragments de HTML, c'est de ne plus respecter l'arborescence des `<h1-h6>`. Car si un Component possède un `<h1>`, alors il peut difficilement être mis une fois dans le haut de la page et une fois en bas sans faire hurler au scandale les experts SEO. Réglons ce problème.\n\n\n\n### Rappel sur les `block` sémantiques ###\n\nSachez qu'en HTML5, [il peut y avoir plus d'un `<h1>` par page](http://blog.lesieur.name/les-balises-h1-multiples-autorisees-en-html5/) mais pas à n'importes quelles conditions.\n\nSous la balise `<body>` : l'intégralité des `<h1-h6>` dispersés entre les balises forment un index hiérarchique. L'élément `<h1>` doit être unique. Mais les balises `<section>`, `<article>`, `<aside>` et `<nav>` remettent les compteurs à zéro et sous chacune de ces balises il est de nouveau possible de disperser des `<h1-h6>` avec un seul `<h1>`, etc.\n\nChaque nouvel espace de `<section>`, `<article>`, `<aside>` et `<nav>` peut lui-même contenir un `<header>` et un `<footer>`. L'importance des `<h1-h6>` est donc à présent bi-directionnel voir tri-directionnel : un `<h2>` est d'autant plus important qu'il se trouve directement dans `<body>` à l'intérieur d'un `<header>` au contraire d'un `<h1>` sous une pile de plusieurs `<section>`. Il est même probable que un `body > article > header > h1` dans une page avec une unique balise `<article>` est plus de poids que le `body > header > h1` du titre de page (mais je spécule, ce n'ai pas moi qui fait les règles des algorithmes).\n\nEn tout cas le voilà ! Notre moyen de rendre déplaçable les Components comme des sortes de module pouvant chacun contenir : un `<header>`, un `<footer>` et une hiérarchie `<h1-h6>`.\n\n\n\n### L'application simple : faire gérer le cloisonnement par le Template ###\n\nLe moyen le plus simple est de gérer le cloisonnement avec le Template. Imaginons ce Template :\n\n```html\n<body class=\"home\">\n  <div class=\"layout\">\n    <header class=\"area for-header\">\n      <!-- Loop of Components here. -->\n    </header>\n    <section class=\"area for-main\">\n      <div class=\"part for-overview\">\n        <!-- Loop of Components here. -->\n      </div>\n      <aside class=\"part for-ads\">\n        <!-- Loop of Components here. -->\n      </aside>\n    </section>\n    <section class=\"area for-presentation\">\n      <!-- Loop of Components here. -->\n    </section>\n    <aside class=\"area for-also\">\n      <!-- Loop of Components here. -->\n    </aside>\n    <footer class=\"area for-footer\">\n      <!-- Loop of Components here. -->\n    </footer>\n  </div>\n</body>\n```\n\nainsi que ce Component :\n\n```html\n<div class=\"component\">\n  <div class=\"ui\">\n    <header class=\"component--header\">\n      <h1>Title<h1>\n    </header>\n    <div  class=\"component--content\">\n      <h2>Subtitle</h2>\n      <p>Text</p>\n      <p>Text</p>\n    </div>\n    <footer class=\"component--footer\">\n      <h3>Lien<h3>\n    </footer>\n  </div>\n</div>\n```\n\nLa contrainte avec ce composant est donc qu'il ne pourra jamais être placé dans `.for-header` ni dans `.for-footer` sous peine d'injecter un double `<header>` et `<footer>` dans le `<body>`. Cela peut être évité en estimant que les Components de Header et de Footer globaux sont spécifiques à ses zones et ne seront pas déplaçable (comme c'est pratiquement toujours le cas).\n\nOn voit cependant que hors-mi ces zones, notre Component peut atterrir un peu partout ou il le souhaite sans que cela ne pose de soucis.\n\n\n\n### L'application complexe : faire gérer le cloisonnement au moment de l'injection du Component, hors Template et hors Component ###\n\nPenchons nous de nouveau sur [NodeAtlas](http://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/) qui va nous permettre de créer des injections de Component dynamique ! Vous pouvez faire des systèmes similaires de vos côtés avec vos outils ou Frameworks préférés. Cela n'est qu'un brouillon car on pourrait même envisager l’injection de Component dans des Component, etc.\n\nAvec...\n\n1. Le webconfig suivant `webconfig.json` :\n\n   ```js\n{\n  \"commonController\": \"common.js\",\n  \"routes\": {\n    \"/\" : {\n      \"template\": \"home.htm\",\n      \"variation\": \"home.json\"\n    }\n  }\n}\n```\n\n2. Le Template `templates/home.htm` :\n\n   ```html\n<!-- ... -->\n<body class=\"home\">\n  <div class=\"layout\">\n    <div class=\"area for-header\">\n      <%- includeComponent('placeholder-header') %>\n    </div>\n    <div class=\"area for-main\">\n      <div class=\"part for-overview\">\n        <%- includeComponent('placeholder-overview') %>\n      </div>\n      <div class=\"part for-ads\">\n        <%- includeComponent('placeholder-ads') %>\n      </div>\n    </div>\n    <div class=\"area for-presentation\">\n      <%- includeComponent('placeholder-presentation') %>\n    </div>\n    <div class=\"area for-also\">\n      <%- includeComponent('placeholder-also') %>\n    </div>\n    <div class=\"area for-footer\">\n      <%- includeComponent('placeholder-footer') %>\n    </div>\n  </div>\n</body>\n<!-- ... -->\n```\n\n3. Le Fichier de variation `variations/home.json` :\n\n   ```js\n{\n  \"components\": {\n\n    \"placeholder-header\": [{\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"div\"\n      }\n    }, {\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"header\"\n      }\n    }],\n\n    \"placeholder-overview\": [{\n      \"path\": \"templates/three-boxes.htm\",\n      \"variation\": {\n        \"mainTag\": \"section\"\n      }\n    }],\n\n    \"placeholder-ads\": [{\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"aside\"\n      }\n    }],\n\n    \"placeholder-presentation\": [{\n      \"path\": \"templates/three-boxes.htm\",\n      \"variation\": {\n        \"mainTag\": \"article\"\n      }\n    }],\n\n    \"placeholder-also\": [{\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"aside\"\n      }\n    }],\n\n    \"placeholder-footer\": [{\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"footer\"\n      }\n    }, {\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"div\"\n      }\n    }, {\n      \"path\": \"templates/component.htm\",\n      \"variation\": {\n        \"mainTag\": \"div\"\n      }\n    }]\n\n  }\n}\n```\n\n4. Le Component `components/component.htm` :\n\n   ```html\n<%- sc('<section class=\"banner\">', component) %>\n  <div class=\"ui\">\n    <%- sc('<header class=\"component--header\">', component) %>\n      <%- sc('<h1>', component) %>Title<%- sc('</h1>', component) %>\n    <%- sc('</header>', component) %>\n    <div  class=\"component--content\">\n      <%- sc('<h2>', component) %>Title<%- sc('</h2>', component) %>\n      <p>Text</p>\n      <p>Text</p>\n    </div>\n    <%- sc('<footer class=\"component--footer\">', component) %>\n      <%- sc('<h3>', component) %>Lien<%- sc('</h3>', component) %>\n    <%- sc('</footer>', component) %>\n  </div>\n<%- sc('</section>', component) %>\n```\n\n...on pourrait parvenir à nos fins. Pendant la réalisation de nos Components on utilise toujours une `<section>`. C'est au moment d'injecter le Component que l'on décide grâce à mainTag quelle balise globale va remplacée `<section>`. On s'assurerait également de transformer tous les `<header>` en `<div class=\"header-like\">` (etc.) dans le cas où le mainTag serait `div`, `header` ou `footer`.\n\nVoici pour les petits curieux le code [NodeAtlas](https://github.com/Haeresis/NodeAtlas) de `comtrollers/common.js` qu'il faut pour faire fonctionner tout ça.\n\n- [Contenu du fichier `controller/common.js`](http://codepen.io/Haeresis/pen/jbNVYa/?editors=001)\n\n#### De la sémantique automatique ####\n\nBon, **vous conviendrez que notre Component est assez laid**, et ça rend la chose faussement complexe. Je vous propose de plutôt maintenir un fichier `components/component.htm` comme celui-ci :\n\n```html\n<section$ class=\"banner\">\n  <div class=\"ui\">\n    <header$ class=\"component--header\">\n      <h1$>Title</h1$>\n    </header$>\n    <div  class=\"component--content\">\n      <h2$>Title</h2$>\n      <p>Text</p>\n      <p>Text</p>\n    </div>\n    <footer$ class=\"component--footer\">\n      <h3$>Lien</h3$>\n    </footer$>\n  </div>\n</section$>\n```\n\ngrâce au projet [ComponentAtlas](https://github.com/Haeresis/ComponentAtlas) qui est un module additionnel de [NodeAtlas](https://github.com/Haeresis/NodeAtlas). Il permet l'inclusion de Component en cascade, ne touchera à aucunes balises sans $ et permettra de transformer ceci :\n\n```html\n<section$ class=\"component\">\n  <header$ id=\"test\">header</header$>\n  <footer$ class=\"test\">footer</footer$>\n  <h1$ class='test'>h1</h1$>\n  <h2$ class='test' id=\"test\">h2</h2$>\n  <h3$ id=\"test\" class=\"test\">h3</h3$>\n  <h4$ id=\"test\" class='test'>h4</h4$>\n  <h5$ id='test' class='test'>h5</h5$>\n  <h6$>h6</h6$>\n</section$>\n```\n\nen ceci :\n\n```html\n<header class=\"component\">\n  <div class=\"header-like\" id=\"test\">header</div>\n  <div class=\"footer-like test\">footer</div>\n  <div class='h1-like test'>h1</div>\n  <div class=\"h2-like test' id=\"test\">h2</div>\n  <div class=\"h3-like test\">h3</div>\n  <div class='h4-like test'>h4</div>\n  <div class='h5-like test'>h5</div>\n  <div class=\"h6-like\">h6</div>\n</header>\n```\n\nsi le `maintTag` était `header` ou de le transformer en ceci :\n\n```html\n<section class=\"component\">\n  <header id=\"test\">header</header>\n  <footer class=\"test\">footer</footer>\n  <h1 class='test'>h1</h1$>\n  <h2 class='test' id=\"test\">h2</h2>\n  <h3 id=\"test\" class=\"test\">h3</h3>\n  <h4 id=\"test\" class='test'>h4</h4>\n  <h5 id='test' class='test'>h5</h5>\n  <h6>h6</h6>\n</section>\n```\n\nsans `mainTag` de précisé.", "dates" : { "published" : { "$date" : 1440685440000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Conventions HTML et CSS orientés composants", "urn" : "conventions-html-et-css-orientes-composants" }
{ "__v" : 0, "_id" : { "$oid" : "55edf67336a8eee50213dd53" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [], "content" : "« Que fait Google à longueur de journée ? Il indexe du texte. Comment les visiteurs arrivent sur mon site ? via Google. C.Q.F.D. ». J'adore cette citation, elle provient de l'article « [L'ère post PSD](http://davidl.fr/blog/fin-psd.html) » que j'ai découvert et lu une larme à l'œil. Il a d'autant plus de poids pour moi que son auteur adore Photoshop. J'ai toujours voulu parlé du sujet, et je me lance.\n\n\n\n\n\n## L'ère Photoshop ##\n\n### Il y a un vrai lobying autour de Photoshop ###\n\nOn embauche des profiles pour faire des maquettes de site web « à tout va », dans des déclinaisons « Desktop » / « Tablette » / « Mobile » ou encore on fournit la même page avec 17 contenus différents. Pourquoi fait-on ça ? C'est vrai : c'est tellement long et fastidieux de refaire la même page, trente fois, qu'une fois cette étape terminée, les PSDs ne changent plus. Quand on sait que tout ce beau monde peut frôler la trentaine de fichier avec la même redondance de visuel et faire quelques Gigas de transfert : on se demande vraiment où son les avantages :\n\n- La possibilité d'**évolution** ? De la home, surement, mais ça s'arrête ici.\n- L'espace de **stockage**. Pas vraiment, c'est assez lourd beaucoup de PSD.\n- La rapidité de **transfert**, Non plus du coup.\n- La facilité de **maintenance** ? Joker.\n\nAlors ? Pourquoi ? Parce que vendre à la maquette rapporte ? Et que c'est facilement justifiable ? Parce qu'on à toujours fait comme ça pour produire des mises en page figé ? Parce qu’on n'envisage pas que quelqu'un embauché pour faire du Photoshop ne puisse faire du HTML/CSS ? Si les maquettistes n'ont qu'une vague idée de comment est habillée une page web, comment peuvent-t ils en améliorer les processus de création ? \n\nPourquoi ne pas simplement se concentrer sur l'identité visuelle (atmosphère, typographie, logos) avec Photoshop pour fournir des Guides de style/Chartes graphiques de qualité et laisser le processus de gabarit Responsive Design HTML... aux intégrateurs HTML ! Un long processus auquel il faudrait habituer le client et qui serait une mine d'or pour l'équipe d'intégration qui pourrait fournir de vrai maquette à valider, dans un navigateur, en vrai !\n\n\n\n### Donnez le doigt, perdez le bras ! ###\n\nPour la création de site, ce sont ces PSD qui galvanisent le processus complet de fabrication d'un site web. Visuel, Structure, Hiérarchie, Spécifications, Processus, Validation et même... Contenu ! Tout peut y passer. On se retrouve à devoir respecter un écart entre chaque boite à la règle alors que cela n'a de sens pour une seule et unique taille, à parcourir le nom des liens pour savoir quelle page se trouve derrière quelle page ou à regarder le nom des fichiers pour connaître l'ordre des interactions inter-page. On se retrouve à devoir se justifier sur des incohérences de style inter-PSD pour lequel les PSD sont le Saint-Graal.\n\nMontrez aux clients une zone de texte pour discuter d'un contenu et ils vous diront que ce n'est pas le bon texte quand ils ne vous diront pas qu'ils veulent changer la couleur du pied de page. Au final, **les développeurs web finissent par devoir posséder Photoshop** pour travailler, et le site web se résume à devoir respecter le plus fidèlement possible un visuel qui n'est pas adapté pour les périphériques et même, le contenu...\n\nÀ qui la faute ? **Certainement pas au client**.\n\n\n\n\n## La clé de voûte du site Internet ##\n\nContenu, contenu, contenu et contenu. Voici dans l'ordre les étapes de développement d'un site web.\n\n> 1. Pour qui ? ... Ambiance, Idée. \n2. Aménager son contenu ... Wireframe / Gabarit.\n3. Trouver l'identité visuel en respectant les Guidelines de la marque ... Concepts / Guide de Style\n4. Création du HTML ... Sémantique / Liaison au contenu référençable (BDD, fichiers).\n5. Habillage CSS ... Responsive Web Design ... Interaction JavaScript ... chargement asynchrone.", "dates" : { "published" : { "$date" : 1441658460000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : false }, "script" : "", "stylesheet" : "", "title" : "Les PSD ne sont pas des sites web !", "urn" : "les-psd-ne-sont-pas-des-sites-web" }
{ "__v" : 0, "_id" : { "$oid" : "5613f26670877cd335a4b897" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48bc" }, { "$oid" : "5310456355dfd5f7698d48be" }, { "$oid" : "5310456355dfd5f7698d48c8" } ], "content" : "Si vous avez déjà tenté d'[installer des modules NPM pour Node.js](http://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/#la-documentation-les-modules-et-le-principe) via la commande `npm install <package> [options]` sous Windows, vous avez probablement déjà eu des soucis d'installation et abandonné l'idée. Peut-être même que vous ne vous êtes pas lancé dans l'aventure Node.js pour ces raisons ? Effectivement, certains modules ont besoin de **Python** pour s'installer et d'autres de **Visual Studio**. Il y en à même, plus rare, qui on besoin de **GIT**.\n\nPar exemple, [NodeAtlas](https://github.com/Haeresis/NodeAtlas) est un module qui nécessite que Python soit installé pour que les fonctions permettant l'optimisation d'images s'installent correctement sous Windows. [Socket.io](https://github.com/socketio/socket.io) a, lui, besoin de Visual Studio pour être installé sans quoi il ne fonctionnera pas.\n\nVoici **la procédure d'installation des pré-requis nécessaires pour faire fonctionner Node.js et tous ses modules NPM sous Windows** ainsi qu'une aide à la résolution de problèmes divers après installation.\n\n\n\n\n\n## Étape 1 : Installer Python ##\n\nPython 2.7 (et non les versions 3.X ou 2.6.X et précédente) est requis par l'installeur npm pour installer les addons à compiler.\n\n1. Rendez-vous sur [python.org](https://www.python.org/) pour [télécharger la dernière version stable de Python 2.7](https://www.python.org/download/releases/2.7/) du Windows MSI Installer afin d'installer la version x86 ou x86-64 en fonction de votre système d'exploitation.\n\n2. Lancez l'installeur et assurez vous d'ajouter Python à votre variable d'environnement PATH.\n\n3. Acceptez l'« installation pour tous les utilisateurs ».\n\n4. Acceptez le chemin d'installation par défaut « C:\\Python27 ».\n\n\n\n\n\n## Étape 2 : Installer GIT ##\n\nGIT est nécessaire pour l’installation de package en provenance de GitHub ou autre plateforme GIT. Bien que ces modules soient rares, il ne sont pas inexistant. Vous pourrez donc également les installer.\n\n1. Rendez-vous sur [git-scm.com](http://git-scm.com/download) et téléchargez la dernière version pour Windows.\n\n2 Lancez l'installeur.\n\n3. Acceptez la localisation par défaut.\n\n4. Accepter l'icône de démarrage menu.\n\n5. Accepter les composants associés.\n\n6 Modifiez « Adjusting your PATH environment » to « Use Git from Windows Command Prompt ».\n\n7. Acceptez la valeur « Configuring the line ending conversions » par défaut.\n\n\n\n\n\n## Étape 3 : Installer Visual Studio ##\n\nVisual Studio 2012 ou plus est requis par npm pour installer les addons à compiler. *Notez bien que gcc, mingw, cygwin, et les autres compilateurs Windows non-Microsoft ne sont pas supporté par Node.js.*\n\nSi vous utilisez actuellement Windows 7, 8 ou même 10, vous pouvez à la place utiliser Visual Studio C++ 2013 pour Windows Desktop (Express). Visual Studio Express est gratuit et est plus adéquat pour un support de Node.js.\n\n1. [Téléchargez Visual Studio](https://www.microsoft.com/fr-fr/download/details.aspx?id=44914).\n\n2. Cliquez sur « Download » et sélectionnez « wdexpress_full.exe ».\n\n3. Lancez l'installeur et acceptez la localisation par défaut. C'est une grosse installation qui peut prendre longtemps !\n\n\n\n\n\n## Étape 4 : Installer Node.js ##\n\nSi vous aviez déjà installé Node.js avant de réaliser les étapes de cet article, vous pouvez toujours en profiter pour le mettre à jour avec la dernière version. Sinon téléchargez le pour la première fois.\n\n1. Allez sur [nodejs.org](https://nodejs.org/en/) et installez la version appropriée pour votre système d'exploitation. \n\n2. Installez Node.js en suivant les instructions de l'installeur. [Plus de détails par ici si vous le souhaitez](http://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/).\n\n\n\n\n\n## Vérifier que tout fonctionne correctement ##\n\nSi vous rencontrez des difficultés à installer des modules NPM, essayez les étapes suivantes pour identifier un problème de votre côté.\n\n1. Redémarrez Windows pour être sur que toutes les configurations est pris effet.\n\n2. Vérifiez que tous les pré-requis soient correctement installés et accessibles :\n\n - La commande `python --version` doit retourner `2.7.x`\n - La commande `node --version` doit retourner `v0.10.x` ou plus.\n - La commande `npm --version` doit retourner `1.x` ou plus.\n\n3. Assurez vous que `npm -g prefix` pointe au même endroit que `echo %NODE_PATH%`(avec `\\node_modules` en plus à la fin).\n\n4. Vérifiez qu'un simple module NPM peut-être installé :\n\n - Avec `npm install -g semver`\n - et `semver --help` qui doit afficher l'aide.\n\n5. Assurez vous que si vous avez plusieurs version de Python ou Visual Studio sur votre machine, les astuces dans la partie « Astuces » ci-après ne résolvent pas le problème.\n\n6. Assurez vous que les addons à compiler peuvent être installées :\n\n - Avec `npm install -g socket.io` qui doit compiler sans erreur.\n\nSi vous avez toujours des erreurs et que toutes les étapes précédentes sont valides, vous pouvez reporter le fichier `npm-debug.log` laissé par npm dans le tracker d'issue du/des développeur(s) du module npm que vous tentez d'installer pour obtenir de l'aide.\n\nN'hésitez pas à laisser plus d'étapes de vérifications dans les commentaires de cet article, je les mettrais à jour ici même.\n\n\n\n\n\n## Astuces ##\n\n- Si vous avez plusieurs versions de Python d'installées, vous pouvez sélectionner celle utilisée par npm pour compiler les addons :\n\n - `npm config set python C:/Python2.7/python`\n\n- Si vous avez plusieurs versions de Microsoft Visual Studio d'installées, vous pouvez sélectionner celle utilisée par npm pour compiler les addons :\n\n - Par défaut (et récursivement) `npm config set msvs_version 2013` (si votre version est 2013) ou\n - Ponctuellement `npm install [options] <module-name> --msvs_version=2013` lors de l'installation d'un module.", "dates" : { "published" : { "$date" : 1444147800000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "", "stylesheet" : "", "title" : "Installer n'importe quel module NPM Node.js sous Windows", "urn" : "installer-tous-les-modules-npm-node-js-sous-windows" }
{ "__v" : 0, "_id" : { "$oid" : "5620ee00d1b7fe136fc20058" }, "cache" : { "comment" : { "number" : 0 } }, "categories" : [ { "$oid" : "5310456355dfd5f7698d48cb" }, { "$oid" : "530ef6a6789c1a55e4fde0af" }, { "$oid" : "5310456355dfd5f7698d48b9" }, { "$oid" : "5310456355dfd5f7698d48bb" }, { "$oid" : "5310456355dfd5f7698d48cc" }, { "$oid" : "5310456355dfd5f7698d48ba" }, { "$oid" : "5310456355dfd5f7698d48b8" } ], "content" : "<div class=\"h1-like\" style=\"display: none;\"><span>Vanilla JS</span><img src=\"http://vanilla-js.com/assets/vanillin-chemstruct.png\" alt=\"Vanillin\"></div>\n\n<p class=\"lead\"><strong><span class=\"vanillajs\">Vanilla JS</span> est un framework rapide, léger et multi-plateforme pour créer d'incroyables et puissantes applications JavaScript</strong></p>\n\n\n\n\n\n## Introduction ##\n\n[L'équipe de <span class=\"vanillajs\">Vanilla JS</span>](https://twitter.com/HaeresisDotFr) maintient le moindre petit octet de code du framework et travaille dur chaque jour pour être sûr qu'il reste léger et intuitif. Qui utilise <span class=\"vanillajs\">Vanilla JS</span> ? Content que vous vous le demandiez ! En voici quelques uns :\n<ul class=\"used-by\">\n\t<li>Google</li>\n\t<li>Facebook</li>\n\t<li>YouTube</li>\n\t<li>Yahoo</li>\n\t<li>Wikipedia</li>\n\t<li>Windows Live</li>\n\t<li>Twitter</li>\n\t<li>Amazon</li>\n\t<li>LinkedIn</li>\n\t<li>MSN</li>\n\t<li>eBay</li>\n\t<li>Microsoft</li>\n\t<li>Tumblr</li>\n\t<li>Apple</li>\n\t<li>Pinterest</li>\n\t<li>PayPal</li>\n\t<li>Reddit</li>\n\t<li>Netflix</li>\n\t<li>Stack Overflow</li>\n</ul>\n\nEn fait, <span class=\"vanillajs\">Vanilla JS</span> est déjà utilisé sur plus de sites que jQuery, Prototype JS, MooTools, YUI, et Google Web Toolkit - <em>réunis</em>.\n\n\n\n\n\n## Télécharger ##\n\nPrêt à utiliser <span class=\"vanillajs\">Vanilla JS</span> ? Choisissez exactement ce dont vous avez besoin !\n<div class=\"customizer-options\">\n\t<label class=\"selected disabled\"><input type=\"checkbox\" name=\"core\" checked=\"checked\" disabled=\"disabled\"> Core Functionality</label>\n\t<label><input type=\"checkbox\">DOM (Parcours / Sélections)</label>\n\t<label><input type=\"checkbox\">Prototype-based Object System</label>\n\t<label><input type=\"checkbox\">AJAX</label>\n\t<label><input type=\"checkbox\">Animations</label>\n\t<label><input type=\"checkbox\">Event System</label>\n\t<label><input type=\"checkbox\">Regular Expressions</label>\n\t<label><input type=\"checkbox\">Functions as first-class objects</label>\n\t<label><input type=\"checkbox\">Closures</label>\n\t<label><input type=\"checkbox\">Math Library</label>\n\t<label><input type=\"checkbox\">Array Library</label>\n\t<label><input type=\"checkbox\">String Library</label>\n\t<label><input type=\"checkbox\">Date Library</label>\n\t<h3>Options</h3>\n\t<label><input type=\"checkbox\">Minifier le code source</label>\n\t<label><input type=\"checkbox\">Sortie en UTF8</label>\n\t<label><input type=\"checkbox\">Utiliser des retours \"CRLF\" (Windows)</label>\n</div>\n<div class=\"customizer-estimate\">\n\t<strong>Taille du fichier :</strong>\n\t<span class=\"customizer-estimate-uncompressed\"><span class=\"value\"><span class=\"no-readable\">0 octets</span><span class=\"readable\">0 Ko</span></span><span class=\"loading\"><span class=\"loader\"></span></span> </span> non minifié,\n\t<span class=\"customizer-estimate-gzipped\" class=\"\"><span class=\"value\"><span class=\"no-readable\">34 octets</span><span class=\"readable\">0.03 Ko</span></span><span class=\"loading\"><span class=\"loader\"></span></span></span> gzippé.\n\t(<a class=\"human-size\" href=\"javascript:;\"><span class=\"no-readable\">Taille lisible</span><span class=\"readable\">Taille réelle</span></a>)\n</div>\n\n<form class=\"download\" action=\"http://blog.haeresis.fr/upload/script/vanilla.js.gz\" method=\"post\">\n     <button>Télécharger</button> <a href=\"https://github.com/Haeresis/vanilla-js\">Source sur GitHub</a>\n</form>\n\n\n\n\n\n## Témoignages ##\n\n<div class=\"testimonials\">\n<blockquote class=\"testimonial\"><em>« Le support natif de HTML5 et les autres technologies modernes on fait de Vanilla JS mon préféré, petit à petit. »</em></blockquote>\n<blockquote class=\"testimonial is-displayed\"><em>« Vanilla JS est un concentré d'objet, il est taillé pour des applications JavaScript Orientées Objet. »</em></blockquote>\n<blockquote class=\"testimonial\"><em>« Vanilla JS est le framework JavaScript le plus simple et compréhensif que j'ai jamais utilisé. »</em></blockquote>\n<blockquote class=\"testimonial\"><em>« Vous ne trouverez pas plus rapide que Vanilla JS ! »</em></blockquote>\n</div>\n\n\n\n\n\n## Commencer avec Vanilla JS ##\n\n[L'équipe de <span class=\"vanillajs\">Vanilla JS</span>](https://twitter.com/HaeresisDotFr) est fière du fait que c'est **le framework le plus léger que vous puissiez trouver** ; en utilisant notre stratégie de déploiement, vos visiteurs auront déjà chargés en mémoire <span class=\"vanillajs\">Vanilla JS</span> avant que la moindre requête n'est été faite à votre site.\n\nPour utiliser <span class=\"vanillajs\">Vanilla JS</span>, mettez juste le code suivant n'importe où dans votre application HTML :\n\n```html\n<script src=\"chemin/vers/vanilla.js\"></script>\n```\n\nQuand vous êtes prêt à déployer votre application dans votre environnement de production, optez pour la plus rapide des méthodes, voyez plutôt :\n\n<pre class=\"prettyprint linenums\"><code class=\"lang-html\"> </code></pre>\n\n**C'est tout - pas de code**. <span class=\"vanillajs\">Vanilla JS</span> est *tellement populaire* que les navigateurs le chargent automatiquement !\n\n\n\n\n## Comparaison de vitesse d'exécution ##\n\nVoici quelques exemples démontrant ô combien <span class=\"vanillajs\">Vanilla JS</span> est vraiment rapide :\n\n### Retrouver un élément du DOM par ID ###\n\n<table>\n\t<tr>\n\t\t<th></th>\n\t\t<th>Code</th>\n\t\t<th>ops / sec</th>\n\t</tr>\n\t<tr>\n\t\t<td><span class=\"vanillajs\">Vanilla JS</span></td>\n\t\t<td>document.getElementById('test-table');</td>\n\t\t<td><span class=\"opssec\">12 137 211</span><span class=\"bar\" style=\"width:100%\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>Dojo</td>\n\t\t<td>dojo.byId('test-table');</td>\n\t\t<td><span class=\"opssec\">5 443 343</span><span class=\"bar\" style=\"width:44.85%\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>Prototype JS</td>\n\t\t<td>$('test-table');</td>\n\t\t<td><span class=\"opssec\">2 940 734</span><span class=\"bar\" style=\"width:24.23%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>Ext JS</td>\n\t\t<td>delete Ext.elCache['test-table']; Ext.get('test-table');</td>\n\t\t<td><span class=\"opssec\">997 562</span><span class=\"bar\" style=\"width:8.22%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>jQuery</td>\n\t\t<td>$('#test-table');</td>\n\t\t<td><span class=\"opssec\">350 557</span><span class=\"bar\" style=\"width:2.89%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>YUI</td>\n\t\t<td>YAHOO.util.Dom.get('test-table');</td>\n\t\t<td><span class=\"opssec\">326 534</span><span class=\"bar\" style=\"width:2.69%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>MooTools</td>\n\t\t<td>document.id('test-table');</td>\n\t\t<td><span class=\"opssec\">78 802</span><span class=\"bar\" style=\"width:0.65%;\"></span></td>\n\t</tr>\n</table>\n\n### Retrouver un élément du DOM par tag name ###\n\n<table>\n\t<tr>\n\t\t<th></th>\n\t\t<th>Code</th>\n\t\t<th>ops / sec</th>\n\t</tr>\n\t<tr>\n\t\t<td><span class=\"vanillajs\">Vanilla JS</span></td>\n\t\t<td>document.getElementsByTagName(\"span\");</td>\n\t\t<td><span class=\"opssec\">8 280 893</span><span class=\"bar\" style=\"width:100%\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>Prototype JS</td>\n\t\t<td>Prototype.Selector.select('span', document);</td>\n\t\t<td><span class=\"opssec\">62 872</span><span class=\"bar\" style=\"width:0.76%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>YUI</td>\n\t\t<td>YAHOO.util.Dom.getElementsBy(function(){return true;},'span');</td>\n\t\t<td><span class=\"opssec\">48 545</span><span class=\"bar\" style=\"width:0.59%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>Ext JS</td>\n\t\t<td>Ext.query('span');</td>\n\t\t<td><span class=\"opssec\">46 915</span><span class=\"bar\" style=\"width:0.57%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>jQuery</td>\n\t\t<td>$('span');</td>\n\t\t<td><span class=\"opssec\">19 449</span><span class=\"bar\" style=\"width:0.23%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>Dojo</td>\n\t\t<td>dojo.query('span');</td>\n\t\t<td><span class=\"opssec\">10 335</span><span class=\"bar\" style=\"width:0.12%;\"></span></td>\n\t</tr>\n\t<tr>\n\t\t<td>MooTools</td>\n\t\t<td>Slick.search(document, 'span', new Elements);</td>\n\t\t<td><span class=\"opssec\">5 457</span><span class=\"bar\" style=\"width:0.07%;\"></span></td>\n\t</tr>\n</table>\n\n\n\n\n\n## Passer de jQuery à Vanilla JS ##\n\nVous trouverez ici la liste non exhaustive de tâches courantes dans <span class=\"vanillajs\">Vanilla JS</span> en comparaison avec (par exemple) jQuery.\n\n*Effectivement, lors de la création d'API, il est souvent plus judicieux de développer sans dépendance à jQuery (par exemple) et de lui préférer seulement une dépendance à <span class=\"vanillajs\">Vanilla JS</span>.*\n\n### ÉLÉMENTS ###\n\n#### .class #id tagname ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Obtenir un élement avec un sélecteur...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-html\">$('.class #id tagname')[0];</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">document.querySelector('.my #awesome selector');</code></pre>\n\t</blockquote>\n</div>\n\n#### [.class #id tagname] ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Obtenir plusieurs élements avec un sélecteur...</p>\n<pre class=\"prettyprint linenums\"><code class=\"lang-html\">$('.my #awesome selector').each(function () {\n\tvar element = this;\n\telement;\n});</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n<pre class=\"prettyprint linenums\"><code class=\"lang-js\">var elements = document.querySelectorAll('.my #awesome selector');\n[].forEach.call(elements, function(element) {\n\telement;\n});</code></pre>\n\t</blockquote>\n</div>\n\n#### <span>#id</span> ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Obtenir un élement par son ID...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$('#id')[0];</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">document.querySelector('#id');</code></pre>\n\t</blockquote>\n</div>\n\n#### Add Class ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Ajouter une classe...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(element).addClass(className);</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">element.classList.add(className);</code></pre>\n\t</blockquote>\n</div>\n\n#### Remove Class ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Retirer une classe...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(element).removeClass(className);</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">element.classList.remove(className);</code></pre>\n\t</blockquote>\n</div>\n\n\n#### tagname ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Obtenir un élement par son Tag Name...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$('div')[0];</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">document.querySelector('div');</code></pre>\n\t</blockquote>\n</div>\n\n#### Toggle Class ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Retirer ou ajouter une classe...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(element).toggleClass(className);</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">element.classList.toggle(className);</code></pre>\n\t</blockquote>\n</div>\n\n### ÉVÈNEMENTS ###\n\n#### Off ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Se désabonner d'un évènement...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(element).off(eventName, eventHandler);</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">element.removeEventListener(eventName, eventHandler);</code></pre>\n\t</blockquote>\n</div>\n\n#### On ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>S'abonner à un évènement...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(element).on(eventName, eventHandler);</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">element.addEventListener(eventName, eventHandler);</code></pre>\n\t</blockquote>\n</div>\n\n#### Ready ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Attendre que le DOM soit chargé...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(document).ready(function () {\n});</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">document.addEventListener('DOMContentLoaded', function () {\n});</code></pre>\n\t</blockquote>\n</div>\n\n#### Trigger ####\n\n<div class=\"from-jquery-to-vanilla-js\">\n\t<blockquote class=\"jquery\">\n\t\t<p>Déclencher un évènement...</p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">$(element).trigger('change');</code></pre>\n\t</blockquote>\n\n\t<blockquote class=\"vanilla-js\">\n\t\t<p><strong><samp></samp></strong>...avec <span class=\"vanillajs\">Vanilla JS</span></p>\n\t\t<pre class=\"prettyprint linenums\"><code class=\"lang-js\">var event = document.createEvent('HTMLEvents');\nevent.initEvent('change', true, false);\nelement.dispatchEvent(event);</code></pre>\n\t</blockquote>\n</div>\n\n### PLUS ###\n\nJe vais maintenir cette liste au fur et à mesure que j'utiliserai moi-même <span class=\"vanillajs\">Vanilla JS</span>. Vous pouvez l'alimenter en postant dans les commentaires où trouver [plus d'exemple sur ce site](http://youmightnotneedjquery.com/).\n\n\n## Pour aller plus loin ##\n\nPour plus d'informations à propos de <span class=\"vanillajs\">Vanilla JS</span> :\n\n- Jettez un oeil à la [documentation](https://developer.mozilla.org/fr/docs/Web/JavaScript) <span class=\"vanillajs\">Vanilla JS</span>\n- Lisez divers [livres](http://www.amazon.fr/s?field-keywords=javascript) sur <span class=\"vanillajs\">Vanilla JS</span>\nou\n- Essayez l'un des nombreux [plugins](https://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks) <span class=\"vanillajs\">Vanilla JS</span>.\n\n_**Merci à [vanilla-js.com](http://vanilla-js.com/) dont cet article humoristique est en partie une adaptation.**_", "dates" : { "published" : { "$date" : 1444998600000 }, "updated" : [] }, "others" : { "markdown" : true, "published" : true }, "script" : "var labels = document.querySelectorAll('.customizer-options label:not(.disabled)'),\n    loader = document.querySelector('.customizer-estimate'),\n    humanSize = document.querySelector('.human-size'),\n    testimonials = document.querySelectorAll('.testimonial'),\n    i = 0;\n\nfunction incrementI() {\n  i++;\n  if (i === testimonials.length) {\n    i = 0;\n  }\n}\n\n[].forEach.call(labels, function(label) {\n  label.addEventListener('click', function(event) {\n    var checkbox = this.querySelector('input');\n    event.preventDefault();\n    checkbox.checked = (this.getAttribute('class') !== 'selected');\n    this.classList.toggle('selected');\n    loader.classList.add('is-loaded');\n    setTimeout(function () {\n        loader.classList.remove('is-loaded');\n    }, 500);\n  });\n});\n\nhumanSize.addEventListener('click', function(event) {\n    loader.classList.toggle('is-readable');\n});\n\n[].forEach.call(testimonials, function(testimonial) {\n  testimonial.addEventListener('click', function(event) {\n   testimonial.classList.remove('is-displayed');\n   if (testimonial.nextElementSibling && testimonial.nextElementSibling.tagName.toLowerCase() === 'blockquote') {\n       testimonial.nextElementSibling.classList.add('is-displayed');\n   } else {\n       testimonials[0].classList.add('is-displayed');\n   }\n    incrementI();\n  });\n});\nsetInterval(function loopOnTestimonials() {;\n  testimonials[i].click();\n}, 5000);", "stylesheet" : "@font-face {\n  font-family: 'cursive2';\n  src: url('./media/fonts/cursive2.eot?#iefix') format('embedded-opentype'),\n  \t   url('./media/fonts/cursive2.woff') format('woff'),\n  \t   url('./media/fonts/cursive2.ttf')  format('truetype'),\n  \t   url('http://blog.haeresis.fr/upload/fonts/cursive2.svg#cursive2') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n.article .h1-like {\n    display: block!important;\n    margin: 32px 0 0 0;\n    position: relative;\n    height: 200px;\n    line-height: 180px;\n    text-align: center;\n    font-size: 30pt;\n    text-shadow: 0 0 2px #333333, 0 0 4px #333333;\n    color: #F3E5AB;\n    font-weight: 100;\n    font-family: cursive2;\n}\n.article .h1-like span {\n    position: relative;\n    z-index: 1;\n}\n.article .h1-like img {\n    vertical-align: middle;\n    opacity: .1;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-left: -100px;\n    margin-top: -100px;\n}\n.vanillajs {\n    font-family: cursive2;\n    color: #9e946e;\n    font-size: 1.2em;\n    padding-right: .1em;\n}\n.article .lead {\n   color: #111;\n    font-weight: 400;\n    font-size: 1.6rem;\n    margin-left: 32px;\n    margin-right: 32px;\n    text-align: center;\n}\n.used-by {\n    margin: 0;\n    padding: 16px 16px 8px;\n    text-align: center;\n}\n.used-by li {\n    display: inline-block;\n    padding: 4px 8px;\n   font-weight: bold;\n}\n.customizer-options {\n    display: table;\n    text-align: middle;\n}\n.customizer-options label {\n    position: relative;\n    cursor: pointer;\n    display: inline-block;\n    border-radius: 5px;\n    padding: 1px;\n    margin: 0 1px 1px 1px;\n    width: calc(49% - 2px);\n    background-color: #e8e8e8;\n    vertical-align: middle;\n}\n.customizer-options label:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 25%;\n    height: 100%;\n    content: \"\";\n}\n.customizer-options label:hover {\n    background-color: #dddddd;\n}\n.customizer-options label.selected {\n    background-color: #F3E5AB;\n    color: #666666;\n}\n.customizer-options h3 {\n    margin-top: 8px;\n    margin-bottom: 4px;\n}\n@-webkit-keyframes loader {\n  from {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes loader {\n  from {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.customizer-estimate {\n    margin-top: 4px;\n    margin-bottom: 8px;\n}\n.customizer-estimate .loading {\n    display: none;\n    position: relative;\n    width: 20px;\n}\n.customizer-estimate .loader {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: 0;\n    text-align: center;\n    z-index: 1000;\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    -ms-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n    width: 2.2585em;\n    height: 2.2585em;\n    font-size: 1em;\n    color: rgba(255,255,255,.9);\n}\n.customizer-estimate .loader:before {\n    position: absolute;\n    content: '';\n    top: 3px;\n    left: 75%;\n    border-radius: 500rem;\n    border: .2em solid rgba(0,0,0,.1);\n    width: 1em;\n    height: 1em;\n    margin: 0 0 0 -1.12925em;  \n}\n.customizer-estimate .loader:after {\n    display: block;\n    position: absolute;\n    content: '';\n    top: 3px;\n    left: 75%;\n    -webkit-animation: loader .6s linear;\n    animation: loader .6s linear;\n    -webkit-animation-iteration-count: infinite;\n    animation-iteration-count: infinite;\n    border-radius: 500rem;\n    border-color: #767676 transparent transparent;\n    border-style: solid;\n    border-width: .2em;\n    box-shadow: 0 0 0 1px transparent;\n    width: 1em;\n    height: 1em;\n    margin: 0 0 0 -1.12925em;\n    border-color: #fff transparent transparent;\n}\n.customizer-estimate.is-loaded .value {\n   display: none;\n}\n.customizer-estimate.is-loaded .loading {\n    display: inline-block;\n}\n.customizer-estimate .readable {\n    display: none;\n}\n.customizer-estimate.is-readable .readable {\n    display: inline-block;\n}\n.customizer-estimate.is-readable .no-readable {\n    display: none;\n}\n.download { text-align: center; }\n.testimonials {\n    position: relative;\n}\n.testimonial {\n    position: absolute;\n    visibility: hidden;\n    top: 0;\n    width: 100%;\n    box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    left: 0;\n    text-align: center;\n}\n.testimonial:first-child {\n    position: relative;\n}\n.testimonial em {\n    color: #9e946e;\n}\n.testimonial.is-displayed {\n    visibility: visible;\n}\n.article table {\n  border-collapse: collapse;\n  width: 100%;\n}\n.article th,\n.article td {\n    border: solid 1px #ccc;\n    padding: 4px;\n}\n.article tr :last-child {\n    text-align: right;\n    position: relative;\n}\n.article tr .opssec {\n    position: relative;\n    z-index: 2;\n}\n.article tr .bar {\n    position: absolute;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #ddd;\n}\n.article th:empty {\n    visibility: hidden;\n}\n.from-jquery-to-vanilla-js {\n\tdisplay: table;\n        width: 100%;\n}\n.from-jquery-to-vanilla-js .vanilla-js,\n.from-jquery-to-vanilla-js .jquery {\n\t/*display: inline-block;\n\twidth: calc(50% - 4px);*/\n        box-sizing: border-box;\n        -webkit-box-sizing: border-box;\n        vertical-align: middle;\n}\n/*.from-jquery-to-vanilla-js .jquery {\n       margin-right: 2px;\n}\n.from-jquery-to-vanilla-js .jquery {\n       margin-left: 2px;\n}*/", "title" : "Vanilla JS en français", "urn" : "vanilla-js-france" }
